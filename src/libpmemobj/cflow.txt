pmemobj_alloc() <int pmemobj_alloc (PMEMobjpool *pop, PMEMoid *oidp, size_t size, uint64_t type_num, pmemobj_constr constructor, void *arg) at libpmemobj/obj.c:1753>:
    LOG()
    ERR()
    PMEMOBJ_API_START()
    obj_alloc_construct() <int obj_alloc_construct (PMEMobjpool *pop, PMEMoid *oidp, size_t size, type_num_t type_num, uint64_t flags, pmemobj_constr constructor, void *arg) at libpmemobj/obj.c:1716>:
        ERR()
        pmalloc_operation_hold() <struct operation_context *pmalloc_operation_hold (PMEMobjpool *pop) at libpmemobj/pmalloc.c:74>:
            pmalloc_operation_hold_type() <struct operation_context *pmalloc_operation_hold_type (PMEMobjpool *pop, enum pmalloc_operation_type type, int start) at libpmemobj/pmalloc.c:45>:
                lane_hold() <unsigned lane_hold (PMEMobjpool *pop, struct lane **lanep) at libpmemobj/lane.c:510>:
                    get_lane_info_record() <inline struct lane_info *get_lane_info_record (PMEMobjpool *pop) at libpmemobj/lane.c:466>:
                        likely()
                        unlikely()
                        lane_info_ht_boot() <inline void lane_info_ht_boot (void) at libpmemobj/lane.c:74>:
                            lane_info_create() <inline void lane_info_create (void) at libpmemobj/lane.c:39>:
                                critnib_new() <struct critnib *critnib_new (void) at libpmemobj/critnib.c:187>:
                                    Zalloc() <void *Zalloc (size_t sz) at core/alloc.c:98>:
                                        Malloc()
                                        memset()
                                    util_mutex_init()
                                    VALGRIND_HG_DRD_DISABLE_CHECKING()
                                FATAL()
                            os_tls_set() <int os_tls_set (os_tls_key_t key, const void *value) at core/os_thread_posix.c:53>:
                                pthread_setspecific()
                            FATAL()
                        critnib_get() <void *critnib_get (struct critnib *c, uint64_t key) at libpmemobj/critnib.c:515>:
                            load() <void load (void *src, void *dst) at libpmemobj/critnib.c:130>:
                                util_atomic_load_explicit64()
                            is_leaf() <inline bool is_leaf (struct critnib_node *n) at libpmemobj/critnib.c:150>:
                            slice_index() <inline unsigned slice_index (uint64_t key, sh_t shift) at libpmemobj/critnib.c:178>:
                            to_leaf() <inline struct critnib_leaf *to_leaf (struct critnib_node *n) at libpmemobj/critnib.c:159>:
                        Malloc()
                        FATAL()
                        critnib_insert() <int critnib_insert (struct critnib *c, uint64_t key, void *value) at libpmemobj/critnib.c:340>:
                            util_mutex_lock()
                            alloc_leaf() <struct critnib_leaf *alloc_leaf (struct critnib *__restrict c) at libpmemobj/critnib.c:311>:
                                Malloc()
                                ERR()
                                VALGRIND_ANNOTATE_NEW_MEMORY()
                            util_mutex_unlock()
                            VALGRIND_HG_DRD_DISABLE_CHECKING()
                            is_leaf() <inline bool is_leaf (struct critnib_node *n) at libpmemobj/critnib.c:150>:
                            path_mask() <inline uint64_t path_mask (sh_t shift) at libpmemobj/critnib.c:169>:
                            slice_index() <inline unsigned slice_index (uint64_t key, sh_t shift) at libpmemobj/critnib.c:178>:
                            store() <void store (void *dst, void *src) at libpmemobj/critnib.c:140>:
                                util_atomic_store_explicit64()
                            to_leaf() <inline struct critnib_leaf *to_leaf (struct critnib_node *n) at libpmemobj/critnib.c:159>:
                            ASSERT()
                            free_leaf() <void free_leaf (struct critnib *__restrict c, struct critnib_leaf *__restrict k) at libpmemobj/critnib.c:298>
                            util_mssb_index64()
                            alloc_node() <struct critnib_node *alloc_node (struct critnib *__restrict c) at libpmemobj/critnib.c:274>:
                                Malloc()
                                ERR()
                                VALGRIND_ANNOTATE_NEW_MEMORY()
                    unlikely()
                    util_fetch_and_add32()
                    get_lane() <inline void get_lane (uint64_t *locks, struct lane_info *info, uint64_t nlocks) at libpmemobj/lane.c:430>:
                        likely()
                        util_bool_compare_and_swap64()
                        sched_yield()
                    VALGRIND_ANNOTATE_NEW_MEMORY()
                    operation_init() <void operation_init (struct operation_context *ctx) at libpmemobj/memops.c:709>:
                        VALGRIND_ANNOTATE_NEW_MEMORY()
                        VECQ_REINIT()
                operation_start() <void operation_start (struct operation_context *ctx) at libpmemobj/memops.c:736>:
                    operation_init() <void operation_init (struct operation_context *ctx) at libpmemobj/memops.c:709>:
                        VALGRIND_ANNOTATE_NEW_MEMORY()
                        VECQ_REINIT()
                    ASSERTeq()
        operation_add_entry() <int operation_add_entry (struct operation_context *ctx, void *ptr, uint64_t value, ulog_operation_type type) at libpmemobj/memops.c:411>:
            OBJ_OFF_IS_VALID()
            operation_add_typed_entry() <int operation_add_typed_entry (struct operation_context *ctx, void *ptr, uint64_t value, ulog_operation_type type, enum operation_log_type log_type) at libpmemobj/memops.c:362>:
                Realloc()
                SIZEOF_ULOG()
                VECQ_CLEAR()
                operation_try_merge_entry() <int operation_try_merge_entry (struct operation_context *ctx, void *ptr, uint64_t value, ulog_operation_type type) at libpmemobj/memops.c:318>:
                    OBJ_PTR_TO_OFF()
                    VECQ_FOREACH_REVERSE()
                    ulog_entry_offset() <uint64_t ulog_entry_offset (const struct ulog_entry_base *entry) at libpmemobj/ulog.c:68>:
                    ulog_entry_type() <ulog_operation_type ulog_entry_type (const struct ulog_entry_base *entry) at libpmemobj/ulog.c:59>:
                        ULOG_OPERATION_FROM_OFFSET()
                    operation_merge() <inline void operation_merge (struct ulog_entry_base *entry, uint64_t value, ulog_operation_type type) at libpmemobj/memops.c:288>:
                        ASSERT()
                ulog_entry_val_create() <struct ulog_entry_val *ulog_entry_val_create (struct ulog *ulog, size_t offset, uint64_t *dest, uint64_t value, ulog_operation_type type, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:372>:
                    COMPILE_ERROR_ON()
                    ULOG_OPERATION()
                    pmemops_memcpy()
                operation_merge_entry_add() <void operation_merge_entry_add (struct operation_context *ctx, struct ulog_entry_val *entry) at libpmemobj/memops.c:344>:
                    VECQ_SIZE()
                    VECQ_DEQUEUE()
                    VECQ_ENQUEUE()
                    LOG()
                ulog_entry_size() <size_t ulog_entry_size (const struct ulog_entry_base *entry) at libpmemobj/ulog.c:77>:
                    ulog_entry_type() <ulog_operation_type ulog_entry_type (const struct ulog_entry_base *entry) at libpmemobj/ulog.c:59>:
                        ULOG_OPERATION_FROM_OFFSET()
                    CACHELINE_ALIGN()
                    ASSERT()
        palloc_operation() <int palloc_operation (struct palloc_heap *heap, uint64_t off, uint64_t *dest_off, size_t size, palloc_constr constructor, void *arg, uint64_t extra_field, uint16_t object_flags, uint16_t class_id, uint16_t arena_id, struct operation_context *ctx) at libpmemobj/palloc.c:705>:
            palloc_defer_free_create() <void palloc_defer_free_create (struct palloc_heap *heap, uint64_t off, struct pobj_action_internal *out) at libpmemobj/palloc.c:610>:
                COMPILE_ERROR_ON()
                memblock_from_offset() <struct memory_block memblock_from_offset (struct palloc_heap *heap, uint64_t off) at libpmemobj/memblock.c:1532>:
                    memblock_from_offset_opt() <struct memory_block memblock_from_offset_opt (struct palloc_heap *heap, uint64_t off, int size) at libpmemobj/memblock.c:1476>:
                        HEAP_PTR_TO_OFF()
                        heap_get_chunk_hdr()
                        memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                            heap_get_chunk_hdr()
                        ASSERTeq()
                        memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                            heap_get_chunk_hdr()
                            FATAL()
                        run_get_data_offset() <size_t run_get_data_offset (const struct memory_block *m) at libpmemobj/memblock.c:572>:
                            heap_get_chunk_run()
                            run_get_data_start() <char *run_get_data_start (const struct memory_block *m) at libpmemobj/memblock.c:544>:
                                heap_get_chunk_hdr()
                                heap_get_chunk_run()
                                run_get_bitmap() <void run_get_bitmap (const struct memory_block *m, struct run_bitmap *b) at libpmemobj/memblock.c:488>:
                                    heap_get_chunk_run()
                                    heap_get_chunk_hdr()
                                    memblock_run_bitmap() <void memblock_run_bitmap (uint32_t *size_idx, uint16_t flags, uint64_t unit_size, uint64_t alignment, void *content, struct run_bitmap *b) at libpmemobj/memblock.c:410>:
                                        ASSERTne()
                                        RUN_CONTENT_SIZE_BYTES()
                                        util_div_ceil()
                                        ALIGN_UP()
                                        memblock_run_default_nallocs() <unsigned memblock_run_default_nallocs (uint32_t *size_idx, uint16_t flags, uint64_t unit_size, uint64_t alignment) at libpmemobj/memblock.c:370>:
                                            SUPPRESS_UNUSED()
                                            RUN_DEFAULT_SIZE_BYTES()
                                            LOG()
                                    ASSERTeq()
                                ALIGN_UP()
                        heap_alloc_classes() <struct alloc_class_collection *heap_alloc_classes (struct palloc_heap *heap) at libpmemobj/heap.c:160>:
                        alloc_class_by_run() <struct alloc_class *alloc_class_by_run (struct alloc_class_collection *ac, size_t unit_size, uint16_t flags, uint32_t size_idx) at libpmemobj/alloc_class.c:594>:
                            SIZE_TO_CLASS_MAP_INDEX()
                            ASSERT()
                            critnib_get() <void *critnib_get (struct critnib *c, uint64_t key) at libpmemobj/critnib.c:515>:
                                load() <void load (void *src, void *dst) at libpmemobj/critnib.c:130>:
                                    util_atomic_load_explicit64()
                                is_leaf() <inline bool is_leaf (struct critnib_node *n) at libpmemobj/critnib.c:150>:
                                slice_index() <inline unsigned slice_index (uint64_t key, sh_t shift) at libpmemobj/critnib.c:178>:
                                to_leaf() <inline struct critnib_leaf *to_leaf (struct critnib_node *n) at libpmemobj/critnib.c:159>:
                            RUN_CLASS_KEY_PACK()
                        CALC_SIZE_IDX()
                heap_ensure_zone_reclaimed() <void heap_ensure_zone_reclaimed (struct palloc_heap *heap, uint32_t zone_id) at libpmemobj/heap.c:816>:
                    util_atomic_load_explicit32()
                    heap_bucket_acquire() <struct bucket *heap_bucket_acquire (struct palloc_heap *heap, uint8_t class_id, uint16_t arena_id) at libpmemobj/heap.c:470>:
                        out() <void out (const char *fmt, ...) at core/out.c:480>:
                            va_start()
                            out_common() <} void out_common (const char *file, int line, const char *func, int level, const char *suffix, const char *fmt, va_list ap) at core/out.c:334>
                            va_end()
                        heap_thread_arena() <struct arena *heap_thread_arena (struct palloc_heap *heap) at libpmemobj/heap.c:414>:
                            os_tls_get() <void *os_tls_get (os_tls_key_t key) at core/os_thread_posix.c:62>:
                                pthread_getspecific()
                            heap_thread_arena_assign() <struct arena *heap_thread_arena_assign (struct palloc_heap *heap) at libpmemobj/heap.c:381>:
                                util_mutex_lock()
                                ASSERTne()
                                VEC_SIZE()
                                VEC_FOREACH()
                                LOG()
                                heap_arena_thread_attach() <void heap_arena_thread_attach (struct palloc_heap *heap, struct arena *a) at libpmemobj/heap.c:249>:
                                    ASSERTeq()
                                    os_tls_get() <void *os_tls_get (os_tls_key_t key) at core/os_thread_posix.c:62>:
                                        pthread_getspecific()
                                    heap_arena_thread_detach() <void heap_arena_thread_detach (struct arena *a) at libpmemobj/heap.c:232>:
                                        util_fetch_and_sub64()
                                    ASSERTne()
                                    util_fetch_and_add64()
                                    os_tls_set() <int os_tls_set (os_tls_key_t key, const void *value) at core/os_thread_posix.c:53>:
                                        pthread_setspecific()
                                util_mutex_unlock()
                            heap_global_arena_assign() <struct arena *heap_global_arena_assign (struct palloc_heap *heap) at libpmemobj/heap.c:348>:
                                util_mutex_lock()
                                ASSERTne()
                                VEC_SIZE()
                                VEC_FOREACH()
                                LOG()
                                util_mutex_unlock()
                            ASSERT()
                            ASSERTne()
                        ASSERTne()
                        VEC_ARR()
                        bucket_acquire() <struct bucket *bucket_acquire (struct bucket_locked *b) at libpmemobj/bucket.c:117>:
                            util_mutex_lock()
                    ZID_TO_ZONE()
                    ASSERTeq()
                    out() <void out (const char *fmt, ...) at core/out.c:480>:
                        va_start()
                        out_common() <} void out_common (const char *file, int line, const char *func, int level, const char *suffix, const char *fmt, va_list ap) at core/out.c:334>
                        va_end()
                    util_atomic_store_explicit32()
                    heap_reclaim_zone_garbage() <void heap_reclaim_zone_garbage (struct palloc_heap *heap, struct bucket *bucket, uint32_t zone_id) at libpmemobj/heap.c:775>:
                        ZID_TO_ZONE()
                        ASSERT()
                        memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                            memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                heap_get_chunk_hdr()
                            memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                heap_get_chunk_hdr()
                                FATAL()
                        heap_reclaim_run() <int heap_reclaim_run (struct palloc_heap *heap, struct memory_block *m, int startup) at libpmemobj/heap.c:733>:
                            heap_get_chunk_run()
                            heap_get_chunk_hdr()
                            alloc_class_by_run() <struct alloc_class *alloc_class_by_run (struct alloc_class_collection *ac, size_t unit_size, uint16_t flags, uint32_t size_idx) at libpmemobj/alloc_class.c:594>:
                                SIZE_TO_CLASS_MAP_INDEX()
                                ASSERT()
                                critnib_get() <void *critnib_get (struct critnib *c, uint64_t key) at libpmemobj/critnib.c:515>:
                                    load() <void load (void *src, void *dst) at libpmemobj/critnib.c:130>:
                                        util_atomic_load_explicit64()
                                    is_leaf() <inline bool is_leaf (struct critnib_node *n) at libpmemobj/critnib.c:150>:
                                    slice_index() <inline unsigned slice_index (uint64_t key, sh_t shift) at libpmemobj/critnib.c:178>:
                                    to_leaf() <inline struct critnib_leaf *to_leaf (struct critnib_node *n) at libpmemobj/critnib.c:159>:
                                RUN_CLASS_KEY_PACK()
                            recycler_element_new() <struct recycler_element recycler_element_new (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/recycler.c:122>:
                                SUPPRESS_UNUSED()
                                util_mutex_lock()
                                util_mutex_unlock()
                            ASSERTeq()
                            STATS_INC()
                            heap_get_recycler() <struct recycler *heap_get_recycler (struct palloc_heap *heap, size_t id, size_t nallocs) at libpmemobj/heap.c:106> (R):
                                util_atomic_load_explicit64()
                                recycler_new() <struct recycler *recycler_new (struct palloc_heap *heap, size_t nallocs, size_t *peak_arenas) at libpmemobj/recycler.c:74>:
                                    Malloc()
                                    ravl_new_sized() <struct ravl *ravl_new_sized (ravl_compare *compare, size_t data_size) at core/ravl.c:45>:
                                        Malloc()
                                        ERR()
                                    recycler_element_cmp() <int recycler_element_cmp (const void *lhs, const void *rhs) at libpmemobj/recycler.c:23>:
                                    memset()
                                    VEC_INIT()
                                    util_mutex_init()
                                    Free() <Free_func Free at core/alloc.c:91>
                                util_bool_compare_and_swap64()
                                recycler_delete() <void recycler_delete (struct recycler *r) at libpmemobj/recycler.c:107>:
                                    VEC_DELETE()
                                    util_mutex_destroy()
                                    ravl_delete() <void ravl_delete (struct ravl *ravl) at core/ravl.c:112>:
                                        ravl_delete_cb() <void ravl_delete_cb (struct ravl *ravl, ravl_cb cb, void *arg) at core/ravl.c:102>:
                                            ravl_foreach_node() <void ravl_foreach_node (struct ravl_node *n, ravl_cb cb, void *arg, int free_node) at core/ravl.c:74> (R):
                                                ravl_foreach_node() <void ravl_foreach_node (struct ravl_node *n, ravl_cb cb, void *arg, int free_node) at core/ravl.c:74> (recursive: see 234)
                                                Free() <Free_func Free at core/alloc.c:91>
                                            Free() <Free_func Free at core/alloc.c:91>
                                    Free() <Free_func Free at core/alloc.c:91>
                                heap_get_recycler() <struct recycler *heap_get_recycler (struct palloc_heap *heap, size_t id, size_t nallocs) at libpmemobj/heap.c:106> (recursive: see 216)
                            recycler_put() <int recycler_put (struct recycler *r, struct recycler_element element) at libpmemobj/recycler.c:154>:
                                util_mutex_lock()
                                ravl_emplace_copy() <int ravl_emplace_copy (struct ravl *ravl, const void *data) at core/ravl.c:384>:
                                    ravl_emplace() <int ravl_emplace (struct ravl *ravl, ravl_constr constr, const void *arg) at core/ravl.c:393>:
                                        LOG()
                                        ravl_new_node() <struct ravl_node *ravl_new_node (struct ravl *ravl, ravl_constr constr, const void *arg) at core/ravl.c:161>:
                                            Malloc()
                                            ERR()
                                            ravl_node_insert_constructor() <void ravl_node_insert_constructor (void *data, size_t data_size, const void *arg) at core/ravl.c:139>:
                                                SUPPRESS_UNUSED()
                                                memcpy()
                                        ravl_data() <void *ravl_data (struct ravl_node *node) at core/ravl.c:571>:
                                            memcpy()
                                        ravl_balance() <void ravl_balance (struct ravl *ravl, struct ravl_node *n) at core/ravl.c:337>:
                                            ravl_node_is() <int ravl_node_is (struct ravl_node *n, int i, int j) at core/ravl.c:306>:
                                                ravl_node_is_i_j() <int ravl_node_is_i_j (struct ravl_node *n, int i, int j) at core/ravl.c:296>:
                                                    ravl_node_rank_difference_parent() <int ravl_node_rank_difference_parent (struct ravl_node *p, struct ravl_node *n) at core/ravl.c:275>:
                                                        ravl_node_rank() <int ravl_node_rank (struct ravl_node *n) at core/ravl.c:261>:
                                            ravl_node_promote() <void ravl_node_promote (struct ravl_node *n) at core/ravl.c:315>
                                            ravl_node_sibling() <struct ravl_node *ravl_node_sibling (struct ravl_node *n) at core/ravl.c:209>:
                                                ravl_node_slot_type() <enum ravl_slot_type ravl_node_slot_type (struct ravl_node *n) at core/ravl.c:196>:
                                            ravl_node_rank_difference() <int ravl_node_rank_difference (struct ravl_node *n) at core/ravl.c:287>:
                                                ravl_node_rank_difference_parent() <int ravl_node_rank_difference_parent (struct ravl_node *p, struct ravl_node *n) at core/ravl.c:275>:
                                                    ravl_node_rank() <int ravl_node_rank (struct ravl_node *n) at core/ravl.c:261>:
                                            ravl_node_rank_difference_parent() <int ravl_node_rank_difference_parent (struct ravl_node *p, struct ravl_node *n) at core/ravl.c:275>:
                                                ravl_node_rank() <int ravl_node_rank (struct ravl_node *n) at core/ravl.c:261>:
                                            ravl_slot_opposite() <enum ravl_slot_type ravl_slot_opposite (enum ravl_slot_type t) at core/ravl.c:184>:
                                                ASSERTne()
                                            ravl_node_slot_type() <enum ravl_slot_type ravl_node_slot_type (struct ravl_node *n) at core/ravl.c:196>:
                                            ravl_rotate() <void ravl_rotate (struct ravl *ravl, struct ravl_node *n) at core/ravl.c:237>:
                                                ASSERTne()
                                                ravl_node_ref() <struct ravl_node **ravl_node_ref (struct ravl *ravl, struct ravl_node *n) at core/ravl.c:223>:
                                                    ravl_node_slot_type() <enum ravl_slot_type ravl_node_slot_type (struct ravl_node *n) at core/ravl.c:196>:
                                                ravl_node_slot_type() <enum ravl_slot_type ravl_node_slot_type (struct ravl_node *n) at core/ravl.c:196>:
                                                ravl_slot_opposite() <enum ravl_slot_type ravl_slot_opposite (enum ravl_slot_type t) at core/ravl.c:184>:
                                                    ASSERTne()
                                            ravl_node_demote() <void ravl_node_demote (struct ravl_node *n) at core/ravl.c:324>:
                                                ASSERT()
                                        Free() <Free_func Free at core/alloc.c:91>
                                    ravl_node_copy_constructor() <void ravl_node_copy_constructor (void *data, size_t data_size, const void *arg) at core/ravl.c:152>:
                                        memcpy()
                                util_mutex_unlock()
                            ERR()
                        heap_run_into_free_chunk() <void heap_run_into_free_chunk (struct palloc_heap *heap, struct bucket *bucket, struct memory_block *m) at libpmemobj/heap.c:697>:
                            heap_get_chunk_hdr()
                            STATS_SUB()
                            util_mutex_lock()
                            memblock_huge_init() <struct memory_block memblock_huge_init (struct palloc_heap *heap, uint32_t chunk_id, uint32_t zone_id, uint32_t size_idx) at libpmemobj/memblock.c:1329>:
                                heap_get_chunk_hdr()
                                VALGRIND_DO_MAKE_MEM_UNDEFINED()
                                VALGRIND_ANNOTATE_NEW_MEMORY()
                                chunk_get_chunk_hdr_value() <uint64_t chunk_get_chunk_hdr_value (uint16_t type, uint16_t flags, uint32_t size_idx) at libpmemobj/memblock.c:604>:
                                    COMPILE_ERROR_ON()
                                    memcpy()
                                util_atomic_store_explicit64()
                                pmemops_persist()
                                huge_write_footer() <void huge_write_footer (struct chunk_header *hdr, uint32_t size_idx) at libpmemobj/memblock.c:1166>:
                                    VALGRIND_DO_MAKE_MEM_UNDEFINED()
                                    VALGRIND_SET_CLEAN()
                                memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                    memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                        heap_get_chunk_hdr()
                                    memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                        heap_get_chunk_hdr()
                                        FATAL()
                            heap_free_chunk_reuse() <int heap_free_chunk_reuse (struct palloc_heap *heap, struct bucket *bucket, struct memory_block *m) at libpmemobj/heap.c:674>:
                                heap_coalesce_huge() <struct memory_block heap_coalesce_huge (struct palloc_heap *heap, struct bucket *b, const struct memory_block *m) at libpmemobj/heap.c:650>:
                                    heap_get_adjacent_free_block() <int heap_get_adjacent_free_block (struct palloc_heap *heap, const struct memory_block *in, struct memory_block *out, int prev) at libpmemobj/heap.c:582>:
                                        ZID_TO_ZONE()
                                        memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                            memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                                heap_get_chunk_hdr()
                                            memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                                heap_get_chunk_hdr()
                                                FATAL()
                                    bucket_remove_block() <int bucket_remove_block (struct bucket *b, const struct memory_block *m) at libpmemobj/bucket.c:178>
                                    heap_coalesce() <struct memory_block heap_coalesce (struct palloc_heap *heap, const struct memory_block *blocks[], int n) at libpmemobj/heap.c:621>:
                                        ASSERTne()
                                        memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                            memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                                heap_get_chunk_hdr()
                                            memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                                heap_get_chunk_hdr()
                                                FATAL()
                                bucket_insert_block() <int bucket_insert_block (struct bucket *b, const struct memory_block *m) at libpmemobj/bucket.c:161>:
                                    VALGRIND_DO_MAKE_MEM_NOACCESS()
                                    VALGRIND_ANNOTATE_NEW_MEMORY()
                            util_mutex_unlock()
                        heap_free_chunk_reuse() <int heap_free_chunk_reuse (struct palloc_heap *heap, struct bucket *bucket, struct memory_block *m) at libpmemobj/heap.c:674>:
                            heap_coalesce_huge() <struct memory_block heap_coalesce_huge (struct palloc_heap *heap, struct bucket *b, const struct memory_block *m) at libpmemobj/heap.c:650>:
                                heap_get_adjacent_free_block() <int heap_get_adjacent_free_block (struct palloc_heap *heap, const struct memory_block *in, struct memory_block *out, int prev) at libpmemobj/heap.c:582>:
                                    ZID_TO_ZONE()
                                    memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                        memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                            heap_get_chunk_hdr()
                                        memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                            heap_get_chunk_hdr()
                                            FATAL()
                                bucket_remove_block() <int bucket_remove_block (struct bucket *b, const struct memory_block *m) at libpmemobj/bucket.c:178>
                                heap_coalesce() <struct memory_block heap_coalesce (struct palloc_heap *heap, const struct memory_block *blocks[], int n) at libpmemobj/heap.c:621>:
                                    ASSERTne()
                                    memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                        memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                            heap_get_chunk_hdr()
                                        memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                            heap_get_chunk_hdr()
                                            FATAL()
                            bucket_insert_block() <int bucket_insert_block (struct bucket *b, const struct memory_block *m) at libpmemobj/bucket.c:161>:
                                VALGRIND_DO_MAKE_MEM_NOACCESS()
                                VALGRIND_ANNOTATE_NEW_MEMORY()
                    heap_bucket_release() <void heap_bucket_release (struct bucket *b) at libpmemobj/heap.c:498>:
                        bucket_release() <void bucket_release (struct bucket *b) at libpmemobj/bucket.c:127>:
                            util_mutex_unlock()
            operation_cancel() <void operation_cancel (struct operation_context *ctx) at libpmemobj/memops.c:761>:
                ASSERTeq()
            palloc_reservation_create() <int palloc_reservation_create (struct palloc_heap *heap, size_t size, palloc_constr constructor, void *arg, uint64_t extra_field, uint16_t object_flags, uint16_t class_id, uint16_t arena_id, struct pobj_action_internal *out) at libpmemobj/palloc.c:178>:
                ASSERT()
                heap_get_best_class() <struct alloc_class *heap_get_best_class (struct palloc_heap *heap, size_t size) at libpmemobj/heap.c:221>:
                    alloc_class_by_alloc_size() <struct alloc_class *alloc_class_by_alloc_size (struct alloc_class_collection *ac, size_t size) at libpmemobj/alloc_class.c:568>:
                        SIZE_TO_CLASS_MAP_INDEX()
                        alloc_class_assign_by_size() <struct alloc_class *alloc_class_assign_by_size (struct alloc_class_collection *ac, size_t size) at libpmemobj/alloc_class.c:538>:
                            LOG()
                            SIZE_TO_CLASS_MAP_INDEX()
                            alloc_class_find_min_frag() <struct alloc_class *alloc_class_find_min_frag (struct alloc_class_collection *ac, size_t n) at libpmemobj/alloc_class.c:340>:
                                LOG()
                                ASSERTne()
                            ASSERTne()
                            util_bool_compare_and_swap64()
                alloc_class_by_id() <struct alloc_class *alloc_class_by_id (struct alloc_class_collection *ac, uint8_t id) at libpmemobj/alloc_class.c:612>
                heap_alloc_classes() <struct alloc_class_collection *heap_alloc_classes (struct palloc_heap *heap) at libpmemobj/heap.c:160>:
                ERR()
                alloc_class_calc_size_idx() <ssize_t alloc_class_calc_size_idx (struct alloc_class *c, size_t size) at libpmemobj/alloc_class.c:621>:
                    CALC_SIZE_IDX()
                heap_bucket_acquire() <struct bucket *heap_bucket_acquire (struct palloc_heap *heap, uint8_t class_id, uint16_t arena_id) at libpmemobj/heap.c:470>:
                    out() <void out (const char *fmt, ...) at core/out.c:480>:
                        va_start()
                        out_common() <} void out_common (const char *file, int line, const char *func, int level, const char *suffix, const char *fmt, va_list ap) at core/out.c:334>
                        va_end()
                    heap_thread_arena() <struct arena *heap_thread_arena (struct palloc_heap *heap) at libpmemobj/heap.c:414>:
                        os_tls_get() <void *os_tls_get (os_tls_key_t key) at core/os_thread_posix.c:62>:
                            pthread_getspecific()
                        heap_thread_arena_assign() <struct arena *heap_thread_arena_assign (struct palloc_heap *heap) at libpmemobj/heap.c:381>:
                            util_mutex_lock()
                            ASSERTne()
                            VEC_SIZE()
                            VEC_FOREACH()
                            LOG()
                            heap_arena_thread_attach() <void heap_arena_thread_attach (struct palloc_heap *heap, struct arena *a) at libpmemobj/heap.c:249>:
                                ASSERTeq()
                                os_tls_get() <void *os_tls_get (os_tls_key_t key) at core/os_thread_posix.c:62>:
                                    pthread_getspecific()
                                heap_arena_thread_detach() <void heap_arena_thread_detach (struct arena *a) at libpmemobj/heap.c:232>:
                                    util_fetch_and_sub64()
                                ASSERTne()
                                util_fetch_and_add64()
                                os_tls_set() <int os_tls_set (os_tls_key_t key, const void *value) at core/os_thread_posix.c:53>:
                                    pthread_setspecific()
                            util_mutex_unlock()
                        heap_global_arena_assign() <struct arena *heap_global_arena_assign (struct palloc_heap *heap) at libpmemobj/heap.c:348>:
                            util_mutex_lock()
                            ASSERTne()
                            VEC_SIZE()
                            VEC_FOREACH()
                            LOG()
                            util_mutex_unlock()
                        ASSERT()
                        ASSERTne()
                    ASSERTne()
                    VEC_ARR()
                    bucket_acquire() <struct bucket *bucket_acquire (struct bucket_locked *b) at libpmemobj/bucket.c:117>:
                        util_mutex_lock()
                heap_get_bestfit_block() <int heap_get_bestfit_block (struct palloc_heap *heap, struct bucket *b, struct memory_block *m) at libpmemobj/heap.c:1210> (R):
                    bucket_alloc_class() <struct alloc_class *bucket_alloc_class (struct bucket *b) at libpmemobj/bucket.c:152>
                    bucket_alloc_block() <int bucket_alloc_block (struct bucket *b, struct memory_block *m_out) at libpmemobj/bucket.c:187>
                    heap_ensure_huge_bucket_filled() <int heap_ensure_huge_bucket_filled (struct palloc_heap *heap, struct bucket *bucket) at libpmemobj/heap.c:943>:
                        heap_reclaim_garbage() <int heap_reclaim_garbage (struct palloc_heap *heap, struct bucket *bucket) at libpmemobj/heap.c:923>:
                            heap_recycle_unused() <int heap_recycle_unused (struct palloc_heap *heap, struct recycler *recycler, struct bucket *defb, int force) at libpmemobj/heap.c:894>:
                                recycler_recalc() <struct empty_runs recycler_recalc (struct recycler *r, int force) at libpmemobj/recycler.c:207>:
                                    VEC_INIT()
                                    util_atomic_load64()
                                    util_mutex_trylock()
                                    ravl_find() <struct ravl_node *ravl_find (struct ravl *ravl, const void *data, enum ravl_predicate flags) at core/ravl.c:524>:
                                        LOG()
                                        ravl_data() <void *ravl_data (struct ravl_node *node) at core/ravl.c:571>:
                                            memcpy()
                                        ravl_predicate_holds() <int ravl_predicate_holds (int result, struct ravl_node **ret, struct ravl_node *n, enum ravl_predicate flags) at core/ravl.c:489>:
                                            ravl_node_successor() <struct ravl_node *ravl_node_successor (struct ravl_node *n) at core/ravl.c:465>:
                                                ravl_node_cessor() <struct ravl_node *ravl_node_cessor (struct ravl_node *n, enum ravl_slot_type t) at core/ravl.c:443>:
                                                    ravl_node_type_most() <struct ravl_node *ravl_node_type_most (struct ravl_node *n, enum ravl_slot_type t) at core/ravl.c:430>:
                                                    ravl_slot_opposite() <enum ravl_slot_type ravl_slot_opposite (enum ravl_slot_type t) at core/ravl.c:184>:
                                                        ASSERTne()
                                            ravl_node_predecessor() <struct ravl_node *ravl_node_predecessor (struct ravl_node *n) at core/ravl.c:476>:
                                                ravl_node_cessor() <struct ravl_node *ravl_node_cessor (struct ravl_node *n, enum ravl_slot_type t) at core/ravl.c:443>:
                                                    ravl_node_type_most() <struct ravl_node *ravl_node_type_most (struct ravl_node *n, enum ravl_slot_type t) at core/ravl.c:430>:
                                                    ravl_slot_opposite() <enum ravl_slot_type ravl_slot_opposite (enum ravl_slot_type t) at core/ravl.c:184>:
                                                        ASSERTne()
                                    ravl_data() <void *ravl_data (struct ravl_node *node) at core/ravl.c:571>:
                                        memcpy()
                                    memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                        memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                            heap_get_chunk_hdr()
                                        memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                            heap_get_chunk_hdr()
                                            FATAL()
                                    recycler_element_new() <struct recycler_element recycler_element_new (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/recycler.c:122>:
                                        SUPPRESS_UNUSED()
                                        util_mutex_lock()
                                        util_mutex_unlock()
                                    ASSERT()
                                    util_fetch_and_sub64()
                                    MIN()
                                    ravl_remove() <void ravl_remove (struct ravl *ravl, struct ravl_node *n) at core/ravl.c:545> (R):
                                        LOG()
                                        ravl_node_successor() <struct ravl_node *ravl_node_successor (struct ravl_node *n) at core/ravl.c:465>:
                                            ravl_node_cessor() <struct ravl_node *ravl_node_cessor (struct ravl_node *n, enum ravl_slot_type t) at core/ravl.c:443>:
                                                ravl_node_type_most() <struct ravl_node *ravl_node_type_most (struct ravl_node *n, enum ravl_slot_type t) at core/ravl.c:430>:
                                                ravl_slot_opposite() <enum ravl_slot_type ravl_slot_opposite (enum ravl_slot_type t) at core/ravl.c:184>:
                                                    ASSERTne()
                                        memcpy()
                                        ravl_remove() <void ravl_remove (struct ravl *ravl, struct ravl_node *n) at core/ravl.c:545> (recursive: see 451)
                                        ravl_node_ref() <struct ravl_node **ravl_node_ref (struct ravl *ravl, struct ravl_node *n) at core/ravl.c:223>:
                                            ravl_node_slot_type() <enum ravl_slot_type ravl_node_slot_type (struct ravl_node *n) at core/ravl.c:196>:
                                        Free() <Free_func Free at core/alloc.c:91>
                                    VEC_PUSH_BACK()
                                    VEC_FOREACH_BY_PTR()
                                    ravl_emplace_copy() <int ravl_emplace_copy (struct ravl *ravl, const void *data) at core/ravl.c:384>:
                                        ravl_emplace() <int ravl_emplace (struct ravl *ravl, ravl_constr constr, const void *arg) at core/ravl.c:393>:
                                            LOG()
                                            ravl_new_node() <struct ravl_node *ravl_new_node (struct ravl *ravl, ravl_constr constr, const void *arg) at core/ravl.c:161>:
                                                Malloc()
                                                ERR()
                                                ravl_node_insert_constructor() <void ravl_node_insert_constructor (void *data, size_t data_size, const void *arg) at core/ravl.c:139>:
                                                    SUPPRESS_UNUSED()
                                                    memcpy()
                                            ravl_data() <void *ravl_data (struct ravl_node *node) at core/ravl.c:571>:
                                                memcpy()
                                            ravl_balance() <void ravl_balance (struct ravl *ravl, struct ravl_node *n) at core/ravl.c:337>:
                                                ravl_node_is() <int ravl_node_is (struct ravl_node *n, int i, int j) at core/ravl.c:306>:
                                                    ravl_node_is_i_j() <int ravl_node_is_i_j (struct ravl_node *n, int i, int j) at core/ravl.c:296>:
                                                        ravl_node_rank_difference_parent() <int ravl_node_rank_difference_parent (struct ravl_node *p, struct ravl_node *n) at core/ravl.c:275>:
                                                            ravl_node_rank() <int ravl_node_rank (struct ravl_node *n) at core/ravl.c:261>:
                                                ravl_node_promote() <void ravl_node_promote (struct ravl_node *n) at core/ravl.c:315>
                                                ravl_node_sibling() <struct ravl_node *ravl_node_sibling (struct ravl_node *n) at core/ravl.c:209>:
                                                    ravl_node_slot_type() <enum ravl_slot_type ravl_node_slot_type (struct ravl_node *n) at core/ravl.c:196>:
                                                ravl_node_rank_difference() <int ravl_node_rank_difference (struct ravl_node *n) at core/ravl.c:287>:
                                                    ravl_node_rank_difference_parent() <int ravl_node_rank_difference_parent (struct ravl_node *p, struct ravl_node *n) at core/ravl.c:275>:
                                                        ravl_node_rank() <int ravl_node_rank (struct ravl_node *n) at core/ravl.c:261>:
                                                ravl_node_rank_difference_parent() <int ravl_node_rank_difference_parent (struct ravl_node *p, struct ravl_node *n) at core/ravl.c:275>:
                                                    ravl_node_rank() <int ravl_node_rank (struct ravl_node *n) at core/ravl.c:261>:
                                                ravl_slot_opposite() <enum ravl_slot_type ravl_slot_opposite (enum ravl_slot_type t) at core/ravl.c:184>:
                                                    ASSERTne()
                                                ravl_node_slot_type() <enum ravl_slot_type ravl_node_slot_type (struct ravl_node *n) at core/ravl.c:196>:
                                                ravl_rotate() <void ravl_rotate (struct ravl *ravl, struct ravl_node *n) at core/ravl.c:237>:
                                                    ASSERTne()
                                                    ravl_node_ref() <struct ravl_node **ravl_node_ref (struct ravl *ravl, struct ravl_node *n) at core/ravl.c:223>:
                                                        ravl_node_slot_type() <enum ravl_slot_type ravl_node_slot_type (struct ravl_node *n) at core/ravl.c:196>:
                                                    ravl_node_slot_type() <enum ravl_slot_type ravl_node_slot_type (struct ravl_node *n) at core/ravl.c:196>:
                                                    ravl_slot_opposite() <enum ravl_slot_type ravl_slot_opposite (enum ravl_slot_type t) at core/ravl.c:184>:
                                                        ASSERTne()
                                                ravl_node_demote() <void ravl_node_demote (struct ravl_node *n) at core/ravl.c:324>:
                                                    ASSERT()
                                            Free() <Free_func Free at core/alloc.c:91>
                                        ravl_node_copy_constructor() <void ravl_node_copy_constructor (void *data, size_t data_size, const void *arg) at core/ravl.c:152>:
                                            memcpy()
                                    VEC_CLEAR()
                                    util_mutex_unlock()
                                VEC_SIZE()
                                heap_bucket_acquire() <struct bucket *heap_bucket_acquire (struct palloc_heap *heap, uint8_t class_id, uint16_t arena_id) at libpmemobj/heap.c:470>:
                                    out() <void out (const char *fmt, ...) at core/out.c:480>:
                                        va_start()
                                        out_common() <} void out_common (const char *file, int line, const char *func, int level, const char *suffix, const char *fmt, va_list ap) at core/out.c:334>
                                        va_end()
                                    heap_thread_arena() <struct arena *heap_thread_arena (struct palloc_heap *heap) at libpmemobj/heap.c:414>:
                                        os_tls_get() <void *os_tls_get (os_tls_key_t key) at core/os_thread_posix.c:62>:
                                            pthread_getspecific()
                                        heap_thread_arena_assign() <struct arena *heap_thread_arena_assign (struct palloc_heap *heap) at libpmemobj/heap.c:381>:
                                            util_mutex_lock()
                                            ASSERTne()
                                            VEC_SIZE()
                                            VEC_FOREACH()
                                            LOG()
                                            heap_arena_thread_attach() <void heap_arena_thread_attach (struct palloc_heap *heap, struct arena *a) at libpmemobj/heap.c:249>:
                                                ASSERTeq()
                                                os_tls_get() <void *os_tls_get (os_tls_key_t key) at core/os_thread_posix.c:62>:
                                                    pthread_getspecific()
                                                heap_arena_thread_detach() <void heap_arena_thread_detach (struct arena *a) at libpmemobj/heap.c:232>:
                                                    util_fetch_and_sub64()
                                                ASSERTne()
                                                util_fetch_and_add64()
                                                os_tls_set() <int os_tls_set (os_tls_key_t key, const void *value) at core/os_thread_posix.c:53>:
                                                    pthread_setspecific()
                                            util_mutex_unlock()
                                        heap_global_arena_assign() <struct arena *heap_global_arena_assign (struct palloc_heap *heap) at libpmemobj/heap.c:348>:
                                            util_mutex_lock()
                                            ASSERTne()
                                            VEC_SIZE()
                                            VEC_FOREACH()
                                            LOG()
                                            util_mutex_unlock()
                                        ASSERT()
                                        ASSERTne()
                                    ASSERTne()
                                    VEC_ARR()
                                    bucket_acquire() <struct bucket *bucket_acquire (struct bucket_locked *b) at libpmemobj/bucket.c:117>:
                                        util_mutex_lock()
                                ASSERT()
                                VEC_FOREACH_BY_PTR()
                                heap_run_into_free_chunk() <void heap_run_into_free_chunk (struct palloc_heap *heap, struct bucket *bucket, struct memory_block *m) at libpmemobj/heap.c:697>:
                                    heap_get_chunk_hdr()
                                    STATS_SUB()
                                    util_mutex_lock()
                                    memblock_huge_init() <struct memory_block memblock_huge_init (struct palloc_heap *heap, uint32_t chunk_id, uint32_t zone_id, uint32_t size_idx) at libpmemobj/memblock.c:1329>:
                                        heap_get_chunk_hdr()
                                        VALGRIND_DO_MAKE_MEM_UNDEFINED()
                                        VALGRIND_ANNOTATE_NEW_MEMORY()
                                        chunk_get_chunk_hdr_value() <uint64_t chunk_get_chunk_hdr_value (uint16_t type, uint16_t flags, uint32_t size_idx) at libpmemobj/memblock.c:604>:
                                            COMPILE_ERROR_ON()
                                            memcpy()
                                        util_atomic_store_explicit64()
                                        pmemops_persist()
                                        huge_write_footer() <void huge_write_footer (struct chunk_header *hdr, uint32_t size_idx) at libpmemobj/memblock.c:1166>:
                                            VALGRIND_DO_MAKE_MEM_UNDEFINED()
                                            VALGRIND_SET_CLEAN()
                                        memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                            memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                                heap_get_chunk_hdr()
                                            memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                                heap_get_chunk_hdr()
                                                FATAL()
                                    heap_free_chunk_reuse() <int heap_free_chunk_reuse (struct palloc_heap *heap, struct bucket *bucket, struct memory_block *m) at libpmemobj/heap.c:674>:
                                        heap_coalesce_huge() <struct memory_block heap_coalesce_huge (struct palloc_heap *heap, struct bucket *b, const struct memory_block *m) at libpmemobj/heap.c:650>:
                                            heap_get_adjacent_free_block() <int heap_get_adjacent_free_block (struct palloc_heap *heap, const struct memory_block *in, struct memory_block *out, int prev) at libpmemobj/heap.c:582>:
                                                ZID_TO_ZONE()
                                                memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                                    memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                                        heap_get_chunk_hdr()
                                                    memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                                        heap_get_chunk_hdr()
                                                        FATAL()
                                            bucket_remove_block() <int bucket_remove_block (struct bucket *b, const struct memory_block *m) at libpmemobj/bucket.c:178>
                                            heap_coalesce() <struct memory_block heap_coalesce (struct palloc_heap *heap, const struct memory_block *blocks[], int n) at libpmemobj/heap.c:621>:
                                                ASSERTne()
                                                memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                                    memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                                        heap_get_chunk_hdr()
                                                    memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                                        heap_get_chunk_hdr()
                                                        FATAL()
                                        bucket_insert_block() <int bucket_insert_block (struct bucket *b, const struct memory_block *m) at libpmemobj/bucket.c:161>:
                                            VALGRIND_DO_MAKE_MEM_NOACCESS()
                                            VALGRIND_ANNOTATE_NEW_MEMORY()
                                    util_mutex_unlock()
                                heap_bucket_release() <void heap_bucket_release (struct bucket *b) at libpmemobj/heap.c:498>:
                                    bucket_release() <void bucket_release (struct bucket *b) at libpmemobj/bucket.c:127>:
                                        util_mutex_unlock()
                                VEC_DELETE()
                        heap_populate_bucket() <int heap_populate_bucket (struct palloc_heap *heap, struct bucket *bucket) at libpmemobj/heap.c:850>:
                            util_atomic_store_explicit32()
                            ZID_TO_ZONE()
                            VALGRIND_ADD_TO_GLOBAL_TX_IGNORE()
                            heap_zone_init() <void heap_zone_init (struct palloc_heap *heap, uint32_t zone_id, uint32_t first_chunk_id) at libpmemobj/heap.c:559>:
                                ZID_TO_ZONE()
                                zone_calc_size_idx() <uint32_t zone_calc_size_idx (uint32_t zone_id, unsigned max_zone, size_t heap_size) at libpmemobj/heap.c:533>:
                                    ASSERT()
                                ASSERT()
                                memblock_huge_init() <struct memory_block memblock_huge_init (struct palloc_heap *heap, uint32_t chunk_id, uint32_t zone_id, uint32_t size_idx) at libpmemobj/memblock.c:1329>:
                                    heap_get_chunk_hdr()
                                    VALGRIND_DO_MAKE_MEM_UNDEFINED()
                                    VALGRIND_ANNOTATE_NEW_MEMORY()
                                    chunk_get_chunk_hdr_value() <uint64_t chunk_get_chunk_hdr_value (uint16_t type, uint16_t flags, uint32_t size_idx) at libpmemobj/memblock.c:604>:
                                        COMPILE_ERROR_ON()
                                        memcpy()
                                    util_atomic_store_explicit64()
                                    pmemops_persist()
                                    huge_write_footer() <void huge_write_footer (struct chunk_header *hdr, uint32_t size_idx) at libpmemobj/memblock.c:1166>:
                                        VALGRIND_DO_MAKE_MEM_UNDEFINED()
                                        VALGRIND_SET_CLEAN()
                                    memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                        memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                            heap_get_chunk_hdr()
                                        memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                            heap_get_chunk_hdr()
                                            FATAL()
                                pmemops_persist()
                            heap_reclaim_zone_garbage() <void heap_reclaim_zone_garbage (struct palloc_heap *heap, struct bucket *bucket, uint32_t zone_id) at libpmemobj/heap.c:775>:
                                ZID_TO_ZONE()
                                ASSERT()
                                memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                    memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                        heap_get_chunk_hdr()
                                    memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                        heap_get_chunk_hdr()
                                        FATAL()
                                heap_reclaim_run() <int heap_reclaim_run (struct palloc_heap *heap, struct memory_block *m, int startup) at libpmemobj/heap.c:733>:
                                    heap_get_chunk_run()
                                    heap_get_chunk_hdr()
                                    alloc_class_by_run() <struct alloc_class *alloc_class_by_run (struct alloc_class_collection *ac, size_t unit_size, uint16_t flags, uint32_t size_idx) at libpmemobj/alloc_class.c:594>:
                                        SIZE_TO_CLASS_MAP_INDEX()
                                        ASSERT()
                                        critnib_get() <void *critnib_get (struct critnib *c, uint64_t key) at libpmemobj/critnib.c:515>:
                                            load() <void load (void *src, void *dst) at libpmemobj/critnib.c:130>:
                                                util_atomic_load_explicit64()
                                            is_leaf() <inline bool is_leaf (struct critnib_node *n) at libpmemobj/critnib.c:150>:
                                            slice_index() <inline unsigned slice_index (uint64_t key, sh_t shift) at libpmemobj/critnib.c:178>:
                                            to_leaf() <inline struct critnib_leaf *to_leaf (struct critnib_node *n) at libpmemobj/critnib.c:159>:
                                        RUN_CLASS_KEY_PACK()
                                    recycler_element_new() <struct recycler_element recycler_element_new (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/recycler.c:122>:
                                        SUPPRESS_UNUSED()
                                        util_mutex_lock()
                                        util_mutex_unlock()
                                    ASSERTeq()
                                    STATS_INC()
                                    heap_get_recycler() <struct recycler *heap_get_recycler (struct palloc_heap *heap, size_t id, size_t nallocs) at libpmemobj/heap.c:106> (R):
                                        util_atomic_load_explicit64()
                                        recycler_new() <struct recycler *recycler_new (struct palloc_heap *heap, size_t nallocs, size_t *peak_arenas) at libpmemobj/recycler.c:74>:
                                            Malloc()
                                            ravl_new_sized() <struct ravl *ravl_new_sized (ravl_compare *compare, size_t data_size) at core/ravl.c:45>:
                                                Malloc()
                                                ERR()
                                            recycler_element_cmp() <int recycler_element_cmp (const void *lhs, const void *rhs) at libpmemobj/recycler.c:23>:
                                            memset()
                                            VEC_INIT()
                                            util_mutex_init()
                                            Free() <Free_func Free at core/alloc.c:91>
                                        util_bool_compare_and_swap64()
                                        recycler_delete() <void recycler_delete (struct recycler *r) at libpmemobj/recycler.c:107>:
                                            VEC_DELETE()
                                            util_mutex_destroy()
                                            ravl_delete() <void ravl_delete (struct ravl *ravl) at core/ravl.c:112>:
                                                ravl_delete_cb() <void ravl_delete_cb (struct ravl *ravl, ravl_cb cb, void *arg) at core/ravl.c:102>:
                                                    ravl_foreach_node() <void ravl_foreach_node (struct ravl_node *n, ravl_cb cb, void *arg, int free_node) at core/ravl.c:74> (R):
                                                        ravl_foreach_node() <void ravl_foreach_node (struct ravl_node *n, ravl_cb cb, void *arg, int free_node) at core/ravl.c:74> (recursive: see 670)
                                                        Free() <Free_func Free at core/alloc.c:91>
                                                    Free() <Free_func Free at core/alloc.c:91>
                                            Free() <Free_func Free at core/alloc.c:91>
                                        heap_get_recycler() <struct recycler *heap_get_recycler (struct palloc_heap *heap, size_t id, size_t nallocs) at libpmemobj/heap.c:106> (recursive: see 652)
                                    recycler_put() <int recycler_put (struct recycler *r, struct recycler_element element) at libpmemobj/recycler.c:154>:
                                        util_mutex_lock()
                                        ravl_emplace_copy() <int ravl_emplace_copy (struct ravl *ravl, const void *data) at core/ravl.c:384>:
                                            ravl_emplace() <int ravl_emplace (struct ravl *ravl, ravl_constr constr, const void *arg) at core/ravl.c:393>:
                                                LOG()
                                                ravl_new_node() <struct ravl_node *ravl_new_node (struct ravl *ravl, ravl_constr constr, const void *arg) at core/ravl.c:161>:
                                                    Malloc()
                                                    ERR()
                                                    ravl_node_insert_constructor() <void ravl_node_insert_constructor (void *data, size_t data_size, const void *arg) at core/ravl.c:139>:
                                                        SUPPRESS_UNUSED()
                                                        memcpy()
                                                ravl_data() <void *ravl_data (struct ravl_node *node) at core/ravl.c:571>:
                                                    memcpy()
                                                ravl_balance() <void ravl_balance (struct ravl *ravl, struct ravl_node *n) at core/ravl.c:337>:
                                                    ravl_node_is() <int ravl_node_is (struct ravl_node *n, int i, int j) at core/ravl.c:306>:
                                                        ravl_node_is_i_j() <int ravl_node_is_i_j (struct ravl_node *n, int i, int j) at core/ravl.c:296>:
                                                            ravl_node_rank_difference_parent() <int ravl_node_rank_difference_parent (struct ravl_node *p, struct ravl_node *n) at core/ravl.c:275>:
                                                                ravl_node_rank() <int ravl_node_rank (struct ravl_node *n) at core/ravl.c:261>:
                                                    ravl_node_promote() <void ravl_node_promote (struct ravl_node *n) at core/ravl.c:315>
                                                    ravl_node_sibling() <struct ravl_node *ravl_node_sibling (struct ravl_node *n) at core/ravl.c:209>:
                                                        ravl_node_slot_type() <enum ravl_slot_type ravl_node_slot_type (struct ravl_node *n) at core/ravl.c:196>:
                                                    ravl_node_rank_difference() <int ravl_node_rank_difference (struct ravl_node *n) at core/ravl.c:287>:
                                                        ravl_node_rank_difference_parent() <int ravl_node_rank_difference_parent (struct ravl_node *p, struct ravl_node *n) at core/ravl.c:275>:
                                                            ravl_node_rank() <int ravl_node_rank (struct ravl_node *n) at core/ravl.c:261>:
                                                    ravl_node_rank_difference_parent() <int ravl_node_rank_difference_parent (struct ravl_node *p, struct ravl_node *n) at core/ravl.c:275>:
                                                        ravl_node_rank() <int ravl_node_rank (struct ravl_node *n) at core/ravl.c:261>:
                                                    ravl_slot_opposite() <enum ravl_slot_type ravl_slot_opposite (enum ravl_slot_type t) at core/ravl.c:184>:
                                                        ASSERTne()
                                                    ravl_node_slot_type() <enum ravl_slot_type ravl_node_slot_type (struct ravl_node *n) at core/ravl.c:196>:
                                                    ravl_rotate() <void ravl_rotate (struct ravl *ravl, struct ravl_node *n) at core/ravl.c:237>:
                                                        ASSERTne()
                                                        ravl_node_ref() <struct ravl_node **ravl_node_ref (struct ravl *ravl, struct ravl_node *n) at core/ravl.c:223>:
                                                            ravl_node_slot_type() <enum ravl_slot_type ravl_node_slot_type (struct ravl_node *n) at core/ravl.c:196>:
                                                        ravl_node_slot_type() <enum ravl_slot_type ravl_node_slot_type (struct ravl_node *n) at core/ravl.c:196>:
                                                        ravl_slot_opposite() <enum ravl_slot_type ravl_slot_opposite (enum ravl_slot_type t) at core/ravl.c:184>:
                                                            ASSERTne()
                                                    ravl_node_demote() <void ravl_node_demote (struct ravl_node *n) at core/ravl.c:324>:
                                                        ASSERT()
                                                Free() <Free_func Free at core/alloc.c:91>
                                            ravl_node_copy_constructor() <void ravl_node_copy_constructor (void *data, size_t data_size, const void *arg) at core/ravl.c:152>:
                                                memcpy()
                                        util_mutex_unlock()
                                    ERR()
                                heap_run_into_free_chunk() <void heap_run_into_free_chunk (struct palloc_heap *heap, struct bucket *bucket, struct memory_block *m) at libpmemobj/heap.c:697>:
                                    heap_get_chunk_hdr()
                                    STATS_SUB()
                                    util_mutex_lock()
                                    memblock_huge_init() <struct memory_block memblock_huge_init (struct palloc_heap *heap, uint32_t chunk_id, uint32_t zone_id, uint32_t size_idx) at libpmemobj/memblock.c:1329>:
                                        heap_get_chunk_hdr()
                                        VALGRIND_DO_MAKE_MEM_UNDEFINED()
                                        VALGRIND_ANNOTATE_NEW_MEMORY()
                                        chunk_get_chunk_hdr_value() <uint64_t chunk_get_chunk_hdr_value (uint16_t type, uint16_t flags, uint32_t size_idx) at libpmemobj/memblock.c:604>:
                                            COMPILE_ERROR_ON()
                                            memcpy()
                                        util_atomic_store_explicit64()
                                        pmemops_persist()
                                        huge_write_footer() <void huge_write_footer (struct chunk_header *hdr, uint32_t size_idx) at libpmemobj/memblock.c:1166>:
                                            VALGRIND_DO_MAKE_MEM_UNDEFINED()
                                            VALGRIND_SET_CLEAN()
                                        memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                            memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                                heap_get_chunk_hdr()
                                            memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                                heap_get_chunk_hdr()
                                                FATAL()
                                    heap_free_chunk_reuse() <int heap_free_chunk_reuse (struct palloc_heap *heap, struct bucket *bucket, struct memory_block *m) at libpmemobj/heap.c:674>:
                                        heap_coalesce_huge() <struct memory_block heap_coalesce_huge (struct palloc_heap *heap, struct bucket *b, const struct memory_block *m) at libpmemobj/heap.c:650>:
                                            heap_get_adjacent_free_block() <int heap_get_adjacent_free_block (struct palloc_heap *heap, const struct memory_block *in, struct memory_block *out, int prev) at libpmemobj/heap.c:582>:
                                                ZID_TO_ZONE()
                                                memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                                    memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                                        heap_get_chunk_hdr()
                                                    memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                                        heap_get_chunk_hdr()
                                                        FATAL()
                                            bucket_remove_block() <int bucket_remove_block (struct bucket *b, const struct memory_block *m) at libpmemobj/bucket.c:178>
                                            heap_coalesce() <struct memory_block heap_coalesce (struct palloc_heap *heap, const struct memory_block *blocks[], int n) at libpmemobj/heap.c:621>:
                                                ASSERTne()
                                                memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                                    memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                                        heap_get_chunk_hdr()
                                                    memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                                        heap_get_chunk_hdr()
                                                        FATAL()
                                        bucket_insert_block() <int bucket_insert_block (struct bucket *b, const struct memory_block *m) at libpmemobj/bucket.c:161>:
                                            VALGRIND_DO_MAKE_MEM_NOACCESS()
                                            VALGRIND_ANNOTATE_NEW_MEMORY()
                                    util_mutex_unlock()
                                heap_free_chunk_reuse() <int heap_free_chunk_reuse (struct palloc_heap *heap, struct bucket *bucket, struct memory_block *m) at libpmemobj/heap.c:674>:
                                    heap_coalesce_huge() <struct memory_block heap_coalesce_huge (struct palloc_heap *heap, struct bucket *b, const struct memory_block *m) at libpmemobj/heap.c:650>:
                                        heap_get_adjacent_free_block() <int heap_get_adjacent_free_block (struct palloc_heap *heap, const struct memory_block *in, struct memory_block *out, int prev) at libpmemobj/heap.c:582>:
                                            ZID_TO_ZONE()
                                            memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                                memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                                    heap_get_chunk_hdr()
                                                memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                                    heap_get_chunk_hdr()
                                                    FATAL()
                                        bucket_remove_block() <int bucket_remove_block (struct bucket *b, const struct memory_block *m) at libpmemobj/bucket.c:178>
                                        heap_coalesce() <struct memory_block heap_coalesce (struct palloc_heap *heap, const struct memory_block *blocks[], int n) at libpmemobj/heap.c:621>:
                                            ASSERTne()
                                            memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                                memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                                    heap_get_chunk_hdr()
                                                memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                                    heap_get_chunk_hdr()
                                                    FATAL()
                                    bucket_insert_block() <int bucket_insert_block (struct bucket *b, const struct memory_block *m) at libpmemobj/bucket.c:161>:
                                        VALGRIND_DO_MAKE_MEM_NOACCESS()
                                        VALGRIND_ANNOTATE_NEW_MEMORY()
                        heap_extend() <int heap_extend (struct palloc_heap *heap, struct bucket *b, size_t size) at libpmemobj/heap.c:1515>:
                            util_pool_extend() <void *util_pool_extend (struct pool_set *set, size_t *size, size_t minpartsize) at common/set.c:2231>:
                                LOG()
                                ERR()
                                util_poolset_append_new_part() <int util_poolset_append_new_part (struct pool_set *set, size_t size) at common/set.c:2174>:
                                    LOG()
                                    VEC_SIZE()
                                    VEC_GET()
                                    strlen()
                                    Malloc()
                                    ERR()
                                    snprintf()
                                    util_replica_add_part() <int util_replica_add_part (struct pool_replica **repp, const char *path, size_t filesize) at common/set.c:708>:
                                        LOG()
                                        util_replica_add_part_by_idx() <int util_replica_add_part_by_idx (struct pool_replica **repp, const char *path, size_t filesize, unsigned p) at common/set.c:662>:
                                            LOG()
                                            util_replica_reserve() <int util_replica_reserve (struct pool_replica **repp, unsigned n) at common/set.c:633>:
                                                LOG()
                                                Realloc()
                                                ERR()
                                                memset()
                                            ASSERTne()
                                            util_file_get_type() <enum file_type util_file_get_type (const char *path) at common/file.c:106>:
                                                LOG()
                                                ERR()
                                                util_file_exists() <int util_file_exists (const char *path) at common/file.c:32>:
                                                    LOG()
                                                    os_access() <int os_access (const char *pathname, int mode) at core/os_posix.c:97>:
                                                        access()
                                                    ERR()
                                                os_stat() <int os_stat (const char *pathname, os_stat_t *buf) at core/os_posix.c:79>:
                                                    stat()
                                                util_stat_get_type() <enum file_type util_stat_get_type (const os_stat_t *st) at common/file.c:62>:
                                                    pmem2_get_type_from_stat() <int pmem2_get_type_from_stat (const os_stat_t *st, enum pmem2_file_type *type) at libpmem2/pmem2_utils_linux.c:23>:
                                                        S_ISREG()
                                                        S_ISDIR()
                                                        S_ISCHR()
                                                        ERR()
                                                        util_snprintf() <int util_snprintf (char *str, size_t size, const char *format, ...) at core/util.c:434>:
                                                            va_start()
                                                            vsnprintf()
                                                            va_end()
                                                        os_major()
                                                        os_minor()
                                                        ASSERTinfo()
                                                        LOG()
                                                        realpath()
                                                        strrchr()
                                                        strcmp()
                                                    pmem2_err_to_errno() <int pmem2_err_to_errno (int err) at libpmem2/pmem2_utils.c:67>:
                                                        FATAL()
                                                    ASSERTinfo()
                                            util_file_device_dax_alignment() <size_t util_file_device_dax_alignment (const char *path) at common/file_posix.c:139>:
                                                LOG()
                                                device_dax_alignment() <size_t device_dax_alignment (const char *path) at common/file_posix.c:105>:
                                                    LOG()
                                                    os_open() <int os_open (const char *pathname, int flags, ...) at core/os_posix.c:29>:
                                                        va_start()
                                                        va_arg()
                                                        va_end()
                                                        open()
                                                    pmem2_source_from_fd() <int pmem2_source_from_fd (struct pmem2_source **src, int fd) at libpmem2/source_posix.c:19>:
                                                        PMEM2_ERR_CLR()
                                                        fcntl()
                                                        ERR()
                                                        os_fstat()
                                                        pmem2_get_type_from_stat() <int pmem2_get_type_from_stat (const os_stat_t *st, enum pmem2_file_type *type) at libpmem2/pmem2_utils_linux.c:23>:
                                                            S_ISREG()
                                                            S_ISDIR()
                                                            S_ISCHR()
                                                            ERR()
                                                            util_snprintf() <int util_snprintf (char *str, size_t size, const char *format, ...) at core/util.c:434>:
                                                                va_start()
                                                                vsnprintf()
                                                                va_end()
                                                            os_major()
                                                            os_minor()
                                                            ASSERTinfo()
                                                            LOG()
                                                            realpath()
                                                            strrchr()
                                                            strcmp()
                                                        pmem2_malloc() <void *pmem2_malloc (size_t size, int *err) at libpmem2/pmem2_utils.c:19>:
                                                            Malloc()
                                                            ERR()
                                                        ASSERTne()
                                                    pmem2_device_dax_alignment() <int pmem2_device_dax_alignment (const struct pmem2_source *src, size_t *alignment) at libpmem2/pmem2_utils_ndctl.c:18>:
                                                        ndctl_new()
                                                        ERR()
                                                        pmem2_region_namespace() <int pmem2_region_namespace (struct ndctl_ctx *ctx, const struct pmem2_source *src, struct ndctl_region **pregion, struct ndctl_namespace **pndns) at libpmem2/region_namespace_ndctl.c:131>:
                                                            LOG()
                                                            ERR()
                                                            FOREACH_BUS_REGION_NAMESPACE()
                                                            ndctl_namespace_get_dax()
                                                            ASSERTeq()
                                                            ndctl_dax_get_daxctl_region()
                                                            daxctl_dev_foreach()
                                                            daxctl_dev_get_devname()
                                                            ndctl_match_devdax() <int ndctl_match_devdax (dev_t st_rdev, const char *devname) at libpmem2/region_namespace_ndctl.c:26>:
                                                                LOG()
                                                                stat()
                                                                util_snprintf() <int util_snprintf (char *str, size_t size, const char *format, ...) at core/util.c:434>:
                                                                    va_start()
                                                                    vsnprintf()
                                                                    va_end()
                                                                ERR()
                                                                os_stat() <int os_stat (const char *pathname, os_stat_t *buf) at core/os_posix.c:79>:
                                                                    stat()
                                                            ndctl_namespace_get_btt()
                                                            ndctl_btt_get_block_device()
                                                            ndctl_namespace_get_pfn()
                                                            ndctl_pfn_get_block_device()
                                                            ndctl_namespace_get_block_device()
                                                            ndctl_match_fsdax() <int ndctl_match_fsdax (dev_t st_dev, const char *devname) at libpmem2/region_namespace_ndctl.c:64>:
                                                                LOG()
                                                                util_snprintf() <int util_snprintf (char *str, size_t size, const char *format, ...) at core/util.c:434>:
                                                                    va_start()
                                                                    vsnprintf()
                                                                    va_end()
                                                                ERR()
                                                                major()
                                                                minor()
                                                                os_open() <int os_open (const char *pathname, int flags, ...) at core/os_posix.c:29>:
                                                                    va_start()
                                                                    va_arg()
                                                                    va_end()
                                                                    open()
                                                                read()
                                                                os_close()
                                                                strcmp()
                                                        LOG()
                                                        ndctl_namespace_get_dax()
                                                        ndctl_dax_get_align()
                                                        ndctl_unref()
                                                    pmem2_source_delete() <int pmem2_source_delete (struct pmem2_source **src) at libpmem2/source.c:30>:
                                                        Free() <Free_func Free at core/alloc.c:91>
                                                    os_close()
                                    FATAL()
                                    util_poolset_set_size() <void util_poolset_set_size (struct pool_set *set) at common/set.c:949>:
                                        LOG()
                                    Free() <Free_func Free at core/alloc.c:91>
                                util_part_open() <int util_part_open (struct pool_set_part *part, size_t minsize, int create_part) at common/set.c:1459>:
                                    LOG()
                                    util_file_exists() <int util_file_exists (const char *path) at common/file.c:32>:
                                        LOG()
                                        os_access() <int os_access (const char *pathname, int mode) at core/os_posix.c:97>:
                                            access()
                                        ERR()
                                    util_file_create() <int util_file_create (const char *path, size_t size, size_t minsize) at common/file.c:398>:
                                        LOG()
                                        ASSERTne()
                                        ERR()
                                        os_open() <int os_open (const char *pathname, int flags, ...) at core/os_posix.c:29>:
                                            va_start()
                                            va_arg()
                                            va_end()
                                            open()
                                        os_posix_fallocate() <int os_posix_fallocate (int fd, os_off_t offset, off_t len) at core/os_posix.c:142>:
                                            posix_fallocate()
                                        os_flock() <int os_flock (int fd, int operation) at core/os_posix.c:215>:
                                            flock()
                                        os_close()
                                        os_unlink() <int os_unlink (const char *pathname) at core/os_posix.c:88>:
                                            unlink()
                                    util_file_open() <int util_file_open (const char *path, size_t *size, size_t minsize, int flags) at common/file.c:456>:
                                        LOG()
                                        os_open() <int os_open (const char *pathname, int flags, ...) at core/os_posix.c:29>:
                                            va_start()
                                            va_arg()
                                            va_end()
                                            open()
                                        ERR()
                                        os_flock() <int os_flock (int fd, int operation) at core/os_posix.c:215>:
                                            flock()
                                        os_close()
                                        ASSERTeq()
                                        util_fd_get_size() <ssize_t util_fd_get_size (int fd) at common/file.c:157>:
                                            LOG()
                                            pmem2_source_from_fd() <int pmem2_source_from_fd (struct pmem2_source **src, int fd) at libpmem2/source_posix.c:19>:
                                                PMEM2_ERR_CLR()
                                                fcntl()
                                                ERR()
                                                os_fstat()
                                                pmem2_get_type_from_stat() <int pmem2_get_type_from_stat (const os_stat_t *st, enum pmem2_file_type *type) at libpmem2/pmem2_utils_linux.c:23>:
                                                    S_ISREG()
                                                    S_ISDIR()
                                                    S_ISCHR()
                                                    ERR()
                                                    util_snprintf() <int util_snprintf (char *str, size_t size, const char *format, ...) at core/util.c:434>:
                                                        va_start()
                                                        vsnprintf()
                                                        va_end()
                                                    os_major()
                                                    os_minor()
                                                    ASSERTinfo()
                                                    LOG()
                                                    realpath()
                                                    strrchr()
                                                    strcmp()
                                                pmem2_malloc() <void *pmem2_malloc (size_t size, int *err) at libpmem2/pmem2_utils.c:19>:
                                                    Malloc()
                                                    ERR()
                                                ASSERTne()
                                            pmem2_err_to_errno() <int pmem2_err_to_errno (int err) at libpmem2/pmem2_utils.c:67>:
                                                FATAL()
                                            pmem2_source_size() <int pmem2_source_size (const struct pmem2_source *src, size_t *size) at libpmem2/source_posix.c:90>:
                                                LOG()
                                                PMEM2_ERR_CLR()
                                                ASSERT()
                                                os_fstat()
                                                ERR()
                                                pmem2_device_dax_size() <int pmem2_device_dax_size (const struct pmem2_source *src, size_t *size) at libpmem2/pmem2_utils_ndctl.c:58>:
                                                    ndctl_new()
                                                    ERR()
                                                    pmem2_region_namespace() <int pmem2_region_namespace (struct ndctl_ctx *ctx, const struct pmem2_source *src, struct ndctl_region **pregion, struct ndctl_namespace **pndns) at libpmem2/region_namespace_ndctl.c:131>:
                                                        LOG()
                                                        ERR()
                                                        FOREACH_BUS_REGION_NAMESPACE()
                                                        ndctl_namespace_get_dax()
                                                        ASSERTeq()
                                                        ndctl_dax_get_daxctl_region()
                                                        daxctl_dev_foreach()
                                                        daxctl_dev_get_devname()
                                                        ndctl_match_devdax() <int ndctl_match_devdax (dev_t st_rdev, const char *devname) at libpmem2/region_namespace_ndctl.c:26>:
                                                            LOG()
                                                            stat()
                                                            util_snprintf() <int util_snprintf (char *str, size_t size, const char *format, ...) at core/util.c:434>:
                                                                va_start()
                                                                vsnprintf()
                                                                va_end()
                                                            ERR()
                                                            os_stat() <int os_stat (const char *pathname, os_stat_t *buf) at core/os_posix.c:79>:
                                                                stat()
                                                        ndctl_namespace_get_btt()
                                                        ndctl_btt_get_block_device()
                                                        ndctl_namespace_get_pfn()
                                                        ndctl_pfn_get_block_device()
                                                        ndctl_namespace_get_block_device()
                                                        ndctl_match_fsdax() <int ndctl_match_fsdax (dev_t st_dev, const char *devname) at libpmem2/region_namespace_ndctl.c:64>:
                                                            LOG()
                                                            util_snprintf() <int util_snprintf (char *str, size_t size, const char *format, ...) at core/util.c:434>:
                                                                va_start()
                                                                vsnprintf()
                                                                va_end()
                                                            ERR()
                                                            major()
                                                            minor()
                                                            os_open() <int os_open (const char *pathname, int flags, ...) at core/os_posix.c:29>:
                                                                va_start()
                                                                va_arg()
                                                                va_end()
                                                                open()
                                                            read()
                                                            os_close()
                                                            strcmp()
                                                    LOG()
                                                    ndctl_namespace_get_dax()
                                                    ndctl_dax_get_size()
                                                    ndctl_unref()
                                                FATAL()
                                            pmem2_source_delete() <int pmem2_source_delete (struct pmem2_source **src) at libpmem2/source.c:30>:
                                                Free() <Free_func Free at core/alloc.c:91>
                                            ERR()
                                    os_posix_fallocate() <int os_posix_fallocate (int fd, os_off_t offset, off_t len) at core/os_posix.c:142>:
                                        posix_fallocate()
                                    ERR()
                                util_map_part() <int util_map_part (struct pool_set_part *part, void *addr, size_t size, size_t offset, int flags, int rdonly) at common/set.c:229>:
                                    LOG()
                                    ASSERTeq()
                                    ASSERT()
                                    roundup()
                                    util_map_sync() <void *util_map_sync (void *addr, size_t len, int proto, int flags, int fd, os_off_t offset, int *map_sync) at common/mmap_posix.c:159>:
                                        LOG()
                                        mmap()
                                    ERR()
                                    munmap()
                                    VALGRIND_REGISTER_PMEM_MAPPING()
                                    VALGRIND_REGISTER_PMEM_FILE()
                                util_poolset_chmod() <int util_poolset_chmod (struct pool_set *set, mode_t mode) at common/set.c:404>:
                                    LOG()
                                    os_fstat()
                                    ERR()
                                    os_chmod() <int os_chmod (const char *pathname, mode_t mode) at core/os_posix.c:124>:
                                        chmod()
                                util_poolset_fdclose() <void util_poolset_fdclose (struct pool_set *set) at common/set.c:457>:
                                    util_poolset_fdclose_always() <void util_poolset_fdclose_always (struct pool_set *set) at common/set.c:445>:
                                        LOG()
                                        util_replica_fdclose() <void util_replica_fdclose (struct pool_replica *rep) at common/set.c:3232>:
                                            util_part_fdclose() <void util_part_fdclose (struct pool_set_part *part) at common/set.c:1517>:
                                                LOG()
                                                os_close()
                                os_close()
                                os_unlink() <int os_unlink (const char *pathname) at core/os_posix.c:88>:
                                    unlink()
                                Free() <Free_func Free at core/alloc.c:91>
                                util_poolset_set_size() <void util_poolset_set_size (struct pool_set *set) at common/set.c:949>:
                                    LOG()
                            pmemops_persist()
                            heap_max_zone() <unsigned heap_max_zone (size_t size) at libpmemobj/heap.c:516>:
                            ZID_TO_ZONE()
                            heap_zone_init() <void heap_zone_init (struct palloc_heap *heap, uint32_t zone_id, uint32_t first_chunk_id) at libpmemobj/heap.c:559>:
                                ZID_TO_ZONE()
                                zone_calc_size_idx() <uint32_t zone_calc_size_idx (uint32_t zone_id, unsigned max_zone, size_t heap_size) at libpmemobj/heap.c:533>:
                                    ASSERT()
                                ASSERT()
                                memblock_huge_init() <struct memory_block memblock_huge_init (struct palloc_heap *heap, uint32_t chunk_id, uint32_t zone_id, uint32_t size_idx) at libpmemobj/memblock.c:1329>:
                                    heap_get_chunk_hdr()
                                    VALGRIND_DO_MAKE_MEM_UNDEFINED()
                                    VALGRIND_ANNOTATE_NEW_MEMORY()
                                    chunk_get_chunk_hdr_value() <uint64_t chunk_get_chunk_hdr_value (uint16_t type, uint16_t flags, uint32_t size_idx) at libpmemobj/memblock.c:604>:
                                        COMPILE_ERROR_ON()
                                        memcpy()
                                    util_atomic_store_explicit64()
                                    pmemops_persist()
                                    huge_write_footer() <void huge_write_footer (struct chunk_header *hdr, uint32_t size_idx) at libpmemobj/memblock.c:1166>:
                                        VALGRIND_DO_MAKE_MEM_UNDEFINED()
                                        VALGRIND_SET_CLEAN()
                                    memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                        memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                            heap_get_chunk_hdr()
                                        memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                            heap_get_chunk_hdr()
                                            FATAL()
                                pmemops_persist()
                            memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                    heap_get_chunk_hdr()
                                memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                    heap_get_chunk_hdr()
                                    FATAL()
                            heap_free_chunk_reuse() <int heap_free_chunk_reuse (struct palloc_heap *heap, struct bucket *bucket, struct memory_block *m) at libpmemobj/heap.c:674>:
                                heap_coalesce_huge() <struct memory_block heap_coalesce_huge (struct palloc_heap *heap, struct bucket *b, const struct memory_block *m) at libpmemobj/heap.c:650>:
                                    heap_get_adjacent_free_block() <int heap_get_adjacent_free_block (struct palloc_heap *heap, const struct memory_block *in, struct memory_block *out, int prev) at libpmemobj/heap.c:582>:
                                        ZID_TO_ZONE()
                                        memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                            memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                                heap_get_chunk_hdr()
                                            memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                                heap_get_chunk_hdr()
                                                FATAL()
                                    bucket_remove_block() <int bucket_remove_block (struct bucket *b, const struct memory_block *m) at libpmemobj/bucket.c:178>
                                    heap_coalesce() <struct memory_block heap_coalesce (struct palloc_heap *heap, const struct memory_block *blocks[], int n) at libpmemobj/heap.c:621>:
                                        ASSERTne()
                                        memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                            memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                                heap_get_chunk_hdr()
                                            memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                                heap_get_chunk_hdr()
                                                FATAL()
                                bucket_insert_block() <int bucket_insert_block (struct bucket *b, const struct memory_block *m) at libpmemobj/bucket.c:161>:
                                    VALGRIND_DO_MAKE_MEM_NOACCESS()
                                    VALGRIND_ANNOTATE_NEW_MEMORY()
                    heap_ensure_run_bucket_filled() <int heap_ensure_run_bucket_filled (struct palloc_heap *heap, struct bucket *b, uint32_t units) at libpmemobj/heap.c:1083> (R):
                        bucket_alloc_class() <struct alloc_class *bucket_alloc_class (struct bucket *b) at libpmemobj/bucket.c:152>
                        ASSERTeq()
                        heap_detach_and_try_discard_run() <int heap_detach_and_try_discard_run (struct palloc_heap *heap, struct bucket *b) at libpmemobj/heap.c:992>:
                            bucket_detach_run() <int bucket_detach_run (struct bucket *b, struct memory_block *m_out, int *empty) at libpmemobj/bucket.c:231>:
                                util_fetch_and_sub64()
                                VALGRIND_ANNOTATE_HAPPENS_AFTER()
                                VALGRIND_ANNOTATE_HAPPENS_BEFORE()
                                Zalloc() <void *Zalloc (size_t sz) at core/alloc.c:98>:
                                    Malloc()
                                    memset()
                            heap_discard_run() <void heap_discard_run (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/heap.c:974>:
                                heap_reclaim_run() <int heap_reclaim_run (struct palloc_heap *heap, struct memory_block *m, int startup) at libpmemobj/heap.c:733>:
                                    heap_get_chunk_run()
                                    heap_get_chunk_hdr()
                                    alloc_class_by_run() <struct alloc_class *alloc_class_by_run (struct alloc_class_collection *ac, size_t unit_size, uint16_t flags, uint32_t size_idx) at libpmemobj/alloc_class.c:594>:
                                        SIZE_TO_CLASS_MAP_INDEX()
                                        ASSERT()
                                        critnib_get() <void *critnib_get (struct critnib *c, uint64_t key) at libpmemobj/critnib.c:515>:
                                            load() <void load (void *src, void *dst) at libpmemobj/critnib.c:130>:
                                                util_atomic_load_explicit64()
                                            is_leaf() <inline bool is_leaf (struct critnib_node *n) at libpmemobj/critnib.c:150>:
                                            slice_index() <inline unsigned slice_index (uint64_t key, sh_t shift) at libpmemobj/critnib.c:178>:
                                            to_leaf() <inline struct critnib_leaf *to_leaf (struct critnib_node *n) at libpmemobj/critnib.c:159>:
                                        RUN_CLASS_KEY_PACK()
                                    recycler_element_new() <struct recycler_element recycler_element_new (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/recycler.c:122>:
                                        SUPPRESS_UNUSED()
                                        util_mutex_lock()
                                        util_mutex_unlock()
                                    ASSERTeq()
                                    STATS_INC()
                                    heap_get_recycler() <struct recycler *heap_get_recycler (struct palloc_heap *heap, size_t id, size_t nallocs) at libpmemobj/heap.c:106> (R):
                                        util_atomic_load_explicit64()
                                        recycler_new() <struct recycler *recycler_new (struct palloc_heap *heap, size_t nallocs, size_t *peak_arenas) at libpmemobj/recycler.c:74>:
                                            Malloc()
                                            ravl_new_sized() <struct ravl *ravl_new_sized (ravl_compare *compare, size_t data_size) at core/ravl.c:45>:
                                                Malloc()
                                                ERR()
                                            recycler_element_cmp() <int recycler_element_cmp (const void *lhs, const void *rhs) at libpmemobj/recycler.c:23>:
                                            memset()
                                            VEC_INIT()
                                            util_mutex_init()
                                            Free() <Free_func Free at core/alloc.c:91>
                                        util_bool_compare_and_swap64()
                                        recycler_delete() <void recycler_delete (struct recycler *r) at libpmemobj/recycler.c:107>:
                                            VEC_DELETE()
                                            util_mutex_destroy()
                                            ravl_delete() <void ravl_delete (struct ravl *ravl) at core/ravl.c:112>:
                                                ravl_delete_cb() <void ravl_delete_cb (struct ravl *ravl, ravl_cb cb, void *arg) at core/ravl.c:102>:
                                                    ravl_foreach_node() <void ravl_foreach_node (struct ravl_node *n, ravl_cb cb, void *arg, int free_node) at core/ravl.c:74> (R):
                                                        ravl_foreach_node() <void ravl_foreach_node (struct ravl_node *n, ravl_cb cb, void *arg, int free_node) at core/ravl.c:74> (recursive: see 1187)
                                                        Free() <Free_func Free at core/alloc.c:91>
                                                    Free() <Free_func Free at core/alloc.c:91>
                                            Free() <Free_func Free at core/alloc.c:91>
                                        heap_get_recycler() <struct recycler *heap_get_recycler (struct palloc_heap *heap, size_t id, size_t nallocs) at libpmemobj/heap.c:106> (recursive: see 1169)
                                    recycler_put() <int recycler_put (struct recycler *r, struct recycler_element element) at libpmemobj/recycler.c:154>:
                                        util_mutex_lock()
                                        ravl_emplace_copy() <int ravl_emplace_copy (struct ravl *ravl, const void *data) at core/ravl.c:384>:
                                            ravl_emplace() <int ravl_emplace (struct ravl *ravl, ravl_constr constr, const void *arg) at core/ravl.c:393>:
                                                LOG()
                                                ravl_new_node() <struct ravl_node *ravl_new_node (struct ravl *ravl, ravl_constr constr, const void *arg) at core/ravl.c:161>:
                                                    Malloc()
                                                    ERR()
                                                    ravl_node_insert_constructor() <void ravl_node_insert_constructor (void *data, size_t data_size, const void *arg) at core/ravl.c:139>:
                                                        SUPPRESS_UNUSED()
                                                        memcpy()
                                                ravl_data() <void *ravl_data (struct ravl_node *node) at core/ravl.c:571>:
                                                    memcpy()
                                                ravl_balance() <void ravl_balance (struct ravl *ravl, struct ravl_node *n) at core/ravl.c:337>:
                                                    ravl_node_is() <int ravl_node_is (struct ravl_node *n, int i, int j) at core/ravl.c:306>:
                                                        ravl_node_is_i_j() <int ravl_node_is_i_j (struct ravl_node *n, int i, int j) at core/ravl.c:296>:
                                                            ravl_node_rank_difference_parent() <int ravl_node_rank_difference_parent (struct ravl_node *p, struct ravl_node *n) at core/ravl.c:275>:
                                                                ravl_node_rank() <int ravl_node_rank (struct ravl_node *n) at core/ravl.c:261>:
                                                    ravl_node_promote() <void ravl_node_promote (struct ravl_node *n) at core/ravl.c:315>
                                                    ravl_node_sibling() <struct ravl_node *ravl_node_sibling (struct ravl_node *n) at core/ravl.c:209>:
                                                        ravl_node_slot_type() <enum ravl_slot_type ravl_node_slot_type (struct ravl_node *n) at core/ravl.c:196>:
                                                    ravl_node_rank_difference() <int ravl_node_rank_difference (struct ravl_node *n) at core/ravl.c:287>:
                                                        ravl_node_rank_difference_parent() <int ravl_node_rank_difference_parent (struct ravl_node *p, struct ravl_node *n) at core/ravl.c:275>:
                                                            ravl_node_rank() <int ravl_node_rank (struct ravl_node *n) at core/ravl.c:261>:
                                                    ravl_node_rank_difference_parent() <int ravl_node_rank_difference_parent (struct ravl_node *p, struct ravl_node *n) at core/ravl.c:275>:
                                                        ravl_node_rank() <int ravl_node_rank (struct ravl_node *n) at core/ravl.c:261>:
                                                    ravl_slot_opposite() <enum ravl_slot_type ravl_slot_opposite (enum ravl_slot_type t) at core/ravl.c:184>:
                                                        ASSERTne()
                                                    ravl_node_slot_type() <enum ravl_slot_type ravl_node_slot_type (struct ravl_node *n) at core/ravl.c:196>:
                                                    ravl_rotate() <void ravl_rotate (struct ravl *ravl, struct ravl_node *n) at core/ravl.c:237>:
                                                        ASSERTne()
                                                        ravl_node_ref() <struct ravl_node **ravl_node_ref (struct ravl *ravl, struct ravl_node *n) at core/ravl.c:223>:
                                                            ravl_node_slot_type() <enum ravl_slot_type ravl_node_slot_type (struct ravl_node *n) at core/ravl.c:196>:
                                                        ravl_node_slot_type() <enum ravl_slot_type ravl_node_slot_type (struct ravl_node *n) at core/ravl.c:196>:
                                                        ravl_slot_opposite() <enum ravl_slot_type ravl_slot_opposite (enum ravl_slot_type t) at core/ravl.c:184>:
                                                            ASSERTne()
                                                    ravl_node_demote() <void ravl_node_demote (struct ravl_node *n) at core/ravl.c:324>:
                                                        ASSERT()
                                                Free() <Free_func Free at core/alloc.c:91>
                                            ravl_node_copy_constructor() <void ravl_node_copy_constructor (void *data, size_t data_size, const void *arg) at core/ravl.c:152>:
                                                memcpy()
                                        util_mutex_unlock()
                                    ERR()
                                heap_bucket_acquire() <struct bucket *heap_bucket_acquire (struct palloc_heap *heap, uint8_t class_id, uint16_t arena_id) at libpmemobj/heap.c:470>:
                                    out() <void out (const char *fmt, ...) at core/out.c:480>:
                                        va_start()
                                        out_common() <} void out_common (const char *file, int line, const char *func, int level, const char *suffix, const char *fmt, va_list ap) at core/out.c:334>
                                        va_end()
                                    heap_thread_arena() <struct arena *heap_thread_arena (struct palloc_heap *heap) at libpmemobj/heap.c:414>:
                                        os_tls_get() <void *os_tls_get (os_tls_key_t key) at core/os_thread_posix.c:62>:
                                            pthread_getspecific()
                                        heap_thread_arena_assign() <struct arena *heap_thread_arena_assign (struct palloc_heap *heap) at libpmemobj/heap.c:381>:
                                            util_mutex_lock()
                                            ASSERTne()
                                            VEC_SIZE()
                                            VEC_FOREACH()
                                            LOG()
                                            heap_arena_thread_attach() <void heap_arena_thread_attach (struct palloc_heap *heap, struct arena *a) at libpmemobj/heap.c:249>:
                                                ASSERTeq()
                                                os_tls_get() <void *os_tls_get (os_tls_key_t key) at core/os_thread_posix.c:62>:
                                                    pthread_getspecific()
                                                heap_arena_thread_detach() <void heap_arena_thread_detach (struct arena *a) at libpmemobj/heap.c:232>:
                                                    util_fetch_and_sub64()
                                                ASSERTne()
                                                util_fetch_and_add64()
                                                os_tls_set() <int os_tls_set (os_tls_key_t key, const void *value) at core/os_thread_posix.c:53>:
                                                    pthread_setspecific()
                                            util_mutex_unlock()
                                        heap_global_arena_assign() <struct arena *heap_global_arena_assign (struct palloc_heap *heap) at libpmemobj/heap.c:348>:
                                            util_mutex_lock()
                                            ASSERTne()
                                            VEC_SIZE()
                                            VEC_FOREACH()
                                            LOG()
                                            util_mutex_unlock()
                                        ASSERT()
                                        ASSERTne()
                                    ASSERTne()
                                    VEC_ARR()
                                    bucket_acquire() <struct bucket *bucket_acquire (struct bucket_locked *b) at libpmemobj/bucket.c:117>:
                                        util_mutex_lock()
                                heap_run_into_free_chunk() <void heap_run_into_free_chunk (struct palloc_heap *heap, struct bucket *bucket, struct memory_block *m) at libpmemobj/heap.c:697>:
                                    heap_get_chunk_hdr()
                                    STATS_SUB()
                                    util_mutex_lock()
                                    memblock_huge_init() <struct memory_block memblock_huge_init (struct palloc_heap *heap, uint32_t chunk_id, uint32_t zone_id, uint32_t size_idx) at libpmemobj/memblock.c:1329>:
                                        heap_get_chunk_hdr()
                                        VALGRIND_DO_MAKE_MEM_UNDEFINED()
                                        VALGRIND_ANNOTATE_NEW_MEMORY()
                                        chunk_get_chunk_hdr_value() <uint64_t chunk_get_chunk_hdr_value (uint16_t type, uint16_t flags, uint32_t size_idx) at libpmemobj/memblock.c:604>:
                                            COMPILE_ERROR_ON()
                                            memcpy()
                                        util_atomic_store_explicit64()
                                        pmemops_persist()
                                        huge_write_footer() <void huge_write_footer (struct chunk_header *hdr, uint32_t size_idx) at libpmemobj/memblock.c:1166>:
                                            VALGRIND_DO_MAKE_MEM_UNDEFINED()
                                            VALGRIND_SET_CLEAN()
                                        memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                            memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                                heap_get_chunk_hdr()
                                            memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                                heap_get_chunk_hdr()
                                                FATAL()
                                    heap_free_chunk_reuse() <int heap_free_chunk_reuse (struct palloc_heap *heap, struct bucket *bucket, struct memory_block *m) at libpmemobj/heap.c:674>:
                                        heap_coalesce_huge() <struct memory_block heap_coalesce_huge (struct palloc_heap *heap, struct bucket *b, const struct memory_block *m) at libpmemobj/heap.c:650>:
                                            heap_get_adjacent_free_block() <int heap_get_adjacent_free_block (struct palloc_heap *heap, const struct memory_block *in, struct memory_block *out, int prev) at libpmemobj/heap.c:582>:
                                                ZID_TO_ZONE()
                                                memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                                    memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                                        heap_get_chunk_hdr()
                                                    memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                                        heap_get_chunk_hdr()
                                                        FATAL()
                                            bucket_remove_block() <int bucket_remove_block (struct bucket *b, const struct memory_block *m) at libpmemobj/bucket.c:178>
                                            heap_coalesce() <struct memory_block heap_coalesce (struct palloc_heap *heap, const struct memory_block *blocks[], int n) at libpmemobj/heap.c:621>:
                                                ASSERTne()
                                                memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                                    memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                                        heap_get_chunk_hdr()
                                                    memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                                        heap_get_chunk_hdr()
                                                        FATAL()
                                        bucket_insert_block() <int bucket_insert_block (struct bucket *b, const struct memory_block *m) at libpmemobj/bucket.c:161>:
                                            VALGRIND_DO_MAKE_MEM_NOACCESS()
                                            VALGRIND_ANNOTATE_NEW_MEMORY()
                                    util_mutex_unlock()
                                heap_bucket_release() <void heap_bucket_release (struct bucket *b) at libpmemobj/heap.c:498>:
                                    bucket_release() <void bucket_release (struct bucket *b) at libpmemobj/bucket.c:127>:
                                        util_mutex_unlock()
                        heap_reuse_from_recycler() <int heap_reuse_from_recycler (struct palloc_heap *heap, struct bucket *b, uint32_t units, int force) at libpmemobj/heap.c:1034>:
                            bucket_alloc_class() <struct alloc_class *bucket_alloc_class (struct bucket *b) at libpmemobj/bucket.c:152>
                            heap_get_recycler() <struct recycler *heap_get_recycler (struct palloc_heap *heap, size_t id, size_t nallocs) at libpmemobj/heap.c:106> (R):
                                util_atomic_load_explicit64()
                                recycler_new() <struct recycler *recycler_new (struct palloc_heap *heap, size_t nallocs, size_t *peak_arenas) at libpmemobj/recycler.c:74>:
                                    Malloc()
                                    ravl_new_sized() <struct ravl *ravl_new_sized (ravl_compare *compare, size_t data_size) at core/ravl.c:45>:
                                        Malloc()
                                        ERR()
                                    recycler_element_cmp() <int recycler_element_cmp (const void *lhs, const void *rhs) at libpmemobj/recycler.c:23>:
                                    memset()
                                    VEC_INIT()
                                    util_mutex_init()
                                    Free() <Free_func Free at core/alloc.c:91>
                                util_bool_compare_and_swap64()
                                recycler_delete() <void recycler_delete (struct recycler *r) at libpmemobj/recycler.c:107>:
                                    VEC_DELETE()
                                    util_mutex_destroy()
                                    ravl_delete() <void ravl_delete (struct ravl *ravl) at core/ravl.c:112>:
                                        ravl_delete_cb() <void ravl_delete_cb (struct ravl *ravl, ravl_cb cb, void *arg) at core/ravl.c:102>:
                                            ravl_foreach_node() <void ravl_foreach_node (struct ravl_node *n, ravl_cb cb, void *arg, int free_node) at core/ravl.c:74> (R):
                                                ravl_foreach_node() <void ravl_foreach_node (struct ravl_node *n, ravl_cb cb, void *arg, int free_node) at core/ravl.c:74> (recursive: see 1342)
                                                Free() <Free_func Free at core/alloc.c:91>
                                            Free() <Free_func Free at core/alloc.c:91>
                                    Free() <Free_func Free at core/alloc.c:91>
                                heap_get_recycler() <struct recycler *heap_get_recycler (struct palloc_heap *heap, size_t id, size_t nallocs) at libpmemobj/heap.c:106> (recursive: see 1324)
                            ERR()
                            recycler_get() <int recycler_get (struct recycler *r, struct memory_block *m) at libpmemobj/recycler.c:171>:
                                util_mutex_lock()
                                ravl_find() <struct ravl_node *ravl_find (struct ravl *ravl, const void *data, enum ravl_predicate flags) at core/ravl.c:524>:
                                    LOG()
                                    ravl_data() <void *ravl_data (struct ravl_node *node) at core/ravl.c:571>:
                                        memcpy()
                                    ravl_predicate_holds() <int ravl_predicate_holds (int result, struct ravl_node **ret, struct ravl_node *n, enum ravl_predicate flags) at core/ravl.c:489>:
                                        ravl_node_successor() <struct ravl_node *ravl_node_successor (struct ravl_node *n) at core/ravl.c:465>:
                                            ravl_node_cessor() <struct ravl_node *ravl_node_cessor (struct ravl_node *n, enum ravl_slot_type t) at core/ravl.c:443>:
                                                ravl_node_type_most() <struct ravl_node *ravl_node_type_most (struct ravl_node *n, enum ravl_slot_type t) at core/ravl.c:430>:
                                                ravl_slot_opposite() <enum ravl_slot_type ravl_slot_opposite (enum ravl_slot_type t) at core/ravl.c:184>:
                                                    ASSERTne()
                                        ravl_node_predecessor() <struct ravl_node *ravl_node_predecessor (struct ravl_node *n) at core/ravl.c:476>:
                                            ravl_node_cessor() <struct ravl_node *ravl_node_cessor (struct ravl_node *n, enum ravl_slot_type t) at core/ravl.c:443>:
                                                ravl_node_type_most() <struct ravl_node *ravl_node_type_most (struct ravl_node *n, enum ravl_slot_type t) at core/ravl.c:430>:
                                                ravl_slot_opposite() <enum ravl_slot_type ravl_slot_opposite (enum ravl_slot_type t) at core/ravl.c:184>:
                                                    ASSERTne()
                                out() <void out (const char *fmt, ...) at core/out.c:480>:
                                    va_start()
                                    out_common() <} void out_common (const char *file, int line, const char *func, int level, const char *suffix, const char *fmt, va_list ap) at core/out.c:334>
                                    va_end()
                                ravl_data() <void *ravl_data (struct ravl_node *node) at core/ravl.c:571>:
                                    memcpy()
                                ravl_remove() <void ravl_remove (struct ravl *ravl, struct ravl_node *n) at core/ravl.c:545> (R):
                                    LOG()
                                    ravl_node_successor() <struct ravl_node *ravl_node_successor (struct ravl_node *n) at core/ravl.c:465>:
                                        ravl_node_cessor() <struct ravl_node *ravl_node_cessor (struct ravl_node *n, enum ravl_slot_type t) at core/ravl.c:443>:
                                            ravl_node_type_most() <struct ravl_node *ravl_node_type_most (struct ravl_node *n, enum ravl_slot_type t) at core/ravl.c:430>:
                                            ravl_slot_opposite() <enum ravl_slot_type ravl_slot_opposite (enum ravl_slot_type t) at core/ravl.c:184>:
                                                ASSERTne()
                                    memcpy()
                                    ravl_remove() <void ravl_remove (struct ravl *ravl, struct ravl_node *n) at core/ravl.c:545> (recursive: see 1372)
                                    ravl_node_ref() <struct ravl_node **ravl_node_ref (struct ravl *ravl, struct ravl_node *n) at core/ravl.c:223>:
                                        ravl_node_slot_type() <enum ravl_slot_type ravl_node_slot_type (struct ravl_node *n) at core/ravl.c:196>:
                                    Free() <Free_func Free at core/alloc.c:91>
                                heap_get_chunk_hdr()
                                memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                    memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                        heap_get_chunk_hdr()
                                    memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                        heap_get_chunk_hdr()
                                        FATAL()
                                util_mutex_unlock()
                            bucket_attach_run() <int bucket_attach_run (struct bucket *b, const struct memory_block *m) at libpmemobj/bucket.c:206>:
                                util_mutex_lock()
                                bucket_memblock_insert_block() <int bucket_memblock_insert_block (const struct memory_block *m, void *b) at libpmemobj/bucket.c:197>:
                                    bucket_insert_block() <int bucket_insert_block (struct bucket *b, const struct memory_block *m) at libpmemobj/bucket.c:161>:
                                        VALGRIND_DO_MAKE_MEM_NOACCESS()
                                        VALGRIND_ANNOTATE_NEW_MEMORY()
                                util_mutex_unlock()
                                util_fetch_and_add64()
                            heap_recycle_unused() <int heap_recycle_unused (struct palloc_heap *heap, struct recycler *recycler, struct bucket *defb, int force) at libpmemobj/heap.c:894>:
                                recycler_recalc() <struct empty_runs recycler_recalc (struct recycler *r, int force) at libpmemobj/recycler.c:207>:
                                    VEC_INIT()
                                    util_atomic_load64()
                                    util_mutex_trylock()
                                    ravl_find() <struct ravl_node *ravl_find (struct ravl *ravl, const void *data, enum ravl_predicate flags) at core/ravl.c:524>:
                                        LOG()
                                        ravl_data() <void *ravl_data (struct ravl_node *node) at core/ravl.c:571>:
                                            memcpy()
                                        ravl_predicate_holds() <int ravl_predicate_holds (int result, struct ravl_node **ret, struct ravl_node *n, enum ravl_predicate flags) at core/ravl.c:489>:
                                            ravl_node_successor() <struct ravl_node *ravl_node_successor (struct ravl_node *n) at core/ravl.c:465>:
                                                ravl_node_cessor() <struct ravl_node *ravl_node_cessor (struct ravl_node *n, enum ravl_slot_type t) at core/ravl.c:443>:
                                                    ravl_node_type_most() <struct ravl_node *ravl_node_type_most (struct ravl_node *n, enum ravl_slot_type t) at core/ravl.c:430>:
                                                    ravl_slot_opposite() <enum ravl_slot_type ravl_slot_opposite (enum ravl_slot_type t) at core/ravl.c:184>:
                                                        ASSERTne()
                                            ravl_node_predecessor() <struct ravl_node *ravl_node_predecessor (struct ravl_node *n) at core/ravl.c:476>:
                                                ravl_node_cessor() <struct ravl_node *ravl_node_cessor (struct ravl_node *n, enum ravl_slot_type t) at core/ravl.c:443>:
                                                    ravl_node_type_most() <struct ravl_node *ravl_node_type_most (struct ravl_node *n, enum ravl_slot_type t) at core/ravl.c:430>:
                                                    ravl_slot_opposite() <enum ravl_slot_type ravl_slot_opposite (enum ravl_slot_type t) at core/ravl.c:184>:
                                                        ASSERTne()
                                    ravl_data() <void *ravl_data (struct ravl_node *node) at core/ravl.c:571>:
                                        memcpy()
                                    memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                        memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                            heap_get_chunk_hdr()
                                        memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                            heap_get_chunk_hdr()
                                            FATAL()
                                    recycler_element_new() <struct recycler_element recycler_element_new (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/recycler.c:122>:
                                        SUPPRESS_UNUSED()
                                        util_mutex_lock()
                                        util_mutex_unlock()
                                    ASSERT()
                                    util_fetch_and_sub64()
                                    MIN()
                                    ravl_remove() <void ravl_remove (struct ravl *ravl, struct ravl_node *n) at core/ravl.c:545> (R):
                                        LOG()
                                        ravl_node_successor() <struct ravl_node *ravl_node_successor (struct ravl_node *n) at core/ravl.c:465>:
                                            ravl_node_cessor() <struct ravl_node *ravl_node_cessor (struct ravl_node *n, enum ravl_slot_type t) at core/ravl.c:443>:
                                                ravl_node_type_most() <struct ravl_node *ravl_node_type_most (struct ravl_node *n, enum ravl_slot_type t) at core/ravl.c:430>:
                                                ravl_slot_opposite() <enum ravl_slot_type ravl_slot_opposite (enum ravl_slot_type t) at core/ravl.c:184>:
                                                    ASSERTne()
                                        memcpy()
                                        ravl_remove() <void ravl_remove (struct ravl *ravl, struct ravl_node *n) at core/ravl.c:545> (recursive: see 1435)
                                        ravl_node_ref() <struct ravl_node **ravl_node_ref (struct ravl *ravl, struct ravl_node *n) at core/ravl.c:223>:
                                            ravl_node_slot_type() <enum ravl_slot_type ravl_node_slot_type (struct ravl_node *n) at core/ravl.c:196>:
                                        Free() <Free_func Free at core/alloc.c:91>
                                    VEC_PUSH_BACK()
                                    VEC_FOREACH_BY_PTR()
                                    ravl_emplace_copy() <int ravl_emplace_copy (struct ravl *ravl, const void *data) at core/ravl.c:384>:
                                        ravl_emplace() <int ravl_emplace (struct ravl *ravl, ravl_constr constr, const void *arg) at core/ravl.c:393>:
                                            LOG()
                                            ravl_new_node() <struct ravl_node *ravl_new_node (struct ravl *ravl, ravl_constr constr, const void *arg) at core/ravl.c:161>:
                                                Malloc()
                                                ERR()
                                                ravl_node_insert_constructor() <void ravl_node_insert_constructor (void *data, size_t data_size, const void *arg) at core/ravl.c:139>:
                                                    SUPPRESS_UNUSED()
                                                    memcpy()
                                            ravl_data() <void *ravl_data (struct ravl_node *node) at core/ravl.c:571>:
                                                memcpy()
                                            ravl_balance() <void ravl_balance (struct ravl *ravl, struct ravl_node *n) at core/ravl.c:337>:
                                                ravl_node_is() <int ravl_node_is (struct ravl_node *n, int i, int j) at core/ravl.c:306>:
                                                    ravl_node_is_i_j() <int ravl_node_is_i_j (struct ravl_node *n, int i, int j) at core/ravl.c:296>:
                                                        ravl_node_rank_difference_parent() <int ravl_node_rank_difference_parent (struct ravl_node *p, struct ravl_node *n) at core/ravl.c:275>:
                                                            ravl_node_rank() <int ravl_node_rank (struct ravl_node *n) at core/ravl.c:261>:
                                                ravl_node_promote() <void ravl_node_promote (struct ravl_node *n) at core/ravl.c:315>
                                                ravl_node_sibling() <struct ravl_node *ravl_node_sibling (struct ravl_node *n) at core/ravl.c:209>:
                                                    ravl_node_slot_type() <enum ravl_slot_type ravl_node_slot_type (struct ravl_node *n) at core/ravl.c:196>:
                                                ravl_node_rank_difference() <int ravl_node_rank_difference (struct ravl_node *n) at core/ravl.c:287>:
                                                    ravl_node_rank_difference_parent() <int ravl_node_rank_difference_parent (struct ravl_node *p, struct ravl_node *n) at core/ravl.c:275>:
                                                        ravl_node_rank() <int ravl_node_rank (struct ravl_node *n) at core/ravl.c:261>:
                                                ravl_node_rank_difference_parent() <int ravl_node_rank_difference_parent (struct ravl_node *p, struct ravl_node *n) at core/ravl.c:275>:
                                                    ravl_node_rank() <int ravl_node_rank (struct ravl_node *n) at core/ravl.c:261>:
                                                ravl_slot_opposite() <enum ravl_slot_type ravl_slot_opposite (enum ravl_slot_type t) at core/ravl.c:184>:
                                                    ASSERTne()
                                                ravl_node_slot_type() <enum ravl_slot_type ravl_node_slot_type (struct ravl_node *n) at core/ravl.c:196>:
                                                ravl_rotate() <void ravl_rotate (struct ravl *ravl, struct ravl_node *n) at core/ravl.c:237>:
                                                    ASSERTne()
                                                    ravl_node_ref() <struct ravl_node **ravl_node_ref (struct ravl *ravl, struct ravl_node *n) at core/ravl.c:223>:
                                                        ravl_node_slot_type() <enum ravl_slot_type ravl_node_slot_type (struct ravl_node *n) at core/ravl.c:196>:
                                                    ravl_node_slot_type() <enum ravl_slot_type ravl_node_slot_type (struct ravl_node *n) at core/ravl.c:196>:
                                                    ravl_slot_opposite() <enum ravl_slot_type ravl_slot_opposite (enum ravl_slot_type t) at core/ravl.c:184>:
                                                        ASSERTne()
                                                ravl_node_demote() <void ravl_node_demote (struct ravl_node *n) at core/ravl.c:324>:
                                                    ASSERT()
                                            Free() <Free_func Free at core/alloc.c:91>
                                        ravl_node_copy_constructor() <void ravl_node_copy_constructor (void *data, size_t data_size, const void *arg) at core/ravl.c:152>:
                                            memcpy()
                                    VEC_CLEAR()
                                    util_mutex_unlock()
                                VEC_SIZE()
                                heap_bucket_acquire() <struct bucket *heap_bucket_acquire (struct palloc_heap *heap, uint8_t class_id, uint16_t arena_id) at libpmemobj/heap.c:470>:
                                    out() <void out (const char *fmt, ...) at core/out.c:480>:
                                        va_start()
                                        out_common() <} void out_common (const char *file, int line, const char *func, int level, const char *suffix, const char *fmt, va_list ap) at core/out.c:334>
                                        va_end()
                                    heap_thread_arena() <struct arena *heap_thread_arena (struct palloc_heap *heap) at libpmemobj/heap.c:414>:
                                        os_tls_get() <void *os_tls_get (os_tls_key_t key) at core/os_thread_posix.c:62>:
                                            pthread_getspecific()
                                        heap_thread_arena_assign() <struct arena *heap_thread_arena_assign (struct palloc_heap *heap) at libpmemobj/heap.c:381>:
                                            util_mutex_lock()
                                            ASSERTne()
                                            VEC_SIZE()
                                            VEC_FOREACH()
                                            LOG()
                                            heap_arena_thread_attach() <void heap_arena_thread_attach (struct palloc_heap *heap, struct arena *a) at libpmemobj/heap.c:249>:
                                                ASSERTeq()
                                                os_tls_get() <void *os_tls_get (os_tls_key_t key) at core/os_thread_posix.c:62>:
                                                    pthread_getspecific()
                                                heap_arena_thread_detach() <void heap_arena_thread_detach (struct arena *a) at libpmemobj/heap.c:232>:
                                                    util_fetch_and_sub64()
                                                ASSERTne()
                                                util_fetch_and_add64()
                                                os_tls_set() <int os_tls_set (os_tls_key_t key, const void *value) at core/os_thread_posix.c:53>:
                                                    pthread_setspecific()
                                            util_mutex_unlock()
                                        heap_global_arena_assign() <struct arena *heap_global_arena_assign (struct palloc_heap *heap) at libpmemobj/heap.c:348>:
                                            util_mutex_lock()
                                            ASSERTne()
                                            VEC_SIZE()
                                            VEC_FOREACH()
                                            LOG()
                                            util_mutex_unlock()
                                        ASSERT()
                                        ASSERTne()
                                    ASSERTne()
                                    VEC_ARR()
                                    bucket_acquire() <struct bucket *bucket_acquire (struct bucket_locked *b) at libpmemobj/bucket.c:117>:
                                        util_mutex_lock()
                                ASSERT()
                                VEC_FOREACH_BY_PTR()
                                heap_run_into_free_chunk() <void heap_run_into_free_chunk (struct palloc_heap *heap, struct bucket *bucket, struct memory_block *m) at libpmemobj/heap.c:697>:
                                    heap_get_chunk_hdr()
                                    STATS_SUB()
                                    util_mutex_lock()
                                    memblock_huge_init() <struct memory_block memblock_huge_init (struct palloc_heap *heap, uint32_t chunk_id, uint32_t zone_id, uint32_t size_idx) at libpmemobj/memblock.c:1329>:
                                        heap_get_chunk_hdr()
                                        VALGRIND_DO_MAKE_MEM_UNDEFINED()
                                        VALGRIND_ANNOTATE_NEW_MEMORY()
                                        chunk_get_chunk_hdr_value() <uint64_t chunk_get_chunk_hdr_value (uint16_t type, uint16_t flags, uint32_t size_idx) at libpmemobj/memblock.c:604>:
                                            COMPILE_ERROR_ON()
                                            memcpy()
                                        util_atomic_store_explicit64()
                                        pmemops_persist()
                                        huge_write_footer() <void huge_write_footer (struct chunk_header *hdr, uint32_t size_idx) at libpmemobj/memblock.c:1166>:
                                            VALGRIND_DO_MAKE_MEM_UNDEFINED()
                                            VALGRIND_SET_CLEAN()
                                        memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                            memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                                heap_get_chunk_hdr()
                                            memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                                heap_get_chunk_hdr()
                                                FATAL()
                                    heap_free_chunk_reuse() <int heap_free_chunk_reuse (struct palloc_heap *heap, struct bucket *bucket, struct memory_block *m) at libpmemobj/heap.c:674>:
                                        heap_coalesce_huge() <struct memory_block heap_coalesce_huge (struct palloc_heap *heap, struct bucket *b, const struct memory_block *m) at libpmemobj/heap.c:650>:
                                            heap_get_adjacent_free_block() <int heap_get_adjacent_free_block (struct palloc_heap *heap, const struct memory_block *in, struct memory_block *out, int prev) at libpmemobj/heap.c:582>:
                                                ZID_TO_ZONE()
                                                memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                                    memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                                        heap_get_chunk_hdr()
                                                    memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                                        heap_get_chunk_hdr()
                                                        FATAL()
                                            bucket_remove_block() <int bucket_remove_block (struct bucket *b, const struct memory_block *m) at libpmemobj/bucket.c:178>
                                            heap_coalesce() <struct memory_block heap_coalesce (struct palloc_heap *heap, const struct memory_block *blocks[], int n) at libpmemobj/heap.c:621>:
                                                ASSERTne()
                                                memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                                    memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                                        heap_get_chunk_hdr()
                                                    memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                                        heap_get_chunk_hdr()
                                                        FATAL()
                                        bucket_insert_block() <int bucket_insert_block (struct bucket *b, const struct memory_block *m) at libpmemobj/bucket.c:161>:
                                            VALGRIND_DO_MAKE_MEM_NOACCESS()
                                            VALGRIND_ANNOTATE_NEW_MEMORY()
                                    util_mutex_unlock()
                                heap_bucket_release() <void heap_bucket_release (struct bucket *b) at libpmemobj/heap.c:498>:
                                    bucket_release() <void bucket_release (struct bucket *b) at libpmemobj/bucket.c:127>:
                                        util_mutex_unlock()
                                VEC_DELETE()
                        out() <void out (const char *fmt, ...) at core/out.c:480>:
                            va_start()
                            out_common() <} void out_common (const char *file, int line, const char *func, int level, const char *suffix, const char *fmt, va_list ap) at core/out.c:334>
                            va_end()
                        heap_bucket_acquire() <struct bucket *heap_bucket_acquire (struct palloc_heap *heap, uint8_t class_id, uint16_t arena_id) at libpmemobj/heap.c:470>:
                            out() <void out (const char *fmt, ...) at core/out.c:480>:
                                va_start()
                                out_common() <} void out_common (const char *file, int line, const char *func, int level, const char *suffix, const char *fmt, va_list ap) at core/out.c:334>
                                va_end()
                            heap_thread_arena() <struct arena *heap_thread_arena (struct palloc_heap *heap) at libpmemobj/heap.c:414>:
                                os_tls_get() <void *os_tls_get (os_tls_key_t key) at core/os_thread_posix.c:62>:
                                    pthread_getspecific()
                                heap_thread_arena_assign() <struct arena *heap_thread_arena_assign (struct palloc_heap *heap) at libpmemobj/heap.c:381>:
                                    util_mutex_lock()
                                    ASSERTne()
                                    VEC_SIZE()
                                    VEC_FOREACH()
                                    LOG()
                                    heap_arena_thread_attach() <void heap_arena_thread_attach (struct palloc_heap *heap, struct arena *a) at libpmemobj/heap.c:249>:
                                        ASSERTeq()
                                        os_tls_get() <void *os_tls_get (os_tls_key_t key) at core/os_thread_posix.c:62>:
                                            pthread_getspecific()
                                        heap_arena_thread_detach() <void heap_arena_thread_detach (struct arena *a) at libpmemobj/heap.c:232>:
                                            util_fetch_and_sub64()
                                        ASSERTne()
                                        util_fetch_and_add64()
                                        os_tls_set() <int os_tls_set (os_tls_key_t key, const void *value) at core/os_thread_posix.c:53>:
                                            pthread_setspecific()
                                    util_mutex_unlock()
                                heap_global_arena_assign() <struct arena *heap_global_arena_assign (struct palloc_heap *heap) at libpmemobj/heap.c:348>:
                                    util_mutex_lock()
                                    ASSERTne()
                                    VEC_SIZE()
                                    VEC_FOREACH()
                                    LOG()
                                    util_mutex_unlock()
                                ASSERT()
                                ASSERTne()
                            ASSERTne()
                            VEC_ARR()
                            bucket_acquire() <struct bucket *bucket_acquire (struct bucket_locked *b) at libpmemobj/bucket.c:117>:
                                util_mutex_lock()
                        heap_populate_bucket() <int heap_populate_bucket (struct palloc_heap *heap, struct bucket *bucket) at libpmemobj/heap.c:850>:
                            util_atomic_store_explicit32()
                            ZID_TO_ZONE()
                            VALGRIND_ADD_TO_GLOBAL_TX_IGNORE()
                            heap_zone_init() <void heap_zone_init (struct palloc_heap *heap, uint32_t zone_id, uint32_t first_chunk_id) at libpmemobj/heap.c:559>:
                                ZID_TO_ZONE()
                                zone_calc_size_idx() <uint32_t zone_calc_size_idx (uint32_t zone_id, unsigned max_zone, size_t heap_size) at libpmemobj/heap.c:533>:
                                    ASSERT()
                                ASSERT()
                                memblock_huge_init() <struct memory_block memblock_huge_init (struct palloc_heap *heap, uint32_t chunk_id, uint32_t zone_id, uint32_t size_idx) at libpmemobj/memblock.c:1329>:
                                    heap_get_chunk_hdr()
                                    VALGRIND_DO_MAKE_MEM_UNDEFINED()
                                    VALGRIND_ANNOTATE_NEW_MEMORY()
                                    chunk_get_chunk_hdr_value() <uint64_t chunk_get_chunk_hdr_value (uint16_t type, uint16_t flags, uint32_t size_idx) at libpmemobj/memblock.c:604>:
                                        COMPILE_ERROR_ON()
                                        memcpy()
                                    util_atomic_store_explicit64()
                                    pmemops_persist()
                                    huge_write_footer() <void huge_write_footer (struct chunk_header *hdr, uint32_t size_idx) at libpmemobj/memblock.c:1166>:
                                        VALGRIND_DO_MAKE_MEM_UNDEFINED()
                                        VALGRIND_SET_CLEAN()
                                    memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                        memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                            heap_get_chunk_hdr()
                                        memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                            heap_get_chunk_hdr()
                                            FATAL()
                                pmemops_persist()
                            heap_reclaim_zone_garbage() <void heap_reclaim_zone_garbage (struct palloc_heap *heap, struct bucket *bucket, uint32_t zone_id) at libpmemobj/heap.c:775>:
                                ZID_TO_ZONE()
                                ASSERT()
                                memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                    memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                        heap_get_chunk_hdr()
                                    memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                        heap_get_chunk_hdr()
                                        FATAL()
                                heap_reclaim_run() <int heap_reclaim_run (struct palloc_heap *heap, struct memory_block *m, int startup) at libpmemobj/heap.c:733>:
                                    heap_get_chunk_run()
                                    heap_get_chunk_hdr()
                                    alloc_class_by_run() <struct alloc_class *alloc_class_by_run (struct alloc_class_collection *ac, size_t unit_size, uint16_t flags, uint32_t size_idx) at libpmemobj/alloc_class.c:594>:
                                        SIZE_TO_CLASS_MAP_INDEX()
                                        ASSERT()
                                        critnib_get() <void *critnib_get (struct critnib *c, uint64_t key) at libpmemobj/critnib.c:515>:
                                            load() <void load (void *src, void *dst) at libpmemobj/critnib.c:130>:
                                                util_atomic_load_explicit64()
                                            is_leaf() <inline bool is_leaf (struct critnib_node *n) at libpmemobj/critnib.c:150>:
                                            slice_index() <inline unsigned slice_index (uint64_t key, sh_t shift) at libpmemobj/critnib.c:178>:
                                            to_leaf() <inline struct critnib_leaf *to_leaf (struct critnib_node *n) at libpmemobj/critnib.c:159>:
                                        RUN_CLASS_KEY_PACK()
                                    recycler_element_new() <struct recycler_element recycler_element_new (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/recycler.c:122>:
                                        SUPPRESS_UNUSED()
                                        util_mutex_lock()
                                        util_mutex_unlock()
                                    ASSERTeq()
                                    STATS_INC()
                                    heap_get_recycler() <struct recycler *heap_get_recycler (struct palloc_heap *heap, size_t id, size_t nallocs) at libpmemobj/heap.c:106> (R):
                                        util_atomic_load_explicit64()
                                        recycler_new() <struct recycler *recycler_new (struct palloc_heap *heap, size_t nallocs, size_t *peak_arenas) at libpmemobj/recycler.c:74>:
                                            Malloc()
                                            ravl_new_sized() <struct ravl *ravl_new_sized (ravl_compare *compare, size_t data_size) at core/ravl.c:45>:
                                                Malloc()
                                                ERR()
                                            recycler_element_cmp() <int recycler_element_cmp (const void *lhs, const void *rhs) at libpmemobj/recycler.c:23>:
                                            memset()
                                            VEC_INIT()
                                            util_mutex_init()
                                            Free() <Free_func Free at core/alloc.c:91>
                                        util_bool_compare_and_swap64()
                                        recycler_delete() <void recycler_delete (struct recycler *r) at libpmemobj/recycler.c:107>:
                                            VEC_DELETE()
                                            util_mutex_destroy()
                                            ravl_delete() <void ravl_delete (struct ravl *ravl) at core/ravl.c:112>:
                                                ravl_delete_cb() <void ravl_delete_cb (struct ravl *ravl, ravl_cb cb, void *arg) at core/ravl.c:102>:
                                                    ravl_foreach_node() <void ravl_foreach_node (struct ravl_node *n, ravl_cb cb, void *arg, int free_node) at core/ravl.c:74> (R):
                                                        ravl_foreach_node() <void ravl_foreach_node (struct ravl_node *n, ravl_cb cb, void *arg, int free_node) at core/ravl.c:74> (recursive: see 1696)
                                                        Free() <Free_func Free at core/alloc.c:91>
                                                    Free() <Free_func Free at core/alloc.c:91>
                                            Free() <Free_func Free at core/alloc.c:91>
                                        heap_get_recycler() <struct recycler *heap_get_recycler (struct palloc_heap *heap, size_t id, size_t nallocs) at libpmemobj/heap.c:106> (recursive: see 1678)
                                    recycler_put() <int recycler_put (struct recycler *r, struct recycler_element element) at libpmemobj/recycler.c:154>:
                                        util_mutex_lock()
                                        ravl_emplace_copy() <int ravl_emplace_copy (struct ravl *ravl, const void *data) at core/ravl.c:384>:
                                            ravl_emplace() <int ravl_emplace (struct ravl *ravl, ravl_constr constr, const void *arg) at core/ravl.c:393>:
                                                LOG()
                                                ravl_new_node() <struct ravl_node *ravl_new_node (struct ravl *ravl, ravl_constr constr, const void *arg) at core/ravl.c:161>:
                                                    Malloc()
                                                    ERR()
                                                    ravl_node_insert_constructor() <void ravl_node_insert_constructor (void *data, size_t data_size, const void *arg) at core/ravl.c:139>:
                                                        SUPPRESS_UNUSED()
                                                        memcpy()
                                                ravl_data() <void *ravl_data (struct ravl_node *node) at core/ravl.c:571>:
                                                    memcpy()
                                                ravl_balance() <void ravl_balance (struct ravl *ravl, struct ravl_node *n) at core/ravl.c:337>:
                                                    ravl_node_is() <int ravl_node_is (struct ravl_node *n, int i, int j) at core/ravl.c:306>:
                                                        ravl_node_is_i_j() <int ravl_node_is_i_j (struct ravl_node *n, int i, int j) at core/ravl.c:296>:
                                                            ravl_node_rank_difference_parent() <int ravl_node_rank_difference_parent (struct ravl_node *p, struct ravl_node *n) at core/ravl.c:275>:
                                                                ravl_node_rank() <int ravl_node_rank (struct ravl_node *n) at core/ravl.c:261>:
                                                    ravl_node_promote() <void ravl_node_promote (struct ravl_node *n) at core/ravl.c:315>
                                                    ravl_node_sibling() <struct ravl_node *ravl_node_sibling (struct ravl_node *n) at core/ravl.c:209>:
                                                        ravl_node_slot_type() <enum ravl_slot_type ravl_node_slot_type (struct ravl_node *n) at core/ravl.c:196>:
                                                    ravl_node_rank_difference() <int ravl_node_rank_difference (struct ravl_node *n) at core/ravl.c:287>:
                                                        ravl_node_rank_difference_parent() <int ravl_node_rank_difference_parent (struct ravl_node *p, struct ravl_node *n) at core/ravl.c:275>:
                                                            ravl_node_rank() <int ravl_node_rank (struct ravl_node *n) at core/ravl.c:261>:
                                                    ravl_node_rank_difference_parent() <int ravl_node_rank_difference_parent (struct ravl_node *p, struct ravl_node *n) at core/ravl.c:275>:
                                                        ravl_node_rank() <int ravl_node_rank (struct ravl_node *n) at core/ravl.c:261>:
                                                    ravl_slot_opposite() <enum ravl_slot_type ravl_slot_opposite (enum ravl_slot_type t) at core/ravl.c:184>:
                                                        ASSERTne()
                                                    ravl_node_slot_type() <enum ravl_slot_type ravl_node_slot_type (struct ravl_node *n) at core/ravl.c:196>:
                                                    ravl_rotate() <void ravl_rotate (struct ravl *ravl, struct ravl_node *n) at core/ravl.c:237>:
                                                        ASSERTne()
                                                        ravl_node_ref() <struct ravl_node **ravl_node_ref (struct ravl *ravl, struct ravl_node *n) at core/ravl.c:223>:
                                                            ravl_node_slot_type() <enum ravl_slot_type ravl_node_slot_type (struct ravl_node *n) at core/ravl.c:196>:
                                                        ravl_node_slot_type() <enum ravl_slot_type ravl_node_slot_type (struct ravl_node *n) at core/ravl.c:196>:
                                                        ravl_slot_opposite() <enum ravl_slot_type ravl_slot_opposite (enum ravl_slot_type t) at core/ravl.c:184>:
                                                            ASSERTne()
                                                    ravl_node_demote() <void ravl_node_demote (struct ravl_node *n) at core/ravl.c:324>:
                                                        ASSERT()
                                                Free() <Free_func Free at core/alloc.c:91>
                                            ravl_node_copy_constructor() <void ravl_node_copy_constructor (void *data, size_t data_size, const void *arg) at core/ravl.c:152>:
                                                memcpy()
                                        util_mutex_unlock()
                                    ERR()
                                heap_run_into_free_chunk() <void heap_run_into_free_chunk (struct palloc_heap *heap, struct bucket *bucket, struct memory_block *m) at libpmemobj/heap.c:697>:
                                    heap_get_chunk_hdr()
                                    STATS_SUB()
                                    util_mutex_lock()
                                    memblock_huge_init() <struct memory_block memblock_huge_init (struct palloc_heap *heap, uint32_t chunk_id, uint32_t zone_id, uint32_t size_idx) at libpmemobj/memblock.c:1329>:
                                        heap_get_chunk_hdr()
                                        VALGRIND_DO_MAKE_MEM_UNDEFINED()
                                        VALGRIND_ANNOTATE_NEW_MEMORY()
                                        chunk_get_chunk_hdr_value() <uint64_t chunk_get_chunk_hdr_value (uint16_t type, uint16_t flags, uint32_t size_idx) at libpmemobj/memblock.c:604>:
                                            COMPILE_ERROR_ON()
                                            memcpy()
                                        util_atomic_store_explicit64()
                                        pmemops_persist()
                                        huge_write_footer() <void huge_write_footer (struct chunk_header *hdr, uint32_t size_idx) at libpmemobj/memblock.c:1166>:
                                            VALGRIND_DO_MAKE_MEM_UNDEFINED()
                                            VALGRIND_SET_CLEAN()
                                        memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                            memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                                heap_get_chunk_hdr()
                                            memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                                heap_get_chunk_hdr()
                                                FATAL()
                                    heap_free_chunk_reuse() <int heap_free_chunk_reuse (struct palloc_heap *heap, struct bucket *bucket, struct memory_block *m) at libpmemobj/heap.c:674>:
                                        heap_coalesce_huge() <struct memory_block heap_coalesce_huge (struct palloc_heap *heap, struct bucket *b, const struct memory_block *m) at libpmemobj/heap.c:650>:
                                            heap_get_adjacent_free_block() <int heap_get_adjacent_free_block (struct palloc_heap *heap, const struct memory_block *in, struct memory_block *out, int prev) at libpmemobj/heap.c:582>:
                                                ZID_TO_ZONE()
                                                memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                                    memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                                        heap_get_chunk_hdr()
                                                    memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                                        heap_get_chunk_hdr()
                                                        FATAL()
                                            bucket_remove_block() <int bucket_remove_block (struct bucket *b, const struct memory_block *m) at libpmemobj/bucket.c:178>
                                            heap_coalesce() <struct memory_block heap_coalesce (struct palloc_heap *heap, const struct memory_block *blocks[], int n) at libpmemobj/heap.c:621>:
                                                ASSERTne()
                                                memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                                    memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                                        heap_get_chunk_hdr()
                                                    memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                                        heap_get_chunk_hdr()
                                                        FATAL()
                                        bucket_insert_block() <int bucket_insert_block (struct bucket *b, const struct memory_block *m) at libpmemobj/bucket.c:161>:
                                            VALGRIND_DO_MAKE_MEM_NOACCESS()
                                            VALGRIND_ANNOTATE_NEW_MEMORY()
                                    util_mutex_unlock()
                                heap_free_chunk_reuse() <int heap_free_chunk_reuse (struct palloc_heap *heap, struct bucket *bucket, struct memory_block *m) at libpmemobj/heap.c:674>:
                                    heap_coalesce_huge() <struct memory_block heap_coalesce_huge (struct palloc_heap *heap, struct bucket *b, const struct memory_block *m) at libpmemobj/heap.c:650>:
                                        heap_get_adjacent_free_block() <int heap_get_adjacent_free_block (struct palloc_heap *heap, const struct memory_block *in, struct memory_block *out, int prev) at libpmemobj/heap.c:582>:
                                            ZID_TO_ZONE()
                                            memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                                memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                                    heap_get_chunk_hdr()
                                                memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                                    heap_get_chunk_hdr()
                                                    FATAL()
                                        bucket_remove_block() <int bucket_remove_block (struct bucket *b, const struct memory_block *m) at libpmemobj/bucket.c:178>
                                        heap_coalesce() <struct memory_block heap_coalesce (struct palloc_heap *heap, const struct memory_block *blocks[], int n) at libpmemobj/heap.c:621>:
                                            ASSERTne()
                                            memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                                memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                                    heap_get_chunk_hdr()
                                                memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                                    heap_get_chunk_hdr()
                                                    FATAL()
                                    bucket_insert_block() <int bucket_insert_block (struct bucket *b, const struct memory_block *m) at libpmemobj/bucket.c:161>:
                                        VALGRIND_DO_MAKE_MEM_NOACCESS()
                                        VALGRIND_ANNOTATE_NEW_MEMORY()
                        heap_bucket_release() <void heap_bucket_release (struct bucket *b) at libpmemobj/heap.c:498>:
                            bucket_release() <void bucket_release (struct bucket *b) at libpmemobj/bucket.c:127>:
                                util_mutex_unlock()
                        heap_get_bestfit_block() <int heap_get_bestfit_block (struct palloc_heap *heap, struct bucket *b, struct memory_block *m) at libpmemobj/heap.c:1210> (recursive: see 411)
                        heap_run_create() <int heap_run_create (struct palloc_heap *heap, struct bucket *b, struct memory_block *m) at libpmemobj/heap.c:1065>:
                            bucket_alloc_class() <struct alloc_class *bucket_alloc_class (struct bucket *b) at libpmemobj/bucket.c:152>
                            memblock_run_init() <struct memory_block memblock_run_init (struct palloc_heap *heap, uint32_t chunk_id, uint32_t zone_id, struct run_descriptor *rdsc) at libpmemobj/memblock.c:1361>:
                                ASSERTne()
                                ZID_TO_ZONE()
                                heap_get_chunk_run()
                                SIZEOF_RUN()
                                VALGRIND_DO_MAKE_MEM_UNDEFINED()
                                VALGRIND_ADD_TO_TX()
                                memset()
                                VALGRIND_REMOVE_FROM_TX()
                                pmemops_flush()
                                VALGRIND_ANNOTATE_NEW_MEMORY()
                                pmemops_persist()
                                ASSERT()
                                chunk_get_chunk_hdr_value() <uint64_t chunk_get_chunk_hdr_value (uint16_t type, uint16_t flags, uint32_t size_idx) at libpmemobj/memblock.c:604>:
                                    COMPILE_ERROR_ON()
                                    memcpy()
                                util_atomic_store_explicit64()
                                memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                    memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                        heap_get_chunk_hdr()
                                    memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                        heap_get_chunk_hdr()
                                        FATAL()
                            bucket_attach_run() <int bucket_attach_run (struct bucket *b, const struct memory_block *m) at libpmemobj/bucket.c:206>:
                                util_mutex_lock()
                                bucket_memblock_insert_block() <int bucket_memblock_insert_block (const struct memory_block *m, void *b) at libpmemobj/bucket.c:197>:
                                    bucket_insert_block() <int bucket_insert_block (struct bucket *b, const struct memory_block *m) at libpmemobj/bucket.c:161>:
                                        VALGRIND_DO_MAKE_MEM_NOACCESS()
                                        VALGRIND_ANNOTATE_NEW_MEMORY()
                                util_mutex_unlock()
                                util_fetch_and_add64()
                            STATS_INC()
                    ASSERT()
                    heap_split_block() <void heap_split_block (struct palloc_heap *heap, struct bucket *b, struct memory_block *m, uint32_t units) at libpmemobj/heap.c:1172>:
                        bucket_alloc_class() <struct alloc_class *bucket_alloc_class (struct bucket *b) at libpmemobj/bucket.c:152>
                        ASSERT()
                        memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                            memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                heap_get_chunk_hdr()
                            memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                heap_get_chunk_hdr()
                                FATAL()
                        bucket_insert_block() <int bucket_insert_block (struct bucket *b, const struct memory_block *m) at libpmemobj/bucket.c:161>:
                            VALGRIND_DO_MAKE_MEM_NOACCESS()
                            VALGRIND_ANNOTATE_NEW_MEMORY()
                        LOG()
                        memblock_huge_init() <struct memory_block memblock_huge_init (struct palloc_heap *heap, uint32_t chunk_id, uint32_t zone_id, uint32_t size_idx) at libpmemobj/memblock.c:1329>:
                            heap_get_chunk_hdr()
                            VALGRIND_DO_MAKE_MEM_UNDEFINED()
                            VALGRIND_ANNOTATE_NEW_MEMORY()
                            chunk_get_chunk_hdr_value() <uint64_t chunk_get_chunk_hdr_value (uint16_t type, uint16_t flags, uint32_t size_idx) at libpmemobj/memblock.c:604>:
                                COMPILE_ERROR_ON()
                                memcpy()
                            util_atomic_store_explicit64()
                            pmemops_persist()
                            huge_write_footer() <void huge_write_footer (struct chunk_header *hdr, uint32_t size_idx) at libpmemobj/memblock.c:1166>:
                                VALGRIND_DO_MAKE_MEM_UNDEFINED()
                                VALGRIND_SET_CLEAN()
                            memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                    heap_get_chunk_hdr()
                                memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                    heap_get_chunk_hdr()
                                    FATAL()
                alloc_prep_block() <int alloc_prep_block (struct palloc_heap *heap, const struct memory_block *m, palloc_constr constructor, void *arg, uint64_t extra_field, uint16_t object_flags, struct pobj_action_internal *out) at libpmemobj/palloc.c:112>:
                    VALGRIND_DO_MEMPOOL_ALLOC()
                    VALGRIND_DO_MAKE_MEM_UNDEFINED()
                    VALGRIND_ANNOTATE_NEW_MEMORY()
                    unlikely()
                    pmemops_memset()
                    VALGRIND_DO_MEMPOOL_FREE()
                    HEAP_PTR_TO_OFF()
                bucket_insert_block() <int bucket_insert_block (struct bucket *b, const struct memory_block *m) at libpmemobj/bucket.c:161>:
                    VALGRIND_DO_MAKE_MEM_NOACCESS()
                    VALGRIND_ANNOTATE_NEW_MEMORY()
                bucket_active_block() <struct memory_block_reserved *bucket_active_block (struct bucket *b) at libpmemobj/bucket.c:265>:
                util_fetch_and_add64()
                heap_bucket_release() <void heap_bucket_release (struct bucket *b) at libpmemobj/heap.c:498>:
                    bucket_release() <void bucket_release (struct bucket *b) at libpmemobj/bucket.c:127>:
                        util_mutex_unlock()
            VALGRIND_ADD_TO_TX()
            HEAP_OFF_TO_PTR()
            pmemops_memcpy()
            VALGRIND_REMOVE_FROM_TX()
            operation_add_entry() <int operation_add_entry (struct operation_context *ctx, void *ptr, uint64_t value, ulog_operation_type type) at libpmemobj/memops.c:411>:
                OBJ_OFF_IS_VALID()
                operation_add_typed_entry() <int operation_add_typed_entry (struct operation_context *ctx, void *ptr, uint64_t value, ulog_operation_type type, enum operation_log_type log_type) at libpmemobj/memops.c:362>:
                    Realloc()
                    SIZEOF_ULOG()
                    VECQ_CLEAR()
                    operation_try_merge_entry() <int operation_try_merge_entry (struct operation_context *ctx, void *ptr, uint64_t value, ulog_operation_type type) at libpmemobj/memops.c:318>:
                        OBJ_PTR_TO_OFF()
                        VECQ_FOREACH_REVERSE()
                        ulog_entry_offset() <uint64_t ulog_entry_offset (const struct ulog_entry_base *entry) at libpmemobj/ulog.c:68>:
                        ulog_entry_type() <ulog_operation_type ulog_entry_type (const struct ulog_entry_base *entry) at libpmemobj/ulog.c:59>:
                            ULOG_OPERATION_FROM_OFFSET()
                        operation_merge() <inline void operation_merge (struct ulog_entry_base *entry, uint64_t value, ulog_operation_type type) at libpmemobj/memops.c:288>:
                            ASSERT()
                    ulog_entry_val_create() <struct ulog_entry_val *ulog_entry_val_create (struct ulog *ulog, size_t offset, uint64_t *dest, uint64_t value, ulog_operation_type type, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:372>:
                        COMPILE_ERROR_ON()
                        ULOG_OPERATION()
                        pmemops_memcpy()
                    operation_merge_entry_add() <void operation_merge_entry_add (struct operation_context *ctx, struct ulog_entry_val *entry) at libpmemobj/memops.c:344>:
                        VECQ_SIZE()
                        VECQ_DEQUEUE()
                        VECQ_ENQUEUE()
                        LOG()
                    ulog_entry_size() <size_t ulog_entry_size (const struct ulog_entry_base *entry) at libpmemobj/ulog.c:77>:
                        ulog_entry_type() <ulog_operation_type ulog_entry_type (const struct ulog_entry_base *entry) at libpmemobj/ulog.c:59>:
                            ULOG_OPERATION_FROM_OFFSET()
                        CACHELINE_ALIGN()
                        ASSERT()
            palloc_exec_actions() <void palloc_exec_actions (struct palloc_heap *heap, struct operation_context *ctx, struct pobj_action_internal *actv, size_t actvcnt) at libpmemobj/palloc.c:526>:
                qsort()
                palloc_action_compare() <int palloc_action_compare (const void *lhs, const void *rhs) at libpmemobj/palloc.c:507>:
                ASSERTeq()
                util_mutex_lock()
                pmemops_drain()
                operation_process() <void operation_process (struct operation_context *ctx) at libpmemobj/memops.c:776>:
                    ulog_entry_type() <ulog_operation_type ulog_entry_type (const struct ulog_entry_base *entry) at libpmemobj/ulog.c:59>:
                        ULOG_OPERATION_FROM_OFFSET()
                    ulog_entry_apply() <void ulog_entry_apply (const struct ulog_entry_base *e, int persist, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:526>:
                        ulog_entry_type() <ulog_operation_type ulog_entry_type (const struct ulog_entry_base *entry) at libpmemobj/ulog.c:59>:
                            ULOG_OPERATION_FROM_OFFSET()
                        ulog_entry_offset() <uint64_t ulog_entry_offset (const struct ulog_entry_base *entry) at libpmemobj/ulog.c:68>:
                        f()
                        VALGRIND_ADD_TO_TX()
                        pmemops_memset()
                        pmemops_memcpy()
                        ASSERT()
                        VALGRIND_REMOVE_FROM_TX()
                    operation_process_persistent_redo() <void operation_process_persistent_redo (struct operation_context *ctx) at libpmemobj/memops.c:654>:
                        ASSERTeq()
                        ulog_store() <void ulog_store (struct ulog *dest, struct ulog *src, size_t nbytes, size_t ulog_base_nbytes, size_t ulog_total_capacity, struct ulog_next *next, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:288>:
                            MIN()
                            CACHELINE_ALIGN()
                            ASSERT()
                            ulog_by_offset() <struct ulog *ulog_by_offset (size_t offset, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:36>:
                                CACHELINE_ALIGN()
                            VEC_ARR()
                            ASSERTne()
                            IS_CACHELINE_ALIGNED()
                            VALGRIND_ADD_TO_TX()
                            pmemops_memcpy()
                            VALGRIND_REMOVE_FROM_TX()
                            pmemops_drain()
                            VEC_SIZE()
                            VEC_FRONT()
                            ulog_checksum() <int ulog_checksum (struct ulog *ulog, size_t ulog_base_bytes, int insert) at libpmemobj/ulog.c:275>:
                                util_checksum() <int util_checksum (void *addr, size_t len, uint64_t *csump, int insert, size_t skip_off) at core/util.c:178>:
                                    util_checksum_compute() <uint64_t util_checksum_compute (void *addr, size_t len, uint64_t *csump, size_t skip_off) at core/util.c:134>:
                                        abort()
                                        le32toh()
                                    htole64()
                                SIZEOF_ULOG()
                            SIZEOF_ULOG()
                        ulog_process() <void ulog_process (struct ulog *ulog, ulog_check_offset_fn check, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:786>:
                            SUPPRESS_UNUSED()
                            LOG()
                            ulog_check() <int ulog_check (struct ulog *ulog, ulog_check_offset_fn check, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:881>:
                                LOG()
                                ulog_foreach_entry() <int ulog_foreach_entry (struct ulog *ulog, ulog_entry_cb cb, void *arg, const struct pmem_ops *ops) at libpmemobj/ulog.c:180>
                                ulog_check_entry() <int ulog_check_entry (struct ulog_entry_base *e, void *arg, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:862>:
                                    ulog_entry_offset() <uint64_t ulog_entry_offset (const struct ulog_entry_base *entry) at libpmemobj/ulog.c:68>:
                                    check()
                                    LOG()
                            ulog_foreach_entry() <int ulog_foreach_entry (struct ulog *ulog, ulog_entry_cb cb, void *arg, const struct pmem_ops *ops) at libpmemobj/ulog.c:180>
                            ulog_process_entry() <int ulog_process_entry (struct ulog_entry_base *e, void *arg, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:591>:
                                SUPPRESS_UNUSED()
                                ulog_entry_apply() <void ulog_entry_apply (const struct ulog_entry_base *e, int persist, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:526>:
                                    ulog_entry_type() <ulog_operation_type ulog_entry_type (const struct ulog_entry_base *entry) at libpmemobj/ulog.c:59>:
                                        ULOG_OPERATION_FROM_OFFSET()
                                    ulog_entry_offset() <uint64_t ulog_entry_offset (const struct ulog_entry_base *entry) at libpmemobj/ulog.c:68>:
                                    f()
                                    VALGRIND_ADD_TO_TX()
                                    pmemops_memset()
                                    pmemops_memcpy()
                                    ASSERT()
                                    VALGRIND_REMOVE_FROM_TX()
                            pmemops_drain()
                        ulog_clobber() <void ulog_clobber (struct ulog *dest, struct ulog_next *next, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:694>:
                            memset()
                            VEC_SIZE()
                            VEC_FRONT()
                            pmemops_memcpy()
                    operation_process_persistent_undo() <void operation_process_persistent_undo (struct operation_context *ctx) at libpmemobj/memops.c:673>:
                        ASSERTeq()
                        ulog_process() <void ulog_process (struct ulog *ulog, ulog_check_offset_fn check, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:786>:
                            SUPPRESS_UNUSED()
                            LOG()
                            ulog_check() <int ulog_check (struct ulog *ulog, ulog_check_offset_fn check, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:881>:
                                LOG()
                                ulog_foreach_entry() <int ulog_foreach_entry (struct ulog *ulog, ulog_entry_cb cb, void *arg, const struct pmem_ops *ops) at libpmemobj/ulog.c:180>
                                ulog_check_entry() <int ulog_check_entry (struct ulog_entry_base *e, void *arg, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:862>:
                                    ulog_entry_offset() <uint64_t ulog_entry_offset (const struct ulog_entry_base *entry) at libpmemobj/ulog.c:68>:
                                    check()
                                    LOG()
                            ulog_foreach_entry() <int ulog_foreach_entry (struct ulog *ulog, ulog_entry_cb cb, void *arg, const struct pmem_ops *ops) at libpmemobj/ulog.c:180>
                            ulog_process_entry() <int ulog_process_entry (struct ulog_entry_base *e, void *arg, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:591>:
                                SUPPRESS_UNUSED()
                                ulog_entry_apply() <void ulog_entry_apply (const struct ulog_entry_base *e, int persist, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:526>:
                                    ulog_entry_type() <ulog_operation_type ulog_entry_type (const struct ulog_entry_base *entry) at libpmemobj/ulog.c:59>:
                                        ULOG_OPERATION_FROM_OFFSET()
                                    ulog_entry_offset() <uint64_t ulog_entry_offset (const struct ulog_entry_base *entry) at libpmemobj/ulog.c:68>:
                                    f()
                                    VALGRIND_ADD_TO_TX()
                                    pmemops_memset()
                                    pmemops_memcpy()
                                    ASSERT()
                                    VALGRIND_REMOVE_FROM_TX()
                            pmemops_drain()
                    ulog_process() <void ulog_process (struct ulog *ulog, ulog_check_offset_fn check, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:786>:
                        SUPPRESS_UNUSED()
                        LOG()
                        ulog_check() <int ulog_check (struct ulog *ulog, ulog_check_offset_fn check, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:881>:
                            LOG()
                            ulog_foreach_entry() <int ulog_foreach_entry (struct ulog *ulog, ulog_entry_cb cb, void *arg, const struct pmem_ops *ops) at libpmemobj/ulog.c:180>
                            ulog_check_entry() <int ulog_check_entry (struct ulog_entry_base *e, void *arg, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:862>:
                                ulog_entry_offset() <uint64_t ulog_entry_offset (const struct ulog_entry_base *entry) at libpmemobj/ulog.c:68>:
                                check()
                                LOG()
                        ulog_foreach_entry() <int ulog_foreach_entry (struct ulog *ulog, ulog_entry_cb cb, void *arg, const struct pmem_ops *ops) at libpmemobj/ulog.c:180>
                        ulog_process_entry() <int ulog_process_entry (struct ulog_entry_base *e, void *arg, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:591>:
                            SUPPRESS_UNUSED()
                            ulog_entry_apply() <void ulog_entry_apply (const struct ulog_entry_base *e, int persist, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:526>:
                                ulog_entry_type() <ulog_operation_type ulog_entry_type (const struct ulog_entry_base *entry) at libpmemobj/ulog.c:59>:
                                    ULOG_OPERATION_FROM_OFFSET()
                                ulog_entry_offset() <uint64_t ulog_entry_offset (const struct ulog_entry_base *entry) at libpmemobj/ulog.c:68>:
                                f()
                                VALGRIND_ADD_TO_TX()
                                pmemops_memset()
                                pmemops_memcpy()
                                ASSERT()
                                VALGRIND_REMOVE_FROM_TX()
                        pmemops_drain()
                util_mutex_unlock()
                operation_finish() <void operation_finish (struct operation_context *ctx, unsigned flags) at libpmemobj/memops.c:814>:
                    ASSERTne()
                    out() <void out (const char *fmt, ...) at core/out.c:480>:
                        va_start()
                        out_common() <} void out_common (const char *file, int line, const char *func, int level, const char *suffix, const char *fmt, va_list ap) at core/out.c:334>
                        va_end()
                    ulog_clobber_data() <int ulog_clobber_data (struct ulog *ulog_first, struct ulog_next *next, ulog_free_fn ulog_free, ulog_rm_user_buffer_fn user_buff_remove, const struct pmem_ops *p_ops, unsigned flags) at libpmemobj/ulog.c:713>:
                        ASSERTne()
                        ulog_inc_gen_num() <void ulog_inc_gen_num (struct ulog *ulog, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:605>:
                            VALGRIND_ADD_TO_TX()
                            pmemops_persist()
                            VALGRIND_SET_CLEAN()
                            VALGRIND_REMOVE_FROM_TX()
                        VEC_SIZE()
                        VEC_GET()
                        ulog_by_offset() <struct ulog *ulog_by_offset (size_t offset, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:36>:
                            CACHELINE_ALIGN()
                        ulog_free_next() <int ulog_free_next (struct ulog *u, const struct pmem_ops *p_ops, ulog_free_fn ulog_free, ulog_rm_user_buffer_fn user_buff_remove, uint64_t flags) at libpmemobj/ulog.c:625>:
                            VEC()
                            VEC_INIT()
                            ulog_by_offset() <struct ulog *ulog_by_offset (size_t offset, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:36>:
                                CACHELINE_ALIGN()
                            pmemops_persist()
                            VEC_PUSH_BACK()
                            LOG()
                            out() <void out (const char *fmt, ...) at core/out.c:480>:
                                va_start()
                                out_common() <} void out_common (const char *file, int line, const char *func, int level, const char *suffix, const char *fmt, va_list ap) at core/out.c:334>
                                va_end()
                            VEC_FOREACH_REVERSE()
                            VEC_DELETE()
                    operation_user_buffer_remove() <int operation_user_buffer_remove (void *base, void *addr) at libpmemobj/memops.c:242>:
                        util_mutex_lock()
                        ravl_find() <struct ravl_node *ravl_find (struct ravl *ravl, const void *data, enum ravl_predicate flags) at core/ravl.c:524>:
                            LOG()
                            ravl_data() <void *ravl_data (struct ravl_node *node) at core/ravl.c:571>:
                                memcpy()
                            ravl_predicate_holds() <int ravl_predicate_holds (int result, struct ravl_node **ret, struct ravl_node *n, enum ravl_predicate flags) at core/ravl.c:489>:
                                ravl_node_successor() <struct ravl_node *ravl_node_successor (struct ravl_node *n) at core/ravl.c:465>:
                                    ravl_node_cessor() <struct ravl_node *ravl_node_cessor (struct ravl_node *n, enum ravl_slot_type t) at core/ravl.c:443>:
                                        ravl_node_type_most() <struct ravl_node *ravl_node_type_most (struct ravl_node *n, enum ravl_slot_type t) at core/ravl.c:430>:
                                        ravl_slot_opposite() <enum ravl_slot_type ravl_slot_opposite (enum ravl_slot_type t) at core/ravl.c:184>:
                                            ASSERTne()
                                ravl_node_predecessor() <struct ravl_node *ravl_node_predecessor (struct ravl_node *n) at core/ravl.c:476>:
                                    ravl_node_cessor() <struct ravl_node *ravl_node_cessor (struct ravl_node *n, enum ravl_slot_type t) at core/ravl.c:443>:
                                        ravl_node_type_most() <struct ravl_node *ravl_node_type_most (struct ravl_node *n, enum ravl_slot_type t) at core/ravl.c:430>:
                                        ravl_slot_opposite() <enum ravl_slot_type ravl_slot_opposite (enum ravl_slot_type t) at core/ravl.c:184>:
                                            ASSERTne()
                        ASSERTne()
                        ravl_remove() <void ravl_remove (struct ravl *ravl, struct ravl_node *n) at core/ravl.c:545> (R):
                            LOG()
                            ravl_node_successor() <struct ravl_node *ravl_node_successor (struct ravl_node *n) at core/ravl.c:465>:
                                ravl_node_cessor() <struct ravl_node *ravl_node_cessor (struct ravl_node *n, enum ravl_slot_type t) at core/ravl.c:443>:
                                    ravl_node_type_most() <struct ravl_node *ravl_node_type_most (struct ravl_node *n, enum ravl_slot_type t) at core/ravl.c:430>:
                                    ravl_slot_opposite() <enum ravl_slot_type ravl_slot_opposite (enum ravl_slot_type t) at core/ravl.c:184>:
                                        ASSERTne()
                            memcpy()
                            ravl_remove() <void ravl_remove (struct ravl *ravl, struct ravl_node *n) at core/ravl.c:545> (recursive: see 2103)
                            ravl_node_ref() <struct ravl_node **ravl_node_ref (struct ravl *ravl, struct ravl_node *n) at core/ravl.c:223>:
                                ravl_node_slot_type() <enum ravl_slot_type ravl_node_slot_type (struct ravl_node *n) at core/ravl.c:196>:
                            Free() <Free_func Free at core/alloc.c:91>
                        util_mutex_unlock()
                    ulog_free_next() <int ulog_free_next (struct ulog *u, const struct pmem_ops *p_ops, ulog_free_fn ulog_free, ulog_rm_user_buffer_fn user_buff_remove, uint64_t flags) at libpmemobj/ulog.c:625>:
                        VEC()
                        VEC_INIT()
                        ulog_by_offset() <struct ulog *ulog_by_offset (size_t offset, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:36>:
                            CACHELINE_ALIGN()
                        pmemops_persist()
                        VEC_PUSH_BACK()
                        LOG()
                        out() <void out (const char *fmt, ...) at core/out.c:480>:
                            va_start()
                            out_common() <} void out_common (const char *file, int line, const char *func, int level, const char *suffix, const char *fmt, va_list ap) at core/out.c:334>
                            va_end()
                        VEC_FOREACH_REVERSE()
                        VEC_DELETE()
                    ulog_capacity() <size_t ulog_capacity (struct ulog *ulog, size_t ulog_base_bytes, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:206>:
                        ulog_next() <struct ulog *ulog_next (struct ulog *ulog, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:50>:
                            ulog_by_offset() <struct ulog *ulog_by_offset (size_t offset, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:36>:
                                CACHELINE_ALIGN()
                    VEC_CLEAR()
                    ulog_rebuild_next_vec() <void ulog_rebuild_next_vec (struct ulog *ulog, struct ulog_next *next, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:223>:
                        VEC_PUSH_BACK()
                        ulog_next() <struct ulog *ulog_next (struct ulog *ulog, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:50>:
                            ulog_by_offset() <struct ulog *ulog_by_offset (size_t offset, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:36>:
                                CACHELINE_ALIGN()
        constructor_alloc() <int constructor_alloc (void *ctx, void *ptr, size_t usable_size, void *arg) at libpmemobj/obj.c:1691>:
            LOG()
            ASSERTne()
            pmemops_memset()
        CLASS_ID_FROM_FLAG()
        ARENA_ID_FROM_FLAG()
        pmalloc_operation_release() <void pmalloc_operation_release (PMEMobjpool *pop) at libpmemobj/pmalloc.c:83>:
            lane_release() <void lane_release (PMEMobjpool *pop) at libpmemobj/lane.c:546>:
                get_lane_info_record() <inline struct lane_info *get_lane_info_record (PMEMobjpool *pop) at libpmemobj/lane.c:466>:
                    likely()
                    unlikely()
                    lane_info_ht_boot() <inline void lane_info_ht_boot (void) at libpmemobj/lane.c:74>:
                        lane_info_create() <inline void lane_info_create (void) at libpmemobj/lane.c:39>:
                            critnib_new() <struct critnib *critnib_new (void) at libpmemobj/critnib.c:187>:
                                Zalloc() <void *Zalloc (size_t sz) at core/alloc.c:98>:
                                    Malloc()
                                    memset()
                                util_mutex_init()
                                VALGRIND_HG_DRD_DISABLE_CHECKING()
                            FATAL()
                        os_tls_set() <int os_tls_set (os_tls_key_t key, const void *value) at core/os_thread_posix.c:53>:
                            pthread_setspecific()
                        FATAL()
                    critnib_get() <void *critnib_get (struct critnib *c, uint64_t key) at libpmemobj/critnib.c:515>:
                        load() <void load (void *src, void *dst) at libpmemobj/critnib.c:130>:
                            util_atomic_load_explicit64()
                        is_leaf() <inline bool is_leaf (struct critnib_node *n) at libpmemobj/critnib.c:150>:
                        slice_index() <inline unsigned slice_index (uint64_t key, sh_t shift) at libpmemobj/critnib.c:178>:
                        to_leaf() <inline struct critnib_leaf *to_leaf (struct critnib_node *n) at libpmemobj/critnib.c:159>:
                    Malloc()
                    FATAL()
                    critnib_insert() <int critnib_insert (struct critnib *c, uint64_t key, void *value) at libpmemobj/critnib.c:340>:
                        util_mutex_lock()
                        alloc_leaf() <struct critnib_leaf *alloc_leaf (struct critnib *__restrict c) at libpmemobj/critnib.c:311>:
                            Malloc()
                            ERR()
                            VALGRIND_ANNOTATE_NEW_MEMORY()
                        util_mutex_unlock()
                        VALGRIND_HG_DRD_DISABLE_CHECKING()
                        is_leaf() <inline bool is_leaf (struct critnib_node *n) at libpmemobj/critnib.c:150>:
                        path_mask() <inline uint64_t path_mask (sh_t shift) at libpmemobj/critnib.c:169>:
                        slice_index() <inline unsigned slice_index (uint64_t key, sh_t shift) at libpmemobj/critnib.c:178>:
                        store() <void store (void *dst, void *src) at libpmemobj/critnib.c:140>:
                            util_atomic_store_explicit64()
                        to_leaf() <inline struct critnib_leaf *to_leaf (struct critnib_node *n) at libpmemobj/critnib.c:159>:
                        ASSERT()
                        free_leaf() <void free_leaf (struct critnib *__restrict c, struct critnib_leaf *__restrict k) at libpmemobj/critnib.c:298>
                        util_mssb_index64()
                        alloc_node() <struct critnib_node *alloc_node (struct critnib *__restrict c) at libpmemobj/critnib.c:274>:
                            Malloc()
                            ERR()
                            VALGRIND_ANNOTATE_NEW_MEMORY()
                ASSERTne()
                unlikely()
                FATAL()
                util_bool_compare_and_swap64()
    PMEMOBJ_API_END()
pmemobj_cancel() <void pmemobj_cancel (PMEMobjpool *pop, struct pobj_action *actv, size_t actvcnt) at libpmemobj/obj.c:2632>:
    PMEMOBJ_API_START()
    palloc_cancel() <void palloc_cancel (struct palloc_heap *heap, struct pobj_action *actv, size_t actvcnt) at libpmemobj/palloc.c:648>:
    PMEMOBJ_API_END()
pmemobj_close() <void pmemobj_close (PMEMobjpool *pop) at libpmemobj/obj.c:1526>:
    LOG()
    PMEMOBJ_API_START()
    os_mutex_lock() <int os_mutex_lock (os_mutex_t *__restrict mutex) at core/os_thread_posix.c:90>:
        pthread_mutex_lock()
    critnib_remove() <void *critnib_remove (struct critnib *c, uint64_t key) at libpmemobj/critnib.c:429>:
        util_mutex_lock()
        util_fetch_and_add64()
        free_node() <void free_node (struct critnib *__restrict c, struct critnib_node *__restrict n) at libpmemobj/critnib.c:260>:
            ASSERT()
            is_leaf() <inline bool is_leaf (struct critnib_node *n) at libpmemobj/critnib.c:150>:
        free_leaf() <void free_leaf (struct critnib *__restrict c, struct critnib_leaf *__restrict k) at libpmemobj/critnib.c:298>
        is_leaf() <inline bool is_leaf (struct critnib_node *n) at libpmemobj/critnib.c:150>:
        to_leaf() <inline struct critnib_leaf *to_leaf (struct critnib_node *n) at libpmemobj/critnib.c:159>:
        store() <void store (void *dst, void *src) at libpmemobj/critnib.c:140>:
            util_atomic_store_explicit64()
        slice_index() <inline unsigned slice_index (uint64_t key, sh_t shift) at libpmemobj/critnib.c:178>:
        ASSERTne()
        util_mutex_unlock()
    ERR()
    VALGRIND_HG_DRD_DISABLE_CHECKING()
    obj_pool_cleanup() <void obj_pool_cleanup (PMEMobjpool *pop) at libpmemobj/obj.c:1502>:
        LOG()
        ravl_delete() <void ravl_delete (struct ravl *ravl) at core/ravl.c:112>:
            ravl_delete_cb() <void ravl_delete_cb (struct ravl *ravl, ravl_cb cb, void *arg) at core/ravl.c:102>:
                ravl_foreach_node() <void ravl_foreach_node (struct ravl_node *n, ravl_cb cb, void *arg, int free_node) at core/ravl.c:74> (R):
                    ravl_foreach_node() <void ravl_foreach_node (struct ravl_node *n, ravl_cb cb, void *arg, int free_node) at core/ravl.c:74> (recursive: see 2226)
                    Free() <Free_func Free at core/alloc.c:91>
                Free() <Free_func Free at core/alloc.c:91>
        util_mutex_destroy()
        stats_delete() <void stats_delete (PMEMobjpool *pop, struct stats *s) at libpmemobj/stats.c:142>:
            pmemops_persist()
            Free() <Free_func Free at core/alloc.c:91>
        tx_params_delete() <void tx_params_delete (struct tx_parameters *tx_params) at libpmemobj/tx.c:124>:
            Free() <Free_func Free at core/alloc.c:91>
        ctl_delete() <void ctl_delete (struct ctl *c) at common/ctl.c:490>:
            Free() <Free_func Free at core/alloc.c:91>
        obj_pool_lock_cleanup() <void obj_pool_lock_cleanup (PMEMobjpool *pop) at libpmemobj/obj.c:1461>:
            LOG()
            os_mutex_destroy() <int os_mutex_destroy (os_mutex_t *__restrict mutex) at core/os_thread_posix.c:81>:
                pthread_mutex_destroy()
            os_rwlock_destroy() <int os_rwlock_destroy (os_rwlock_t *__restrict rwlock) at core/os_thread_posix.c:137>:
                pthread_rwlock_destroy()
            os_cond_destroy() <int os_cond_destroy (os_cond_t *__restrict cond) at core/os_thread_posix.c:267>:
                pthread_cond_destroy()
        lane_section_cleanup() <int lane_section_cleanup (PMEMobjpool *pop) at libpmemobj/lane.c:398>:
            pmalloc_cleanup() <int pmalloc_cleanup (PMEMobjpool *pop) at libpmemobj/pmalloc.c:205>:
                palloc_heap_cleanup() <void palloc_heap_cleanup (struct palloc_heap *heap) at libpmemobj/palloc.c:1299>:
                    heap_cleanup() <void heap_cleanup (struct palloc_heap *heap) at libpmemobj/heap.c:1741>:
                        alloc_class_collection_delete() <void alloc_class_collection_delete (struct alloc_class_collection *ac) at libpmemobj/alloc_class.c:516>:
                            LOG()
                            alloc_class_delete() <void alloc_class_delete (struct alloc_class_collection *ac, struct alloc_class *c) at libpmemobj/alloc_class.c:254>:
                                LOG()
                                Free() <Free_func Free at core/alloc.c:91>
                            critnib_delete() <void critnib_delete (struct critnib *c) at libpmemobj/critnib.c:224>:
                                delete_node() <void delete_node (struct critnib_node *__restrict n) at libpmemobj/critnib.c:206>:
                                    is_leaf() <inline bool is_leaf (struct critnib_node *n) at libpmemobj/critnib.c:150>:
                                    Free() <Free_func Free at core/alloc.c:91>
                                    to_leaf() <inline struct critnib_leaf *to_leaf (struct critnib_node *n) at libpmemobj/critnib.c:159>:
                                util_mutex_destroy()
                                Free() <Free_func Free at core/alloc.c:91>
                            Free() <Free_func Free at core/alloc.c:91>
                        arena_thread_assignment_fini() <void arena_thread_assignment_fini (struct arenas_thread_assignment *assignment) at libpmemobj/heap.c:318>:
                            os_tls_key_delete() <int os_tls_key_delete (os_tls_key_t key) at core/os_thread_posix.c:44>:
                                pthread_key_delete()
                            ASSERT()
                        bucket_locked_delete() <void bucket_locked_delete (struct bucket_locked *b) at libpmemobj/bucket.c:106>:
                            bucket_fini() <void bucket_fini (struct bucket *b) at libpmemobj/bucket.c:70>:
                                Free() <Free_func Free at core/alloc.c:91>
                            util_mutex_destroy()
                            Free() <Free_func Free at core/alloc.c:91>
                        VEC_FOREACH()
                        heap_arena_delete() <void heap_arena_delete (struct arena *arena) at libpmemobj/heap.c:169>:
                            bucket_locked_delete() <void bucket_locked_delete (struct bucket_locked *b) at libpmemobj/bucket.c:106>:
                                bucket_fini() <void bucket_fini (struct bucket *b) at libpmemobj/bucket.c:70>:
                                    Free() <Free_func Free at core/alloc.c:91>
                                util_mutex_destroy()
                                Free() <Free_func Free at core/alloc.c:91>
                            Free() <Free_func Free at core/alloc.c:91>
                        util_mutex_destroy()
                        heap_arenas_fini() <void heap_arenas_fini (struct arenas *arenas) at libpmemobj/heap.c:150>:
                            util_mutex_destroy()
                            VEC_DELETE()
                        VALGRIND_DO_DESTROY_MEMPOOL()
                        Free() <Free_func Free at core/alloc.c:91>
        lane_cleanup() <void lane_cleanup (PMEMobjpool *pop) at libpmemobj/lane.c:335>:
            lane_destroy() <void lane_destroy (PMEMobjpool *pop, struct lane *lane) at libpmemobj/lane.c:246>:
                SUPPRESS_UNUSED()
                operation_delete() <void operation_delete (struct operation_context *ctx) at libpmemobj/memops.c:229>:
                    VECQ_DELETE()
                    VEC_DELETE()
                    Free() <Free_func Free at core/alloc.c:91>
            Free() <Free_func Free at core/alloc.c:91>
            lane_info_cleanup() <inline void lane_info_cleanup (PMEMobjpool *pop) at libpmemobj/lane.c:123>:
                unlikely()
                critnib_remove() <void *critnib_remove (struct critnib *c, uint64_t key) at libpmemobj/critnib.c:429>:
                    util_mutex_lock()
                    util_fetch_and_add64()
                    free_node() <void free_node (struct critnib *__restrict c, struct critnib_node *__restrict n) at libpmemobj/critnib.c:260>:
                        ASSERT()
                        is_leaf() <inline bool is_leaf (struct critnib_node *n) at libpmemobj/critnib.c:150>:
                    free_leaf() <void free_leaf (struct critnib *__restrict c, struct critnib_leaf *__restrict k) at libpmemobj/critnib.c:298>
                    is_leaf() <inline bool is_leaf (struct critnib_node *n) at libpmemobj/critnib.c:150>:
                    to_leaf() <inline struct critnib_leaf *to_leaf (struct critnib_node *n) at libpmemobj/critnib.c:159>:
                    store() <void store (void *dst, void *src) at libpmemobj/critnib.c:140>:
                        util_atomic_store_explicit64()
                    slice_index() <inline unsigned slice_index (uint64_t key, sh_t shift) at libpmemobj/critnib.c:178>:
                    ASSERTne()
                    util_mutex_unlock()
                likely()
                Free() <Free_func Free at core/alloc.c:91>
        util_poolset_close() <void util_poolset_close (struct pool_set *set, enum del_parts_mode del) at common/set.c:383>:
            LOG()
            util_replica_close() <int util_replica_close (struct pool_set *set, unsigned repidx) at common/set.c:2136>:
                LOG()
                PART()
                RANGE_RW()
                util_replica_deep_drain() <int util_replica_deep_drain (const void *addr, size_t len, struct pool_set *set, unsigned replica_id) at common/set.c:3314>:
                    LOG()
                    util_replica_deep_common() <int util_replica_deep_common (const void *addr, size_t len, struct pool_set *set, unsigned replica_id, int flush) at common/set.c:3247>:
                        LOG()
                        ASSERT()
                        os_part_deep_common() <int os_part_deep_common (struct pool_replica *rep, unsigned partidx, void *addr, size_t len, int flush) at common/os_deep_linux.c:108>:
                            LOG()
                            pmem_msync()
                            pmem_deep_flush()
                            pmem_drain()
                            util_ddax_region_find() <int util_ddax_region_find (const char *path, unsigned *region_id) at common/file_posix.c:150>:
                                LOG()
                                os_stat() <int os_stat (const char *pathname, os_stat_t *buf) at core/os_posix.c:79>:
                                    stat()
                                ERR()
                                pmem2_get_type_from_stat() <int pmem2_get_type_from_stat (const os_stat_t *st, enum pmem2_file_type *type) at libpmem2/pmem2_utils_linux.c:23>:
                                    S_ISREG()
                                    S_ISDIR()
                                    S_ISCHR()
                                    ERR()
                                    util_snprintf() <int util_snprintf (char *str, size_t size, const char *format, ...) at core/util.c:434>:
                                        va_start()
                                        vsnprintf()
                                        va_end()
                                    os_major()
                                    os_minor()
                                    ASSERTinfo()
                                    LOG()
                                    realpath()
                                    strrchr()
                                    strcmp()
                                pmem2_err_to_errno() <int pmem2_err_to_errno (int err) at libpmem2/pmem2_utils.c:67>:
                                    FATAL()
                                pmem2_get_region_id() <int pmem2_get_region_id (const struct pmem2_source *src, unsigned *region_id) at libpmem2/region_namespace_ndctl.c:227>:
                                    LOG()
                                    ndctl_new()
                                    ERR()
                                    pmem2_region_namespace() <int pmem2_region_namespace (struct ndctl_ctx *ctx, const struct pmem2_source *src, struct ndctl_region **pregion, struct ndctl_namespace **pndns) at libpmem2/region_namespace_ndctl.c:131>:
                                        LOG()
                                        ERR()
                                        FOREACH_BUS_REGION_NAMESPACE()
                                        ndctl_namespace_get_dax()
                                        ASSERTeq()
                                        ndctl_dax_get_daxctl_region()
                                        daxctl_dev_foreach()
                                        daxctl_dev_get_devname()
                                        ndctl_match_devdax() <int ndctl_match_devdax (dev_t st_rdev, const char *devname) at libpmem2/region_namespace_ndctl.c:26>:
                                            LOG()
                                            stat()
                                            util_snprintf() <int util_snprintf (char *str, size_t size, const char *format, ...) at core/util.c:434>:
                                                va_start()
                                                vsnprintf()
                                                va_end()
                                            ERR()
                                            os_stat() <int os_stat (const char *pathname, os_stat_t *buf) at core/os_posix.c:79>:
                                                stat()
                                        ndctl_namespace_get_btt()
                                        ndctl_btt_get_block_device()
                                        ndctl_namespace_get_pfn()
                                        ndctl_pfn_get_block_device()
                                        ndctl_namespace_get_block_device()
                                        ndctl_match_fsdax() <int ndctl_match_fsdax (dev_t st_dev, const char *devname) at libpmem2/region_namespace_ndctl.c:64>:
                                            LOG()
                                            util_snprintf() <int util_snprintf (char *str, size_t size, const char *format, ...) at core/util.c:434>:
                                                va_start()
                                                vsnprintf()
                                                va_end()
                                            ERR()
                                            major()
                                            minor()
                                            os_open() <int os_open (const char *pathname, int flags, ...) at core/os_posix.c:29>:
                                                va_start()
                                                va_arg()
                                                va_end()
                                                open()
                                            read()
                                            os_close()
                                            strcmp()
                                    ndctl_region_get_id()
                                    ndctl_unref()
                            pmem2_deep_flush_write() <int pmem2_deep_flush_write (unsigned region_id) at libpmem2/deep_flush_linux.c:27>:
                                LOG()
                                util_snprintf() <int util_snprintf (char *str, size_t size, const char *format, ...) at core/util.c:434>:
                                    va_start()
                                    vsnprintf()
                                    va_end()
                                ERR()
                                os_open() <int os_open (const char *pathname, int flags, ...) at core/os_posix.c:29>:
                                    va_start()
                                    va_arg()
                                    va_end()
                                    open()
                                read()
                                os_close()
                            MIN()
                shutdown_state_clear_dirty() <void shutdown_state_clear_dirty (struct shutdown_state *sds, struct pool_replica *rep) at common/shutdown_state.c:143>:
                    LOG()
                    FLUSH_SDS()
                    shutdown_state_checksum() <void shutdown_state_checksum (struct shutdown_state *sds, struct pool_replica *rep) at common/shutdown_state.c:27>:
                        LOG()
                        util_checksum() <int util_checksum (void *addr, size_t len, uint64_t *csump, int insert, size_t skip_off) at core/util.c:178>:
                            util_checksum_compute() <uint64_t util_checksum_compute (void *addr, size_t len, uint64_t *csump, size_t skip_off) at core/util.c:134>:
                                abort()
                                le32toh()
                            htole64()
                        FLUSH_SDS()
                util_unmap_hdr() <void util_unmap_hdr (struct pool_set_part *part) at common/set.c:211>:
                    LOG()
                    VALGRIND_REMOVE_PMEM_MAPPING()
                    munmap()
                    FATAL()
                util_unmap_part() <int util_unmap_part (struct pool_set_part *part) at common/set.c:274>:
                    LOG()
                    VALGRIND_REMOVE_PMEM_MAPPING()
                    munmap()
                    ERR()
            util_replica_close_local() <int util_replica_close_local (struct pool_replica *rep, unsigned repn, enum del_parts_mode del) at common/set.c:356>:
                os_close()
                LOG()
                util_unlink() <int util_unlink (const char *path) at common/file.c:513>:
                    LOG()
                    util_file_get_type() <enum file_type util_file_get_type (const char *path) at common/file.c:106>:
                        LOG()
                        ERR()
                        util_file_exists() <int util_file_exists (const char *path) at common/file.c:32>:
                            LOG()
                            os_access() <int os_access (const char *pathname, int mode) at core/os_posix.c:97>:
                                access()
                            ERR()
                        os_stat() <int os_stat (const char *pathname, os_stat_t *buf) at core/os_posix.c:79>:
                            stat()
                        util_stat_get_type() <enum file_type util_stat_get_type (const os_stat_t *st) at common/file.c:62>:
                            pmem2_get_type_from_stat() <int pmem2_get_type_from_stat (const os_stat_t *st, enum pmem2_file_type *type) at libpmem2/pmem2_utils_linux.c:23>:
                                S_ISREG()
                                S_ISDIR()
                                S_ISCHR()
                                ERR()
                                util_snprintf() <int util_snprintf (char *str, size_t size, const char *format, ...) at core/util.c:434>:
                                    va_start()
                                    vsnprintf()
                                    va_end()
                                os_major()
                                os_minor()
                                ASSERTinfo()
                                LOG()
                                realpath()
                                strrchr()
                                strcmp()
                            pmem2_err_to_errno() <int pmem2_err_to_errno (int err) at libpmem2/pmem2_utils.c:67>:
                                FATAL()
                            ASSERTinfo()
                    util_file_zero() <int util_file_zero (const char *path, os_off_t off, size_t len) at common/file.c:234>:
                        LOG()
                        os_open() <int os_open (const char *pathname, int flags, ...) at core/os_posix.c:29>:
                            va_start()
                            va_arg()
                            va_end()
                            open()
                        ERR()
                        util_fd_get_size() <ssize_t util_fd_get_size (int fd) at common/file.c:157>:
                            LOG()
                            pmem2_source_from_fd() <int pmem2_source_from_fd (struct pmem2_source **src, int fd) at libpmem2/source_posix.c:19>:
                                PMEM2_ERR_CLR()
                                fcntl()
                                ERR()
                                os_fstat()
                                pmem2_get_type_from_stat() <int pmem2_get_type_from_stat (const os_stat_t *st, enum pmem2_file_type *type) at libpmem2/pmem2_utils_linux.c:23>:
                                    S_ISREG()
                                    S_ISDIR()
                                    S_ISCHR()
                                    ERR()
                                    util_snprintf() <int util_snprintf (char *str, size_t size, const char *format, ...) at core/util.c:434>:
                                        va_start()
                                        vsnprintf()
                                        va_end()
                                    os_major()
                                    os_minor()
                                    ASSERTinfo()
                                    LOG()
                                    realpath()
                                    strrchr()
                                    strcmp()
                                pmem2_malloc() <void *pmem2_malloc (size_t size, int *err) at libpmem2/pmem2_utils.c:19>:
                                    Malloc()
                                    ERR()
                                ASSERTne()
                            pmem2_err_to_errno() <int pmem2_err_to_errno (int err) at libpmem2/pmem2_utils.c:67>:
                                FATAL()
                            pmem2_source_size() <int pmem2_source_size (const struct pmem2_source *src, size_t *size) at libpmem2/source_posix.c:90>:
                                LOG()
                                PMEM2_ERR_CLR()
                                ASSERT()
                                os_fstat()
                                ERR()
                                pmem2_device_dax_size() <int pmem2_device_dax_size (const struct pmem2_source *src, size_t *size) at libpmem2/pmem2_utils_ndctl.c:58>:
                                    ndctl_new()
                                    ERR()
                                    pmem2_region_namespace() <int pmem2_region_namespace (struct ndctl_ctx *ctx, const struct pmem2_source *src, struct ndctl_region **pregion, struct ndctl_namespace **pndns) at libpmem2/region_namespace_ndctl.c:131>:
                                        LOG()
                                        ERR()
                                        FOREACH_BUS_REGION_NAMESPACE()
                                        ndctl_namespace_get_dax()
                                        ASSERTeq()
                                        ndctl_dax_get_daxctl_region()
                                        daxctl_dev_foreach()
                                        daxctl_dev_get_devname()
                                        ndctl_match_devdax() <int ndctl_match_devdax (dev_t st_rdev, const char *devname) at libpmem2/region_namespace_ndctl.c:26>:
                                            LOG()
                                            stat()
                                            util_snprintf() <int util_snprintf (char *str, size_t size, const char *format, ...) at core/util.c:434>:
                                                va_start()
                                                vsnprintf()
                                                va_end()
                                            ERR()
                                            os_stat() <int os_stat (const char *pathname, os_stat_t *buf) at core/os_posix.c:79>:
                                                stat()
                                        ndctl_namespace_get_btt()
                                        ndctl_btt_get_block_device()
                                        ndctl_namespace_get_pfn()
                                        ndctl_pfn_get_block_device()
                                        ndctl_namespace_get_block_device()
                                        ndctl_match_fsdax() <int ndctl_match_fsdax (dev_t st_dev, const char *devname) at libpmem2/region_namespace_ndctl.c:64>:
                                            LOG()
                                            util_snprintf() <int util_snprintf (char *str, size_t size, const char *format, ...) at core/util.c:434>:
                                                va_start()
                                                vsnprintf()
                                                va_end()
                                            ERR()
                                            major()
                                            minor()
                                            os_open() <int os_open (const char *pathname, int flags, ...) at core/os_posix.c:29>:
                                                va_start()
                                                va_arg()
                                                va_end()
                                                open()
                                            read()
                                            os_close()
                                            strcmp()
                                    LOG()
                                    ndctl_namespace_get_dax()
                                    ndctl_dax_get_size()
                                    ndctl_unref()
                                FATAL()
                            pmem2_source_delete() <int pmem2_source_delete (struct pmem2_source **src) at libpmem2/source.c:30>:
                                Free() <Free_func Free at core/alloc.c:91>
                            ERR()
                        out() <void out (const char *fmt, ...) at core/out.c:480>:
                            va_start()
                            out_common() <} void out_common (const char *file, int line, const char *func, int level, const char *suffix, const char *fmt, va_list ap) at core/out.c:334>
                            va_end()
                        util_map() <void *util_map (int fd, os_off_t off, size_t len, int flags, int rdonly, size_t req_align, int *map_sync) at common/mmap.c:85>:
                            LOG()
                            util_map_hint() <char *util_map_hint (size_t len, size_t req_align) at common/mmap_posix.c:118>:
                                LOG()
                                util_map_hint_align()
                                util_map_hint_unused() <char *util_map_hint_unused (void *minaddr, size_t len, size_t align) at common/mmap_posix.c:36>:
                                    LOG()
                                    ASSERT()
                                    os_fopen() <FILE *os_fopen (const char *pathname, const char *mode) at core/os_posix.c:106>:
                                        fopen()
                                    ERR()
                                    roundup()
                                    fgets()
                                    sscanf()
                                    fclose()
                                mmap()
                                ERR()
                                roundup()
                                munmap()
                            ASSERTeq()
                            util_map_sync() <void *util_map_sync (void *addr, size_t len, int proto, int flags, int fd, os_off_t offset, int *map_sync) at common/mmap_posix.c:159>:
                                LOG()
                                mmap()
                            ERR()
                        memset()
                        util_unmap() <int util_unmap (void *addr, size_t len) at common/mmap.c:120>:
                            LOG()
                            munmap()
                            ERR()
                        os_close()
                    os_unlink() <int os_unlink (const char *pathname) at core/os_posix.c:88>:
                        unlink()
                ERR()
            util_poolset_free() <void util_poolset_free (struct pool_set *set) at common/set.c:312>:
                LOG()
                Free() <Free_func Free at core/alloc.c:91>
                VEC_FOREACH_BY_PTR()
                VEC_DELETE()
    os_mutex_unlock() <int os_mutex_unlock (os_mutex_t *__restrict mutex) at core/os_thread_posix.c:108>:
        pthread_mutex_unlock()
    PMEMOBJ_API_END()
pmemobj_create() <PMEMobjpool *pmemobj_create (const char *path, const char *layout, size_t poolsize, mode_t mode) at libpmemobj/obj.c:1159>:
    PMEMOBJ_API_START()
    pmemobj_createU() <inline PMEMobjpool *pmemobj_createU (const char *path, const char *layout, size_t poolsize, mode_t mode) at libpmemobj/obj.c:1052>:
        LOG()
        strlen()
        ERR()
        os_mutex_lock() <int os_mutex_lock (os_mutex_t *__restrict mutex) at core/os_thread_posix.c:90>:
            pthread_mutex_lock()
        obj_get_nlanes() <unsigned obj_get_nlanes (void) at libpmemobj/obj.c:1026>:
            LOG()
            os_getenv() <char *os_getenv (const char *name) at core/os_posix.c:279>:
                secure_getenv()
            atoi()
            ERR()
        util_pool_create() <int util_pool_create (struct pool_set **setp, const char *path, size_t poolsize, size_t minsize, size_t minpartsize, const struct pool_attr *attr, unsigned *nlanes, int can_have_rep) at common/set.c:2535>:
            LOG()
            util_pool_create_uuids() <int util_pool_create_uuids (struct pool_set **setp, const char *path, size_t poolsize, size_t minsize, size_t minpartsize, const struct pool_attr *attr, unsigned *nlanes, int can_have_rep) at common/set.c:2351>:
                LOG()
                ASSERT()
                util_file_exists() <int util_file_exists (const char *path) at common/file.c:32>:
                    LOG()
                    os_access() <int os_access (const char *pathname, int mode) at core/os_posix.c:97>:
                        access()
                    ERR()
                ERR()
                util_poolset_create_set() <int util_poolset_create_set (struct pool_set **setp, const char *path, size_t poolsize, size_t minsize, int ignore_sds) at common/set.c:1583>:
                    LOG()
                    util_file_get_type() <enum file_type util_file_get_type (const char *path) at common/file.c:106>:
                        LOG()
                        ERR()
                        util_file_exists() <int util_file_exists (const char *path) at common/file.c:32>:
                            LOG()
                            os_access() <int os_access (const char *pathname, int mode) at core/os_posix.c:97>:
                                access()
                            ERR()
                        os_stat() <int os_stat (const char *pathname, os_stat_t *buf) at core/os_posix.c:79>:
                            stat()
                        util_stat_get_type() <enum file_type util_stat_get_type (const os_stat_t *st) at common/file.c:62>:
                            pmem2_get_type_from_stat() <int pmem2_get_type_from_stat (const os_stat_t *st, enum pmem2_file_type *type) at libpmem2/pmem2_utils_linux.c:23>:
                                S_ISREG()
                                S_ISDIR()
                                S_ISCHR()
                                ERR()
                                util_snprintf() <int util_snprintf (char *str, size_t size, const char *format, ...) at core/util.c:434>:
                                    va_start()
                                    vsnprintf()
                                    va_end()
                                os_major()
                                os_minor()
                                ASSERTinfo()
                                LOG()
                                realpath()
                                strrchr()
                                strcmp()
                            pmem2_err_to_errno() <int pmem2_err_to_errno (int err) at libpmem2/pmem2_utils.c:67>:
                                FATAL()
                            ASSERTinfo()
                    ERR()
                    util_poolset_single() <struct pool_set *util_poolset_single (const char *path, size_t filesize, int create, int ignore_sds) at common/set.c:1383>:
                        LOG()
                        util_file_get_type() <enum file_type util_file_get_type (const char *path) at common/file.c:106>:
                            LOG()
                            ERR()
                            util_file_exists() <int util_file_exists (const char *path) at common/file.c:32>:
                                LOG()
                                os_access() <int os_access (const char *pathname, int mode) at core/os_posix.c:97>:
                                    access()
                                ERR()
                            os_stat() <int os_stat (const char *pathname, os_stat_t *buf) at core/os_posix.c:79>:
                                stat()
                            util_stat_get_type() <enum file_type util_stat_get_type (const os_stat_t *st) at common/file.c:62>:
                                pmem2_get_type_from_stat() <int pmem2_get_type_from_stat (const os_stat_t *st, enum pmem2_file_type *type) at libpmem2/pmem2_utils_linux.c:23>:
                                    S_ISREG()
                                    S_ISDIR()
                                    S_ISCHR()
                                    ERR()
                                    util_snprintf() <int util_snprintf (char *str, size_t size, const char *format, ...) at core/util.c:434>:
                                        va_start()
                                        vsnprintf()
                                        va_end()
                                    os_major()
                                    os_minor()
                                    ASSERTinfo()
                                    LOG()
                                    realpath()
                                    strrchr()
                                    strcmp()
                                pmem2_err_to_errno() <int pmem2_err_to_errno (int err) at libpmem2/pmem2_utils.c:67>:
                                    FATAL()
                                ASSERTinfo()
                        Zalloc() <void *Zalloc (size_t sz) at core/alloc.c:98>:
                            Malloc()
                            memset()
                        ERR()
                        Strdup() <Strdup_func Strdup at core/alloc.c:92>
                        Free() <Free_func Free at core/alloc.c:91>
                        VEC_INIT()
                        util_file_device_dax_alignment() <size_t util_file_device_dax_alignment (const char *path) at common/file_posix.c:139>:
                            LOG()
                            device_dax_alignment() <size_t device_dax_alignment (const char *path) at common/file_posix.c:105>:
                                LOG()
                                os_open() <int os_open (const char *pathname, int flags, ...) at core/os_posix.c:29>:
                                    va_start()
                                    va_arg()
                                    va_end()
                                    open()
                                pmem2_source_from_fd() <int pmem2_source_from_fd (struct pmem2_source **src, int fd) at libpmem2/source_posix.c:19>:
                                    PMEM2_ERR_CLR()
                                    fcntl()
                                    ERR()
                                    os_fstat()
                                    pmem2_get_type_from_stat() <int pmem2_get_type_from_stat (const os_stat_t *st, enum pmem2_file_type *type) at libpmem2/pmem2_utils_linux.c:23>:
                                        S_ISREG()
                                        S_ISDIR()
                                        S_ISCHR()
                                        ERR()
                                        util_snprintf() <int util_snprintf (char *str, size_t size, const char *format, ...) at core/util.c:434>:
                                            va_start()
                                            vsnprintf()
                                            va_end()
                                        os_major()
                                        os_minor()
                                        ASSERTinfo()
                                        LOG()
                                        realpath()
                                        strrchr()
                                        strcmp()
                                    pmem2_malloc() <void *pmem2_malloc (size_t size, int *err) at libpmem2/pmem2_utils.c:19>:
                                        Malloc()
                                        ERR()
                                    ASSERTne()
                                pmem2_device_dax_alignment() <int pmem2_device_dax_alignment (const struct pmem2_source *src, size_t *alignment) at libpmem2/pmem2_utils_ndctl.c:18>:
                                    ndctl_new()
                                    ERR()
                                    pmem2_region_namespace() <int pmem2_region_namespace (struct ndctl_ctx *ctx, const struct pmem2_source *src, struct ndctl_region **pregion, struct ndctl_namespace **pndns) at libpmem2/region_namespace_ndctl.c:131>:
                                        LOG()
                                        ERR()
                                        FOREACH_BUS_REGION_NAMESPACE()
                                        ndctl_namespace_get_dax()
                                        ASSERTeq()
                                        ndctl_dax_get_daxctl_region()
                                        daxctl_dev_foreach()
                                        daxctl_dev_get_devname()
                                        ndctl_match_devdax() <int ndctl_match_devdax (dev_t st_rdev, const char *devname) at libpmem2/region_namespace_ndctl.c:26>:
                                            LOG()
                                            stat()
                                            util_snprintf() <int util_snprintf (char *str, size_t size, const char *format, ...) at core/util.c:434>:
                                                va_start()
                                                vsnprintf()
                                                va_end()
                                            ERR()
                                            os_stat() <int os_stat (const char *pathname, os_stat_t *buf) at core/os_posix.c:79>:
                                                stat()
                                        ndctl_namespace_get_btt()
                                        ndctl_btt_get_block_device()
                                        ndctl_namespace_get_pfn()
                                        ndctl_pfn_get_block_device()
                                        ndctl_namespace_get_block_device()
                                        ndctl_match_fsdax() <int ndctl_match_fsdax (dev_t st_dev, const char *devname) at libpmem2/region_namespace_ndctl.c:64>:
                                            LOG()
                                            util_snprintf() <int util_snprintf (char *str, size_t size, const char *format, ...) at core/util.c:434>:
                                                va_start()
                                                vsnprintf()
                                                va_end()
                                            ERR()
                                            major()
                                            minor()
                                            os_open() <int os_open (const char *pathname, int flags, ...) at core/os_posix.c:29>:
                                                va_start()
                                                va_arg()
                                                va_end()
                                                open()
                                            read()
                                            os_close()
                                            strcmp()
                                    LOG()
                                    ndctl_namespace_get_dax()
                                    ndctl_dax_get_align()
                                    ndctl_unref()
                                pmem2_source_delete() <int pmem2_source_delete (struct pmem2_source **src) at libpmem2/source.c:30>:
                                    Free() <Free_func Free at core/alloc.c:91>
                                os_close()
                        ASSERTne()
                    util_file_open() <int util_file_open (const char *path, size_t *size, size_t minsize, int flags) at common/file.c:456>:
                        LOG()
                        os_open() <int os_open (const char *pathname, int flags, ...) at core/os_posix.c:29>:
                            va_start()
                            va_arg()
                            va_end()
                            open()
                        ERR()
                        os_flock() <int os_flock (int fd, int operation) at core/os_posix.c:215>:
                            flock()
                        os_close()
                        ASSERTeq()
                        util_fd_get_size() <ssize_t util_fd_get_size (int fd) at common/file.c:157>:
                            LOG()
                            pmem2_source_from_fd() <int pmem2_source_from_fd (struct pmem2_source **src, int fd) at libpmem2/source_posix.c:19>:
                                PMEM2_ERR_CLR()
                                fcntl()
                                ERR()
                                os_fstat()
                                pmem2_get_type_from_stat() <int pmem2_get_type_from_stat (const os_stat_t *st, enum pmem2_file_type *type) at libpmem2/pmem2_utils_linux.c:23>:
                                    S_ISREG()
                                    S_ISDIR()
                                    S_ISCHR()
                                    ERR()
                                    util_snprintf() <int util_snprintf (char *str, size_t size, const char *format, ...) at core/util.c:434>:
                                        va_start()
                                        vsnprintf()
                                        va_end()
                                    os_major()
                                    os_minor()
                                    ASSERTinfo()
                                    LOG()
                                    realpath()
                                    strrchr()
                                    strcmp()
                                pmem2_malloc() <void *pmem2_malloc (size_t size, int *err) at libpmem2/pmem2_utils.c:19>:
                                    Malloc()
                                    ERR()
                                ASSERTne()
                            pmem2_err_to_errno() <int pmem2_err_to_errno (int err) at libpmem2/pmem2_utils.c:67>:
                                FATAL()
                            pmem2_source_size() <int pmem2_source_size (const struct pmem2_source *src, size_t *size) at libpmem2/source_posix.c:90>:
                                LOG()
                                PMEM2_ERR_CLR()
                                ASSERT()
                                os_fstat()
                                ERR()
                                pmem2_device_dax_size() <int pmem2_device_dax_size (const struct pmem2_source *src, size_t *size) at libpmem2/pmem2_utils_ndctl.c:58>:
                                    ndctl_new()
                                    ERR()
                                    pmem2_region_namespace() <int pmem2_region_namespace (struct ndctl_ctx *ctx, const struct pmem2_source *src, struct ndctl_region **pregion, struct ndctl_namespace **pndns) at libpmem2/region_namespace_ndctl.c:131>:
                                        LOG()
                                        ERR()
                                        FOREACH_BUS_REGION_NAMESPACE()
                                        ndctl_namespace_get_dax()
                                        ASSERTeq()
                                        ndctl_dax_get_daxctl_region()
                                        daxctl_dev_foreach()
                                        daxctl_dev_get_devname()
                                        ndctl_match_devdax() <int ndctl_match_devdax (dev_t st_rdev, const char *devname) at libpmem2/region_namespace_ndctl.c:26>:
                                            LOG()
                                            stat()
                                            util_snprintf() <int util_snprintf (char *str, size_t size, const char *format, ...) at core/util.c:434>:
                                                va_start()
                                                vsnprintf()
                                                va_end()
                                            ERR()
                                            os_stat() <int os_stat (const char *pathname, os_stat_t *buf) at core/os_posix.c:79>:
                                                stat()
                                        ndctl_namespace_get_btt()
                                        ndctl_btt_get_block_device()
                                        ndctl_namespace_get_pfn()
                                        ndctl_pfn_get_block_device()
                                        ndctl_namespace_get_block_device()
                                        ndctl_match_fsdax() <int ndctl_match_fsdax (dev_t st_dev, const char *devname) at libpmem2/region_namespace_ndctl.c:64>:
                                            LOG()
                                            util_snprintf() <int util_snprintf (char *str, size_t size, const char *format, ...) at core/util.c:434>:
                                                va_start()
                                                vsnprintf()
                                                va_end()
                                            ERR()
                                            major()
                                            minor()
                                            os_open() <int os_open (const char *pathname, int flags, ...) at core/os_posix.c:29>:
                                                va_start()
                                                va_arg()
                                                va_end()
                                                open()
                                            read()
                                            os_close()
                                            strcmp()
                                    LOG()
                                    ndctl_namespace_get_dax()
                                    ndctl_dax_get_size()
                                    ndctl_unref()
                                FATAL()
                            pmem2_source_delete() <int pmem2_source_delete (struct pmem2_source **src) at libpmem2/source.c:30>:
                                Free() <Free_func Free at core/alloc.c:91>
                            ERR()
                    read()
                    strncmp()
                    os_close()
                    util_poolset_parse() <int util_poolset_parse (struct pool_set **setp, const char *path, int fd) at common/set.c:1172>:
                        LOG()
                        os_lseek()
                        ERR()
                        dup()
                        os_fdopen() <FILE *os_fdopen (int fd, const char *mode) at core/os_posix.c:115>:
                            fdopen()
                        os_close()
                        util_readline() <char *util_readline (FILE *fh) at core/util.c:459>:
                            Realloc()
                            Free() <Free_func Free at core/alloc.c:91>
                            util_fgets() <char *util_fgets (char *buffer, int max, FILE *stream) at core/util.c:217>:
                                fgets()
                                strlen()
                            strlen()
                            feof()
                        Zalloc() <void *Zalloc (size_t sz) at core/alloc.c:98>:
                            Malloc()
                            memset()
                        Strdup() <Strdup_func Strdup at core/alloc.c:92>
                        strncmp()
                        util_parse_add_replica() <int util_parse_add_replica (struct pool_set **setp) at common/set.c:823>:
                            LOG()
                            ASSERTne()
                            Realloc()
                            ERR()
                            Zalloc() <void *Zalloc (size_t sz) at core/alloc.c:98>:
                                Malloc()
                                memset()
                            VEC_INIT()
                        Free() <Free_func Free at core/alloc.c:91>
                        strchr()
                        parser_read_options() <enum parser_codes parser_read_options (char *line, unsigned *options) at common/set.c:550>:
                            LOG()
                            strtok_r()
                            strcmp()
                        isblank()
                        parser_read_replica() <enum parser_codes parser_read_replica (char *line, char **node_addr, char **pool_desc) at common/set.c:590>:
                            strtok_r()
                            LOG()
                            util_is_absolute_path() <int util_is_absolute_path (const char *path) at common/file_posix.c:32>:
                                LOG()
                            Strdup() <Strdup_func Strdup at core/alloc.c:92>
                            ERR()
                            Free() <Free_func Free at core/alloc.c:91>
                        parser_read_line() <enum parser_codes parser_read_line (char *line, size_t *size, char **path) at common/set.c:485>:
                            strtok_r()
                            LOG()
                            util_is_absolute_path() <int util_is_absolute_path (const char *path) at common/file_posix.c:32>:
                                LOG()
                            Strdup() <Strdup_func Strdup at core/alloc.c:92>
                            ERR()
                            strcmp()
                            util_autodetect_size() <ssize_t util_autodetect_size (const char *path) at common/set.c:466>:
                                util_file_get_type() <enum file_type util_file_get_type (const char *path) at common/file.c:106>:
                                    LOG()
                                    ERR()
                                    util_file_exists() <int util_file_exists (const char *path) at common/file.c:32>:
                                        LOG()
                                        os_access() <int os_access (const char *pathname, int mode) at core/os_posix.c:97>:
                                            access()
                                        ERR()
                                    os_stat() <int os_stat (const char *pathname, os_stat_t *buf) at core/os_posix.c:79>:
                                        stat()
                                    util_stat_get_type() <enum file_type util_stat_get_type (const os_stat_t *st) at common/file.c:62>:
                                        pmem2_get_type_from_stat() <int pmem2_get_type_from_stat (const os_stat_t *st, enum pmem2_file_type *type) at libpmem2/pmem2_utils_linux.c:23>:
                                            S_ISREG()
                                            S_ISDIR()
                                            S_ISCHR()
                                            ERR()
                                            util_snprintf() <int util_snprintf (char *str, size_t size, const char *format, ...) at core/util.c:434>:
                                                va_start()
                                                vsnprintf()
                                                va_end()
                                            os_major()
                                            os_minor()
                                            ASSERTinfo()
                                            LOG()
                                            realpath()
                                            strrchr()
                                            strcmp()
                                        pmem2_err_to_errno() <int pmem2_err_to_errno (int err) at libpmem2/pmem2_utils.c:67>:
                                            FATAL()
                                        ASSERTinfo()
                                ERR()
                                util_file_get_size() <ssize_t util_file_get_size (const char *path) at common/file.c:137>:
                                    LOG()
                                    os_open() <int os_open (const char *pathname, int flags, ...) at core/os_posix.c:29>:
                                        va_start()
                                        va_arg()
                                        va_end()
                                        open()
                                    ERR()
                                    util_fd_get_size() <ssize_t util_fd_get_size (int fd) at common/file.c:157>:
                                        LOG()
                                        pmem2_source_from_fd() <int pmem2_source_from_fd (struct pmem2_source **src, int fd) at libpmem2/source_posix.c:19>:
                                            PMEM2_ERR_CLR()
                                            fcntl()
                                            ERR()
                                            os_fstat()
                                            pmem2_get_type_from_stat() <int pmem2_get_type_from_stat (const os_stat_t *st, enum pmem2_file_type *type) at libpmem2/pmem2_utils_linux.c:23>:
                                                S_ISREG()
                                                S_ISDIR()
                                                S_ISCHR()
                                                ERR()
                                                util_snprintf() <int util_snprintf (char *str, size_t size, const char *format, ...) at core/util.c:434>:
                                                    va_start()
                                                    vsnprintf()
                                                    va_end()
                                                os_major()
                                                os_minor()
                                                ASSERTinfo()
                                                LOG()
                                                realpath()
                                                strrchr()
                                                strcmp()
                                            pmem2_malloc() <void *pmem2_malloc (size_t size, int *err) at libpmem2/pmem2_utils.c:19>:
                                                Malloc()
                                                ERR()
                                            ASSERTne()
                                        pmem2_err_to_errno() <int pmem2_err_to_errno (int err) at libpmem2/pmem2_utils.c:67>:
                                            FATAL()
                                        pmem2_source_size() <int pmem2_source_size (const struct pmem2_source *src, size_t *size) at libpmem2/source_posix.c:90>:
                                            LOG()
                                            PMEM2_ERR_CLR()
                                            ASSERT()
                                            os_fstat()
                                            ERR()
                                            pmem2_device_dax_size() <int pmem2_device_dax_size (const struct pmem2_source *src, size_t *size) at libpmem2/pmem2_utils_ndctl.c:58>:
                                                ndctl_new()
                                                ERR()
                                                pmem2_region_namespace() <int pmem2_region_namespace (struct ndctl_ctx *ctx, const struct pmem2_source *src, struct ndctl_region **pregion, struct ndctl_namespace **pndns) at libpmem2/region_namespace_ndctl.c:131>:
                                                    LOG()
                                                    ERR()
                                                    FOREACH_BUS_REGION_NAMESPACE()
                                                    ndctl_namespace_get_dax()
                                                    ASSERTeq()
                                                    ndctl_dax_get_daxctl_region()
                                                    daxctl_dev_foreach()
                                                    daxctl_dev_get_devname()
                                                    ndctl_match_devdax() <int ndctl_match_devdax (dev_t st_rdev, const char *devname) at libpmem2/region_namespace_ndctl.c:26>:
                                                        LOG()
                                                        stat()
                                                        util_snprintf() <int util_snprintf (char *str, size_t size, const char *format, ...) at core/util.c:434>:
                                                            va_start()
                                                            vsnprintf()
                                                            va_end()
                                                        ERR()
                                                        os_stat() <int os_stat (const char *pathname, os_stat_t *buf) at core/os_posix.c:79>:
                                                            stat()
                                                    ndctl_namespace_get_btt()
                                                    ndctl_btt_get_block_device()
                                                    ndctl_namespace_get_pfn()
                                                    ndctl_pfn_get_block_device()
                                                    ndctl_namespace_get_block_device()
                                                    ndctl_match_fsdax() <int ndctl_match_fsdax (dev_t st_dev, const char *devname) at libpmem2/region_namespace_ndctl.c:64>:
                                                        LOG()
                                                        util_snprintf() <int util_snprintf (char *str, size_t size, const char *format, ...) at core/util.c:434>:
                                                            va_start()
                                                            vsnprintf()
                                                            va_end()
                                                        ERR()
                                                        major()
                                                        minor()
                                                        os_open() <int os_open (const char *pathname, int flags, ...) at core/os_posix.c:29>:
                                                            va_start()
                                                            va_arg()
                                                            va_end()
                                                            open()
                                                        read()
                                                        os_close()
                                                        strcmp()
                                                LOG()
                                                ndctl_namespace_get_dax()
                                                ndctl_dax_get_size()
                                                ndctl_unref()
                                            FATAL()
                                        pmem2_source_delete() <int pmem2_source_delete (struct pmem2_source **src) at libpmem2/source.c:30>:
                                            Free() <Free_func Free at core/alloc.c:91>
                                        ERR()
                                    close()
                            Free() <Free_func Free at core/alloc.c:91>
                            util_parse_size() <int util_parse_size (const char *str, size_t *sizep) at core/util.c:243>:
                                sscanf()
                                ARRAY_SIZE()
                                strcmp()
                        util_parse_add_element() <int util_parse_add_element (struct pool_set *set, const char *path, size_t filesize) at common/set.c:803>:
                            LOG()
                            stat()
                            os_stat() <int os_stat (const char *pathname, os_stat_t *buf) at core/os_posix.c:79>:
                                stat()
                            S_ISDIR()
                            util_parse_add_directory() <int util_parse_add_directory (struct pool_set *set, const char *path, size_t filesize) at common/set.c:742>:
                                LOG()
                                ASSERTne()
                                ERR()
                                util_part_realpath() <char *util_part_realpath (const char *path) at core/util_posix.c:44>:
                                    realpath()
                                VEC_FOREACH_BY_PTR()
                                strcmp()
                                free()
                                VEC_PUSH_BACK()
                            util_parse_add_part() <int util_parse_add_part (struct pool_set *set, const char *path, size_t filesize) at common/set.c:721>:
                                LOG()
                                ASSERTne()
                                ERR()
                                util_replica_add_part() <int util_replica_add_part (struct pool_replica **repp, const char *path, size_t filesize) at common/set.c:708>:
                                    LOG()
                                    util_replica_add_part_by_idx() <int util_replica_add_part_by_idx (struct pool_replica **repp, const char *path, size_t filesize, unsigned p) at common/set.c:662>:
                                        LOG()
                                        util_replica_reserve() <int util_replica_reserve (struct pool_replica **repp, unsigned n) at common/set.c:633>:
                                            LOG()
                                            Realloc()
                                            ERR()
                                            memset()
                                        ASSERTne()
                                        util_file_get_type() <enum file_type util_file_get_type (const char *path) at common/file.c:106>:
                                            LOG()
                                            ERR()
                                            util_file_exists() <int util_file_exists (const char *path) at common/file.c:32>:
                                                LOG()
                                                os_access() <int os_access (const char *pathname, int mode) at core/os_posix.c:97>:
                                                    access()
                                                ERR()
                                            os_stat() <int os_stat (const char *pathname, os_stat_t *buf) at core/os_posix.c:79>:
                                                stat()
                                            util_stat_get_type() <enum file_type util_stat_get_type (const os_stat_t *st) at common/file.c:62>:
                                                pmem2_get_type_from_stat() <int pmem2_get_type_from_stat (const os_stat_t *st, enum pmem2_file_type *type) at libpmem2/pmem2_utils_linux.c:23>:
                                                    S_ISREG()
                                                    S_ISDIR()
                                                    S_ISCHR()
                                                    ERR()
                                                    util_snprintf() <int util_snprintf (char *str, size_t size, const char *format, ...) at core/util.c:434>:
                                                        va_start()
                                                        vsnprintf()
                                                        va_end()
                                                    os_major()
                                                    os_minor()
                                                    ASSERTinfo()
                                                    LOG()
                                                    realpath()
                                                    strrchr()
                                                    strcmp()
                                                pmem2_err_to_errno() <int pmem2_err_to_errno (int err) at libpmem2/pmem2_utils.c:67>:
                                                    FATAL()
                                                ASSERTinfo()
                                        util_file_device_dax_alignment() <size_t util_file_device_dax_alignment (const char *path) at common/file_posix.c:139>:
                                            LOG()
                                            device_dax_alignment() <size_t device_dax_alignment (const char *path) at common/file_posix.c:105>:
                                                LOG()
                                                os_open() <int os_open (const char *pathname, int flags, ...) at core/os_posix.c:29>:
                                                    va_start()
                                                    va_arg()
                                                    va_end()
                                                    open()
                                                pmem2_source_from_fd() <int pmem2_source_from_fd (struct pmem2_source **src, int fd) at libpmem2/source_posix.c:19>:
                                                    PMEM2_ERR_CLR()
                                                    fcntl()
                                                    ERR()
                                                    os_fstat()
                                                    pmem2_get_type_from_stat() <int pmem2_get_type_from_stat (const os_stat_t *st, enum pmem2_file_type *type) at libpmem2/pmem2_utils_linux.c:23>:
                                                        S_ISREG()
                                                        S_ISDIR()
                                                        S_ISCHR()
                                                        ERR()
                                                        util_snprintf() <int util_snprintf (char *str, size_t size, const char *format, ...) at core/util.c:434>:
                                                            va_start()
                                                            vsnprintf()
                                                            va_end()
                                                        os_major()
                                                        os_minor()
                                                        ASSERTinfo()
                                                        LOG()
                                                        realpath()
                                                        strrchr()
                                                        strcmp()
                                                    pmem2_malloc() <void *pmem2_malloc (size_t size, int *err) at libpmem2/pmem2_utils.c:19>:
                                                        Malloc()
                                                        ERR()
                                                    ASSERTne()
                                                pmem2_device_dax_alignment() <int pmem2_device_dax_alignment (const struct pmem2_source *src, size_t *alignment) at libpmem2/pmem2_utils_ndctl.c:18>:
                                                    ndctl_new()
                                                    ERR()
                                                    pmem2_region_namespace() <int pmem2_region_namespace (struct ndctl_ctx *ctx, const struct pmem2_source *src, struct ndctl_region **pregion, struct ndctl_namespace **pndns) at libpmem2/region_namespace_ndctl.c:131>:
                                                        LOG()
                                                        ERR()
                                                        FOREACH_BUS_REGION_NAMESPACE()
                                                        ndctl_namespace_get_dax()
                                                        ASSERTeq()
                                                        ndctl_dax_get_daxctl_region()
                                                        daxctl_dev_foreach()
                                                        daxctl_dev_get_devname()
                                                        ndctl_match_devdax() <int ndctl_match_devdax (dev_t st_rdev, const char *devname) at libpmem2/region_namespace_ndctl.c:26>:
                                                            LOG()
                                                            stat()
                                                            util_snprintf() <int util_snprintf (char *str, size_t size, const char *format, ...) at core/util.c:434>:
                                                                va_start()
                                                                vsnprintf()
                                                                va_end()
                                                            ERR()
                                                            os_stat() <int os_stat (const char *pathname, os_stat_t *buf) at core/os_posix.c:79>:
                                                                stat()
                                                        ndctl_namespace_get_btt()
                                                        ndctl_btt_get_block_device()
                                                        ndctl_namespace_get_pfn()
                                                        ndctl_pfn_get_block_device()
                                                        ndctl_namespace_get_block_device()
                                                        ndctl_match_fsdax() <int ndctl_match_fsdax (dev_t st_dev, const char *devname) at libpmem2/region_namespace_ndctl.c:64>:
                                                            LOG()
                                                            util_snprintf() <int util_snprintf (char *str, size_t size, const char *format, ...) at core/util.c:434>:
                                                                va_start()
                                                                vsnprintf()
                                                                va_end()
                                                            ERR()
                                                            major()
                                                            minor()
                                                            os_open() <int os_open (const char *pathname, int flags, ...) at core/os_posix.c:29>:
                                                                va_start()
                                                                va_arg()
                                                                va_end()
                                                                open()
                                                            read()
                                                            os_close()
                                                            strcmp()
                                                    LOG()
                                                    ndctl_namespace_get_dax()
                                                    ndctl_dax_get_align()
                                                    ndctl_unref()
                                                pmem2_source_delete() <int pmem2_source_delete (struct pmem2_source **src) at libpmem2/source.c:30>:
                                                    Free() <Free_func Free at core/alloc.c:91>
                                                os_close()
                        util_poolset_check_devdax() <int util_poolset_check_devdax (struct pool_set *set) at common/set.c:896>:
                            LOG()
                            ERR()
                            util_file_device_dax_alignment() <size_t util_file_device_dax_alignment (const char *path) at common/file_posix.c:139>:
                                LOG()
                                device_dax_alignment() <size_t device_dax_alignment (const char *path) at common/file_posix.c:105>:
                                    LOG()
                                    os_open() <int os_open (const char *pathname, int flags, ...) at core/os_posix.c:29>:
                                        va_start()
                                        va_arg()
                                        va_end()
                                        open()
                                    pmem2_source_from_fd() <int pmem2_source_from_fd (struct pmem2_source **src, int fd) at libpmem2/source_posix.c:19>:
                                        PMEM2_ERR_CLR()
                                        fcntl()
                                        ERR()
                                        os_fstat()
                                        pmem2_get_type_from_stat() <int pmem2_get_type_from_stat (const os_stat_t *st, enum pmem2_file_type *type) at libpmem2/pmem2_utils_linux.c:23>:
                                            S_ISREG()
                                            S_ISDIR()
                                            S_ISCHR()
                                            ERR()
                                            util_snprintf() <int util_snprintf (char *str, size_t size, const char *format, ...) at core/util.c:434>:
                                                va_start()
                                                vsnprintf()
                                                va_end()
                                            os_major()
                                            os_minor()
                                            ASSERTinfo()
                                            LOG()
                                            realpath()
                                            strrchr()
                                            strcmp()
                                        pmem2_malloc() <void *pmem2_malloc (size_t size, int *err) at libpmem2/pmem2_utils.c:19>:
                                            Malloc()
                                            ERR()
                                        ASSERTne()
                                    pmem2_device_dax_alignment() <int pmem2_device_dax_alignment (const struct pmem2_source *src, size_t *alignment) at libpmem2/pmem2_utils_ndctl.c:18>:
                                        ndctl_new()
                                        ERR()
                                        pmem2_region_namespace() <int pmem2_region_namespace (struct ndctl_ctx *ctx, const struct pmem2_source *src, struct ndctl_region **pregion, struct ndctl_namespace **pndns) at libpmem2/region_namespace_ndctl.c:131>:
                                            LOG()
                                            ERR()
                                            FOREACH_BUS_REGION_NAMESPACE()
                                            ndctl_namespace_get_dax()
                                            ASSERTeq()
                                            ndctl_dax_get_daxctl_region()
                                            daxctl_dev_foreach()
                                            daxctl_dev_get_devname()
                                            ndctl_match_devdax() <int ndctl_match_devdax (dev_t st_rdev, const char *devname) at libpmem2/region_namespace_ndctl.c:26>:
                                                LOG()
                                                stat()
                                                util_snprintf() <int util_snprintf (char *str, size_t size, const char *format, ...) at core/util.c:434>:
                                                    va_start()
                                                    vsnprintf()
                                                    va_end()
                                                ERR()
                                                os_stat() <int os_stat (const char *pathname, os_stat_t *buf) at core/os_posix.c:79>:
                                                    stat()
                                            ndctl_namespace_get_btt()
                                            ndctl_btt_get_block_device()
                                            ndctl_namespace_get_pfn()
                                            ndctl_pfn_get_block_device()
                                            ndctl_namespace_get_block_device()
                                            ndctl_match_fsdax() <int ndctl_match_fsdax (dev_t st_dev, const char *devname) at libpmem2/region_namespace_ndctl.c:64>:
                                                LOG()
                                                util_snprintf() <int util_snprintf (char *str, size_t size, const char *format, ...) at core/util.c:434>:
                                                    va_start()
                                                    vsnprintf()
                                                    va_end()
                                                ERR()
                                                major()
                                                minor()
                                                os_open() <int os_open (const char *pathname, int flags, ...) at core/os_posix.c:29>:
                                                    va_start()
                                                    va_arg()
                                                    va_end()
                                                    open()
                                                read()
                                                os_close()
                                                strcmp()
                                        LOG()
                                        ndctl_namespace_get_dax()
                                        ndctl_dax_get_align()
                                        ndctl_unref()
                                    pmem2_source_delete() <int pmem2_source_delete (struct pmem2_source **src) at libpmem2/source.c:30>:
                                        Free() <Free_func Free at core/alloc.c:91>
                                    os_close()
                        util_poolset_directories_load() <int util_poolset_directories_load (struct pool_set *set) at common/set.c:1078>:
                            LOG()
                            VEC_FOREACH_BY_PTR()
                            util_poolset_directory_load() <int util_poolset_directory_load (struct pool_replica **repp, const char *directory) at common/set.c:1014>:
                                LOG()
                                fs_new() <struct fs *fs_new (const char *path) at core/fs_posix.c:23>:
                                    Zalloc() <void *Zalloc (size_t sz) at core/alloc.c:98>:
                                        Malloc()
                                        memset()
                                    fts_open()
                                    Free() <Free_func Free at core/alloc.c:91>
                                ERR()
                                fs_read() <struct fs_entry *fs_read (struct fs *f) at core/fs_posix.c:46>:
                                    fts_read()
                                strcmp()
                                util_part_idx_by_file_name() <long util_part_idx_by_file_name (const char *filename) at common/set.c:994>:
                                    LOG()
                                    strtol()
                                util_file_get_size() <ssize_t util_file_get_size (const char *path) at common/file.c:137>:
                                    LOG()
                                    os_open() <int os_open (const char *pathname, int flags, ...) at core/os_posix.c:29>:
                                        va_start()
                                        va_arg()
                                        va_end()
                                        open()
                                    ERR()
                                    util_fd_get_size() <ssize_t util_fd_get_size (int fd) at common/file.c:157>:
                                        LOG()
                                        pmem2_source_from_fd() <int pmem2_source_from_fd (struct pmem2_source **src, int fd) at libpmem2/source_posix.c:19>:
                                            PMEM2_ERR_CLR()
                                            fcntl()
                                            ERR()
                                            os_fstat()
                                            pmem2_get_type_from_stat() <int pmem2_get_type_from_stat (const os_stat_t *st, enum pmem2_file_type *type) at libpmem2/pmem2_utils_linux.c:23>:
                                                S_ISREG()
                                                S_ISDIR()
                                                S_ISCHR()
                                                ERR()
                                                util_snprintf() <int util_snprintf (char *str, size_t size, const char *format, ...) at core/util.c:434>:
                                                    va_start()
                                                    vsnprintf()
                                                    va_end()
                                                os_major()
                                                os_minor()
                                                ASSERTinfo()
                                                LOG()
                                                realpath()
                                                strrchr()
                                                strcmp()
                                            pmem2_malloc() <void *pmem2_malloc (size_t size, int *err) at libpmem2/pmem2_utils.c:19>:
                                                Malloc()
                                                ERR()
                                            ASSERTne()
                                        pmem2_err_to_errno() <int pmem2_err_to_errno (int err) at libpmem2/pmem2_utils.c:67>:
                                            FATAL()
                                        pmem2_source_size() <int pmem2_source_size (const struct pmem2_source *src, size_t *size) at libpmem2/source_posix.c:90>:
                                            LOG()
                                            PMEM2_ERR_CLR()
                                            ASSERT()
                                            os_fstat()
                                            ERR()
                                            pmem2_device_dax_size() <int pmem2_device_dax_size (const struct pmem2_source *src, size_t *size) at libpmem2/pmem2_utils_ndctl.c:58>:
                                                ndctl_new()
                                                ERR()
                                                pmem2_region_namespace() <int pmem2_region_namespace (struct ndctl_ctx *ctx, const struct pmem2_source *src, struct ndctl_region **pregion, struct ndctl_namespace **pndns) at libpmem2/region_namespace_ndctl.c:131>:
                                                    LOG()
                                                    ERR()
                                                    FOREACH_BUS_REGION_NAMESPACE()
                                                    ndctl_namespace_get_dax()
                                                    ASSERTeq()
                                                    ndctl_dax_get_daxctl_region()
                                                    daxctl_dev_foreach()
                                                    daxctl_dev_get_devname()
                                                    ndctl_match_devdax() <int ndctl_match_devdax (dev_t st_rdev, const char *devname) at libpmem2/region_namespace_ndctl.c:26>:
                                                        LOG()
                                                        stat()
                                                        util_snprintf() <int util_snprintf (char *str, size_t size, const char *format, ...) at core/util.c:434>:
                                                            va_start()
                                                            vsnprintf()
                                                            va_end()
                                                        ERR()
                                                        os_stat() <int os_stat (const char *pathname, os_stat_t *buf) at core/os_posix.c:79>:
                                                            stat()
                                                    ndctl_namespace_get_btt()
                                                    ndctl_btt_get_block_device()
                                                    ndctl_namespace_get_pfn()
                                                    ndctl_pfn_get_block_device()
                                                    ndctl_namespace_get_block_device()
                                                    ndctl_match_fsdax() <int ndctl_match_fsdax (dev_t st_dev, const char *devname) at libpmem2/region_namespace_ndctl.c:64>:
                                                        LOG()
                                                        util_snprintf() <int util_snprintf (char *str, size_t size, const char *format, ...) at core/util.c:434>:
                                                            va_start()
                                                            vsnprintf()
                                                            va_end()
                                                        ERR()
                                                        major()
                                                        minor()
                                                        os_open() <int os_open (const char *pathname, int flags, ...) at core/os_posix.c:29>:
                                                            va_start()
                                                            va_arg()
                                                            va_end()
                                                            open()
                                                        read()
                                                        os_close()
                                                        strcmp()
                                                LOG()
                                                ndctl_namespace_get_dax()
                                                ndctl_dax_get_size()
                                                ndctl_unref()
                                            FATAL()
                                        pmem2_source_delete() <int pmem2_source_delete (struct pmem2_source **src) at libpmem2/source.c:30>:
                                            Free() <Free_func Free at core/alloc.c:91>
                                        ERR()
                                    close()
                                Strdup() <Strdup_func Strdup at core/alloc.c:92>
                                util_replica_add_part_by_idx() <int util_replica_add_part_by_idx (struct pool_replica **repp, const char *path, size_t filesize, unsigned p) at common/set.c:662>:
                                    LOG()
                                    util_replica_reserve() <int util_replica_reserve (struct pool_replica **repp, unsigned n) at common/set.c:633>:
                                        LOG()
                                        Realloc()
                                        ERR()
                                        memset()
                                    ASSERTne()
                                    util_file_get_type() <enum file_type util_file_get_type (const char *path) at common/file.c:106>:
                                        LOG()
                                        ERR()
                                        util_file_exists() <int util_file_exists (const char *path) at common/file.c:32>:
                                            LOG()
                                            os_access() <int os_access (const char *pathname, int mode) at core/os_posix.c:97>:
                                                access()
                                            ERR()
                                        os_stat() <int os_stat (const char *pathname, os_stat_t *buf) at core/os_posix.c:79>:
                                            stat()
                                        util_stat_get_type() <enum file_type util_stat_get_type (const os_stat_t *st) at common/file.c:62>:
                                            pmem2_get_type_from_stat() <int pmem2_get_type_from_stat (const os_stat_t *st, enum pmem2_file_type *type) at libpmem2/pmem2_utils_linux.c:23>:
                                                S_ISREG()
                                                S_ISDIR()
                                                S_ISCHR()
                                                ERR()
                                                util_snprintf() <int util_snprintf (char *str, size_t size, const char *format, ...) at core/util.c:434>:
                                                    va_start()
                                                    vsnprintf()
                                                    va_end()
                                                os_major()
                                                os_minor()
                                                ASSERTinfo()
                                                LOG()
                                                realpath()
                                                strrchr()
                                                strcmp()
                                            pmem2_err_to_errno() <int pmem2_err_to_errno (int err) at libpmem2/pmem2_utils.c:67>:
                                                FATAL()
                                            ASSERTinfo()
                                    util_file_device_dax_alignment() <size_t util_file_device_dax_alignment (const char *path) at common/file_posix.c:139>:
                                        LOG()
                                        device_dax_alignment() <size_t device_dax_alignment (const char *path) at common/file_posix.c:105>:
                                            LOG()
                                            os_open() <int os_open (const char *pathname, int flags, ...) at core/os_posix.c:29>:
                                                va_start()
                                                va_arg()
                                                va_end()
                                                open()
                                            pmem2_source_from_fd() <int pmem2_source_from_fd (struct pmem2_source **src, int fd) at libpmem2/source_posix.c:19>:
                                                PMEM2_ERR_CLR()
                                                fcntl()
                                                ERR()
                                                os_fstat()
                                                pmem2_get_type_from_stat() <int pmem2_get_type_from_stat (const os_stat_t *st, enum pmem2_file_type *type) at libpmem2/pmem2_utils_linux.c:23>:
                                                    S_ISREG()
                                                    S_ISDIR()
                                                    S_ISCHR()
                                                    ERR()
                                                    util_snprintf() <int util_snprintf (char *str, size_t size, const char *format, ...) at core/util.c:434>:
                                                        va_start()
                                                        vsnprintf()
                                                        va_end()
                                                    os_major()
                                                    os_minor()
                                                    ASSERTinfo()
                                                    LOG()
                                                    realpath()
                                                    strrchr()
                                                    strcmp()
                                                pmem2_malloc() <void *pmem2_malloc (size_t size, int *err) at libpmem2/pmem2_utils.c:19>:
                                                    Malloc()
                                                    ERR()
                                                ASSERTne()
                                            pmem2_device_dax_alignment() <int pmem2_device_dax_alignment (const struct pmem2_source *src, size_t *alignment) at libpmem2/pmem2_utils_ndctl.c:18>:
                                                ndctl_new()
                                                ERR()
                                                pmem2_region_namespace() <int pmem2_region_namespace (struct ndctl_ctx *ctx, const struct pmem2_source *src, struct ndctl_region **pregion, struct ndctl_namespace **pndns) at libpmem2/region_namespace_ndctl.c:131>:
                                                    LOG()
                                                    ERR()
                                                    FOREACH_BUS_REGION_NAMESPACE()
                                                    ndctl_namespace_get_dax()
                                                    ASSERTeq()
                                                    ndctl_dax_get_daxctl_region()
                                                    daxctl_dev_foreach()
                                                    daxctl_dev_get_devname()
                                                    ndctl_match_devdax() <int ndctl_match_devdax (dev_t st_rdev, const char *devname) at libpmem2/region_namespace_ndctl.c:26>:
                                                        LOG()
                                                        stat()
                                                        util_snprintf() <int util_snprintf (char *str, size_t size, const char *format, ...) at core/util.c:434>:
                                                            va_start()
                                                            vsnprintf()
                                                            va_end()
                                                        ERR()
                                                        os_stat() <int os_stat (const char *pathname, os_stat_t *buf) at core/os_posix.c:79>:
                                                            stat()
                                                    ndctl_namespace_get_btt()
                                                    ndctl_btt_get_block_device()
                                                    ndctl_namespace_get_pfn()
                                                    ndctl_pfn_get_block_device()
                                                    ndctl_namespace_get_block_device()
                                                    ndctl_match_fsdax() <int ndctl_match_fsdax (dev_t st_dev, const char *devname) at libpmem2/region_namespace_ndctl.c:64>:
                                                        LOG()
                                                        util_snprintf() <int util_snprintf (char *str, size_t size, const char *format, ...) at core/util.c:434>:
                                                            va_start()
                                                            vsnprintf()
                                                            va_end()
                                                        ERR()
                                                        major()
                                                        minor()
                                                        os_open() <int os_open (const char *pathname, int flags, ...) at core/os_posix.c:29>:
                                                            va_start()
                                                            va_arg()
                                                            va_end()
                                                            open()
                                                        read()
                                                        os_close()
                                                        strcmp()
                                                LOG()
                                                ndctl_namespace_get_dax()
                                                ndctl_dax_get_align()
                                                ndctl_unref()
                                            pmem2_source_delete() <int pmem2_source_delete (struct pmem2_source **src) at libpmem2/source.c:30>:
                                                Free() <Free_func Free at core/alloc.c:91>
                                            os_close()
                                fs_delete() <void fs_delete (struct fs *f) at core/fs_posix.c:80>:
                                    fts_close()
                                    Free() <Free_func Free at core/alloc.c:91>
                            ERR()
                            VEC_SIZE()
                            util_replica_reserve() <int util_replica_reserve (struct pool_replica **repp, unsigned n) at common/set.c:633>:
                                LOG()
                                Realloc()
                                ERR()
                                memset()
                            VEC_GET()
                            strlen()
                            Malloc()
                            snprintf()
                        os_fclose()
                        util_poolset_check_options() <int util_poolset_check_options (struct pool_set *set) at common/set.c:933>:
                            LOG()
                            ERR()
                        util_poolset_set_size() <void util_poolset_set_size (struct pool_set *set) at common/set.c:949>:
                            LOG()
                        util_poolset_free() <void util_poolset_free (struct pool_set *set) at common/set.c:312>:
                            LOG()
                            Free() <Free_func Free at core/alloc.c:91>
                            VEC_FOREACH_BY_PTR()
                            VEC_DELETE()
                IGNORE_SDS()
                util_poolset_append_new_part() <int util_poolset_append_new_part (struct pool_set *set, size_t size) at common/set.c:2174>:
                    LOG()
                    VEC_SIZE()
                    VEC_GET()
                    strlen()
                    Malloc()
                    ERR()
                    snprintf()
                    util_replica_add_part() <int util_replica_add_part (struct pool_replica **repp, const char *path, size_t filesize) at common/set.c:708>:
                        LOG()
                        util_replica_add_part_by_idx() <int util_replica_add_part_by_idx (struct pool_replica **repp, const char *path, size_t filesize, unsigned p) at common/set.c:662>:
                            LOG()
                            util_replica_reserve() <int util_replica_reserve (struct pool_replica **repp, unsigned n) at common/set.c:633>:
                                LOG()
                                Realloc()
                                ERR()
                                memset()
                            ASSERTne()
                            util_file_get_type() <enum file_type util_file_get_type (const char *path) at common/file.c:106>:
                                LOG()
                                ERR()
                                util_file_exists() <int util_file_exists (const char *path) at common/file.c:32>:
                                    LOG()
                                    os_access() <int os_access (const char *pathname, int mode) at core/os_posix.c:97>:
                                        access()
                                    ERR()
                                os_stat() <int os_stat (const char *pathname, os_stat_t *buf) at core/os_posix.c:79>:
                                    stat()
                                util_stat_get_type() <enum file_type util_stat_get_type (const os_stat_t *st) at common/file.c:62>:
                                    pmem2_get_type_from_stat() <int pmem2_get_type_from_stat (const os_stat_t *st, enum pmem2_file_type *type) at libpmem2/pmem2_utils_linux.c:23>:
                                        S_ISREG()
                                        S_ISDIR()
                                        S_ISCHR()
                                        ERR()
                                        util_snprintf() <int util_snprintf (char *str, size_t size, const char *format, ...) at core/util.c:434>:
                                            va_start()
                                            vsnprintf()
                                            va_end()
                                        os_major()
                                        os_minor()
                                        ASSERTinfo()
                                        LOG()
                                        realpath()
                                        strrchr()
                                        strcmp()
                                    pmem2_err_to_errno() <int pmem2_err_to_errno (int err) at libpmem2/pmem2_utils.c:67>:
                                        FATAL()
                                    ASSERTinfo()
                            util_file_device_dax_alignment() <size_t util_file_device_dax_alignment (const char *path) at common/file_posix.c:139>:
                                LOG()
                                device_dax_alignment() <size_t device_dax_alignment (const char *path) at common/file_posix.c:105>:
                                    LOG()
                                    os_open() <int os_open (const char *pathname, int flags, ...) at core/os_posix.c:29>:
                                        va_start()
                                        va_arg()
                                        va_end()
                                        open()
                                    pmem2_source_from_fd() <int pmem2_source_from_fd (struct pmem2_source **src, int fd) at libpmem2/source_posix.c:19>:
                                        PMEM2_ERR_CLR()
                                        fcntl()
                                        ERR()
                                        os_fstat()
                                        pmem2_get_type_from_stat() <int pmem2_get_type_from_stat (const os_stat_t *st, enum pmem2_file_type *type) at libpmem2/pmem2_utils_linux.c:23>:
                                            S_ISREG()
                                            S_ISDIR()
                                            S_ISCHR()
                                            ERR()
                                            util_snprintf() <int util_snprintf (char *str, size_t size, const char *format, ...) at core/util.c:434>:
                                                va_start()
                                                vsnprintf()
                                                va_end()
                                            os_major()
                                            os_minor()
                                            ASSERTinfo()
                                            LOG()
                                            realpath()
                                            strrchr()
                                            strcmp()
                                        pmem2_malloc() <void *pmem2_malloc (size_t size, int *err) at libpmem2/pmem2_utils.c:19>:
                                            Malloc()
                                            ERR()
                                        ASSERTne()
                                    pmem2_device_dax_alignment() <int pmem2_device_dax_alignment (const struct pmem2_source *src, size_t *alignment) at libpmem2/pmem2_utils_ndctl.c:18>:
                                        ndctl_new()
                                        ERR()
                                        pmem2_region_namespace() <int pmem2_region_namespace (struct ndctl_ctx *ctx, const struct pmem2_source *src, struct ndctl_region **pregion, struct ndctl_namespace **pndns) at libpmem2/region_namespace_ndctl.c:131>:
                                            LOG()
                                            ERR()
                                            FOREACH_BUS_REGION_NAMESPACE()
                                            ndctl_namespace_get_dax()
                                            ASSERTeq()
                                            ndctl_dax_get_daxctl_region()
                                            daxctl_dev_foreach()
                                            daxctl_dev_get_devname()
                                            ndctl_match_devdax() <int ndctl_match_devdax (dev_t st_rdev, const char *devname) at libpmem2/region_namespace_ndctl.c:26>:
                                                LOG()
                                                stat()
                                                util_snprintf() <int util_snprintf (char *str, size_t size, const char *format, ...) at core/util.c:434>:
                                                    va_start()
                                                    vsnprintf()
                                                    va_end()
                                                ERR()
                                                os_stat() <int os_stat (const char *pathname, os_stat_t *buf) at core/os_posix.c:79>:
                                                    stat()
                                            ndctl_namespace_get_btt()
                                            ndctl_btt_get_block_device()
                                            ndctl_namespace_get_pfn()
                                            ndctl_pfn_get_block_device()
                                            ndctl_namespace_get_block_device()
                                            ndctl_match_fsdax() <int ndctl_match_fsdax (dev_t st_dev, const char *devname) at libpmem2/region_namespace_ndctl.c:64>:
                                                LOG()
                                                util_snprintf() <int util_snprintf (char *str, size_t size, const char *format, ...) at core/util.c:434>:
                                                    va_start()
                                                    vsnprintf()
                                                    va_end()
                                                ERR()
                                                major()
                                                minor()
                                                os_open() <int os_open (const char *pathname, int flags, ...) at core/os_posix.c:29>:
                                                    va_start()
                                                    va_arg()
                                                    va_end()
                                                    open()
                                                read()
                                                os_close()
                                                strcmp()
                                        LOG()
                                        ndctl_namespace_get_dax()
                                        ndctl_dax_get_align()
                                        ndctl_unref()
                                    pmem2_source_delete() <int pmem2_source_delete (struct pmem2_source **src) at libpmem2/source.c:30>:
                                        Free() <Free_func Free at core/alloc.c:91>
                                    os_close()
                    FATAL()
                    util_poolset_set_size() <void util_poolset_set_size (struct pool_set *set) at common/set.c:949>:
                        LOG()
                    Free() <Free_func Free at core/alloc.c:91>
                badblocks_check_poolset() <int badblocks_check_poolset (struct pool_set *set, int create) at common/set_badblocks.c:69>:
                    LOG()
                    util_poolset_foreach_part_struct() <int util_poolset_foreach_part_struct (struct pool_set *set, int (*callback) (struct part_file *pf, void *arg), void *arg) at common/set.c:3136>:
                        LOG()
                        ASSERTne()
                    badblocks_check_file_cb() <int badblocks_check_file_cb (struct part_file *pf, void *arg) at common/set_badblocks.c:30>:
                        LOG()
                        util_file_exists() <int util_file_exists (const char *path) at common/file.c:32>:
                            LOG()
                            os_access() <int os_access (const char *pathname, int mode) at core/os_posix.c:97>:
                                access()
                            ERR()
                        badblocks_check_file() <int badblocks_check_file (const char *file) at common/bad_blocks.c:248>:
                            LOG()
                            badblocks_count() <long badblocks_count (const char *file) at common/bad_blocks.c:22>:
                                LOG()
                                badblocks_new() <struct badblocks *badblocks_new (void) at libpmem2/badblocks.c:16>:
                                    LOG()
                                    Zalloc() <void *Zalloc (size_t sz) at core/alloc.c:98>:
                                        Malloc()
                                        memset()
                                    ERR()
                                badblocks_get() <int badblocks_get (const char *file, struct badblocks *bbs) at common/bad_blocks.c:45>:
                                    LOG()
                                    ASSERTne()
                                    VEC()
                                    memset()
                                    os_open() <int os_open (const char *pathname, int flags, ...) at core/os_posix.c:29>:
                                        va_start()
                                        va_arg()
                                        va_end()
                                        open()
                                    ERR()
                                    pmem2_source_from_fd() <int pmem2_source_from_fd (struct pmem2_source **src, int fd) at libpmem2/source_posix.c:19>:
                                        PMEM2_ERR_CLR()
                                        fcntl()
                                        ERR()
                                        os_fstat()
                                        pmem2_get_type_from_stat() <int pmem2_get_type_from_stat (const os_stat_t *st, enum pmem2_file_type *type) at libpmem2/pmem2_utils_linux.c:23>:
                                            S_ISREG()
                                            S_ISDIR()
                                            S_ISCHR()
                                            ERR()
                                            util_snprintf() <int util_snprintf (char *str, size_t size, const char *format, ...) at core/util.c:434>:
                                                va_start()
                                                vsnprintf()
                                                va_end()
                                            os_major()
                                            os_minor()
                                            ASSERTinfo()
                                            LOG()
                                            realpath()
                                            strrchr()
                                            strcmp()
                                        pmem2_malloc() <void *pmem2_malloc (size_t size, int *err) at libpmem2/pmem2_utils.c:19>:
                                            Malloc()
                                            ERR()
                                        ASSERTne()
                                    pmem2_badblock_context_new() <int pmem2_badblock_context_new (struct pmem2_badblock_context **bbctx, const struct pmem2_source *src) at libpmem2/badblocks_ndctl.c:250>:
                                        LOG()
                                        PMEM2_ERR_CLR()
                                        ASSERTne()
                                        ERR()
                                        ASSERTeq()
                                        ndctl_new()
                                        pmem2_region_namespace() <int pmem2_region_namespace (struct ndctl_ctx *ctx, const struct pmem2_source *src, struct ndctl_region **pregion, struct ndctl_namespace **pndns) at libpmem2/region_namespace_ndctl.c:131>:
                                            LOG()
                                            ERR()
                                            FOREACH_BUS_REGION_NAMESPACE()
                                            ndctl_namespace_get_dax()
                                            ASSERTeq()
                                            ndctl_dax_get_daxctl_region()
                                            daxctl_dev_foreach()
                                            daxctl_dev_get_devname()
                                            ndctl_match_devdax() <int ndctl_match_devdax (dev_t st_rdev, const char *devname) at libpmem2/region_namespace_ndctl.c:26>:
                                                LOG()
                                                stat()
                                                util_snprintf() <int util_snprintf (char *str, size_t size, const char *format, ...) at core/util.c:434>:
                                                    va_start()
                                                    vsnprintf()
                                                    va_end()
                                                ERR()
                                                os_stat() <int os_stat (const char *pathname, os_stat_t *buf) at core/os_posix.c:79>:
                                                    stat()
                                            ndctl_namespace_get_btt()
                                            ndctl_btt_get_block_device()
                                            ndctl_namespace_get_pfn()
                                            ndctl_pfn_get_block_device()
                                            ndctl_namespace_get_block_device()
                                            ndctl_match_fsdax() <int ndctl_match_fsdax (dev_t st_dev, const char *devname) at libpmem2/region_namespace_ndctl.c:64>:
                                                LOG()
                                                util_snprintf() <int util_snprintf (char *str, size_t size, const char *format, ...) at core/util.c:434>:
                                                    va_start()
                                                    vsnprintf()
                                                    va_end()
                                                ERR()
                                                major()
                                                minor()
                                                os_open() <int os_open (const char *pathname, int flags, ...) at core/os_posix.c:29>:
                                                    va_start()
                                                    va_arg()
                                                    va_end()
                                                    open()
                                                read()
                                                os_close()
                                                strcmp()
                                        pmem2_zalloc() <void *pmem2_zalloc (size_t size, int *err) at libpmem2/pmem2_utils.c:36>:
                                            Zalloc() <void *Zalloc (size_t sz) at core/alloc.c:98>:
                                                Malloc()
                                                memset()
                                            ERR()
                                        ndctl_namespace_get_mode()
                                        pmem2_badblock_next_namespace() <int pmem2_badblock_next_namespace (struct pmem2_badblock_context *bbctx, struct pmem2_badblock *bb) at libpmem2/badblocks_ndctl.c:441>:
                                            LOG()
                                            ASSERTne()
                                            SEC2B()
                                        pmem2_namespace_get_first_badblock() <void *pmem2_namespace_get_first_badblock (struct pmem2_badblock_context *bbctx) at libpmem2/badblocks_ndctl.c:399>:
                                            LOG()
                                            pmem2_namespace_get_next_badblock() <void *pmem2_namespace_get_next_badblock (struct pmem2_badblock_context *bbctx) at libpmem2/badblocks_ndctl.c:387>:
                                                LOG()
                                                ndctl_namespace_get_next_badblock()
                                            ndctl_namespace_get_first_badblock()
                                        badblocks_get_namespace_bounds() <int badblocks_get_namespace_bounds (struct ndctl_region *region, struct ndctl_namespace *ndns, unsigned long long *ns_offset, unsigned long long *ns_size) at libpmem2/badblocks_ndctl.c:101>:
                                            LOG()
                                            ndctl_namespace_get_pfn()
                                            ndctl_namespace_get_dax()
                                            ASSERTne()
                                            ndctl_pfn_get_resource()
                                            ERR()
                                            ndctl_pfn_get_size()
                                            ndctl_dax_get_resource()
                                            ndctl_dax_get_size()
                                            ndctl_namespace_get_resource()
                                            ndctl_namespace_get_size()
                                            ndctl_region_get_resource()
                                        B2SEC()
                                        ndctl_region_get_bus()
                                        ndctl_region_get_resource()
                                        pmem2_badblock_next_region() <int pmem2_badblock_next_region (struct pmem2_badblock_context *bbctx, struct pmem2_badblock *bb) at libpmem2/badblocks_ndctl.c:474>:
                                            LOG()
                                            ASSERTne()
                                            SEC2B()
                                            B2SEC()
                                        pmem2_region_get_first_badblock() <void *pmem2_region_get_first_badblock (struct pmem2_badblock_context *bbctx) at libpmem2/badblocks_ndctl.c:424>:
                                            LOG()
                                            pmem2_region_get_next_badblock() <void *pmem2_region_get_next_badblock (struct pmem2_badblock_context *bbctx) at libpmem2/badblocks_ndctl.c:412>:
                                                LOG()
                                                ndctl_region_get_next_badblock()
                                            ndctl_region_get_first_badblock()
                                        pmem2_extents_create_get() <int pmem2_extents_create_get (int fd, struct extents **exts) at libpmem2/extent_linux.c:27>:
                                            LOG()
                                            ASSERT()
                                            ASSERTne()
                                            os_fstat()
                                            ERR()
                                            pmem2_get_type_from_stat() <int pmem2_get_type_from_stat (const os_stat_t *st, enum pmem2_file_type *type) at libpmem2/pmem2_utils_linux.c:23>:
                                                S_ISREG()
                                                S_ISDIR()
                                                S_ISCHR()
                                                ERR()
                                                util_snprintf() <int util_snprintf (char *str, size_t size, const char *format, ...) at core/util.c:434>:
                                                    va_start()
                                                    vsnprintf()
                                                    va_end()
                                                os_major()
                                                os_minor()
                                                ASSERTinfo()
                                                LOG()
                                                realpath()
                                                strrchr()
                                                strcmp()
                                            pmem2_zalloc() <void *pmem2_zalloc (size_t size, int *err) at libpmem2/pmem2_utils.c:36>:
                                                Zalloc() <void *Zalloc (size_t sz) at core/alloc.c:98>:
                                                    Malloc()
                                                    memset()
                                                ERR()
                                            ASSERTeq()
                                            ioctl()
                                            pmem2_realloc() <void *pmem2_realloc (void *ptr, size_t size, int *err) at libpmem2/pmem2_utils.c:53>:
                                                Realloc()
                                                ERR()
                                            memset()
                                            pmem2_malloc() <void *pmem2_malloc (size_t size, int *err) at libpmem2/pmem2_utils.c:19>:
                                                Malloc()
                                                ERR()
                                            Free() <Free_func Free at core/alloc.c:91>
                                        pmem2_extents_destroy() <void pmem2_extents_destroy (struct extents **exts) at libpmem2/extent_linux.c:153>:
                                            LOG()
                                            ASSERTne()
                                            Free() <Free_func Free at core/alloc.c:91>
                                        Free() <Free_func Free at core/alloc.c:91>
                                        ndctl_unref()
                                    pmem2_badblock_next() <int pmem2_badblock_next (struct pmem2_badblock_context *bbctx, struct pmem2_badblock *bb) at libpmem2/badblocks_ndctl.c:530>:
                                        LOG()
                                        PMEM2_ERR_CLR()
                                        ASSERTne()
                                        ERR()
                                        ASSERTeq()
                                        ALIGN_UP()
                                    VEC_PUSH_BACK()
                                    VEC_DELETE()
                                    Free() <Free_func Free at core/alloc.c:91>
                                    VEC_ARR()
                                    VEC_SIZE()
                                    ASSERTeq()
                                    pmem2_badblock_context_delete() <void pmem2_badblock_context_delete (struct pmem2_badblock_context **bbctx) at libpmem2/badblocks_ndctl.c:363>:
                                        LOG()
                                        PMEM2_ERR_CLR()
                                        ASSERTne()
                                        pmem2_extents_destroy() <void pmem2_extents_destroy (struct extents **exts) at libpmem2/extent_linux.c:153>:
                                            LOG()
                                            ASSERTne()
                                            Free() <Free_func Free at core/alloc.c:91>
                                        ndctl_unref()
                                        Free() <Free_func Free at core/alloc.c:91>
                                    pmem2_source_delete() <int pmem2_source_delete (struct pmem2_source **src) at libpmem2/source.c:30>:
                                        Free() <Free_func Free at core/alloc.c:91>
                                    os_close()
                                    pmem2_err_to_errno() <int pmem2_err_to_errno (int err) at libpmem2/pmem2_utils.c:67>:
                                        FATAL()
                                badblocks_delete() <void badblocks_delete (struct badblocks *bbs) at libpmem2/badblocks.c:32>:
                                    LOG()
                                    Free() <Free_func Free at core/alloc.c:91>
                        ERR()
                util_poolset_foreach_part_struct() <int util_poolset_foreach_part_struct (struct pool_set *set, int (*callback) (struct part_file *pf, void *arg), void *arg) at common/set.c:3136>:
                    LOG()
                    ASSERTne()
                util_print_bad_files_cb() <int util_print_bad_files_cb (struct part_file *pf, void *arg) at common/set.c:2332>:
                    SUPPRESS_UNUSED()
                    ERR()
                util_is_zeroed() <int util_is_zeroed (const void *addr, size_t len) at core/util.c:113>:
                    memcmp()
                memcpy()
                util_uuid_generate()
                util_poolset_files_local() <int util_poolset_files_local (struct pool_set *set, size_t minpartsize, int create) at common/set.c:1532>:
                    LOG()
                    util_part_open() <int util_part_open (struct pool_set_part *part, size_t minsize, int create_part) at common/set.c:1459>:
                        LOG()
                        util_file_exists() <int util_file_exists (const char *path) at common/file.c:32>:
                            LOG()
                            os_access() <int os_access (const char *pathname, int mode) at core/os_posix.c:97>:
                                access()
                            ERR()
                        util_file_create() <int util_file_create (const char *path, size_t size, size_t minsize) at common/file.c:398>:
                            LOG()
                            ASSERTne()
                            ERR()
                            os_open() <int os_open (const char *pathname, int flags, ...) at core/os_posix.c:29>:
                                va_start()
                                va_arg()
                                va_end()
                                open()
                            os_posix_fallocate() <int os_posix_fallocate (int fd, os_off_t offset, off_t len) at core/os_posix.c:142>:
                                posix_fallocate()
                            os_flock() <int os_flock (int fd, int operation) at core/os_posix.c:215>:
                                flock()
                            os_close()
                            os_unlink() <int os_unlink (const char *pathname) at core/os_posix.c:88>:
                                unlink()
                        util_file_open() <int util_file_open (const char *path, size_t *size, size_t minsize, int flags) at common/file.c:456>:
                            LOG()
                            os_open() <int os_open (const char *pathname, int flags, ...) at core/os_posix.c:29>:
                                va_start()
                                va_arg()
                                va_end()
                                open()
                            ERR()
                            os_flock() <int os_flock (int fd, int operation) at core/os_posix.c:215>:
                                flock()
                            os_close()
                            ASSERTeq()
                            util_fd_get_size() <ssize_t util_fd_get_size (int fd) at common/file.c:157>:
                                LOG()
                                pmem2_source_from_fd() <int pmem2_source_from_fd (struct pmem2_source **src, int fd) at libpmem2/source_posix.c:19>:
                                    PMEM2_ERR_CLR()
                                    fcntl()
                                    ERR()
                                    os_fstat()
                                    pmem2_get_type_from_stat() <int pmem2_get_type_from_stat (const os_stat_t *st, enum pmem2_file_type *type) at libpmem2/pmem2_utils_linux.c:23>:
                                        S_ISREG()
                                        S_ISDIR()
                                        S_ISCHR()
                                        ERR()
                                        util_snprintf() <int util_snprintf (char *str, size_t size, const char *format, ...) at core/util.c:434>:
                                            va_start()
                                            vsnprintf()
                                            va_end()
                                        os_major()
                                        os_minor()
                                        ASSERTinfo()
                                        LOG()
                                        realpath()
                                        strrchr()
                                        strcmp()
                                    pmem2_malloc() <void *pmem2_malloc (size_t size, int *err) at libpmem2/pmem2_utils.c:19>:
                                        Malloc()
                                        ERR()
                                    ASSERTne()
                                pmem2_err_to_errno() <int pmem2_err_to_errno (int err) at libpmem2/pmem2_utils.c:67>:
                                    FATAL()
                                pmem2_source_size() <int pmem2_source_size (const struct pmem2_source *src, size_t *size) at libpmem2/source_posix.c:90>:
                                    LOG()
                                    PMEM2_ERR_CLR()
                                    ASSERT()
                                    os_fstat()
                                    ERR()
                                    pmem2_device_dax_size() <int pmem2_device_dax_size (const struct pmem2_source *src, size_t *size) at libpmem2/pmem2_utils_ndctl.c:58>:
                                        ndctl_new()
                                        ERR()
                                        pmem2_region_namespace() <int pmem2_region_namespace (struct ndctl_ctx *ctx, const struct pmem2_source *src, struct ndctl_region **pregion, struct ndctl_namespace **pndns) at libpmem2/region_namespace_ndctl.c:131>:
                                            LOG()
                                            ERR()
                                            FOREACH_BUS_REGION_NAMESPACE()
                                            ndctl_namespace_get_dax()
                                            ASSERTeq()
                                            ndctl_dax_get_daxctl_region()
                                            daxctl_dev_foreach()
                                            daxctl_dev_get_devname()
                                            ndctl_match_devdax() <int ndctl_match_devdax (dev_t st_rdev, const char *devname) at libpmem2/region_namespace_ndctl.c:26>:
                                                LOG()
                                                stat()
                                                util_snprintf() <int util_snprintf (char *str, size_t size, const char *format, ...) at core/util.c:434>:
                                                    va_start()
                                                    vsnprintf()
                                                    va_end()
                                                ERR()
                                                os_stat() <int os_stat (const char *pathname, os_stat_t *buf) at core/os_posix.c:79>:
                                                    stat()
                                            ndctl_namespace_get_btt()
                                            ndctl_btt_get_block_device()
                                            ndctl_namespace_get_pfn()
                                            ndctl_pfn_get_block_device()
                                            ndctl_namespace_get_block_device()
                                            ndctl_match_fsdax() <int ndctl_match_fsdax (dev_t st_dev, const char *devname) at libpmem2/region_namespace_ndctl.c:64>:
                                                LOG()
                                                util_snprintf() <int util_snprintf (char *str, size_t size, const char *format, ...) at core/util.c:434>:
                                                    va_start()
                                                    vsnprintf()
                                                    va_end()
                                                ERR()
                                                major()
                                                minor()
                                                os_open() <int os_open (const char *pathname, int flags, ...) at core/os_posix.c:29>:
                                                    va_start()
                                                    va_arg()
                                                    va_end()
                                                    open()
                                                read()
                                                os_close()
                                                strcmp()
                                        LOG()
                                        ndctl_namespace_get_dax()
                                        ndctl_dax_get_size()
                                        ndctl_unref()
                                    FATAL()
                                pmem2_source_delete() <int pmem2_source_delete (struct pmem2_source **src) at libpmem2/source.c:30>:
                                    Free() <Free_func Free at core/alloc.c:91>
                                ERR()
                        os_posix_fallocate() <int os_posix_fallocate (int fd, os_off_t offset, off_t len) at core/os_posix.c:142>:
                            posix_fallocate()
                        ERR()
                util_replica_map_local() <int util_replica_map_local (struct pool_set *set, unsigned repidx, int flags) at common/set.c:1924>:
                    LOG()
                    ASSERTne()
                    util_map_hint() <char *util_map_hint (size_t len, size_t req_align) at common/mmap_posix.c:118>:
                        LOG()
                        util_map_hint_align()
                        util_map_hint_unused() <char *util_map_hint_unused (void *minaddr, size_t len, size_t align) at common/mmap_posix.c:36>:
                            LOG()
                            ASSERT()
                            os_fopen() <FILE *os_fopen (const char *pathname, const char *mode) at core/os_posix.c:106>:
                                fopen()
                            ERR()
                            roundup()
                            fgets()
                            sscanf()
                            fclose()
                        mmap()
                        ERR()
                        roundup()
                        munmap()
                    util_map_part() <int util_map_part (struct pool_set_part *part, void *addr, size_t size, size_t offset, int flags, int rdonly) at common/set.c:229>:
                        LOG()
                        ASSERTeq()
                        ASSERT()
                        roundup()
                        util_map_sync() <void *util_map_sync (void *addr, size_t len, int proto, int flags, int fd, os_off_t offset, int *map_sync) at common/mmap_posix.c:159>:
                            LOG()
                            mmap()
                        ERR()
                        munmap()
                        VALGRIND_REGISTER_PMEM_MAPPING()
                        VALGRIND_REGISTER_PMEM_FILE()
                    VALGRIND_REGISTER_PMEM_MAPPING()
                    VALGRIND_REGISTER_PMEM_FILE()
                    util_unmap_parts() <int util_unmap_parts (struct pool_replica *rep, unsigned start_index, unsigned end_index) at common/set.c:296>:
                        LOG()
                        util_unmap_part() <int util_unmap_part (struct pool_set_part *part) at common/set.c:274>:
                            LOG()
                            VALGRIND_REMOVE_PMEM_MAPPING()
                            munmap()
                            ERR()
                    munmap()
                    util_replica_check_map_sync() <int util_replica_check_map_sync (struct pool_set *set, unsigned repidx, int check_hdr) at common/set.c:860>:
                        LOG()
                        ERR()
                    util_replica_set_is_pmem() <inline void util_replica_set_is_pmem (struct pool_replica *rep) at common/set.c:1914>:
                        pmem_is_pmem()
                    util_replica_force_page_allocation() <void util_replica_force_page_allocation (struct pool_replica *rep) at common/set.c:141>:
                        VALGRIND_SET_CLEAN()
                    ASSERTeq()
                    util_unmap_part() <int util_unmap_part (struct pool_set_part *part) at common/set.c:274>:
                        LOG()
                        VALGRIND_REMOVE_PMEM_MAPPING()
                        munmap()
                        ERR()
                util_replica_create_local() <int util_replica_create_local (struct pool_set *set, unsigned repidx, int flags, const struct pool_attr *attr) at common/set.c:2105>:
                    LOG()
                    PART()
                    REP()
                    util_replica_map_local() <int util_replica_map_local (struct pool_set *set, unsigned repidx, int flags) at common/set.c:1924>:
                        LOG()
                        ASSERTne()
                        util_map_hint() <char *util_map_hint (size_t len, size_t req_align) at common/mmap_posix.c:118>:
                            LOG()
                            util_map_hint_align()
                            util_map_hint_unused() <char *util_map_hint_unused (void *minaddr, size_t len, size_t align) at common/mmap_posix.c:36>:
                                LOG()
                                ASSERT()
                                os_fopen() <FILE *os_fopen (const char *pathname, const char *mode) at core/os_posix.c:106>:
                                    fopen()
                                ERR()
                                roundup()
                                fgets()
                                sscanf()
                                fclose()
                            mmap()
                            ERR()
                            roundup()
                            munmap()
                        util_map_part() <int util_map_part (struct pool_set_part *part, void *addr, size_t size, size_t offset, int flags, int rdonly) at common/set.c:229>:
                            LOG()
                            ASSERTeq()
                            ASSERT()
                            roundup()
                            util_map_sync() <void *util_map_sync (void *addr, size_t len, int proto, int flags, int fd, os_off_t offset, int *map_sync) at common/mmap_posix.c:159>:
                                LOG()
                                mmap()
                            ERR()
                            munmap()
                            VALGRIND_REGISTER_PMEM_MAPPING()
                            VALGRIND_REGISTER_PMEM_FILE()
                        VALGRIND_REGISTER_PMEM_MAPPING()
                        VALGRIND_REGISTER_PMEM_FILE()
                        util_unmap_parts() <int util_unmap_parts (struct pool_replica *rep, unsigned start_index, unsigned end_index) at common/set.c:296>:
                            LOG()
                            util_unmap_part() <int util_unmap_part (struct pool_set_part *part) at common/set.c:274>:
                                LOG()
                                VALGRIND_REMOVE_PMEM_MAPPING()
                                munmap()
                                ERR()
                        munmap()
                        util_replica_check_map_sync() <int util_replica_check_map_sync (struct pool_set *set, unsigned repidx, int check_hdr) at common/set.c:860>:
                            LOG()
                            ERR()
                        util_replica_set_is_pmem() <inline void util_replica_set_is_pmem (struct pool_replica *rep) at common/set.c:1914>:
                            pmem_is_pmem()
                        util_replica_force_page_allocation() <void util_replica_force_page_allocation (struct pool_replica *rep) at common/set.c:141>:
                            VALGRIND_SET_CLEAN()
                        ASSERTeq()
                        util_unmap_part() <int util_unmap_part (struct pool_set_part *part) at common/set.c:274>:
                            LOG()
                            VALGRIND_REMOVE_PMEM_MAPPING()
                            munmap()
                            ERR()
                    util_replica_init_headers_local() <int util_replica_init_headers_local (struct pool_set *set, unsigned repidx, int flags, const struct pool_attr *attr) at common/set.c:2061>:
                        LOG()
                        util_map_hdr() <int util_map_hdr (struct pool_set_part *part, int flags, int rdonly) at common/set.c:155>:
                            LOG()
                            COMPILE_ERROR_ON()
                            ASSERTeq()
                            util_map_hint() <char *util_map_hint (size_t len, size_t req_align) at common/mmap_posix.c:118>:
                                LOG()
                                util_map_hint_align()
                                util_map_hint_unused() <char *util_map_hint_unused (void *minaddr, size_t len, size_t align) at common/mmap_posix.c:36>:
                                    LOG()
                                    ASSERT()
                                    os_fopen() <FILE *os_fopen (const char *pathname, const char *mode) at core/os_posix.c:106>:
                                        fopen()
                                    ERR()
                                    roundup()
                                    fgets()
                                    sscanf()
                                    fclose()
                                mmap()
                                ERR()
                                roundup()
                                munmap()
                            util_map_sync() <void *util_map_sync (void *addr, size_t len, int proto, int flags, int fd, os_off_t offset, int *map_sync) at common/mmap_posix.c:159>:
                                LOG()
                                mmap()
                            ERR()
                            VALGRIND_REGISTER_PMEM_MAPPING()
                            VALGRIND_REGISTER_PMEM_FILE()
                        util_header_create() <int util_header_create (struct pool_set *set, unsigned repidx, unsigned partidx, const struct pool_attr *attr, int overwrite) at common/set.c:1683>:
                            LOG()
                            ASSERTne()
                            util_is_zeroed() <int util_is_zeroed (const void *addr, size_t len) at core/util.c:113>:
                                memcmp()
                            ERR()
                            util_pool_attr2hdr() <void util_pool_attr2hdr (struct pool_hdr *hdr, const struct pool_attr *attr) at common/set.c:2725>:
                                LOG()
                                ASSERTne()
                                memcpy()
                            memcpy()
                            PART()
                            ASSERTeq()
                            PARTP()
                            PARTN()
                            REPP()
                            REPN()
                            os_fstat()
                            ASSERT()
                            util_get_arch_flags() <void util_get_arch_flags (struct arch_flags *arch_flags) at common/pool_hdr.c:59>:
                                memset()
                                arch_data() <uint8_t arch_data (void) at common/pool_hdr.c:49>:
                                alignment_desc()
                            util_convert2le_hdr() <void util_convert2le_hdr (struct pool_hdr *hdrp) at common/pool_hdr.c:72>:
                                htole32()
                                htole64()
                                htole16()
                            shutdown_state_init() <int shutdown_state_init (struct shutdown_state *sds, struct pool_replica *rep) at common/shutdown_state.c:39>:
                                COMPILE_ERROR_ON()
                                LOG()
                                memset()
                                shutdown_state_checksum() <void shutdown_state_checksum (struct shutdown_state *sds, struct pool_replica *rep) at common/shutdown_state.c:27>:
                                    LOG()
                                    util_checksum() <int util_checksum (void *addr, size_t len, uint64_t *csump, int insert, size_t skip_off) at core/util.c:178>:
                                        util_checksum_compute() <uint64_t util_checksum_compute (void *addr, size_t len, uint64_t *csump, size_t skip_off) at core/util.c:134>:
                                            abort()
                                            le32toh()
                                        htole64()
                                    FLUSH_SDS()
                            shutdown_state_add_part() <int shutdown_state_add_part (struct shutdown_state *sds, int fd, struct pool_replica *rep) at common/shutdown_state.c:58>:
                                LOG()
                                pmem2_source_from_fd() <int pmem2_source_from_fd (struct pmem2_source **src, int fd) at libpmem2/source_posix.c:19>:
                                    PMEM2_ERR_CLR()
                                    fcntl()
                                    ERR()
                                    os_fstat()
                                    pmem2_get_type_from_stat() <int pmem2_get_type_from_stat (const os_stat_t *st, enum pmem2_file_type *type) at libpmem2/pmem2_utils_linux.c:23>:
                                        S_ISREG()
                                        S_ISDIR()
                                        S_ISCHR()
                                        ERR()
                                        util_snprintf() <int util_snprintf (char *str, size_t size, const char *format, ...) at core/util.c:434>:
                                            va_start()
                                            vsnprintf()
                                            va_end()
                                        os_major()
                                        os_minor()
                                        ASSERTinfo()
                                        LOG()
                                        realpath()
                                        strrchr()
                                        strcmp()
                                    pmem2_malloc() <void *pmem2_malloc (size_t size, int *err) at libpmem2/pmem2_utils.c:19>:
                                        Malloc()
                                        ERR()
                                    ASSERTne()
                                pmem2_source_device_usc() <int pmem2_source_device_usc (const struct pmem2_source *src, uint64_t *usc) at libpmem2/usc_ndctl.c:23>:
                                    LOG()
                                    PMEM2_ERR_CLR()
                                    ERR()
                                    ASSERTeq()
                                    ndctl_new()
                                    pmem2_region_namespace() <int pmem2_region_namespace (struct ndctl_ctx *ctx, const struct pmem2_source *src, struct ndctl_region **pregion, struct ndctl_namespace **pndns) at libpmem2/region_namespace_ndctl.c:131>:
                                        LOG()
                                        ERR()
                                        FOREACH_BUS_REGION_NAMESPACE()
                                        ndctl_namespace_get_dax()
                                        ASSERTeq()
                                        ndctl_dax_get_daxctl_region()
                                        daxctl_dev_foreach()
                                        daxctl_dev_get_devname()
                                        ndctl_match_devdax() <int ndctl_match_devdax (dev_t st_rdev, const char *devname) at libpmem2/region_namespace_ndctl.c:26>:
                                            LOG()
                                            stat()
                                            util_snprintf() <int util_snprintf (char *str, size_t size, const char *format, ...) at core/util.c:434>:
                                                va_start()
                                                vsnprintf()
                                                va_end()
                                            ERR()
                                            os_stat() <int os_stat (const char *pathname, os_stat_t *buf) at core/os_posix.c:79>:
                                                stat()
                                        ndctl_namespace_get_btt()
                                        ndctl_btt_get_block_device()
                                        ndctl_namespace_get_pfn()
                                        ndctl_pfn_get_block_device()
                                        ndctl_namespace_get_block_device()
                                        ndctl_match_fsdax() <int ndctl_match_fsdax (dev_t st_dev, const char *devname) at libpmem2/region_namespace_ndctl.c:64>:
                                            LOG()
                                            util_snprintf() <int util_snprintf (char *str, size_t size, const char *format, ...) at core/util.c:434>:
                                                va_start()
                                                vsnprintf()
                                                va_end()
                                            ERR()
                                            major()
                                            minor()
                                            os_open() <int os_open (const char *pathname, int flags, ...) at core/os_posix.c:29>:
                                                va_start()
                                                va_arg()
                                                va_end()
                                                open()
                                            read()
                                            os_close()
                                            strcmp()
                                    ndctl_dimm_foreach_in_region()
                                    ndctl_dimm_get_dirty_shutdown()
                                    ndctl_unref()
                                ERR()
                                pmem2_source_device_id() <int pmem2_source_device_id (const struct pmem2_source *src, char *id, size_t *len) at libpmem2/usc_ndctl.c:80>:
                                    PMEM2_ERR_CLR()
                                    ERR()
                                    ASSERTeq()
                                    ndctl_new()
                                    pmem2_region_namespace() <int pmem2_region_namespace (struct ndctl_ctx *ctx, const struct pmem2_source *src, struct ndctl_region **pregion, struct ndctl_namespace **pndns) at libpmem2/region_namespace_ndctl.c:131>:
                                        LOG()
                                        ERR()
                                        FOREACH_BUS_REGION_NAMESPACE()
                                        ndctl_namespace_get_dax()
                                        ASSERTeq()
                                        ndctl_dax_get_daxctl_region()
                                        daxctl_dev_foreach()
                                        daxctl_dev_get_devname()
                                        ndctl_match_devdax() <int ndctl_match_devdax (dev_t st_rdev, const char *devname) at libpmem2/region_namespace_ndctl.c:26>:
                                            LOG()
                                            stat()
                                            util_snprintf() <int util_snprintf (char *str, size_t size, const char *format, ...) at core/util.c:434>:
                                                va_start()
                                                vsnprintf()
                                                va_end()
                                            ERR()
                                            os_stat() <int os_stat (const char *pathname, os_stat_t *buf) at core/os_posix.c:79>:
                                                stat()
                                        ndctl_namespace_get_btt()
                                        ndctl_btt_get_block_device()
                                        ndctl_namespace_get_pfn()
                                        ndctl_pfn_get_block_device()
                                        ndctl_namespace_get_block_device()
                                        ndctl_match_fsdax() <int ndctl_match_fsdax (dev_t st_dev, const char *devname) at libpmem2/region_namespace_ndctl.c:64>:
                                            LOG()
                                            util_snprintf() <int util_snprintf (char *str, size_t size, const char *format, ...) at core/util.c:434>:
                                                va_start()
                                                vsnprintf()
                                                va_end()
                                            ERR()
                                            major()
                                            minor()
                                            os_open() <int os_open (const char *pathname, int flags, ...) at core/os_posix.c:29>:
                                                va_start()
                                                va_arg()
                                                va_end()
                                                open()
                                            read()
                                            os_close()
                                            strcmp()
                                    ndctl_dimm_foreach_in_region()
                                    ndctl_dimm_get_unique_id()
                                    strlen()
                                    strncat()
                                    ndctl_unref()
                                Zalloc() <void *Zalloc (size_t sz) at core/alloc.c:98>:
                                    Malloc()
                                    memset()
                                Free() <Free_func Free at core/alloc.c:91>
                                htole64()
                                le64toh()
                                util_checksum() <int util_checksum (void *addr, size_t len, uint64_t *csump, int insert, size_t skip_off) at core/util.c:178>:
                                    util_checksum_compute() <uint64_t util_checksum_compute (void *addr, size_t len, uint64_t *csump, size_t skip_off) at core/util.c:134>:
                                        abort()
                                        le32toh()
                                    htole64()
                                FLUSH_SDS()
                                pmem2_source_delete() <int pmem2_source_delete (struct pmem2_source **src) at libpmem2/source.c:30>:
                                    Free() <Free_func Free at core/alloc.c:91>
                                shutdown_state_checksum() <void shutdown_state_checksum (struct shutdown_state *sds, struct pool_replica *rep) at common/shutdown_state.c:27>:
                                    LOG()
                                    util_checksum() <int util_checksum (void *addr, size_t len, uint64_t *csump, int insert, size_t skip_off) at core/util.c:178>:
                                        util_checksum_compute() <uint64_t util_checksum_compute (void *addr, size_t len, uint64_t *csump, size_t skip_off) at core/util.c:134>:
                                            abort()
                                            le32toh()
                                        htole64()
                                    FLUSH_SDS()
                            shutdown_state_set_dirty() <void shutdown_state_set_dirty (struct shutdown_state *sds, struct pool_replica *rep) at common/shutdown_state.c:127>:
                                LOG()
                                FLUSH_SDS()
                                shutdown_state_checksum() <void shutdown_state_checksum (struct shutdown_state *sds, struct pool_replica *rep) at common/shutdown_state.c:27>:
                                    LOG()
                                    util_checksum() <int util_checksum (void *addr, size_t len, uint64_t *csump, int insert, size_t skip_off) at core/util.c:178>:
                                        util_checksum_compute() <uint64_t util_checksum_compute (void *addr, size_t len, uint64_t *csump, size_t skip_off) at core/util.c:134>:
                                            abort()
                                            le32toh()
                                        htole64()
                                    FLUSH_SDS()
                            util_checksum() <int util_checksum (void *addr, size_t len, uint64_t *csump, int insert, size_t skip_off) at core/util.c:178>:
                                util_checksum_compute() <uint64_t util_checksum_compute (void *addr, size_t len, uint64_t *csump, size_t skip_off) at core/util.c:134>:
                                    abort()
                                    le32toh()
                                htole64()
                            POOL_HDR_CSUM_END_OFF()
                            util_persist_auto()
                        util_unmap_hdr() <void util_unmap_hdr (struct pool_set_part *part) at common/set.c:211>:
                            LOG()
                            VALGRIND_REMOVE_PMEM_MAPPING()
                            munmap()
                            FATAL()
                util_replica_close() <int util_replica_close (struct pool_set *set, unsigned repidx) at common/set.c:2136>:
                    LOG()
                    PART()
                    RANGE_RW()
                    util_replica_deep_drain() <int util_replica_deep_drain (const void *addr, size_t len, struct pool_set *set, unsigned replica_id) at common/set.c:3314>:
                        LOG()
                        util_replica_deep_common() <int util_replica_deep_common (const void *addr, size_t len, struct pool_set *set, unsigned replica_id, int flush) at common/set.c:3247>:
                            LOG()
                            ASSERT()
                            os_part_deep_common() <int os_part_deep_common (struct pool_replica *rep, unsigned partidx, void *addr, size_t len, int flush) at common/os_deep_linux.c:108>:
                                LOG()
                                pmem_msync()
                                pmem_deep_flush()
                                pmem_drain()
                                util_ddax_region_find() <int util_ddax_region_find (const char *path, unsigned *region_id) at common/file_posix.c:150>:
                                    LOG()
                                    os_stat() <int os_stat (const char *pathname, os_stat_t *buf) at core/os_posix.c:79>:
                                        stat()
                                    ERR()
                                    pmem2_get_type_from_stat() <int pmem2_get_type_from_stat (const os_stat_t *st, enum pmem2_file_type *type) at libpmem2/pmem2_utils_linux.c:23>:
                                        S_ISREG()
                                        S_ISDIR()
                                        S_ISCHR()
                                        ERR()
                                        util_snprintf() <int util_snprintf (char *str, size_t size, const char *format, ...) at core/util.c:434>:
                                            va_start()
                                            vsnprintf()
                                            va_end()
                                        os_major()
                                        os_minor()
                                        ASSERTinfo()
                                        LOG()
                                        realpath()
                                        strrchr()
                                        strcmp()
                                    pmem2_err_to_errno() <int pmem2_err_to_errno (int err) at libpmem2/pmem2_utils.c:67>:
                                        FATAL()
                                    pmem2_get_region_id() <int pmem2_get_region_id (const struct pmem2_source *src, unsigned *region_id) at libpmem2/region_namespace_ndctl.c:227>:
                                        LOG()
                                        ndctl_new()
                                        ERR()
                                        pmem2_region_namespace() <int pmem2_region_namespace (struct ndctl_ctx *ctx, const struct pmem2_source *src, struct ndctl_region **pregion, struct ndctl_namespace **pndns) at libpmem2/region_namespace_ndctl.c:131>:
                                            LOG()
                                            ERR()
                                            FOREACH_BUS_REGION_NAMESPACE()
                                            ndctl_namespace_get_dax()
                                            ASSERTeq()
                                            ndctl_dax_get_daxctl_region()
                                            daxctl_dev_foreach()
                                            daxctl_dev_get_devname()
                                            ndctl_match_devdax() <int ndctl_match_devdax (dev_t st_rdev, const char *devname) at libpmem2/region_namespace_ndctl.c:26>:
                                                LOG()
                                                stat()
                                                util_snprintf() <int util_snprintf (char *str, size_t size, const char *format, ...) at core/util.c:434>:
                                                    va_start()
                                                    vsnprintf()
                                                    va_end()
                                                ERR()
                                                os_stat() <int os_stat (const char *pathname, os_stat_t *buf) at core/os_posix.c:79>:
                                                    stat()
                                            ndctl_namespace_get_btt()
                                            ndctl_btt_get_block_device()
                                            ndctl_namespace_get_pfn()
                                            ndctl_pfn_get_block_device()
                                            ndctl_namespace_get_block_device()
                                            ndctl_match_fsdax() <int ndctl_match_fsdax (dev_t st_dev, const char *devname) at libpmem2/region_namespace_ndctl.c:64>:
                                                LOG()
                                                util_snprintf() <int util_snprintf (char *str, size_t size, const char *format, ...) at core/util.c:434>:
                                                    va_start()
                                                    vsnprintf()
                                                    va_end()
                                                ERR()
                                                major()
                                                minor()
                                                os_open() <int os_open (const char *pathname, int flags, ...) at core/os_posix.c:29>:
                                                    va_start()
                                                    va_arg()
                                                    va_end()
                                                    open()
                                                read()
                                                os_close()
                                                strcmp()
                                        ndctl_region_get_id()
                                        ndctl_unref()
                                pmem2_deep_flush_write() <int pmem2_deep_flush_write (unsigned region_id) at libpmem2/deep_flush_linux.c:27>:
                                    LOG()
                                    util_snprintf() <int util_snprintf (char *str, size_t size, const char *format, ...) at core/util.c:434>:
                                        va_start()
                                        vsnprintf()
                                        va_end()
                                    ERR()
                                    os_open() <int os_open (const char *pathname, int flags, ...) at core/os_posix.c:29>:
                                        va_start()
                                        va_arg()
                                        va_end()
                                        open()
                                    read()
                                    os_close()
                                MIN()
                    shutdown_state_clear_dirty() <void shutdown_state_clear_dirty (struct shutdown_state *sds, struct pool_replica *rep) at common/shutdown_state.c:143>:
                        LOG()
                        FLUSH_SDS()
                        shutdown_state_checksum() <void shutdown_state_checksum (struct shutdown_state *sds, struct pool_replica *rep) at common/shutdown_state.c:27>:
                            LOG()
                            util_checksum() <int util_checksum (void *addr, size_t len, uint64_t *csump, int insert, size_t skip_off) at core/util.c:178>:
                                util_checksum_compute() <uint64_t util_checksum_compute (void *addr, size_t len, uint64_t *csump, size_t skip_off) at core/util.c:134>:
                                    abort()
                                    le32toh()
                                htole64()
                            FLUSH_SDS()
                    util_unmap_hdr() <void util_unmap_hdr (struct pool_set_part *part) at common/set.c:211>:
                        LOG()
                        VALGRIND_REMOVE_PMEM_MAPPING()
                        munmap()
                        FATAL()
                    util_unmap_part() <int util_unmap_part (struct pool_set_part *part) at common/set.c:274>:
                        LOG()
                        VALGRIND_REMOVE_PMEM_MAPPING()
                        munmap()
                        ERR()
                util_poolset_close() <void util_poolset_close (struct pool_set *set, enum del_parts_mode del) at common/set.c:383>:
                    LOG()
                    util_replica_close() <int util_replica_close (struct pool_set *set, unsigned repidx) at common/set.c:2136>:
                        LOG()
                        PART()
                        RANGE_RW()
                        util_replica_deep_drain() <int util_replica_deep_drain (const void *addr, size_t len, struct pool_set *set, unsigned replica_id) at common/set.c:3314>:
                            LOG()
                            util_replica_deep_common() <int util_replica_deep_common (const void *addr, size_t len, struct pool_set *set, unsigned replica_id, int flush) at common/set.c:3247>:
                                LOG()
                                ASSERT()
                                os_part_deep_common() <int os_part_deep_common (struct pool_replica *rep, unsigned partidx, void *addr, size_t len, int flush) at common/os_deep_linux.c:108>:
                                    LOG()
                                    pmem_msync()
                                    pmem_deep_flush()
                                    pmem_drain()
                                    util_ddax_region_find() <int util_ddax_region_find (const char *path, unsigned *region_id) at common/file_posix.c:150>:
                                        LOG()
                                        os_stat() <int os_stat (const char *pathname, os_stat_t *buf) at core/os_posix.c:79>:
                                            stat()
                                        ERR()
                                        pmem2_get_type_from_stat() <int pmem2_get_type_from_stat (const os_stat_t *st, enum pmem2_file_type *type) at libpmem2/pmem2_utils_linux.c:23>:
                                            S_ISREG()
                                            S_ISDIR()
                                            S_ISCHR()
                                            ERR()
                                            util_snprintf() <int util_snprintf (char *str, size_t size, const char *format, ...) at core/util.c:434>:
                                                va_start()
                                                vsnprintf()
                                                va_end()
                                            os_major()
                                            os_minor()
                                            ASSERTinfo()
                                            LOG()
                                            realpath()
                                            strrchr()
                                            strcmp()
                                        pmem2_err_to_errno() <int pmem2_err_to_errno (int err) at libpmem2/pmem2_utils.c:67>:
                                            FATAL()
                                        pmem2_get_region_id() <int pmem2_get_region_id (const struct pmem2_source *src, unsigned *region_id) at libpmem2/region_namespace_ndctl.c:227>:
                                            LOG()
                                            ndctl_new()
                                            ERR()
                                            pmem2_region_namespace() <int pmem2_region_namespace (struct ndctl_ctx *ctx, const struct pmem2_source *src, struct ndctl_region **pregion, struct ndctl_namespace **pndns) at libpmem2/region_namespace_ndctl.c:131>:
                                                LOG()
                                                ERR()
                                                FOREACH_BUS_REGION_NAMESPACE()
                                                ndctl_namespace_get_dax()
                                                ASSERTeq()
                                                ndctl_dax_get_daxctl_region()
                                                daxctl_dev_foreach()
                                                daxctl_dev_get_devname()
                                                ndctl_match_devdax() <int ndctl_match_devdax (dev_t st_rdev, const char *devname) at libpmem2/region_namespace_ndctl.c:26>:
                                                    LOG()
                                                    stat()
                                                    util_snprintf() <int util_snprintf (char *str, size_t size, const char *format, ...) at core/util.c:434>:
                                                        va_start()
                                                        vsnprintf()
                                                        va_end()
                                                    ERR()
                                                    os_stat() <int os_stat (const char *pathname, os_stat_t *buf) at core/os_posix.c:79>:
                                                        stat()
                                                ndctl_namespace_get_btt()
                                                ndctl_btt_get_block_device()
                                                ndctl_namespace_get_pfn()
                                                ndctl_pfn_get_block_device()
                                                ndctl_namespace_get_block_device()
                                                ndctl_match_fsdax() <int ndctl_match_fsdax (dev_t st_dev, const char *devname) at libpmem2/region_namespace_ndctl.c:64>:
                                                    LOG()
                                                    util_snprintf() <int util_snprintf (char *str, size_t size, const char *format, ...) at core/util.c:434>:
                                                        va_start()
                                                        vsnprintf()
                                                        va_end()
                                                    ERR()
                                                    major()
                                                    minor()
                                                    os_open() <int os_open (const char *pathname, int flags, ...) at core/os_posix.c:29>:
                                                        va_start()
                                                        va_arg()
                                                        va_end()
                                                        open()
                                                    read()
                                                    os_close()
                                                    strcmp()
                                            ndctl_region_get_id()
                                            ndctl_unref()
                                    pmem2_deep_flush_write() <int pmem2_deep_flush_write (unsigned region_id) at libpmem2/deep_flush_linux.c:27>:
                                        LOG()
                                        util_snprintf() <int util_snprintf (char *str, size_t size, const char *format, ...) at core/util.c:434>:
                                            va_start()
                                            vsnprintf()
                                            va_end()
                                        ERR()
                                        os_open() <int os_open (const char *pathname, int flags, ...) at core/os_posix.c:29>:
                                            va_start()
                                            va_arg()
                                            va_end()
                                            open()
                                        read()
                                        os_close()
                                    MIN()
                        shutdown_state_clear_dirty() <void shutdown_state_clear_dirty (struct shutdown_state *sds, struct pool_replica *rep) at common/shutdown_state.c:143>:
                            LOG()
                            FLUSH_SDS()
                            shutdown_state_checksum() <void shutdown_state_checksum (struct shutdown_state *sds, struct pool_replica *rep) at common/shutdown_state.c:27>:
                                LOG()
                                util_checksum() <int util_checksum (void *addr, size_t len, uint64_t *csump, int insert, size_t skip_off) at core/util.c:178>:
                                    util_checksum_compute() <uint64_t util_checksum_compute (void *addr, size_t len, uint64_t *csump, size_t skip_off) at core/util.c:134>:
                                        abort()
                                        le32toh()
                                    htole64()
                                FLUSH_SDS()
                        util_unmap_hdr() <void util_unmap_hdr (struct pool_set_part *part) at common/set.c:211>:
                            LOG()
                            VALGRIND_REMOVE_PMEM_MAPPING()
                            munmap()
                            FATAL()
                        util_unmap_part() <int util_unmap_part (struct pool_set_part *part) at common/set.c:274>:
                            LOG()
                            VALGRIND_REMOVE_PMEM_MAPPING()
                            munmap()
                            ERR()
                    util_replica_close_local() <int util_replica_close_local (struct pool_replica *rep, unsigned repn, enum del_parts_mode del) at common/set.c:356>:
                        os_close()
                        LOG()
                        util_unlink() <int util_unlink (const char *path) at common/file.c:513>:
                            LOG()
                            util_file_get_type() <enum file_type util_file_get_type (const char *path) at common/file.c:106>:
                                LOG()
                                ERR()
                                util_file_exists() <int util_file_exists (const char *path) at common/file.c:32>:
                                    LOG()
                                    os_access() <int os_access (const char *pathname, int mode) at core/os_posix.c:97>:
                                        access()
                                    ERR()
                                os_stat() <int os_stat (const char *pathname, os_stat_t *buf) at core/os_posix.c:79>:
                                    stat()
                                util_stat_get_type() <enum file_type util_stat_get_type (const os_stat_t *st) at common/file.c:62>:
                                    pmem2_get_type_from_stat() <int pmem2_get_type_from_stat (const os_stat_t *st, enum pmem2_file_type *type) at libpmem2/pmem2_utils_linux.c:23>:
                                        S_ISREG()
                                        S_ISDIR()
                                        S_ISCHR()
                                        ERR()
                                        util_snprintf() <int util_snprintf (char *str, size_t size, const char *format, ...) at core/util.c:434>:
                                            va_start()
                                            vsnprintf()
                                            va_end()
                                        os_major()
                                        os_minor()
                                        ASSERTinfo()
                                        LOG()
                                        realpath()
                                        strrchr()
                                        strcmp()
                                    pmem2_err_to_errno() <int pmem2_err_to_errno (int err) at libpmem2/pmem2_utils.c:67>:
                                        FATAL()
                                    ASSERTinfo()
                            util_file_zero() <int util_file_zero (const char *path, os_off_t off, size_t len) at common/file.c:234>:
                                LOG()
                                os_open() <int os_open (const char *pathname, int flags, ...) at core/os_posix.c:29>:
                                    va_start()
                                    va_arg()
                                    va_end()
                                    open()
                                ERR()
                                util_fd_get_size() <ssize_t util_fd_get_size (int fd) at common/file.c:157>:
                                    LOG()
                                    pmem2_source_from_fd() <int pmem2_source_from_fd (struct pmem2_source **src, int fd) at libpmem2/source_posix.c:19>:
                                        PMEM2_ERR_CLR()
                                        fcntl()
                                        ERR()
                                        os_fstat()
                                        pmem2_get_type_from_stat() <int pmem2_get_type_from_stat (const os_stat_t *st, enum pmem2_file_type *type) at libpmem2/pmem2_utils_linux.c:23>:
                                            S_ISREG()
                                            S_ISDIR()
                                            S_ISCHR()
                                            ERR()
                                            util_snprintf() <int util_snprintf (char *str, size_t size, const char *format, ...) at core/util.c:434>:
                                                va_start()
                                                vsnprintf()
                                                va_end()
                                            os_major()
                                            os_minor()
                                            ASSERTinfo()
                                            LOG()
                                            realpath()
                                            strrchr()
                                            strcmp()
                                        pmem2_malloc() <void *pmem2_malloc (size_t size, int *err) at libpmem2/pmem2_utils.c:19>:
                                            Malloc()
                                            ERR()
                                        ASSERTne()
                                    pmem2_err_to_errno() <int pmem2_err_to_errno (int err) at libpmem2/pmem2_utils.c:67>:
                                        FATAL()
                                    pmem2_source_size() <int pmem2_source_size (const struct pmem2_source *src, size_t *size) at libpmem2/source_posix.c:90>:
                                        LOG()
                                        PMEM2_ERR_CLR()
                                        ASSERT()
                                        os_fstat()
                                        ERR()
                                        pmem2_device_dax_size() <int pmem2_device_dax_size (const struct pmem2_source *src, size_t *size) at libpmem2/pmem2_utils_ndctl.c:58>:
                                            ndctl_new()
                                            ERR()
                                            pmem2_region_namespace() <int pmem2_region_namespace (struct ndctl_ctx *ctx, const struct pmem2_source *src, struct ndctl_region **pregion, struct ndctl_namespace **pndns) at libpmem2/region_namespace_ndctl.c:131>:
                                                LOG()
                                                ERR()
                                                FOREACH_BUS_REGION_NAMESPACE()
                                                ndctl_namespace_get_dax()
                                                ASSERTeq()
                                                ndctl_dax_get_daxctl_region()
                                                daxctl_dev_foreach()
                                                daxctl_dev_get_devname()
                                                ndctl_match_devdax() <int ndctl_match_devdax (dev_t st_rdev, const char *devname) at libpmem2/region_namespace_ndctl.c:26>:
                                                    LOG()
                                                    stat()
                                                    util_snprintf() <int util_snprintf (char *str, size_t size, const char *format, ...) at core/util.c:434>:
                                                        va_start()
                                                        vsnprintf()
                                                        va_end()
                                                    ERR()
                                                    os_stat() <int os_stat (const char *pathname, os_stat_t *buf) at core/os_posix.c:79>:
                                                        stat()
                                                ndctl_namespace_get_btt()
                                                ndctl_btt_get_block_device()
                                                ndctl_namespace_get_pfn()
                                                ndctl_pfn_get_block_device()
                                                ndctl_namespace_get_block_device()
                                                ndctl_match_fsdax() <int ndctl_match_fsdax (dev_t st_dev, const char *devname) at libpmem2/region_namespace_ndctl.c:64>:
                                                    LOG()
                                                    util_snprintf() <int util_snprintf (char *str, size_t size, const char *format, ...) at core/util.c:434>:
                                                        va_start()
                                                        vsnprintf()
                                                        va_end()
                                                    ERR()
                                                    major()
                                                    minor()
                                                    os_open() <int os_open (const char *pathname, int flags, ...) at core/os_posix.c:29>:
                                                        va_start()
                                                        va_arg()
                                                        va_end()
                                                        open()
                                                    read()
                                                    os_close()
                                                    strcmp()
                                            LOG()
                                            ndctl_namespace_get_dax()
                                            ndctl_dax_get_size()
                                            ndctl_unref()
                                        FATAL()
                                    pmem2_source_delete() <int pmem2_source_delete (struct pmem2_source **src) at libpmem2/source.c:30>:
                                        Free() <Free_func Free at core/alloc.c:91>
                                    ERR()
                                out() <void out (const char *fmt, ...) at core/out.c:480>:
                                    va_start()
                                    out_common() <} void out_common (const char *file, int line, const char *func, int level, const char *suffix, const char *fmt, va_list ap) at core/out.c:334>
                                    va_end()
                                util_map() <void *util_map (int fd, os_off_t off, size_t len, int flags, int rdonly, size_t req_align, int *map_sync) at common/mmap.c:85>:
                                    LOG()
                                    util_map_hint() <char *util_map_hint (size_t len, size_t req_align) at common/mmap_posix.c:118>:
                                        LOG()
                                        util_map_hint_align()
                                        util_map_hint_unused() <char *util_map_hint_unused (void *minaddr, size_t len, size_t align) at common/mmap_posix.c:36>:
                                            LOG()
                                            ASSERT()
                                            os_fopen() <FILE *os_fopen (const char *pathname, const char *mode) at core/os_posix.c:106>:
                                                fopen()
                                            ERR()
                                            roundup()
                                            fgets()
                                            sscanf()
                                            fclose()
                                        mmap()
                                        ERR()
                                        roundup()
                                        munmap()
                                    ASSERTeq()
                                    util_map_sync() <void *util_map_sync (void *addr, size_t len, int proto, int flags, int fd, os_off_t offset, int *map_sync) at common/mmap_posix.c:159>:
                                        LOG()
                                        mmap()
                                    ERR()
                                memset()
                                util_unmap() <int util_unmap (void *addr, size_t len) at common/mmap.c:120>:
                                    LOG()
                                    munmap()
                                    ERR()
                                os_close()
                            os_unlink() <int os_unlink (const char *pathname) at core/os_posix.c:88>:
                                unlink()
                        ERR()
                    util_poolset_free() <void util_poolset_free (struct pool_set *set) at common/set.c:312>:
                        LOG()
                        Free() <Free_func Free at core/alloc.c:91>
                        VEC_FOREACH_BY_PTR()
                        VEC_DELETE()
                util_poolset_free() <void util_poolset_free (struct pool_set *set) at common/set.c:312>:
                    LOG()
                    Free() <Free_func Free at core/alloc.c:91>
                    VEC_FOREACH_BY_PTR()
                    VEC_DELETE()
        os_mutex_unlock() <int os_mutex_unlock (os_mutex_t *__restrict mutex) at core/os_thread_posix.c:108>:
            pthread_mutex_unlock()
        ASSERT()
        VALGRIND_REMOVE_PMEM_MAPPING()
        memset()
        obj_replica_init() <int obj_replica_init (PMEMobjpool *rep, struct pool_set *set, unsigned repidx) at libpmemobj/obj.c:844>:
            obj_rep_persist() <int obj_rep_persist (void *ctx, const void *addr, size_t len, unsigned flags) at libpmemobj/obj.c:475>:
                SUPPRESS_UNUSED()
                LOG()
            obj_rep_flush() <int obj_rep_flush (void *ctx, const void *addr, size_t len, unsigned flags) at libpmemobj/obj.c:499>:
                SUPPRESS_UNUSED()
                LOG()
            obj_rep_drain() <void obj_rep_drain (void *ctx) at libpmemobj/obj.c:523>:
                LOG()
            obj_rep_memcpy() <void *obj_rep_memcpy (void *ctx, void *dest, const void *src, size_t len, unsigned flags) at libpmemobj/obj.c:404>:
                LOG()
            obj_rep_memmove() <void *obj_rep_memmove (void *ctx, void *dest, const void *src, size_t len, unsigned flags) at libpmemobj/obj.c:428>:
                LOG()
            obj_rep_memset() <void *obj_rep_memset (void *ctx, void *dest, int c, size_t len, unsigned flags) at libpmemobj/obj.c:452>:
                LOG()
            obj_norep_persist() <int obj_norep_persist (void *ctx, const void *addr, size_t len, unsigned flags) at libpmemobj/obj.c:356>:
                SUPPRESS_UNUSED()
                LOG()
            obj_norep_flush() <int obj_norep_flush (void *ctx, const void *addr, size_t len, unsigned flags) at libpmemobj/obj.c:373>:
                SUPPRESS_UNUSED()
                LOG()
            obj_norep_drain() <void obj_norep_drain (void *ctx) at libpmemobj/obj.c:390>:
                LOG()
            obj_norep_memcpy() <void *obj_norep_memcpy (void *ctx, void *dest, const void *src, size_t len, unsigned flags) at libpmemobj/obj.c:313>:
                LOG()
            obj_norep_memmove() <void *obj_norep_memmove (void *ctx, void *dest, const void *src, size_t len, unsigned flags) at libpmemobj/obj.c:328>:
                LOG()
            obj_norep_memset() <void *obj_norep_memset (void *ctx, void *dest, int c, size_t len, unsigned flags) at libpmemobj/obj.c:343>:
                LOG()
            obj_replica_init_local() <int obj_replica_init_local (PMEMobjpool *rep, int is_pmem, size_t resvsize) at libpmemobj/obj.c:802>:
                LOG()
                VALGRIND_ADD_TO_GLOBAL_TX_IGNORE()
                pmem_drain()
                pmem_memcpy()
                pmem_memmove()
                pmem_memset()
                obj_msync_nofail() <void obj_msync_nofail (const void *addr, size_t size) at libpmemobj/obj.c:250>:
                    pmem_msync()
                    FATAL()
                obj_drain_empty() <void obj_drain_empty (void) at libpmemobj/obj.c:240>
                obj_nopmem_memcpy() <void *obj_nopmem_memcpy (void *dest, const void *src, size_t len, unsigned flags) at libpmemobj/obj.c:260>:
                    LOG()
                    pmem_memcpy()
                    obj_msync_nofail() <void obj_msync_nofail (const void *addr, size_t size) at libpmemobj/obj.c:250>:
                        pmem_msync()
                        FATAL()
                obj_nopmem_memmove() <void *obj_nopmem_memmove (void *dest, const void *src, size_t len, unsigned flags) at libpmemobj/obj.c:279>:
                    LOG()
                    pmem_memmove()
                    obj_msync_nofail() <void obj_msync_nofail (const void *addr, size_t size) at libpmemobj/obj.c:250>:
                        pmem_msync()
                        FATAL()
                obj_nopmem_memset() <void *obj_nopmem_memset (void *dest, int c, size_t len, unsigned flags) at libpmemobj/obj.c:293>:
                    LOG()
                    pmem_memset()
                    obj_msync_nofail() <void obj_msync_nofail (const void *addr, size_t size) at libpmemobj/obj.c:250>:
                        pmem_msync()
                        FATAL()
        obj_descr_create() <int obj_descr_create (PMEMobjpool *pop, const char *layout, size_t poolsize) at libpmemobj/obj.c:695>:
            LOG()
            ASSERTeq()
            memset()
            strncpy()
            lane_init_data() <void lane_init_data (PMEMobjpool *pop) at libpmemobj/lane.c:312>:
                lane_get_layout() <struct lane_layout *lane_get_layout (PMEMobjpool *pop, uint64_t lane_idx) at libpmemobj/lane.c:150>
                ulog_construct() <void ulog_construct (uint64_t offset, size_t capacity, uint64_t gen_num, int flush, uint64_t flags, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:136>:
                    ulog_by_offset() <struct ulog *ulog_by_offset (size_t offset, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:36>:
                        CACHELINE_ALIGN()
                    ASSERTne()
                    OBJ_PTR_TO_OFF()
                    ALIGN_DOWN()
                    VALGRIND_ADD_TO_TX()
                    SIZEOF_ULOG()
                    memset()
                    CACHELINE_ALIGN()
                    pmemops_xflush()
                    pmemops_memset()
                    VALGRIND_REMOVE_FROM_TX()
                OBJ_PTR_TO_OFF()
                pmemops_xpersist()
            palloc_init() <int palloc_init (void *heap_start, uint64_t heap_size, uint64_t *sizep, struct pmem_ops *p_ops) at libpmemobj/palloc.c:1271>:
                heap_init() <int heap_init (void *heap_start, uint64_t heap_size, uint64_t *sizep, struct pmem_ops *p_ops) at libpmemobj/heap.c:1706>:
                    VALGRIND_DO_MAKE_MEM_UNDEFINED()
                    heap_write_header() <void heap_write_header (struct heap_header *hdr) at libpmemobj/heap.c:1683>:
                        util_checksum() <int util_checksum (void *addr, size_t len, uint64_t *csump, int insert, size_t skip_off) at core/util.c:178>:
                            util_checksum_compute() <uint64_t util_checksum_compute (void *addr, size_t len, uint64_t *csump, size_t skip_off) at core/util.c:134>:
                                abort()
                                le32toh()
                            htole64()
                    pmemops_persist()
                    heap_max_zone() <unsigned heap_max_zone (size_t size) at libpmemobj/heap.c:516>:
                    ZID_TO_ZONE()
                    pmemops_memset()
                    VALGRIND_DO_MAKE_MEM_NOACCESS()
            ERR()
            util_checksum() <int util_checksum (void *addr, size_t len, uint64_t *csump, int insert, size_t skip_off) at core/util.c:178>:
                util_checksum_compute() <uint64_t util_checksum_compute (void *addr, size_t len, uint64_t *csump, size_t skip_off) at core/util.c:134>:
                    abort()
                    le32toh()
                htole64()
            pmemops_xpersist()
            pmemops_persist()
            pmemops_memset()
        obj_runtime_init() <int obj_runtime_init (PMEMobjpool *pop, int rdonly, int boot, unsigned nlanes) at libpmemobj/obj.c:907>:
            LOG()
            pmemops_persist()
            pmemobj_get_uuid_lo()
            tx_params_new() <struct tx_parameters *tx_params_new (void) at libpmemobj/tx.c:109>:
                Malloc()
            stats_new() <struct stats *stats_new (PMEMobjpool *pop) at libpmemobj/stats.c:116>:
                Malloc()
                ERR()
                VALGRIND_ADD_TO_GLOBAL_TX_IGNORE()
                Zalloc() <void *Zalloc (size_t sz) at core/alloc.c:98>:
                    Malloc()
                    memset()
                Free() <Free_func Free at core/alloc.c:91>
            VALGRIND_REMOVE_PMEM_MAPPING()
            obj_runtime_init_common() <int obj_runtime_init_common (PMEMobjpool *pop) at libpmemobj/obj.c:658>:
                LOG()
                lane_boot() <int lane_boot (PMEMobjpool *pop) at libpmemobj/lane.c:260>:
                    Malloc()
                    ERR()
                    Zalloc() <void *Zalloc (size_t sz) at core/alloc.c:98>:
                        Malloc()
                        memset()
                    VALGRIND_ADD_TO_GLOBAL_TX_IGNORE()
                    lane_get_layout() <struct lane_layout *lane_get_layout (PMEMobjpool *pop, uint64_t lane_idx) at libpmemobj/lane.c:150>
                    lane_init() <int lane_init (PMEMobjpool *pop, struct lane *lane, struct lane_layout *layout) at libpmemobj/lane.c:205>:
                        ASSERTne()
                        operation_new() <struct operation_context *operation_new (struct ulog *ulog, size_t ulog_base_nbytes, ulog_extend_fn extend, ulog_free_fn ulog_free, const struct pmem_ops *p_ops, enum log_type type) at libpmemobj/memops.c:171>:
                            Zalloc() <void *Zalloc (size_t sz) at core/alloc.c:98>:
                                Malloc()
                                memset()
                            ERR()
                            ulog_capacity() <size_t ulog_capacity (struct ulog *ulog, size_t ulog_base_bytes, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:206>:
                                ulog_next() <struct ulog *ulog_next (struct ulog *ulog, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:50>:
                                    ulog_by_offset() <struct ulog *ulog_by_offset (size_t offset, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:36>:
                                        CACHELINE_ALIGN()
                            VEC_INIT()
                            ulog_rebuild_next_vec() <void ulog_rebuild_next_vec (struct ulog *ulog, struct ulog_next *next, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:223>:
                                VEC_PUSH_BACK()
                                ulog_next() <struct ulog *ulog_next (struct ulog *ulog, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:50>:
                                    ulog_by_offset() <struct ulog *ulog_by_offset (size_t offset, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:36>:
                                        CACHELINE_ALIGN()
                            operation_transient_clean() <int operation_transient_clean (void *base, const void *addr, size_t len, unsigned flags) at libpmemobj/memops.c:133>:
                                SUPPRESS_UNUSED()
                                VALGRIND_SET_CLEAN()
                            operation_transient_memcpy() <void *operation_transient_memcpy (void *base, void *dest, const void *src, size_t len, unsigned flags) at libpmemobj/memops.c:158>:
                                SUPPRESS_UNUSED()
                                memcpy()
                            operation_transient_drain() <void operation_transient_drain (void *base) at libpmemobj/memops.c:148>:
                                SUPPRESS_UNUSED()
                            VECQ_INIT()
                            operation_log_transient_init() <int operation_log_transient_init (struct operation_log *log) at libpmemobj/memops.c:82>:
                                Zalloc() <void *Zalloc (size_t sz) at core/alloc.c:98>:
                                    Malloc()
                                    memset()
                                ERR()
                            operation_log_persistent_init() <int operation_log_persistent_init (struct operation_log *log, size_t ulog_base_nbytes) at libpmemobj/memops.c:107>:
                                Zalloc() <void *Zalloc (size_t sz) at core/alloc.c:98>:
                                    Malloc()
                                    memset()
                                ERR()
                                memset()
                            operation_delete() <void operation_delete (struct operation_context *ctx) at libpmemobj/memops.c:229>:
                                VECQ_DELETE()
                                VEC_DELETE()
                                Free() <Free_func Free at core/alloc.c:91>
                        lane_redo_extend() <int lane_redo_extend (void *base, uint64_t *redo, uint64_t gen_num) at libpmemobj/lane.c:193>:
                            SIZEOF_ALIGNED_ULOG()
                            pmalloc_construct() <int pmalloc_construct (PMEMobjpool *pop, uint64_t *off, size_t size, palloc_constr constructor, void *arg, uint64_t extra_field, uint16_t object_flags, uint16_t class_id) at libpmemobj/pmalloc.c:119>:
                                pmalloc_operation_hold_type() <struct operation_context *pmalloc_operation_hold_type (PMEMobjpool *pop, enum pmalloc_operation_type type, int start) at libpmemobj/pmalloc.c:45>:
                                    lane_hold() <unsigned lane_hold (PMEMobjpool *pop, struct lane **lanep) at libpmemobj/lane.c:510>:
                                        get_lane_info_record() <inline struct lane_info *get_lane_info_record (PMEMobjpool *pop) at libpmemobj/lane.c:466>:
                                            likely()
                                            unlikely()
                                            lane_info_ht_boot() <inline void lane_info_ht_boot (void) at libpmemobj/lane.c:74>:
                                                lane_info_create() <inline void lane_info_create (void) at libpmemobj/lane.c:39>:
                                                    critnib_new() <struct critnib *critnib_new (void) at libpmemobj/critnib.c:187>:
                                                        Zalloc() <void *Zalloc (size_t sz) at core/alloc.c:98>:
                                                            Malloc()
                                                            memset()
                                                        util_mutex_init()
                                                        VALGRIND_HG_DRD_DISABLE_CHECKING()
                                                    FATAL()
                                                os_tls_set() <int os_tls_set (os_tls_key_t key, const void *value) at core/os_thread_posix.c:53>:
                                                    pthread_setspecific()
                                                FATAL()
                                            critnib_get() <void *critnib_get (struct critnib *c, uint64_t key) at libpmemobj/critnib.c:515>:
                                                load() <void load (void *src, void *dst) at libpmemobj/critnib.c:130>:
                                                    util_atomic_load_explicit64()
                                                is_leaf() <inline bool is_leaf (struct critnib_node *n) at libpmemobj/critnib.c:150>:
                                                slice_index() <inline unsigned slice_index (uint64_t key, sh_t shift) at libpmemobj/critnib.c:178>:
                                                to_leaf() <inline struct critnib_leaf *to_leaf (struct critnib_node *n) at libpmemobj/critnib.c:159>:
                                            Malloc()
                                            FATAL()
                                            critnib_insert() <int critnib_insert (struct critnib *c, uint64_t key, void *value) at libpmemobj/critnib.c:340>:
                                                util_mutex_lock()
                                                alloc_leaf() <struct critnib_leaf *alloc_leaf (struct critnib *__restrict c) at libpmemobj/critnib.c:311>:
                                                    Malloc()
                                                    ERR()
                                                    VALGRIND_ANNOTATE_NEW_MEMORY()
                                                util_mutex_unlock()
                                                VALGRIND_HG_DRD_DISABLE_CHECKING()
                                                is_leaf() <inline bool is_leaf (struct critnib_node *n) at libpmemobj/critnib.c:150>:
                                                path_mask() <inline uint64_t path_mask (sh_t shift) at libpmemobj/critnib.c:169>:
                                                slice_index() <inline unsigned slice_index (uint64_t key, sh_t shift) at libpmemobj/critnib.c:178>:
                                                store() <void store (void *dst, void *src) at libpmemobj/critnib.c:140>:
                                                    util_atomic_store_explicit64()
                                                to_leaf() <inline struct critnib_leaf *to_leaf (struct critnib_node *n) at libpmemobj/critnib.c:159>:
                                                ASSERT()
                                                free_leaf() <void free_leaf (struct critnib *__restrict c, struct critnib_leaf *__restrict k) at libpmemobj/critnib.c:298>
                                                util_mssb_index64()
                                                alloc_node() <struct critnib_node *alloc_node (struct critnib *__restrict c) at libpmemobj/critnib.c:274>:
                                                    Malloc()
                                                    ERR()
                                                    VALGRIND_ANNOTATE_NEW_MEMORY()
                                        unlikely()
                                        util_fetch_and_add32()
                                        get_lane() <inline void get_lane (uint64_t *locks, struct lane_info *info, uint64_t nlocks) at libpmemobj/lane.c:430>:
                                            likely()
                                            util_bool_compare_and_swap64()
                                            sched_yield()
                                        VALGRIND_ANNOTATE_NEW_MEMORY()
                                        operation_init() <void operation_init (struct operation_context *ctx) at libpmemobj/memops.c:709>:
                                            VALGRIND_ANNOTATE_NEW_MEMORY()
                                            VECQ_REINIT()
                                    operation_start() <void operation_start (struct operation_context *ctx) at libpmemobj/memops.c:736>:
                                        operation_init() <void operation_init (struct operation_context *ctx) at libpmemobj/memops.c:709>:
                                            VALGRIND_ANNOTATE_NEW_MEMORY()
                                            VECQ_REINIT()
                                        ASSERTeq()
                                palloc_operation() <int palloc_operation (struct palloc_heap *heap, uint64_t off, uint64_t *dest_off, size_t size, palloc_constr constructor, void *arg, uint64_t extra_field, uint16_t object_flags, uint16_t class_id, uint16_t arena_id, struct operation_context *ctx) at libpmemobj/palloc.c:705>:
                                    palloc_defer_free_create() <void palloc_defer_free_create (struct palloc_heap *heap, uint64_t off, struct pobj_action_internal *out) at libpmemobj/palloc.c:610>:
                                        COMPILE_ERROR_ON()
                                        memblock_from_offset() <struct memory_block memblock_from_offset (struct palloc_heap *heap, uint64_t off) at libpmemobj/memblock.c:1532>:
                                            memblock_from_offset_opt() <struct memory_block memblock_from_offset_opt (struct palloc_heap *heap, uint64_t off, int size) at libpmemobj/memblock.c:1476>:
                                                HEAP_PTR_TO_OFF()
                                                heap_get_chunk_hdr()
                                                memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                                    heap_get_chunk_hdr()
                                                ASSERTeq()
                                                memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                                    heap_get_chunk_hdr()
                                                    FATAL()
                                                run_get_data_offset() <size_t run_get_data_offset (const struct memory_block *m) at libpmemobj/memblock.c:572>:
                                                    heap_get_chunk_run()
                                                    run_get_data_start() <char *run_get_data_start (const struct memory_block *m) at libpmemobj/memblock.c:544>:
                                                        heap_get_chunk_hdr()
                                                        heap_get_chunk_run()
                                                        run_get_bitmap() <void run_get_bitmap (const struct memory_block *m, struct run_bitmap *b) at libpmemobj/memblock.c:488>:
                                                            heap_get_chunk_run()
                                                            heap_get_chunk_hdr()
                                                            memblock_run_bitmap() <void memblock_run_bitmap (uint32_t *size_idx, uint16_t flags, uint64_t unit_size, uint64_t alignment, void *content, struct run_bitmap *b) at libpmemobj/memblock.c:410>:
                                                                ASSERTne()
                                                                RUN_CONTENT_SIZE_BYTES()
                                                                util_div_ceil()
                                                                ALIGN_UP()
                                                                memblock_run_default_nallocs() <unsigned memblock_run_default_nallocs (uint32_t *size_idx, uint16_t flags, uint64_t unit_size, uint64_t alignment) at libpmemobj/memblock.c:370>:
                                                                    SUPPRESS_UNUSED()
                                                                    RUN_DEFAULT_SIZE_BYTES()
                                                                    LOG()
                                                            ASSERTeq()
                                                        ALIGN_UP()
                                                heap_alloc_classes() <struct alloc_class_collection *heap_alloc_classes (struct palloc_heap *heap) at libpmemobj/heap.c:160>:
                                                alloc_class_by_run() <struct alloc_class *alloc_class_by_run (struct alloc_class_collection *ac, size_t unit_size, uint16_t flags, uint32_t size_idx) at libpmemobj/alloc_class.c:594>:
                                                    SIZE_TO_CLASS_MAP_INDEX()
                                                    ASSERT()
                                                    critnib_get() <void *critnib_get (struct critnib *c, uint64_t key) at libpmemobj/critnib.c:515>:
                                                        load() <void load (void *src, void *dst) at libpmemobj/critnib.c:130>:
                                                            util_atomic_load_explicit64()
                                                        is_leaf() <inline bool is_leaf (struct critnib_node *n) at libpmemobj/critnib.c:150>:
                                                        slice_index() <inline unsigned slice_index (uint64_t key, sh_t shift) at libpmemobj/critnib.c:178>:
                                                        to_leaf() <inline struct critnib_leaf *to_leaf (struct critnib_node *n) at libpmemobj/critnib.c:159>:
                                                    RUN_CLASS_KEY_PACK()
                                                CALC_SIZE_IDX()
                                        heap_ensure_zone_reclaimed() <void heap_ensure_zone_reclaimed (struct palloc_heap *heap, uint32_t zone_id) at libpmemobj/heap.c:816>:
                                            util_atomic_load_explicit32()
                                            heap_bucket_acquire() <struct bucket *heap_bucket_acquire (struct palloc_heap *heap, uint8_t class_id, uint16_t arena_id) at libpmemobj/heap.c:470>:
                                                out() <void out (const char *fmt, ...) at core/out.c:480>:
                                                    va_start()
                                                    out_common() <} void out_common (const char *file, int line, const char *func, int level, const char *suffix, const char *fmt, va_list ap) at core/out.c:334>
                                                    va_end()
                                                heap_thread_arena() <struct arena *heap_thread_arena (struct palloc_heap *heap) at libpmemobj/heap.c:414>:
                                                    os_tls_get() <void *os_tls_get (os_tls_key_t key) at core/os_thread_posix.c:62>:
                                                        pthread_getspecific()
                                                    heap_thread_arena_assign() <struct arena *heap_thread_arena_assign (struct palloc_heap *heap) at libpmemobj/heap.c:381>:
                                                        util_mutex_lock()
                                                        ASSERTne()
                                                        VEC_SIZE()
                                                        VEC_FOREACH()
                                                        LOG()
                                                        heap_arena_thread_attach() <void heap_arena_thread_attach (struct palloc_heap *heap, struct arena *a) at libpmemobj/heap.c:249>:
                                                            ASSERTeq()
                                                            os_tls_get() <void *os_tls_get (os_tls_key_t key) at core/os_thread_posix.c:62>:
                                                                pthread_getspecific()
                                                            heap_arena_thread_detach() <void heap_arena_thread_detach (struct arena *a) at libpmemobj/heap.c:232>:
                                                                util_fetch_and_sub64()
                                                            ASSERTne()
                                                            util_fetch_and_add64()
                                                            os_tls_set() <int os_tls_set (os_tls_key_t key, const void *value) at core/os_thread_posix.c:53>:
                                                                pthread_setspecific()
                                                        util_mutex_unlock()
                                                    heap_global_arena_assign() <struct arena *heap_global_arena_assign (struct palloc_heap *heap) at libpmemobj/heap.c:348>:
                                                        util_mutex_lock()
                                                        ASSERTne()
                                                        VEC_SIZE()
                                                        VEC_FOREACH()
                                                        LOG()
                                                        util_mutex_unlock()
                                                    ASSERT()
                                                    ASSERTne()
                                                ASSERTne()
                                                VEC_ARR()
                                                bucket_acquire() <struct bucket *bucket_acquire (struct bucket_locked *b) at libpmemobj/bucket.c:117>:
                                                    util_mutex_lock()
                                            ZID_TO_ZONE()
                                            ASSERTeq()
                                            out() <void out (const char *fmt, ...) at core/out.c:480>:
                                                va_start()
                                                out_common() <} void out_common (const char *file, int line, const char *func, int level, const char *suffix, const char *fmt, va_list ap) at core/out.c:334>
                                                va_end()
                                            util_atomic_store_explicit32()
                                            heap_reclaim_zone_garbage() <void heap_reclaim_zone_garbage (struct palloc_heap *heap, struct bucket *bucket, uint32_t zone_id) at libpmemobj/heap.c:775>:
                                                ZID_TO_ZONE()
                                                ASSERT()
                                                memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                                    memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                                        heap_get_chunk_hdr()
                                                    memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                                        heap_get_chunk_hdr()
                                                        FATAL()
                                                heap_reclaim_run() <int heap_reclaim_run (struct palloc_heap *heap, struct memory_block *m, int startup) at libpmemobj/heap.c:733>:
                                                    heap_get_chunk_run()
                                                    heap_get_chunk_hdr()
                                                    alloc_class_by_run() <struct alloc_class *alloc_class_by_run (struct alloc_class_collection *ac, size_t unit_size, uint16_t flags, uint32_t size_idx) at libpmemobj/alloc_class.c:594>:
                                                        SIZE_TO_CLASS_MAP_INDEX()
                                                        ASSERT()
                                                        critnib_get() <void *critnib_get (struct critnib *c, uint64_t key) at libpmemobj/critnib.c:515>:
                                                            load() <void load (void *src, void *dst) at libpmemobj/critnib.c:130>:
                                                                util_atomic_load_explicit64()
                                                            is_leaf() <inline bool is_leaf (struct critnib_node *n) at libpmemobj/critnib.c:150>:
                                                            slice_index() <inline unsigned slice_index (uint64_t key, sh_t shift) at libpmemobj/critnib.c:178>:
                                                            to_leaf() <inline struct critnib_leaf *to_leaf (struct critnib_node *n) at libpmemobj/critnib.c:159>:
                                                        RUN_CLASS_KEY_PACK()
                                                    recycler_element_new() <struct recycler_element recycler_element_new (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/recycler.c:122>:
                                                        SUPPRESS_UNUSED()
                                                        util_mutex_lock()
                                                        util_mutex_unlock()
                                                    ASSERTeq()
                                                    STATS_INC()
                                                    heap_get_recycler() <struct recycler *heap_get_recycler (struct palloc_heap *heap, size_t id, size_t nallocs) at libpmemobj/heap.c:106> (R):
                                                        util_atomic_load_explicit64()
                                                        recycler_new() <struct recycler *recycler_new (struct palloc_heap *heap, size_t nallocs, size_t *peak_arenas) at libpmemobj/recycler.c:74>:
                                                            Malloc()
                                                            ravl_new_sized() <struct ravl *ravl_new_sized (ravl_compare *compare, size_t data_size) at core/ravl.c:45>:
                                                                Malloc()
                                                                ERR()
                                                            recycler_element_cmp() <int recycler_element_cmp (const void *lhs, const void *rhs) at libpmemobj/recycler.c:23>:
                                                            memset()
                                                            VEC_INIT()
                                                            util_mutex_init()
                                                            Free() <Free_func Free at core/alloc.c:91>
                                                        util_bool_compare_and_swap64()
                                                        recycler_delete() <void recycler_delete (struct recycler *r) at libpmemobj/recycler.c:107>:
                                                            VEC_DELETE()
                                                            util_mutex_destroy()
                                                            ravl_delete() <void ravl_delete (struct ravl *ravl) at core/ravl.c:112>:
                                                                ravl_delete_cb() <void ravl_delete_cb (struct ravl *ravl, ravl_cb cb, void *arg) at core/ravl.c:102>:
                                                                    ravl_foreach_node() <void ravl_foreach_node (struct ravl_node *n, ravl_cb cb, void *arg, int free_node) at core/ravl.c:74> (R):
                                                                        ravl_foreach_node() <void ravl_foreach_node (struct ravl_node *n, ravl_cb cb, void *arg, int free_node) at core/ravl.c:74> (recursive: see 5225)
                                                                        Free() <Free_func Free at core/alloc.c:91>
                                                                    Free() <Free_func Free at core/alloc.c:91>
                                                            Free() <Free_func Free at core/alloc.c:91>
                                                        heap_get_recycler() <struct recycler *heap_get_recycler (struct palloc_heap *heap, size_t id, size_t nallocs) at libpmemobj/heap.c:106> (recursive: see 5207)
                                                    recycler_put() <int recycler_put (struct recycler *r, struct recycler_element element) at libpmemobj/recycler.c:154>:
                                                        util_mutex_lock()
                                                        ravl_emplace_copy() <int ravl_emplace_copy (struct ravl *ravl, const void *data) at core/ravl.c:384>:
                                                            ravl_emplace() <int ravl_emplace (struct ravl *ravl, ravl_constr constr, const void *arg) at core/ravl.c:393>:
                                                                LOG()
                                                                ravl_new_node() <struct ravl_node *ravl_new_node (struct ravl *ravl, ravl_constr constr, const void *arg) at core/ravl.c:161>:
                                                                    Malloc()
                                                                    ERR()
                                                                    ravl_node_insert_constructor() <void ravl_node_insert_constructor (void *data, size_t data_size, const void *arg) at core/ravl.c:139>:
                                                                        SUPPRESS_UNUSED()
                                                                        memcpy()
                                                                ravl_data() <void *ravl_data (struct ravl_node *node) at core/ravl.c:571>:
                                                                    memcpy()
                                                                ravl_balance() <void ravl_balance (struct ravl *ravl, struct ravl_node *n) at core/ravl.c:337>:
                                                                    ravl_node_is() <int ravl_node_is (struct ravl_node *n, int i, int j) at core/ravl.c:306>:
                                                                        ravl_node_is_i_j() <int ravl_node_is_i_j (struct ravl_node *n, int i, int j) at core/ravl.c:296>:
                                                                            ravl_node_rank_difference_parent() <int ravl_node_rank_difference_parent (struct ravl_node *p, struct ravl_node *n) at core/ravl.c:275>:
                                                                                ravl_node_rank() <int ravl_node_rank (struct ravl_node *n) at core/ravl.c:261>:
                                                                    ravl_node_promote() <void ravl_node_promote (struct ravl_node *n) at core/ravl.c:315>
                                                                    ravl_node_sibling() <struct ravl_node *ravl_node_sibling (struct ravl_node *n) at core/ravl.c:209>:
                                                                        ravl_node_slot_type() <enum ravl_slot_type ravl_node_slot_type (struct ravl_node *n) at core/ravl.c:196>:
                                                                    ravl_node_rank_difference() <int ravl_node_rank_difference (struct ravl_node *n) at core/ravl.c:287>:
                                                                        ravl_node_rank_difference_parent() <int ravl_node_rank_difference_parent (struct ravl_node *p, struct ravl_node *n) at core/ravl.c:275>:
                                                                            ravl_node_rank() <int ravl_node_rank (struct ravl_node *n) at core/ravl.c:261>:
                                                                    ravl_node_rank_difference_parent() <int ravl_node_rank_difference_parent (struct ravl_node *p, struct ravl_node *n) at core/ravl.c:275>:
                                                                        ravl_node_rank() <int ravl_node_rank (struct ravl_node *n) at core/ravl.c:261>:
                                                                    ravl_slot_opposite() <enum ravl_slot_type ravl_slot_opposite (enum ravl_slot_type t) at core/ravl.c:184>:
                                                                        ASSERTne()
                                                                    ravl_node_slot_type() <enum ravl_slot_type ravl_node_slot_type (struct ravl_node *n) at core/ravl.c:196>:
                                                                    ravl_rotate() <void ravl_rotate (struct ravl *ravl, struct ravl_node *n) at core/ravl.c:237>:
                                                                        ASSERTne()
                                                                        ravl_node_ref() <struct ravl_node **ravl_node_ref (struct ravl *ravl, struct ravl_node *n) at core/ravl.c:223>:
                                                                            ravl_node_slot_type() <enum ravl_slot_type ravl_node_slot_type (struct ravl_node *n) at core/ravl.c:196>:
                                                                        ravl_node_slot_type() <enum ravl_slot_type ravl_node_slot_type (struct ravl_node *n) at core/ravl.c:196>:
                                                                        ravl_slot_opposite() <enum ravl_slot_type ravl_slot_opposite (enum ravl_slot_type t) at core/ravl.c:184>:
                                                                            ASSERTne()
                                                                    ravl_node_demote() <void ravl_node_demote (struct ravl_node *n) at core/ravl.c:324>:
                                                                        ASSERT()
                                                                Free() <Free_func Free at core/alloc.c:91>
                                                            ravl_node_copy_constructor() <void ravl_node_copy_constructor (void *data, size_t data_size, const void *arg) at core/ravl.c:152>:
                                                                memcpy()
                                                        util_mutex_unlock()
                                                    ERR()
                                                heap_run_into_free_chunk() <void heap_run_into_free_chunk (struct palloc_heap *heap, struct bucket *bucket, struct memory_block *m) at libpmemobj/heap.c:697>:
                                                    heap_get_chunk_hdr()
                                                    STATS_SUB()
                                                    util_mutex_lock()
                                                    memblock_huge_init() <struct memory_block memblock_huge_init (struct palloc_heap *heap, uint32_t chunk_id, uint32_t zone_id, uint32_t size_idx) at libpmemobj/memblock.c:1329>:
                                                        heap_get_chunk_hdr()
                                                        VALGRIND_DO_MAKE_MEM_UNDEFINED()
                                                        VALGRIND_ANNOTATE_NEW_MEMORY()
                                                        chunk_get_chunk_hdr_value() <uint64_t chunk_get_chunk_hdr_value (uint16_t type, uint16_t flags, uint32_t size_idx) at libpmemobj/memblock.c:604>:
                                                            COMPILE_ERROR_ON()
                                                            memcpy()
                                                        util_atomic_store_explicit64()
                                                        pmemops_persist()
                                                        huge_write_footer() <void huge_write_footer (struct chunk_header *hdr, uint32_t size_idx) at libpmemobj/memblock.c:1166>:
                                                            VALGRIND_DO_MAKE_MEM_UNDEFINED()
                                                            VALGRIND_SET_CLEAN()
                                                        memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                                            memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                                                heap_get_chunk_hdr()
                                                            memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                                                heap_get_chunk_hdr()
                                                                FATAL()
                                                    heap_free_chunk_reuse() <int heap_free_chunk_reuse (struct palloc_heap *heap, struct bucket *bucket, struct memory_block *m) at libpmemobj/heap.c:674>:
                                                        heap_coalesce_huge() <struct memory_block heap_coalesce_huge (struct palloc_heap *heap, struct bucket *b, const struct memory_block *m) at libpmemobj/heap.c:650>:
                                                            heap_get_adjacent_free_block() <int heap_get_adjacent_free_block (struct palloc_heap *heap, const struct memory_block *in, struct memory_block *out, int prev) at libpmemobj/heap.c:582>:
                                                                ZID_TO_ZONE()
                                                                memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                                                    memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                                                        heap_get_chunk_hdr()
                                                                    memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                                                        heap_get_chunk_hdr()
                                                                        FATAL()
                                                            bucket_remove_block() <int bucket_remove_block (struct bucket *b, const struct memory_block *m) at libpmemobj/bucket.c:178>
                                                            heap_coalesce() <struct memory_block heap_coalesce (struct palloc_heap *heap, const struct memory_block *blocks[], int n) at libpmemobj/heap.c:621>:
                                                                ASSERTne()
                                                                memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                                                    memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                                                        heap_get_chunk_hdr()
                                                                    memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                                                        heap_get_chunk_hdr()
                                                                        FATAL()
                                                        bucket_insert_block() <int bucket_insert_block (struct bucket *b, const struct memory_block *m) at libpmemobj/bucket.c:161>:
                                                            VALGRIND_DO_MAKE_MEM_NOACCESS()
                                                            VALGRIND_ANNOTATE_NEW_MEMORY()
                                                    util_mutex_unlock()
                                                heap_free_chunk_reuse() <int heap_free_chunk_reuse (struct palloc_heap *heap, struct bucket *bucket, struct memory_block *m) at libpmemobj/heap.c:674>:
                                                    heap_coalesce_huge() <struct memory_block heap_coalesce_huge (struct palloc_heap *heap, struct bucket *b, const struct memory_block *m) at libpmemobj/heap.c:650>:
                                                        heap_get_adjacent_free_block() <int heap_get_adjacent_free_block (struct palloc_heap *heap, const struct memory_block *in, struct memory_block *out, int prev) at libpmemobj/heap.c:582>:
                                                            ZID_TO_ZONE()
                                                            memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                                                memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                                                    heap_get_chunk_hdr()
                                                                memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                                                    heap_get_chunk_hdr()
                                                                    FATAL()
                                                        bucket_remove_block() <int bucket_remove_block (struct bucket *b, const struct memory_block *m) at libpmemobj/bucket.c:178>
                                                        heap_coalesce() <struct memory_block heap_coalesce (struct palloc_heap *heap, const struct memory_block *blocks[], int n) at libpmemobj/heap.c:621>:
                                                            ASSERTne()
                                                            memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                                                memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                                                    heap_get_chunk_hdr()
                                                                memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                                                    heap_get_chunk_hdr()
                                                                    FATAL()
                                                    bucket_insert_block() <int bucket_insert_block (struct bucket *b, const struct memory_block *m) at libpmemobj/bucket.c:161>:
                                                        VALGRIND_DO_MAKE_MEM_NOACCESS()
                                                        VALGRIND_ANNOTATE_NEW_MEMORY()
                                            heap_bucket_release() <void heap_bucket_release (struct bucket *b) at libpmemobj/heap.c:498>:
                                                bucket_release() <void bucket_release (struct bucket *b) at libpmemobj/bucket.c:127>:
                                                    util_mutex_unlock()
                                    operation_cancel() <void operation_cancel (struct operation_context *ctx) at libpmemobj/memops.c:761>:
                                        ASSERTeq()
                                    palloc_reservation_create() <int palloc_reservation_create (struct palloc_heap *heap, size_t size, palloc_constr constructor, void *arg, uint64_t extra_field, uint16_t object_flags, uint16_t class_id, uint16_t arena_id, struct pobj_action_internal *out) at libpmemobj/palloc.c:178>:
                                        ASSERT()
                                        heap_get_best_class() <struct alloc_class *heap_get_best_class (struct palloc_heap *heap, size_t size) at libpmemobj/heap.c:221>:
                                            alloc_class_by_alloc_size() <struct alloc_class *alloc_class_by_alloc_size (struct alloc_class_collection *ac, size_t size) at libpmemobj/alloc_class.c:568>:
                                                SIZE_TO_CLASS_MAP_INDEX()
                                                alloc_class_assign_by_size() <struct alloc_class *alloc_class_assign_by_size (struct alloc_class_collection *ac, size_t size) at libpmemobj/alloc_class.c:538>:
                                                    LOG()
                                                    SIZE_TO_CLASS_MAP_INDEX()
                                                    alloc_class_find_min_frag() <struct alloc_class *alloc_class_find_min_frag (struct alloc_class_collection *ac, size_t n) at libpmemobj/alloc_class.c:340>:
                                                        LOG()
                                                        ASSERTne()
                                                    ASSERTne()
                                                    util_bool_compare_and_swap64()
                                        alloc_class_by_id() <struct alloc_class *alloc_class_by_id (struct alloc_class_collection *ac, uint8_t id) at libpmemobj/alloc_class.c:612>
                                        heap_alloc_classes() <struct alloc_class_collection *heap_alloc_classes (struct palloc_heap *heap) at libpmemobj/heap.c:160>:
                                        ERR()
                                        alloc_class_calc_size_idx() <ssize_t alloc_class_calc_size_idx (struct alloc_class *c, size_t size) at libpmemobj/alloc_class.c:621>:
                                            CALC_SIZE_IDX()
                                        heap_bucket_acquire() <struct bucket *heap_bucket_acquire (struct palloc_heap *heap, uint8_t class_id, uint16_t arena_id) at libpmemobj/heap.c:470>:
                                            out() <void out (const char *fmt, ...) at core/out.c:480>:
                                                va_start()
                                                out_common() <} void out_common (const char *file, int line, const char *func, int level, const char *suffix, const char *fmt, va_list ap) at core/out.c:334>
                                                va_end()
                                            heap_thread_arena() <struct arena *heap_thread_arena (struct palloc_heap *heap) at libpmemobj/heap.c:414>:
                                                os_tls_get() <void *os_tls_get (os_tls_key_t key) at core/os_thread_posix.c:62>:
                                                    pthread_getspecific()
                                                heap_thread_arena_assign() <struct arena *heap_thread_arena_assign (struct palloc_heap *heap) at libpmemobj/heap.c:381>:
                                                    util_mutex_lock()
                                                    ASSERTne()
                                                    VEC_SIZE()
                                                    VEC_FOREACH()
                                                    LOG()
                                                    heap_arena_thread_attach() <void heap_arena_thread_attach (struct palloc_heap *heap, struct arena *a) at libpmemobj/heap.c:249>:
                                                        ASSERTeq()
                                                        os_tls_get() <void *os_tls_get (os_tls_key_t key) at core/os_thread_posix.c:62>:
                                                            pthread_getspecific()
                                                        heap_arena_thread_detach() <void heap_arena_thread_detach (struct arena *a) at libpmemobj/heap.c:232>:
                                                            util_fetch_and_sub64()
                                                        ASSERTne()
                                                        util_fetch_and_add64()
                                                        os_tls_set() <int os_tls_set (os_tls_key_t key, const void *value) at core/os_thread_posix.c:53>:
                                                            pthread_setspecific()
                                                    util_mutex_unlock()
                                                heap_global_arena_assign() <struct arena *heap_global_arena_assign (struct palloc_heap *heap) at libpmemobj/heap.c:348>:
                                                    util_mutex_lock()
                                                    ASSERTne()
                                                    VEC_SIZE()
                                                    VEC_FOREACH()
                                                    LOG()
                                                    util_mutex_unlock()
                                                ASSERT()
                                                ASSERTne()
                                            ASSERTne()
                                            VEC_ARR()
                                            bucket_acquire() <struct bucket *bucket_acquire (struct bucket_locked *b) at libpmemobj/bucket.c:117>:
                                                util_mutex_lock()
                                        heap_get_bestfit_block() <int heap_get_bestfit_block (struct palloc_heap *heap, struct bucket *b, struct memory_block *m) at libpmemobj/heap.c:1210> (R):
                                            bucket_alloc_class() <struct alloc_class *bucket_alloc_class (struct bucket *b) at libpmemobj/bucket.c:152>
                                            bucket_alloc_block() <int bucket_alloc_block (struct bucket *b, struct memory_block *m_out) at libpmemobj/bucket.c:187>
                                            heap_ensure_huge_bucket_filled() <int heap_ensure_huge_bucket_filled (struct palloc_heap *heap, struct bucket *bucket) at libpmemobj/heap.c:943>:
                                                heap_reclaim_garbage() <int heap_reclaim_garbage (struct palloc_heap *heap, struct bucket *bucket) at libpmemobj/heap.c:923>:
                                                    heap_recycle_unused() <int heap_recycle_unused (struct palloc_heap *heap, struct recycler *recycler, struct bucket *defb, int force) at libpmemobj/heap.c:894>:
                                                        recycler_recalc() <struct empty_runs recycler_recalc (struct recycler *r, int force) at libpmemobj/recycler.c:207>:
                                                            VEC_INIT()
                                                            util_atomic_load64()
                                                            util_mutex_trylock()
                                                            ravl_find() <struct ravl_node *ravl_find (struct ravl *ravl, const void *data, enum ravl_predicate flags) at core/ravl.c:524>:
                                                                LOG()
                                                                ravl_data() <void *ravl_data (struct ravl_node *node) at core/ravl.c:571>:
                                                                    memcpy()
                                                                ravl_predicate_holds() <int ravl_predicate_holds (int result, struct ravl_node **ret, struct ravl_node *n, enum ravl_predicate flags) at core/ravl.c:489>:
                                                                    ravl_node_successor() <struct ravl_node *ravl_node_successor (struct ravl_node *n) at core/ravl.c:465>:
                                                                        ravl_node_cessor() <struct ravl_node *ravl_node_cessor (struct ravl_node *n, enum ravl_slot_type t) at core/ravl.c:443>:
                                                                            ravl_node_type_most() <struct ravl_node *ravl_node_type_most (struct ravl_node *n, enum ravl_slot_type t) at core/ravl.c:430>:
                                                                            ravl_slot_opposite() <enum ravl_slot_type ravl_slot_opposite (enum ravl_slot_type t) at core/ravl.c:184>:
                                                                                ASSERTne()
                                                                    ravl_node_predecessor() <struct ravl_node *ravl_node_predecessor (struct ravl_node *n) at core/ravl.c:476>:
                                                                        ravl_node_cessor() <struct ravl_node *ravl_node_cessor (struct ravl_node *n, enum ravl_slot_type t) at core/ravl.c:443>:
                                                                            ravl_node_type_most() <struct ravl_node *ravl_node_type_most (struct ravl_node *n, enum ravl_slot_type t) at core/ravl.c:430>:
                                                                            ravl_slot_opposite() <enum ravl_slot_type ravl_slot_opposite (enum ravl_slot_type t) at core/ravl.c:184>:
                                                                                ASSERTne()
                                                            ravl_data() <void *ravl_data (struct ravl_node *node) at core/ravl.c:571>:
                                                                memcpy()
                                                            memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                                                memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                                                    heap_get_chunk_hdr()
                                                                memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                                                    heap_get_chunk_hdr()
                                                                    FATAL()
                                                            recycler_element_new() <struct recycler_element recycler_element_new (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/recycler.c:122>:
                                                                SUPPRESS_UNUSED()
                                                                util_mutex_lock()
                                                                util_mutex_unlock()
                                                            ASSERT()
                                                            util_fetch_and_sub64()
                                                            MIN()
                                                            ravl_remove() <void ravl_remove (struct ravl *ravl, struct ravl_node *n) at core/ravl.c:545> (R):
                                                                LOG()
                                                                ravl_node_successor() <struct ravl_node *ravl_node_successor (struct ravl_node *n) at core/ravl.c:465>:
                                                                    ravl_node_cessor() <struct ravl_node *ravl_node_cessor (struct ravl_node *n, enum ravl_slot_type t) at core/ravl.c:443>:
                                                                        ravl_node_type_most() <struct ravl_node *ravl_node_type_most (struct ravl_node *n, enum ravl_slot_type t) at core/ravl.c:430>:
                                                                        ravl_slot_opposite() <enum ravl_slot_type ravl_slot_opposite (enum ravl_slot_type t) at core/ravl.c:184>:
                                                                            ASSERTne()
                                                                memcpy()
                                                                ravl_remove() <void ravl_remove (struct ravl *ravl, struct ravl_node *n) at core/ravl.c:545> (recursive: see 5442)
                                                                ravl_node_ref() <struct ravl_node **ravl_node_ref (struct ravl *ravl, struct ravl_node *n) at core/ravl.c:223>:
                                                                    ravl_node_slot_type() <enum ravl_slot_type ravl_node_slot_type (struct ravl_node *n) at core/ravl.c:196>:
                                                                Free() <Free_func Free at core/alloc.c:91>
                                                            VEC_PUSH_BACK()
                                                            VEC_FOREACH_BY_PTR()
                                                            ravl_emplace_copy() <int ravl_emplace_copy (struct ravl *ravl, const void *data) at core/ravl.c:384>:
                                                                ravl_emplace() <int ravl_emplace (struct ravl *ravl, ravl_constr constr, const void *arg) at core/ravl.c:393>:
                                                                    LOG()
                                                                    ravl_new_node() <struct ravl_node *ravl_new_node (struct ravl *ravl, ravl_constr constr, const void *arg) at core/ravl.c:161>:
                                                                        Malloc()
                                                                        ERR()
                                                                        ravl_node_insert_constructor() <void ravl_node_insert_constructor (void *data, size_t data_size, const void *arg) at core/ravl.c:139>:
                                                                            SUPPRESS_UNUSED()
                                                                            memcpy()
                                                                    ravl_data() <void *ravl_data (struct ravl_node *node) at core/ravl.c:571>:
                                                                        memcpy()
                                                                    ravl_balance() <void ravl_balance (struct ravl *ravl, struct ravl_node *n) at core/ravl.c:337>:
                                                                        ravl_node_is() <int ravl_node_is (struct ravl_node *n, int i, int j) at core/ravl.c:306>:
                                                                            ravl_node_is_i_j() <int ravl_node_is_i_j (struct ravl_node *n, int i, int j) at core/ravl.c:296>:
                                                                                ravl_node_rank_difference_parent() <int ravl_node_rank_difference_parent (struct ravl_node *p, struct ravl_node *n) at core/ravl.c:275>:
                                                                                    ravl_node_rank() <int ravl_node_rank (struct ravl_node *n) at core/ravl.c:261>:
                                                                        ravl_node_promote() <void ravl_node_promote (struct ravl_node *n) at core/ravl.c:315>
                                                                        ravl_node_sibling() <struct ravl_node *ravl_node_sibling (struct ravl_node *n) at core/ravl.c:209>:
                                                                            ravl_node_slot_type() <enum ravl_slot_type ravl_node_slot_type (struct ravl_node *n) at core/ravl.c:196>:
                                                                        ravl_node_rank_difference() <int ravl_node_rank_difference (struct ravl_node *n) at core/ravl.c:287>:
                                                                            ravl_node_rank_difference_parent() <int ravl_node_rank_difference_parent (struct ravl_node *p, struct ravl_node *n) at core/ravl.c:275>:
                                                                                ravl_node_rank() <int ravl_node_rank (struct ravl_node *n) at core/ravl.c:261>:
                                                                        ravl_node_rank_difference_parent() <int ravl_node_rank_difference_parent (struct ravl_node *p, struct ravl_node *n) at core/ravl.c:275>:
                                                                            ravl_node_rank() <int ravl_node_rank (struct ravl_node *n) at core/ravl.c:261>:
                                                                        ravl_slot_opposite() <enum ravl_slot_type ravl_slot_opposite (enum ravl_slot_type t) at core/ravl.c:184>:
                                                                            ASSERTne()
                                                                        ravl_node_slot_type() <enum ravl_slot_type ravl_node_slot_type (struct ravl_node *n) at core/ravl.c:196>:
                                                                        ravl_rotate() <void ravl_rotate (struct ravl *ravl, struct ravl_node *n) at core/ravl.c:237>:
                                                                            ASSERTne()
                                                                            ravl_node_ref() <struct ravl_node **ravl_node_ref (struct ravl *ravl, struct ravl_node *n) at core/ravl.c:223>:
                                                                                ravl_node_slot_type() <enum ravl_slot_type ravl_node_slot_type (struct ravl_node *n) at core/ravl.c:196>:
                                                                            ravl_node_slot_type() <enum ravl_slot_type ravl_node_slot_type (struct ravl_node *n) at core/ravl.c:196>:
                                                                            ravl_slot_opposite() <enum ravl_slot_type ravl_slot_opposite (enum ravl_slot_type t) at core/ravl.c:184>:
                                                                                ASSERTne()
                                                                        ravl_node_demote() <void ravl_node_demote (struct ravl_node *n) at core/ravl.c:324>:
                                                                            ASSERT()
                                                                    Free() <Free_func Free at core/alloc.c:91>
                                                                ravl_node_copy_constructor() <void ravl_node_copy_constructor (void *data, size_t data_size, const void *arg) at core/ravl.c:152>:
                                                                    memcpy()
                                                            VEC_CLEAR()
                                                            util_mutex_unlock()
                                                        VEC_SIZE()
                                                        heap_bucket_acquire() <struct bucket *heap_bucket_acquire (struct palloc_heap *heap, uint8_t class_id, uint16_t arena_id) at libpmemobj/heap.c:470>:
                                                            out() <void out (const char *fmt, ...) at core/out.c:480>:
                                                                va_start()
                                                                out_common() <} void out_common (const char *file, int line, const char *func, int level, const char *suffix, const char *fmt, va_list ap) at core/out.c:334>
                                                                va_end()
                                                            heap_thread_arena() <struct arena *heap_thread_arena (struct palloc_heap *heap) at libpmemobj/heap.c:414>:
                                                                os_tls_get() <void *os_tls_get (os_tls_key_t key) at core/os_thread_posix.c:62>:
                                                                    pthread_getspecific()
                                                                heap_thread_arena_assign() <struct arena *heap_thread_arena_assign (struct palloc_heap *heap) at libpmemobj/heap.c:381>:
                                                                    util_mutex_lock()
                                                                    ASSERTne()
                                                                    VEC_SIZE()
                                                                    VEC_FOREACH()
                                                                    LOG()
                                                                    heap_arena_thread_attach() <void heap_arena_thread_attach (struct palloc_heap *heap, struct arena *a) at libpmemobj/heap.c:249>:
                                                                        ASSERTeq()
                                                                        os_tls_get() <void *os_tls_get (os_tls_key_t key) at core/os_thread_posix.c:62>:
                                                                            pthread_getspecific()
                                                                        heap_arena_thread_detach() <void heap_arena_thread_detach (struct arena *a) at libpmemobj/heap.c:232>:
                                                                            util_fetch_and_sub64()
                                                                        ASSERTne()
                                                                        util_fetch_and_add64()
                                                                        os_tls_set() <int os_tls_set (os_tls_key_t key, const void *value) at core/os_thread_posix.c:53>:
                                                                            pthread_setspecific()
                                                                    util_mutex_unlock()
                                                                heap_global_arena_assign() <struct arena *heap_global_arena_assign (struct palloc_heap *heap) at libpmemobj/heap.c:348>:
                                                                    util_mutex_lock()
                                                                    ASSERTne()
                                                                    VEC_SIZE()
                                                                    VEC_FOREACH()
                                                                    LOG()
                                                                    util_mutex_unlock()
                                                                ASSERT()
                                                                ASSERTne()
                                                            ASSERTne()
                                                            VEC_ARR()
                                                            bucket_acquire() <struct bucket *bucket_acquire (struct bucket_locked *b) at libpmemobj/bucket.c:117>:
                                                                util_mutex_lock()
                                                        ASSERT()
                                                        VEC_FOREACH_BY_PTR()
                                                        heap_run_into_free_chunk() <void heap_run_into_free_chunk (struct palloc_heap *heap, struct bucket *bucket, struct memory_block *m) at libpmemobj/heap.c:697>:
                                                            heap_get_chunk_hdr()
                                                            STATS_SUB()
                                                            util_mutex_lock()
                                                            memblock_huge_init() <struct memory_block memblock_huge_init (struct palloc_heap *heap, uint32_t chunk_id, uint32_t zone_id, uint32_t size_idx) at libpmemobj/memblock.c:1329>:
                                                                heap_get_chunk_hdr()
                                                                VALGRIND_DO_MAKE_MEM_UNDEFINED()
                                                                VALGRIND_ANNOTATE_NEW_MEMORY()
                                                                chunk_get_chunk_hdr_value() <uint64_t chunk_get_chunk_hdr_value (uint16_t type, uint16_t flags, uint32_t size_idx) at libpmemobj/memblock.c:604>:
                                                                    COMPILE_ERROR_ON()
                                                                    memcpy()
                                                                util_atomic_store_explicit64()
                                                                pmemops_persist()
                                                                huge_write_footer() <void huge_write_footer (struct chunk_header *hdr, uint32_t size_idx) at libpmemobj/memblock.c:1166>:
                                                                    VALGRIND_DO_MAKE_MEM_UNDEFINED()
                                                                    VALGRIND_SET_CLEAN()
                                                                memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                                                    memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                                                        heap_get_chunk_hdr()
                                                                    memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                                                        heap_get_chunk_hdr()
                                                                        FATAL()
                                                            heap_free_chunk_reuse() <int heap_free_chunk_reuse (struct palloc_heap *heap, struct bucket *bucket, struct memory_block *m) at libpmemobj/heap.c:674>:
                                                                heap_coalesce_huge() <struct memory_block heap_coalesce_huge (struct palloc_heap *heap, struct bucket *b, const struct memory_block *m) at libpmemobj/heap.c:650>:
                                                                    heap_get_adjacent_free_block() <int heap_get_adjacent_free_block (struct palloc_heap *heap, const struct memory_block *in, struct memory_block *out, int prev) at libpmemobj/heap.c:582>:
                                                                        ZID_TO_ZONE()
                                                                        memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                                                            memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                                                                heap_get_chunk_hdr()
                                                                            memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                                                                heap_get_chunk_hdr()
                                                                                FATAL()
                                                                    bucket_remove_block() <int bucket_remove_block (struct bucket *b, const struct memory_block *m) at libpmemobj/bucket.c:178>
                                                                    heap_coalesce() <struct memory_block heap_coalesce (struct palloc_heap *heap, const struct memory_block *blocks[], int n) at libpmemobj/heap.c:621>:
                                                                        ASSERTne()
                                                                        memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                                                            memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                                                                heap_get_chunk_hdr()
                                                                            memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                                                                heap_get_chunk_hdr()
                                                                                FATAL()
                                                                bucket_insert_block() <int bucket_insert_block (struct bucket *b, const struct memory_block *m) at libpmemobj/bucket.c:161>:
                                                                    VALGRIND_DO_MAKE_MEM_NOACCESS()
                                                                    VALGRIND_ANNOTATE_NEW_MEMORY()
                                                            util_mutex_unlock()
                                                        heap_bucket_release() <void heap_bucket_release (struct bucket *b) at libpmemobj/heap.c:498>:
                                                            bucket_release() <void bucket_release (struct bucket *b) at libpmemobj/bucket.c:127>:
                                                                util_mutex_unlock()
                                                        VEC_DELETE()
                                                heap_populate_bucket() <int heap_populate_bucket (struct palloc_heap *heap, struct bucket *bucket) at libpmemobj/heap.c:850>:
                                                    util_atomic_store_explicit32()
                                                    ZID_TO_ZONE()
                                                    VALGRIND_ADD_TO_GLOBAL_TX_IGNORE()
                                                    heap_zone_init() <void heap_zone_init (struct palloc_heap *heap, uint32_t zone_id, uint32_t first_chunk_id) at libpmemobj/heap.c:559>:
                                                        ZID_TO_ZONE()
                                                        zone_calc_size_idx() <uint32_t zone_calc_size_idx (uint32_t zone_id, unsigned max_zone, size_t heap_size) at libpmemobj/heap.c:533>:
                                                            ASSERT()
                                                        ASSERT()
                                                        memblock_huge_init() <struct memory_block memblock_huge_init (struct palloc_heap *heap, uint32_t chunk_id, uint32_t zone_id, uint32_t size_idx) at libpmemobj/memblock.c:1329>:
                                                            heap_get_chunk_hdr()
                                                            VALGRIND_DO_MAKE_MEM_UNDEFINED()
                                                            VALGRIND_ANNOTATE_NEW_MEMORY()
                                                            chunk_get_chunk_hdr_value() <uint64_t chunk_get_chunk_hdr_value (uint16_t type, uint16_t flags, uint32_t size_idx) at libpmemobj/memblock.c:604>:
                                                                COMPILE_ERROR_ON()
                                                                memcpy()
                                                            util_atomic_store_explicit64()
                                                            pmemops_persist()
                                                            huge_write_footer() <void huge_write_footer (struct chunk_header *hdr, uint32_t size_idx) at libpmemobj/memblock.c:1166>:
                                                                VALGRIND_DO_MAKE_MEM_UNDEFINED()
                                                                VALGRIND_SET_CLEAN()
                                                            memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                                                memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                                                    heap_get_chunk_hdr()
                                                                memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                                                    heap_get_chunk_hdr()
                                                                    FATAL()
                                                        pmemops_persist()
                                                    heap_reclaim_zone_garbage() <void heap_reclaim_zone_garbage (struct palloc_heap *heap, struct bucket *bucket, uint32_t zone_id) at libpmemobj/heap.c:775>:
                                                        ZID_TO_ZONE()
                                                        ASSERT()
                                                        memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                                            memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                                                heap_get_chunk_hdr()
                                                            memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                                                heap_get_chunk_hdr()
                                                                FATAL()
                                                        heap_reclaim_run() <int heap_reclaim_run (struct palloc_heap *heap, struct memory_block *m, int startup) at libpmemobj/heap.c:733>:
                                                            heap_get_chunk_run()
                                                            heap_get_chunk_hdr()
                                                            alloc_class_by_run() <struct alloc_class *alloc_class_by_run (struct alloc_class_collection *ac, size_t unit_size, uint16_t flags, uint32_t size_idx) at libpmemobj/alloc_class.c:594>:
                                                                SIZE_TO_CLASS_MAP_INDEX()
                                                                ASSERT()
                                                                critnib_get() <void *critnib_get (struct critnib *c, uint64_t key) at libpmemobj/critnib.c:515>:
                                                                    load() <void load (void *src, void *dst) at libpmemobj/critnib.c:130>:
                                                                        util_atomic_load_explicit64()
                                                                    is_leaf() <inline bool is_leaf (struct critnib_node *n) at libpmemobj/critnib.c:150>:
                                                                    slice_index() <inline unsigned slice_index (uint64_t key, sh_t shift) at libpmemobj/critnib.c:178>:
                                                                    to_leaf() <inline struct critnib_leaf *to_leaf (struct critnib_node *n) at libpmemobj/critnib.c:159>:
                                                                RUN_CLASS_KEY_PACK()
                                                            recycler_element_new() <struct recycler_element recycler_element_new (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/recycler.c:122>:
                                                                SUPPRESS_UNUSED()
                                                                util_mutex_lock()
                                                                util_mutex_unlock()
                                                            ASSERTeq()
                                                            STATS_INC()
                                                            heap_get_recycler() <struct recycler *heap_get_recycler (struct palloc_heap *heap, size_t id, size_t nallocs) at libpmemobj/heap.c:106> (R):
                                                                util_atomic_load_explicit64()
                                                                recycler_new() <struct recycler *recycler_new (struct palloc_heap *heap, size_t nallocs, size_t *peak_arenas) at libpmemobj/recycler.c:74>:
                                                                    Malloc()
                                                                    ravl_new_sized() <struct ravl *ravl_new_sized (ravl_compare *compare, size_t data_size) at core/ravl.c:45>:
                                                                        Malloc()
                                                                        ERR()
                                                                    recycler_element_cmp() <int recycler_element_cmp (const void *lhs, const void *rhs) at libpmemobj/recycler.c:23>:
                                                                    memset()
                                                                    VEC_INIT()
                                                                    util_mutex_init()
                                                                    Free() <Free_func Free at core/alloc.c:91>
                                                                util_bool_compare_and_swap64()
                                                                recycler_delete() <void recycler_delete (struct recycler *r) at libpmemobj/recycler.c:107>:
                                                                    VEC_DELETE()
                                                                    util_mutex_destroy()
                                                                    ravl_delete() <void ravl_delete (struct ravl *ravl) at core/ravl.c:112>:
                                                                        ravl_delete_cb() <void ravl_delete_cb (struct ravl *ravl, ravl_cb cb, void *arg) at core/ravl.c:102>:
                                                                            ravl_foreach_node() <void ravl_foreach_node (struct ravl_node *n, ravl_cb cb, void *arg, int free_node) at core/ravl.c:74> (R):
                                                                                ravl_foreach_node() <void ravl_foreach_node (struct ravl_node *n, ravl_cb cb, void *arg, int free_node) at core/ravl.c:74> (recursive: see 5661)
                                                                                Free() <Free_func Free at core/alloc.c:91>
                                                                            Free() <Free_func Free at core/alloc.c:91>
                                                                    Free() <Free_func Free at core/alloc.c:91>
                                                                heap_get_recycler() <struct recycler *heap_get_recycler (struct palloc_heap *heap, size_t id, size_t nallocs) at libpmemobj/heap.c:106> (recursive: see 5643)
                                                            recycler_put() <int recycler_put (struct recycler *r, struct recycler_element element) at libpmemobj/recycler.c:154>:
                                                                util_mutex_lock()
                                                                ravl_emplace_copy() <int ravl_emplace_copy (struct ravl *ravl, const void *data) at core/ravl.c:384>:
                                                                    ravl_emplace() <int ravl_emplace (struct ravl *ravl, ravl_constr constr, const void *arg) at core/ravl.c:393>:
                                                                        LOG()
                                                                        ravl_new_node() <struct ravl_node *ravl_new_node (struct ravl *ravl, ravl_constr constr, const void *arg) at core/ravl.c:161>:
                                                                            Malloc()
                                                                            ERR()
                                                                            ravl_node_insert_constructor() <void ravl_node_insert_constructor (void *data, size_t data_size, const void *arg) at core/ravl.c:139>:
                                                                                SUPPRESS_UNUSED()
                                                                                memcpy()
                                                                        ravl_data() <void *ravl_data (struct ravl_node *node) at core/ravl.c:571>:
                                                                            memcpy()
                                                                        ravl_balance() <void ravl_balance (struct ravl *ravl, struct ravl_node *n) at core/ravl.c:337>:
                                                                            ravl_node_is() <int ravl_node_is (struct ravl_node *n, int i, int j) at core/ravl.c:306>:
                                                                                ravl_node_is_i_j() <int ravl_node_is_i_j (struct ravl_node *n, int i, int j) at core/ravl.c:296>:
                                                                                    ravl_node_rank_difference_parent() <int ravl_node_rank_difference_parent (struct ravl_node *p, struct ravl_node *n) at core/ravl.c:275>:
                                                                                        ravl_node_rank() <int ravl_node_rank (struct ravl_node *n) at core/ravl.c:261>:
                                                                            ravl_node_promote() <void ravl_node_promote (struct ravl_node *n) at core/ravl.c:315>
                                                                            ravl_node_sibling() <struct ravl_node *ravl_node_sibling (struct ravl_node *n) at core/ravl.c:209>:
                                                                                ravl_node_slot_type() <enum ravl_slot_type ravl_node_slot_type (struct ravl_node *n) at core/ravl.c:196>:
                                                                            ravl_node_rank_difference() <int ravl_node_rank_difference (struct ravl_node *n) at core/ravl.c:287>:
                                                                                ravl_node_rank_difference_parent() <int ravl_node_rank_difference_parent (struct ravl_node *p, struct ravl_node *n) at core/ravl.c:275>:
                                                                                    ravl_node_rank() <int ravl_node_rank (struct ravl_node *n) at core/ravl.c:261>:
                                                                            ravl_node_rank_difference_parent() <int ravl_node_rank_difference_parent (struct ravl_node *p, struct ravl_node *n) at core/ravl.c:275>:
                                                                                ravl_node_rank() <int ravl_node_rank (struct ravl_node *n) at core/ravl.c:261>:
                                                                            ravl_slot_opposite() <enum ravl_slot_type ravl_slot_opposite (enum ravl_slot_type t) at core/ravl.c:184>:
                                                                                ASSERTne()
                                                                            ravl_node_slot_type() <enum ravl_slot_type ravl_node_slot_type (struct ravl_node *n) at core/ravl.c:196>:
                                                                            ravl_rotate() <void ravl_rotate (struct ravl *ravl, struct ravl_node *n) at core/ravl.c:237>:
                                                                                ASSERTne()
                                                                                ravl_node_ref() <struct ravl_node **ravl_node_ref (struct ravl *ravl, struct ravl_node *n) at core/ravl.c:223>:
                                                                                    ravl_node_slot_type() <enum ravl_slot_type ravl_node_slot_type (struct ravl_node *n) at core/ravl.c:196>:
                                                                                ravl_node_slot_type() <enum ravl_slot_type ravl_node_slot_type (struct ravl_node *n) at core/ravl.c:196>:
                                                                                ravl_slot_opposite() <enum ravl_slot_type ravl_slot_opposite (enum ravl_slot_type t) at core/ravl.c:184>:
                                                                                    ASSERTne()
                                                                            ravl_node_demote() <void ravl_node_demote (struct ravl_node *n) at core/ravl.c:324>:
                                                                                ASSERT()
                                                                        Free() <Free_func Free at core/alloc.c:91>
                                                                    ravl_node_copy_constructor() <void ravl_node_copy_constructor (void *data, size_t data_size, const void *arg) at core/ravl.c:152>:
                                                                        memcpy()
                                                                util_mutex_unlock()
                                                            ERR()
                                                        heap_run_into_free_chunk() <void heap_run_into_free_chunk (struct palloc_heap *heap, struct bucket *bucket, struct memory_block *m) at libpmemobj/heap.c:697>:
                                                            heap_get_chunk_hdr()
                                                            STATS_SUB()
                                                            util_mutex_lock()
                                                            memblock_huge_init() <struct memory_block memblock_huge_init (struct palloc_heap *heap, uint32_t chunk_id, uint32_t zone_id, uint32_t size_idx) at libpmemobj/memblock.c:1329>:
                                                                heap_get_chunk_hdr()
                                                                VALGRIND_DO_MAKE_MEM_UNDEFINED()
                                                                VALGRIND_ANNOTATE_NEW_MEMORY()
                                                                chunk_get_chunk_hdr_value() <uint64_t chunk_get_chunk_hdr_value (uint16_t type, uint16_t flags, uint32_t size_idx) at libpmemobj/memblock.c:604>:
                                                                    COMPILE_ERROR_ON()
                                                                    memcpy()
                                                                util_atomic_store_explicit64()
                                                                pmemops_persist()
                                                                huge_write_footer() <void huge_write_footer (struct chunk_header *hdr, uint32_t size_idx) at libpmemobj/memblock.c:1166>:
                                                                    VALGRIND_DO_MAKE_MEM_UNDEFINED()
                                                                    VALGRIND_SET_CLEAN()
                                                                memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                                                    memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                                                        heap_get_chunk_hdr()
                                                                    memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                                                        heap_get_chunk_hdr()
                                                                        FATAL()
                                                            heap_free_chunk_reuse() <int heap_free_chunk_reuse (struct palloc_heap *heap, struct bucket *bucket, struct memory_block *m) at libpmemobj/heap.c:674>:
                                                                heap_coalesce_huge() <struct memory_block heap_coalesce_huge (struct palloc_heap *heap, struct bucket *b, const struct memory_block *m) at libpmemobj/heap.c:650>:
                                                                    heap_get_adjacent_free_block() <int heap_get_adjacent_free_block (struct palloc_heap *heap, const struct memory_block *in, struct memory_block *out, int prev) at libpmemobj/heap.c:582>:
                                                                        ZID_TO_ZONE()
                                                                        memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                                                            memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                                                                heap_get_chunk_hdr()
                                                                            memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                                                                heap_get_chunk_hdr()
                                                                                FATAL()
                                                                    bucket_remove_block() <int bucket_remove_block (struct bucket *b, const struct memory_block *m) at libpmemobj/bucket.c:178>
                                                                    heap_coalesce() <struct memory_block heap_coalesce (struct palloc_heap *heap, const struct memory_block *blocks[], int n) at libpmemobj/heap.c:621>:
                                                                        ASSERTne()
                                                                        memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                                                            memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                                                                heap_get_chunk_hdr()
                                                                            memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                                                                heap_get_chunk_hdr()
                                                                                FATAL()
                                                                bucket_insert_block() <int bucket_insert_block (struct bucket *b, const struct memory_block *m) at libpmemobj/bucket.c:161>:
                                                                    VALGRIND_DO_MAKE_MEM_NOACCESS()
                                                                    VALGRIND_ANNOTATE_NEW_MEMORY()
                                                            util_mutex_unlock()
                                                        heap_free_chunk_reuse() <int heap_free_chunk_reuse (struct palloc_heap *heap, struct bucket *bucket, struct memory_block *m) at libpmemobj/heap.c:674>:
                                                            heap_coalesce_huge() <struct memory_block heap_coalesce_huge (struct palloc_heap *heap, struct bucket *b, const struct memory_block *m) at libpmemobj/heap.c:650>:
                                                                heap_get_adjacent_free_block() <int heap_get_adjacent_free_block (struct palloc_heap *heap, const struct memory_block *in, struct memory_block *out, int prev) at libpmemobj/heap.c:582>:
                                                                    ZID_TO_ZONE()
                                                                    memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                                                        memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                                                            heap_get_chunk_hdr()
                                                                        memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                                                            heap_get_chunk_hdr()
                                                                            FATAL()
                                                                bucket_remove_block() <int bucket_remove_block (struct bucket *b, const struct memory_block *m) at libpmemobj/bucket.c:178>
                                                                heap_coalesce() <struct memory_block heap_coalesce (struct palloc_heap *heap, const struct memory_block *blocks[], int n) at libpmemobj/heap.c:621>:
                                                                    ASSERTne()
                                                                    memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                                                        memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                                                            heap_get_chunk_hdr()
                                                                        memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                                                            heap_get_chunk_hdr()
                                                                            FATAL()
                                                            bucket_insert_block() <int bucket_insert_block (struct bucket *b, const struct memory_block *m) at libpmemobj/bucket.c:161>:
                                                                VALGRIND_DO_MAKE_MEM_NOACCESS()
                                                                VALGRIND_ANNOTATE_NEW_MEMORY()
                                                heap_extend() <int heap_extend (struct palloc_heap *heap, struct bucket *b, size_t size) at libpmemobj/heap.c:1515>:
                                                    util_pool_extend() <void *util_pool_extend (struct pool_set *set, size_t *size, size_t minpartsize) at common/set.c:2231>:
                                                        LOG()
                                                        ERR()
                                                        util_poolset_append_new_part() <int util_poolset_append_new_part (struct pool_set *set, size_t size) at common/set.c:2174>:
                                                            LOG()
                                                            VEC_SIZE()
                                                            VEC_GET()
                                                            strlen()
                                                            Malloc()
                                                            ERR()
                                                            snprintf()
                                                            util_replica_add_part() <int util_replica_add_part (struct pool_replica **repp, const char *path, size_t filesize) at common/set.c:708>:
                                                                LOG()
                                                                util_replica_add_part_by_idx() <int util_replica_add_part_by_idx (struct pool_replica **repp, const char *path, size_t filesize, unsigned p) at common/set.c:662>:
                                                                    LOG()
                                                                    util_replica_reserve() <int util_replica_reserve (struct pool_replica **repp, unsigned n) at common/set.c:633>:
                                                                        LOG()
                                                                        Realloc()
                                                                        ERR()
                                                                        memset()
                                                                    ASSERTne()
                                                                    util_file_get_type() <enum file_type util_file_get_type (const char *path) at common/file.c:106>:
                                                                        LOG()
                                                                        ERR()
                                                                        util_file_exists() <int util_file_exists (const char *path) at common/file.c:32>:
                                                                            LOG()
                                                                            os_access() <int os_access (const char *pathname, int mode) at core/os_posix.c:97>:
                                                                                access()
                                                                            ERR()
                                                                        os_stat() <int os_stat (const char *pathname, os_stat_t *buf) at core/os_posix.c:79>:
                                                                            stat()
                                                                        util_stat_get_type() <enum file_type util_stat_get_type (const os_stat_t *st) at common/file.c:62>:
                                                                            pmem2_get_type_from_stat() <int pmem2_get_type_from_stat (const os_stat_t *st, enum pmem2_file_type *type) at libpmem2/pmem2_utils_linux.c:23>:
                                                                                S_ISREG()
                                                                                S_ISDIR()
                                                                                S_ISCHR()
                                                                                ERR()
                                                                                util_snprintf() <int util_snprintf (char *str, size_t size, const char *format, ...) at core/util.c:434>:
                                                                                    va_start()
                                                                                    vsnprintf()
                                                                                    va_end()
                                                                                os_major()
                                                                                os_minor()
                                                                                ASSERTinfo()
                                                                                LOG()
                                                                                realpath()
                                                                                strrchr()
                                                                                strcmp()
                                                                            pmem2_err_to_errno() <int pmem2_err_to_errno (int err) at libpmem2/pmem2_utils.c:67>:
                                                                                FATAL()
                                                                            ASSERTinfo()
                                                                    util_file_device_dax_alignment() <size_t util_file_device_dax_alignment (const char *path) at common/file_posix.c:139>:
                                                                        LOG()
                                                                        device_dax_alignment() <size_t device_dax_alignment (const char *path) at common/file_posix.c:105>:
                                                                            LOG()
                                                                            os_open() <int os_open (const char *pathname, int flags, ...) at core/os_posix.c:29>:
                                                                                va_start()
                                                                                va_arg()
                                                                                va_end()
                                                                                open()
                                                                            pmem2_source_from_fd() <int pmem2_source_from_fd (struct pmem2_source **src, int fd) at libpmem2/source_posix.c:19>:
                                                                                PMEM2_ERR_CLR()
                                                                                fcntl()
                                                                                ERR()
                                                                                os_fstat()
                                                                                pmem2_get_type_from_stat() <int pmem2_get_type_from_stat (const os_stat_t *st, enum pmem2_file_type *type) at libpmem2/pmem2_utils_linux.c:23>:
                                                                                    S_ISREG()
                                                                                    S_ISDIR()
                                                                                    S_ISCHR()
                                                                                    ERR()
                                                                                    util_snprintf() <int util_snprintf (char *str, size_t size, const char *format, ...) at core/util.c:434>:
                                                                                        va_start()
                                                                                        vsnprintf()
                                                                                        va_end()
                                                                                    os_major()
                                                                                    os_minor()
                                                                                    ASSERTinfo()
                                                                                    LOG()
                                                                                    realpath()
                                                                                    strrchr()
                                                                                    strcmp()
                                                                                pmem2_malloc() <void *pmem2_malloc (size_t size, int *err) at libpmem2/pmem2_utils.c:19>:
                                                                                    Malloc()
                                                                                    ERR()
                                                                                ASSERTne()
                                                                            pmem2_device_dax_alignment() <int pmem2_device_dax_alignment (const struct pmem2_source *src, size_t *alignment) at libpmem2/pmem2_utils_ndctl.c:18>:
                                                                                ndctl_new()
                                                                                ERR()
                                                                                pmem2_region_namespace() <int pmem2_region_namespace (struct ndctl_ctx *ctx, const struct pmem2_source *src, struct ndctl_region **pregion, struct ndctl_namespace **pndns) at libpmem2/region_namespace_ndctl.c:131>:
                                                                                    LOG()
                                                                                    ERR()
                                                                                    FOREACH_BUS_REGION_NAMESPACE()
                                                                                    ndctl_namespace_get_dax()
                                                                                    ASSERTeq()
                                                                                    ndctl_dax_get_daxctl_region()
                                                                                    daxctl_dev_foreach()
                                                                                    daxctl_dev_get_devname()
                                                                                    ndctl_match_devdax() <int ndctl_match_devdax (dev_t st_rdev, const char *devname) at libpmem2/region_namespace_ndctl.c:26>:
                                                                                        LOG()
                                                                                        stat()
                                                                                        util_snprintf() <int util_snprintf (char *str, size_t size, const char *format, ...) at core/util.c:434>:
                                                                                            va_start()
                                                                                            vsnprintf()
                                                                                            va_end()
                                                                                        ERR()
                                                                                        os_stat() <int os_stat (const char *pathname, os_stat_t *buf) at core/os_posix.c:79>:
                                                                                            stat()
                                                                                    ndctl_namespace_get_btt()
                                                                                    ndctl_btt_get_block_device()
                                                                                    ndctl_namespace_get_pfn()
                                                                                    ndctl_pfn_get_block_device()
                                                                                    ndctl_namespace_get_block_device()
                                                                                    ndctl_match_fsdax() <int ndctl_match_fsdax (dev_t st_dev, const char *devname) at libpmem2/region_namespace_ndctl.c:64>:
                                                                                        LOG()
                                                                                        util_snprintf() <int util_snprintf (char *str, size_t size, const char *format, ...) at core/util.c:434>:
                                                                                            va_start()
                                                                                            vsnprintf()
                                                                                            va_end()
                                                                                        ERR()
                                                                                        major()
                                                                                        minor()
                                                                                        os_open() <int os_open (const char *pathname, int flags, ...) at core/os_posix.c:29>:
                                                                                            va_start()
                                                                                            va_arg()
                                                                                            va_end()
                                                                                            open()
                                                                                        read()
                                                                                        os_close()
                                                                                        strcmp()
                                                                                LOG()
                                                                                ndctl_namespace_get_dax()
                                                                                ndctl_dax_get_align()
                                                                                ndctl_unref()
                                                                            pmem2_source_delete() <int pmem2_source_delete (struct pmem2_source **src) at libpmem2/source.c:30>:
                                                                                Free() <Free_func Free at core/alloc.c:91>
                                                                            os_close()
                                                            FATAL()
                                                            util_poolset_set_size() <void util_poolset_set_size (struct pool_set *set) at common/set.c:949>:
                                                                LOG()
                                                            Free() <Free_func Free at core/alloc.c:91>
                                                        util_part_open() <int util_part_open (struct pool_set_part *part, size_t minsize, int create_part) at common/set.c:1459>:
                                                            LOG()
                                                            util_file_exists() <int util_file_exists (const char *path) at common/file.c:32>:
                                                                LOG()
                                                                os_access() <int os_access (const char *pathname, int mode) at core/os_posix.c:97>:
                                                                    access()
                                                                ERR()
                                                            util_file_create() <int util_file_create (const char *path, size_t size, size_t minsize) at common/file.c:398>:
                                                                LOG()
                                                                ASSERTne()
                                                                ERR()
                                                                os_open() <int os_open (const char *pathname, int flags, ...) at core/os_posix.c:29>:
                                                                    va_start()
                                                                    va_arg()
                                                                    va_end()
                                                                    open()
                                                                os_posix_fallocate() <int os_posix_fallocate (int fd, os_off_t offset, off_t len) at core/os_posix.c:142>:
                                                                    posix_fallocate()
                                                                os_flock() <int os_flock (int fd, int operation) at core/os_posix.c:215>:
                                                                    flock()
                                                                os_close()
                                                                os_unlink() <int os_unlink (const char *pathname) at core/os_posix.c:88>:
                                                                    unlink()
                                                            util_file_open() <int util_file_open (const char *path, size_t *size, size_t minsize, int flags) at common/file.c:456>:
                                                                LOG()
                                                                os_open() <int os_open (const char *pathname, int flags, ...) at core/os_posix.c:29>:
                                                                    va_start()
                                                                    va_arg()
                                                                    va_end()
                                                                    open()
                                                                ERR()
                                                                os_flock() <int os_flock (int fd, int operation) at core/os_posix.c:215>:
                                                                    flock()
                                                                os_close()
                                                                ASSERTeq()
                                                                util_fd_get_size() <ssize_t util_fd_get_size (int fd) at common/file.c:157>:
                                                                    LOG()
                                                                    pmem2_source_from_fd() <int pmem2_source_from_fd (struct pmem2_source **src, int fd) at libpmem2/source_posix.c:19>:
                                                                        PMEM2_ERR_CLR()
                                                                        fcntl()
                                                                        ERR()
                                                                        os_fstat()
                                                                        pmem2_get_type_from_stat() <int pmem2_get_type_from_stat (const os_stat_t *st, enum pmem2_file_type *type) at libpmem2/pmem2_utils_linux.c:23>:
                                                                            S_ISREG()
                                                                            S_ISDIR()
                                                                            S_ISCHR()
                                                                            ERR()
                                                                            util_snprintf() <int util_snprintf (char *str, size_t size, const char *format, ...) at core/util.c:434>:
                                                                                va_start()
                                                                                vsnprintf()
                                                                                va_end()
                                                                            os_major()
                                                                            os_minor()
                                                                            ASSERTinfo()
                                                                            LOG()
                                                                            realpath()
                                                                            strrchr()
                                                                            strcmp()
                                                                        pmem2_malloc() <void *pmem2_malloc (size_t size, int *err) at libpmem2/pmem2_utils.c:19>:
                                                                            Malloc()
                                                                            ERR()
                                                                        ASSERTne()
                                                                    pmem2_err_to_errno() <int pmem2_err_to_errno (int err) at libpmem2/pmem2_utils.c:67>:
                                                                        FATAL()
                                                                    pmem2_source_size() <int pmem2_source_size (const struct pmem2_source *src, size_t *size) at libpmem2/source_posix.c:90>:
                                                                        LOG()
                                                                        PMEM2_ERR_CLR()
                                                                        ASSERT()
                                                                        os_fstat()
                                                                        ERR()
                                                                        pmem2_device_dax_size() <int pmem2_device_dax_size (const struct pmem2_source *src, size_t *size) at libpmem2/pmem2_utils_ndctl.c:58>:
                                                                            ndctl_new()
                                                                            ERR()
                                                                            pmem2_region_namespace() <int pmem2_region_namespace (struct ndctl_ctx *ctx, const struct pmem2_source *src, struct ndctl_region **pregion, struct ndctl_namespace **pndns) at libpmem2/region_namespace_ndctl.c:131>:
                                                                                LOG()
                                                                                ERR()
                                                                                FOREACH_BUS_REGION_NAMESPACE()
                                                                                ndctl_namespace_get_dax()
                                                                                ASSERTeq()
                                                                                ndctl_dax_get_daxctl_region()
                                                                                daxctl_dev_foreach()
                                                                                daxctl_dev_get_devname()
                                                                                ndctl_match_devdax() <int ndctl_match_devdax (dev_t st_rdev, const char *devname) at libpmem2/region_namespace_ndctl.c:26>:
                                                                                    LOG()
                                                                                    stat()
                                                                                    util_snprintf() <int util_snprintf (char *str, size_t size, const char *format, ...) at core/util.c:434>:
                                                                                        va_start()
                                                                                        vsnprintf()
                                                                                        va_end()
                                                                                    ERR()
                                                                                    os_stat() <int os_stat (const char *pathname, os_stat_t *buf) at core/os_posix.c:79>:
                                                                                        stat()
                                                                                ndctl_namespace_get_btt()
                                                                                ndctl_btt_get_block_device()
                                                                                ndctl_namespace_get_pfn()
                                                                                ndctl_pfn_get_block_device()
                                                                                ndctl_namespace_get_block_device()
                                                                                ndctl_match_fsdax() <int ndctl_match_fsdax (dev_t st_dev, const char *devname) at libpmem2/region_namespace_ndctl.c:64>:
                                                                                    LOG()
                                                                                    util_snprintf() <int util_snprintf (char *str, size_t size, const char *format, ...) at core/util.c:434>:
                                                                                        va_start()
                                                                                        vsnprintf()
                                                                                        va_end()
                                                                                    ERR()
                                                                                    major()
                                                                                    minor()
                                                                                    os_open() <int os_open (const char *pathname, int flags, ...) at core/os_posix.c:29>:
                                                                                        va_start()
                                                                                        va_arg()
                                                                                        va_end()
                                                                                        open()
                                                                                    read()
                                                                                    os_close()
                                                                                    strcmp()
                                                                            LOG()
                                                                            ndctl_namespace_get_dax()
                                                                            ndctl_dax_get_size()
                                                                            ndctl_unref()
                                                                        FATAL()
                                                                    pmem2_source_delete() <int pmem2_source_delete (struct pmem2_source **src) at libpmem2/source.c:30>:
                                                                        Free() <Free_func Free at core/alloc.c:91>
                                                                    ERR()
                                                            os_posix_fallocate() <int os_posix_fallocate (int fd, os_off_t offset, off_t len) at core/os_posix.c:142>:
                                                                posix_fallocate()
                                                            ERR()
                                                        util_map_part() <int util_map_part (struct pool_set_part *part, void *addr, size_t size, size_t offset, int flags, int rdonly) at common/set.c:229>:
                                                            LOG()
                                                            ASSERTeq()
                                                            ASSERT()
                                                            roundup()
                                                            util_map_sync() <void *util_map_sync (void *addr, size_t len, int proto, int flags, int fd, os_off_t offset, int *map_sync) at common/mmap_posix.c:159>:
                                                                LOG()
                                                                mmap()
                                                            ERR()
                                                            munmap()
                                                            VALGRIND_REGISTER_PMEM_MAPPING()
                                                            VALGRIND_REGISTER_PMEM_FILE()
                                                        util_poolset_chmod() <int util_poolset_chmod (struct pool_set *set, mode_t mode) at common/set.c:404>:
                                                            LOG()
                                                            os_fstat()
                                                            ERR()
                                                            os_chmod() <int os_chmod (const char *pathname, mode_t mode) at core/os_posix.c:124>:
                                                                chmod()
                                                        util_poolset_fdclose() <void util_poolset_fdclose (struct pool_set *set) at common/set.c:457>:
                                                            util_poolset_fdclose_always() <void util_poolset_fdclose_always (struct pool_set *set) at common/set.c:445>:
                                                                LOG()
                                                                util_replica_fdclose() <void util_replica_fdclose (struct pool_replica *rep) at common/set.c:3232>:
                                                                    util_part_fdclose() <void util_part_fdclose (struct pool_set_part *part) at common/set.c:1517>:
                                                                        LOG()
                                                                        os_close()
                                                        os_close()
                                                        os_unlink() <int os_unlink (const char *pathname) at core/os_posix.c:88>:
                                                            unlink()
                                                        Free() <Free_func Free at core/alloc.c:91>
                                                        util_poolset_set_size() <void util_poolset_set_size (struct pool_set *set) at common/set.c:949>:
                                                            LOG()
                                                    pmemops_persist()
                                                    heap_max_zone() <unsigned heap_max_zone (size_t size) at libpmemobj/heap.c:516>:
                                                    ZID_TO_ZONE()
                                                    heap_zone_init() <void heap_zone_init (struct palloc_heap *heap, uint32_t zone_id, uint32_t first_chunk_id) at libpmemobj/heap.c:559>:
                                                        ZID_TO_ZONE()
                                                        zone_calc_size_idx() <uint32_t zone_calc_size_idx (uint32_t zone_id, unsigned max_zone, size_t heap_size) at libpmemobj/heap.c:533>:
                                                            ASSERT()
                                                        ASSERT()
                                                        memblock_huge_init() <struct memory_block memblock_huge_init (struct palloc_heap *heap, uint32_t chunk_id, uint32_t zone_id, uint32_t size_idx) at libpmemobj/memblock.c:1329>:
                                                            heap_get_chunk_hdr()
                                                            VALGRIND_DO_MAKE_MEM_UNDEFINED()
                                                            VALGRIND_ANNOTATE_NEW_MEMORY()
                                                            chunk_get_chunk_hdr_value() <uint64_t chunk_get_chunk_hdr_value (uint16_t type, uint16_t flags, uint32_t size_idx) at libpmemobj/memblock.c:604>:
                                                                COMPILE_ERROR_ON()
                                                                memcpy()
                                                            util_atomic_store_explicit64()
                                                            pmemops_persist()
                                                            huge_write_footer() <void huge_write_footer (struct chunk_header *hdr, uint32_t size_idx) at libpmemobj/memblock.c:1166>:
                                                                VALGRIND_DO_MAKE_MEM_UNDEFINED()
                                                                VALGRIND_SET_CLEAN()
                                                            memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                                                memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                                                    heap_get_chunk_hdr()
                                                                memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                                                    heap_get_chunk_hdr()
                                                                    FATAL()
                                                        pmemops_persist()
                                                    memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                                        memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                                            heap_get_chunk_hdr()
                                                        memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                                            heap_get_chunk_hdr()
                                                            FATAL()
                                                    heap_free_chunk_reuse() <int heap_free_chunk_reuse (struct palloc_heap *heap, struct bucket *bucket, struct memory_block *m) at libpmemobj/heap.c:674>:
                                                        heap_coalesce_huge() <struct memory_block heap_coalesce_huge (struct palloc_heap *heap, struct bucket *b, const struct memory_block *m) at libpmemobj/heap.c:650>:
                                                            heap_get_adjacent_free_block() <int heap_get_adjacent_free_block (struct palloc_heap *heap, const struct memory_block *in, struct memory_block *out, int prev) at libpmemobj/heap.c:582>:
                                                                ZID_TO_ZONE()
                                                                memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                                                    memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                                                        heap_get_chunk_hdr()
                                                                    memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                                                        heap_get_chunk_hdr()
                                                                        FATAL()
                                                            bucket_remove_block() <int bucket_remove_block (struct bucket *b, const struct memory_block *m) at libpmemobj/bucket.c:178>
                                                            heap_coalesce() <struct memory_block heap_coalesce (struct palloc_heap *heap, const struct memory_block *blocks[], int n) at libpmemobj/heap.c:621>:
                                                                ASSERTne()
                                                                memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                                                    memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                                                        heap_get_chunk_hdr()
                                                                    memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                                                        heap_get_chunk_hdr()
                                                                        FATAL()
                                                        bucket_insert_block() <int bucket_insert_block (struct bucket *b, const struct memory_block *m) at libpmemobj/bucket.c:161>:
                                                            VALGRIND_DO_MAKE_MEM_NOACCESS()
                                                            VALGRIND_ANNOTATE_NEW_MEMORY()
                                            heap_ensure_run_bucket_filled() <int heap_ensure_run_bucket_filled (struct palloc_heap *heap, struct bucket *b, uint32_t units) at libpmemobj/heap.c:1083> (R):
                                                bucket_alloc_class() <struct alloc_class *bucket_alloc_class (struct bucket *b) at libpmemobj/bucket.c:152>
                                                ASSERTeq()
                                                heap_detach_and_try_discard_run() <int heap_detach_and_try_discard_run (struct palloc_heap *heap, struct bucket *b) at libpmemobj/heap.c:992>:
                                                    bucket_detach_run() <int bucket_detach_run (struct bucket *b, struct memory_block *m_out, int *empty) at libpmemobj/bucket.c:231>:
                                                        util_fetch_and_sub64()
                                                        VALGRIND_ANNOTATE_HAPPENS_AFTER()
                                                        VALGRIND_ANNOTATE_HAPPENS_BEFORE()
                                                        Zalloc() <void *Zalloc (size_t sz) at core/alloc.c:98>:
                                                            Malloc()
                                                            memset()
                                                    heap_discard_run() <void heap_discard_run (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/heap.c:974>:
                                                        heap_reclaim_run() <int heap_reclaim_run (struct palloc_heap *heap, struct memory_block *m, int startup) at libpmemobj/heap.c:733>:
                                                            heap_get_chunk_run()
                                                            heap_get_chunk_hdr()
                                                            alloc_class_by_run() <struct alloc_class *alloc_class_by_run (struct alloc_class_collection *ac, size_t unit_size, uint16_t flags, uint32_t size_idx) at libpmemobj/alloc_class.c:594>:
                                                                SIZE_TO_CLASS_MAP_INDEX()
                                                                ASSERT()
                                                                critnib_get() <void *critnib_get (struct critnib *c, uint64_t key) at libpmemobj/critnib.c:515>:
                                                                    load() <void load (void *src, void *dst) at libpmemobj/critnib.c:130>:
                                                                        util_atomic_load_explicit64()
                                                                    is_leaf() <inline bool is_leaf (struct critnib_node *n) at libpmemobj/critnib.c:150>:
                                                                    slice_index() <inline unsigned slice_index (uint64_t key, sh_t shift) at libpmemobj/critnib.c:178>:
                                                                    to_leaf() <inline struct critnib_leaf *to_leaf (struct critnib_node *n) at libpmemobj/critnib.c:159>:
                                                                RUN_CLASS_KEY_PACK()
                                                            recycler_element_new() <struct recycler_element recycler_element_new (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/recycler.c:122>:
                                                                SUPPRESS_UNUSED()
                                                                util_mutex_lock()
                                                                util_mutex_unlock()
                                                            ASSERTeq()
                                                            STATS_INC()
                                                            heap_get_recycler() <struct recycler *heap_get_recycler (struct palloc_heap *heap, size_t id, size_t nallocs) at libpmemobj/heap.c:106> (R):
                                                                util_atomic_load_explicit64()
                                                                recycler_new() <struct recycler *recycler_new (struct palloc_heap *heap, size_t nallocs, size_t *peak_arenas) at libpmemobj/recycler.c:74>:
                                                                    Malloc()
                                                                    ravl_new_sized() <struct ravl *ravl_new_sized (ravl_compare *compare, size_t data_size) at core/ravl.c:45>:
                                                                        Malloc()
                                                                        ERR()
                                                                    recycler_element_cmp() <int recycler_element_cmp (const void *lhs, const void *rhs) at libpmemobj/recycler.c:23>:
                                                                    memset()
                                                                    VEC_INIT()
                                                                    util_mutex_init()
                                                                    Free() <Free_func Free at core/alloc.c:91>
                                                                util_bool_compare_and_swap64()
                                                                recycler_delete() <void recycler_delete (struct recycler *r) at libpmemobj/recycler.c:107>:
                                                                    VEC_DELETE()
                                                                    util_mutex_destroy()
                                                                    ravl_delete() <void ravl_delete (struct ravl *ravl) at core/ravl.c:112>:
                                                                        ravl_delete_cb() <void ravl_delete_cb (struct ravl *ravl, ravl_cb cb, void *arg) at core/ravl.c:102>:
                                                                            ravl_foreach_node() <void ravl_foreach_node (struct ravl_node *n, ravl_cb cb, void *arg, int free_node) at core/ravl.c:74> (R):
                                                                                ravl_foreach_node() <void ravl_foreach_node (struct ravl_node *n, ravl_cb cb, void *arg, int free_node) at core/ravl.c:74> (recursive: see 6178)
                                                                                Free() <Free_func Free at core/alloc.c:91>
                                                                            Free() <Free_func Free at core/alloc.c:91>
                                                                    Free() <Free_func Free at core/alloc.c:91>
                                                                heap_get_recycler() <struct recycler *heap_get_recycler (struct palloc_heap *heap, size_t id, size_t nallocs) at libpmemobj/heap.c:106> (recursive: see 6160)
                                                            recycler_put() <int recycler_put (struct recycler *r, struct recycler_element element) at libpmemobj/recycler.c:154>:
                                                                util_mutex_lock()
                                                                ravl_emplace_copy() <int ravl_emplace_copy (struct ravl *ravl, const void *data) at core/ravl.c:384>:
                                                                    ravl_emplace() <int ravl_emplace (struct ravl *ravl, ravl_constr constr, const void *arg) at core/ravl.c:393>:
                                                                        LOG()
                                                                        ravl_new_node() <struct ravl_node *ravl_new_node (struct ravl *ravl, ravl_constr constr, const void *arg) at core/ravl.c:161>:
                                                                            Malloc()
                                                                            ERR()
                                                                            ravl_node_insert_constructor() <void ravl_node_insert_constructor (void *data, size_t data_size, const void *arg) at core/ravl.c:139>:
                                                                                SUPPRESS_UNUSED()
                                                                                memcpy()
                                                                        ravl_data() <void *ravl_data (struct ravl_node *node) at core/ravl.c:571>:
                                                                            memcpy()
                                                                        ravl_balance() <void ravl_balance (struct ravl *ravl, struct ravl_node *n) at core/ravl.c:337>:
                                                                            ravl_node_is() <int ravl_node_is (struct ravl_node *n, int i, int j) at core/ravl.c:306>:
                                                                                ravl_node_is_i_j() <int ravl_node_is_i_j (struct ravl_node *n, int i, int j) at core/ravl.c:296>:
                                                                                    ravl_node_rank_difference_parent() <int ravl_node_rank_difference_parent (struct ravl_node *p, struct ravl_node *n) at core/ravl.c:275>:
                                                                                        ravl_node_rank() <int ravl_node_rank (struct ravl_node *n) at core/ravl.c:261>:
                                                                            ravl_node_promote() <void ravl_node_promote (struct ravl_node *n) at core/ravl.c:315>
                                                                            ravl_node_sibling() <struct ravl_node *ravl_node_sibling (struct ravl_node *n) at core/ravl.c:209>:
                                                                                ravl_node_slot_type() <enum ravl_slot_type ravl_node_slot_type (struct ravl_node *n) at core/ravl.c:196>:
                                                                            ravl_node_rank_difference() <int ravl_node_rank_difference (struct ravl_node *n) at core/ravl.c:287>:
                                                                                ravl_node_rank_difference_parent() <int ravl_node_rank_difference_parent (struct ravl_node *p, struct ravl_node *n) at core/ravl.c:275>:
                                                                                    ravl_node_rank() <int ravl_node_rank (struct ravl_node *n) at core/ravl.c:261>:
                                                                            ravl_node_rank_difference_parent() <int ravl_node_rank_difference_parent (struct ravl_node *p, struct ravl_node *n) at core/ravl.c:275>:
                                                                                ravl_node_rank() <int ravl_node_rank (struct ravl_node *n) at core/ravl.c:261>:
                                                                            ravl_slot_opposite() <enum ravl_slot_type ravl_slot_opposite (enum ravl_slot_type t) at core/ravl.c:184>:
                                                                                ASSERTne()
                                                                            ravl_node_slot_type() <enum ravl_slot_type ravl_node_slot_type (struct ravl_node *n) at core/ravl.c:196>:
                                                                            ravl_rotate() <void ravl_rotate (struct ravl *ravl, struct ravl_node *n) at core/ravl.c:237>:
                                                                                ASSERTne()
                                                                                ravl_node_ref() <struct ravl_node **ravl_node_ref (struct ravl *ravl, struct ravl_node *n) at core/ravl.c:223>:
                                                                                    ravl_node_slot_type() <enum ravl_slot_type ravl_node_slot_type (struct ravl_node *n) at core/ravl.c:196>:
                                                                                ravl_node_slot_type() <enum ravl_slot_type ravl_node_slot_type (struct ravl_node *n) at core/ravl.c:196>:
                                                                                ravl_slot_opposite() <enum ravl_slot_type ravl_slot_opposite (enum ravl_slot_type t) at core/ravl.c:184>:
                                                                                    ASSERTne()
                                                                            ravl_node_demote() <void ravl_node_demote (struct ravl_node *n) at core/ravl.c:324>:
                                                                                ASSERT()
                                                                        Free() <Free_func Free at core/alloc.c:91>
                                                                    ravl_node_copy_constructor() <void ravl_node_copy_constructor (void *data, size_t data_size, const void *arg) at core/ravl.c:152>:
                                                                        memcpy()
                                                                util_mutex_unlock()
                                                            ERR()
                                                        heap_bucket_acquire() <struct bucket *heap_bucket_acquire (struct palloc_heap *heap, uint8_t class_id, uint16_t arena_id) at libpmemobj/heap.c:470>:
                                                            out() <void out (const char *fmt, ...) at core/out.c:480>:
                                                                va_start()
                                                                out_common() <} void out_common (const char *file, int line, const char *func, int level, const char *suffix, const char *fmt, va_list ap) at core/out.c:334>
                                                                va_end()
                                                            heap_thread_arena() <struct arena *heap_thread_arena (struct palloc_heap *heap) at libpmemobj/heap.c:414>:
                                                                os_tls_get() <void *os_tls_get (os_tls_key_t key) at core/os_thread_posix.c:62>:
                                                                    pthread_getspecific()
                                                                heap_thread_arena_assign() <struct arena *heap_thread_arena_assign (struct palloc_heap *heap) at libpmemobj/heap.c:381>:
                                                                    util_mutex_lock()
                                                                    ASSERTne()
                                                                    VEC_SIZE()
                                                                    VEC_FOREACH()
                                                                    LOG()
                                                                    heap_arena_thread_attach() <void heap_arena_thread_attach (struct palloc_heap *heap, struct arena *a) at libpmemobj/heap.c:249>:
                                                                        ASSERTeq()
                                                                        os_tls_get() <void *os_tls_get (os_tls_key_t key) at core/os_thread_posix.c:62>:
                                                                            pthread_getspecific()
                                                                        heap_arena_thread_detach() <void heap_arena_thread_detach (struct arena *a) at libpmemobj/heap.c:232>:
                                                                            util_fetch_and_sub64()
                                                                        ASSERTne()
                                                                        util_fetch_and_add64()
                                                                        os_tls_set() <int os_tls_set (os_tls_key_t key, const void *value) at core/os_thread_posix.c:53>:
                                                                            pthread_setspecific()
                                                                    util_mutex_unlock()
                                                                heap_global_arena_assign() <struct arena *heap_global_arena_assign (struct palloc_heap *heap) at libpmemobj/heap.c:348>:
                                                                    util_mutex_lock()
                                                                    ASSERTne()
                                                                    VEC_SIZE()
                                                                    VEC_FOREACH()
                                                                    LOG()
                                                                    util_mutex_unlock()
                                                                ASSERT()
                                                                ASSERTne()
                                                            ASSERTne()
                                                            VEC_ARR()
                                                            bucket_acquire() <struct bucket *bucket_acquire (struct bucket_locked *b) at libpmemobj/bucket.c:117>:
                                                                util_mutex_lock()
                                                        heap_run_into_free_chunk() <void heap_run_into_free_chunk (struct palloc_heap *heap, struct bucket *bucket, struct memory_block *m) at libpmemobj/heap.c:697>:
                                                            heap_get_chunk_hdr()
                                                            STATS_SUB()
                                                            util_mutex_lock()
                                                            memblock_huge_init() <struct memory_block memblock_huge_init (struct palloc_heap *heap, uint32_t chunk_id, uint32_t zone_id, uint32_t size_idx) at libpmemobj/memblock.c:1329>:
                                                                heap_get_chunk_hdr()
                                                                VALGRIND_DO_MAKE_MEM_UNDEFINED()
                                                                VALGRIND_ANNOTATE_NEW_MEMORY()
                                                                chunk_get_chunk_hdr_value() <uint64_t chunk_get_chunk_hdr_value (uint16_t type, uint16_t flags, uint32_t size_idx) at libpmemobj/memblock.c:604>:
                                                                    COMPILE_ERROR_ON()
                                                                    memcpy()
                                                                util_atomic_store_explicit64()
                                                                pmemops_persist()
                                                                huge_write_footer() <void huge_write_footer (struct chunk_header *hdr, uint32_t size_idx) at libpmemobj/memblock.c:1166>:
                                                                    VALGRIND_DO_MAKE_MEM_UNDEFINED()
                                                                    VALGRIND_SET_CLEAN()
                                                                memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                                                    memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                                                        heap_get_chunk_hdr()
                                                                    memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                                                        heap_get_chunk_hdr()
                                                                        FATAL()
                                                            heap_free_chunk_reuse() <int heap_free_chunk_reuse (struct palloc_heap *heap, struct bucket *bucket, struct memory_block *m) at libpmemobj/heap.c:674>:
                                                                heap_coalesce_huge() <struct memory_block heap_coalesce_huge (struct palloc_heap *heap, struct bucket *b, const struct memory_block *m) at libpmemobj/heap.c:650>:
                                                                    heap_get_adjacent_free_block() <int heap_get_adjacent_free_block (struct palloc_heap *heap, const struct memory_block *in, struct memory_block *out, int prev) at libpmemobj/heap.c:582>:
                                                                        ZID_TO_ZONE()
                                                                        memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                                                            memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                                                                heap_get_chunk_hdr()
                                                                            memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                                                                heap_get_chunk_hdr()
                                                                                FATAL()
                                                                    bucket_remove_block() <int bucket_remove_block (struct bucket *b, const struct memory_block *m) at libpmemobj/bucket.c:178>
                                                                    heap_coalesce() <struct memory_block heap_coalesce (struct palloc_heap *heap, const struct memory_block *blocks[], int n) at libpmemobj/heap.c:621>:
                                                                        ASSERTne()
                                                                        memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                                                            memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                                                                heap_get_chunk_hdr()
                                                                            memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                                                                heap_get_chunk_hdr()
                                                                                FATAL()
                                                                bucket_insert_block() <int bucket_insert_block (struct bucket *b, const struct memory_block *m) at libpmemobj/bucket.c:161>:
                                                                    VALGRIND_DO_MAKE_MEM_NOACCESS()
                                                                    VALGRIND_ANNOTATE_NEW_MEMORY()
                                                            util_mutex_unlock()
                                                        heap_bucket_release() <void heap_bucket_release (struct bucket *b) at libpmemobj/heap.c:498>:
                                                            bucket_release() <void bucket_release (struct bucket *b) at libpmemobj/bucket.c:127>:
                                                                util_mutex_unlock()
                                                heap_reuse_from_recycler() <int heap_reuse_from_recycler (struct palloc_heap *heap, struct bucket *b, uint32_t units, int force) at libpmemobj/heap.c:1034>:
                                                    bucket_alloc_class() <struct alloc_class *bucket_alloc_class (struct bucket *b) at libpmemobj/bucket.c:152>
                                                    heap_get_recycler() <struct recycler *heap_get_recycler (struct palloc_heap *heap, size_t id, size_t nallocs) at libpmemobj/heap.c:106> (R):
                                                        util_atomic_load_explicit64()
                                                        recycler_new() <struct recycler *recycler_new (struct palloc_heap *heap, size_t nallocs, size_t *peak_arenas) at libpmemobj/recycler.c:74>:
                                                            Malloc()
                                                            ravl_new_sized() <struct ravl *ravl_new_sized (ravl_compare *compare, size_t data_size) at core/ravl.c:45>:
                                                                Malloc()
                                                                ERR()
                                                            recycler_element_cmp() <int recycler_element_cmp (const void *lhs, const void *rhs) at libpmemobj/recycler.c:23>:
                                                            memset()
                                                            VEC_INIT()
                                                            util_mutex_init()
                                                            Free() <Free_func Free at core/alloc.c:91>
                                                        util_bool_compare_and_swap64()
                                                        recycler_delete() <void recycler_delete (struct recycler *r) at libpmemobj/recycler.c:107>:
                                                            VEC_DELETE()
                                                            util_mutex_destroy()
                                                            ravl_delete() <void ravl_delete (struct ravl *ravl) at core/ravl.c:112>:
                                                                ravl_delete_cb() <void ravl_delete_cb (struct ravl *ravl, ravl_cb cb, void *arg) at core/ravl.c:102>:
                                                                    ravl_foreach_node() <void ravl_foreach_node (struct ravl_node *n, ravl_cb cb, void *arg, int free_node) at core/ravl.c:74> (R):
                                                                        ravl_foreach_node() <void ravl_foreach_node (struct ravl_node *n, ravl_cb cb, void *arg, int free_node) at core/ravl.c:74> (recursive: see 6333)
                                                                        Free() <Free_func Free at core/alloc.c:91>
                                                                    Free() <Free_func Free at core/alloc.c:91>
                                                            Free() <Free_func Free at core/alloc.c:91>
                                                        heap_get_recycler() <struct recycler *heap_get_recycler (struct palloc_heap *heap, size_t id, size_t nallocs) at libpmemobj/heap.c:106> (recursive: see 6315)
                                                    ERR()
                                                    recycler_get() <int recycler_get (struct recycler *r, struct memory_block *m) at libpmemobj/recycler.c:171>:
                                                        util_mutex_lock()
                                                        ravl_find() <struct ravl_node *ravl_find (struct ravl *ravl, const void *data, enum ravl_predicate flags) at core/ravl.c:524>:
                                                            LOG()
                                                            ravl_data() <void *ravl_data (struct ravl_node *node) at core/ravl.c:571>:
                                                                memcpy()
                                                            ravl_predicate_holds() <int ravl_predicate_holds (int result, struct ravl_node **ret, struct ravl_node *n, enum ravl_predicate flags) at core/ravl.c:489>:
                                                                ravl_node_successor() <struct ravl_node *ravl_node_successor (struct ravl_node *n) at core/ravl.c:465>:
                                                                    ravl_node_cessor() <struct ravl_node *ravl_node_cessor (struct ravl_node *n, enum ravl_slot_type t) at core/ravl.c:443>:
                                                                        ravl_node_type_most() <struct ravl_node *ravl_node_type_most (struct ravl_node *n, enum ravl_slot_type t) at core/ravl.c:430>:
                                                                        ravl_slot_opposite() <enum ravl_slot_type ravl_slot_opposite (enum ravl_slot_type t) at core/ravl.c:184>:
                                                                            ASSERTne()
                                                                ravl_node_predecessor() <struct ravl_node *ravl_node_predecessor (struct ravl_node *n) at core/ravl.c:476>:
                                                                    ravl_node_cessor() <struct ravl_node *ravl_node_cessor (struct ravl_node *n, enum ravl_slot_type t) at core/ravl.c:443>:
                                                                        ravl_node_type_most() <struct ravl_node *ravl_node_type_most (struct ravl_node *n, enum ravl_slot_type t) at core/ravl.c:430>:
                                                                        ravl_slot_opposite() <enum ravl_slot_type ravl_slot_opposite (enum ravl_slot_type t) at core/ravl.c:184>:
                                                                            ASSERTne()
                                                        out() <void out (const char *fmt, ...) at core/out.c:480>:
                                                            va_start()
                                                            out_common() <} void out_common (const char *file, int line, const char *func, int level, const char *suffix, const char *fmt, va_list ap) at core/out.c:334>
                                                            va_end()
                                                        ravl_data() <void *ravl_data (struct ravl_node *node) at core/ravl.c:571>:
                                                            memcpy()
                                                        ravl_remove() <void ravl_remove (struct ravl *ravl, struct ravl_node *n) at core/ravl.c:545> (R):
                                                            LOG()
                                                            ravl_node_successor() <struct ravl_node *ravl_node_successor (struct ravl_node *n) at core/ravl.c:465>:
                                                                ravl_node_cessor() <struct ravl_node *ravl_node_cessor (struct ravl_node *n, enum ravl_slot_type t) at core/ravl.c:443>:
                                                                    ravl_node_type_most() <struct ravl_node *ravl_node_type_most (struct ravl_node *n, enum ravl_slot_type t) at core/ravl.c:430>:
                                                                    ravl_slot_opposite() <enum ravl_slot_type ravl_slot_opposite (enum ravl_slot_type t) at core/ravl.c:184>:
                                                                        ASSERTne()
                                                            memcpy()
                                                            ravl_remove() <void ravl_remove (struct ravl *ravl, struct ravl_node *n) at core/ravl.c:545> (recursive: see 6363)
                                                            ravl_node_ref() <struct ravl_node **ravl_node_ref (struct ravl *ravl, struct ravl_node *n) at core/ravl.c:223>:
                                                                ravl_node_slot_type() <enum ravl_slot_type ravl_node_slot_type (struct ravl_node *n) at core/ravl.c:196>:
                                                            Free() <Free_func Free at core/alloc.c:91>
                                                        heap_get_chunk_hdr()
                                                        memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                                            memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                                                heap_get_chunk_hdr()
                                                            memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                                                heap_get_chunk_hdr()
                                                                FATAL()
                                                        util_mutex_unlock()
                                                    bucket_attach_run() <int bucket_attach_run (struct bucket *b, const struct memory_block *m) at libpmemobj/bucket.c:206>:
                                                        util_mutex_lock()
                                                        bucket_memblock_insert_block() <int bucket_memblock_insert_block (const struct memory_block *m, void *b) at libpmemobj/bucket.c:197>:
                                                            bucket_insert_block() <int bucket_insert_block (struct bucket *b, const struct memory_block *m) at libpmemobj/bucket.c:161>:
                                                                VALGRIND_DO_MAKE_MEM_NOACCESS()
                                                                VALGRIND_ANNOTATE_NEW_MEMORY()
                                                        util_mutex_unlock()
                                                        util_fetch_and_add64()
                                                    heap_recycle_unused() <int heap_recycle_unused (struct palloc_heap *heap, struct recycler *recycler, struct bucket *defb, int force) at libpmemobj/heap.c:894>:
                                                        recycler_recalc() <struct empty_runs recycler_recalc (struct recycler *r, int force) at libpmemobj/recycler.c:207>:
                                                            VEC_INIT()
                                                            util_atomic_load64()
                                                            util_mutex_trylock()
                                                            ravl_find() <struct ravl_node *ravl_find (struct ravl *ravl, const void *data, enum ravl_predicate flags) at core/ravl.c:524>:
                                                                LOG()
                                                                ravl_data() <void *ravl_data (struct ravl_node *node) at core/ravl.c:571>:
                                                                    memcpy()
                                                                ravl_predicate_holds() <int ravl_predicate_holds (int result, struct ravl_node **ret, struct ravl_node *n, enum ravl_predicate flags) at core/ravl.c:489>:
                                                                    ravl_node_successor() <struct ravl_node *ravl_node_successor (struct ravl_node *n) at core/ravl.c:465>:
                                                                        ravl_node_cessor() <struct ravl_node *ravl_node_cessor (struct ravl_node *n, enum ravl_slot_type t) at core/ravl.c:443>:
                                                                            ravl_node_type_most() <struct ravl_node *ravl_node_type_most (struct ravl_node *n, enum ravl_slot_type t) at core/ravl.c:430>:
                                                                            ravl_slot_opposite() <enum ravl_slot_type ravl_slot_opposite (enum ravl_slot_type t) at core/ravl.c:184>:
                                                                                ASSERTne()
                                                                    ravl_node_predecessor() <struct ravl_node *ravl_node_predecessor (struct ravl_node *n) at core/ravl.c:476>:
                                                                        ravl_node_cessor() <struct ravl_node *ravl_node_cessor (struct ravl_node *n, enum ravl_slot_type t) at core/ravl.c:443>:
                                                                            ravl_node_type_most() <struct ravl_node *ravl_node_type_most (struct ravl_node *n, enum ravl_slot_type t) at core/ravl.c:430>:
                                                                            ravl_slot_opposite() <enum ravl_slot_type ravl_slot_opposite (enum ravl_slot_type t) at core/ravl.c:184>:
                                                                                ASSERTne()
                                                            ravl_data() <void *ravl_data (struct ravl_node *node) at core/ravl.c:571>:
                                                                memcpy()
                                                            memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                                                memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                                                    heap_get_chunk_hdr()
                                                                memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                                                    heap_get_chunk_hdr()
                                                                    FATAL()
                                                            recycler_element_new() <struct recycler_element recycler_element_new (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/recycler.c:122>:
                                                                SUPPRESS_UNUSED()
                                                                util_mutex_lock()
                                                                util_mutex_unlock()
                                                            ASSERT()
                                                            util_fetch_and_sub64()
                                                            MIN()
                                                            ravl_remove() <void ravl_remove (struct ravl *ravl, struct ravl_node *n) at core/ravl.c:545> (R):
                                                                LOG()
                                                                ravl_node_successor() <struct ravl_node *ravl_node_successor (struct ravl_node *n) at core/ravl.c:465>:
                                                                    ravl_node_cessor() <struct ravl_node *ravl_node_cessor (struct ravl_node *n, enum ravl_slot_type t) at core/ravl.c:443>:
                                                                        ravl_node_type_most() <struct ravl_node *ravl_node_type_most (struct ravl_node *n, enum ravl_slot_type t) at core/ravl.c:430>:
                                                                        ravl_slot_opposite() <enum ravl_slot_type ravl_slot_opposite (enum ravl_slot_type t) at core/ravl.c:184>:
                                                                            ASSERTne()
                                                                memcpy()
                                                                ravl_remove() <void ravl_remove (struct ravl *ravl, struct ravl_node *n) at core/ravl.c:545> (recursive: see 6426)
                                                                ravl_node_ref() <struct ravl_node **ravl_node_ref (struct ravl *ravl, struct ravl_node *n) at core/ravl.c:223>:
                                                                    ravl_node_slot_type() <enum ravl_slot_type ravl_node_slot_type (struct ravl_node *n) at core/ravl.c:196>:
                                                                Free() <Free_func Free at core/alloc.c:91>
                                                            VEC_PUSH_BACK()
                                                            VEC_FOREACH_BY_PTR()
                                                            ravl_emplace_copy() <int ravl_emplace_copy (struct ravl *ravl, const void *data) at core/ravl.c:384>:
                                                                ravl_emplace() <int ravl_emplace (struct ravl *ravl, ravl_constr constr, const void *arg) at core/ravl.c:393>:
                                                                    LOG()
                                                                    ravl_new_node() <struct ravl_node *ravl_new_node (struct ravl *ravl, ravl_constr constr, const void *arg) at core/ravl.c:161>:
                                                                        Malloc()
                                                                        ERR()
                                                                        ravl_node_insert_constructor() <void ravl_node_insert_constructor (void *data, size_t data_size, const void *arg) at core/ravl.c:139>:
                                                                            SUPPRESS_UNUSED()
                                                                            memcpy()
                                                                    ravl_data() <void *ravl_data (struct ravl_node *node) at core/ravl.c:571>:
                                                                        memcpy()
                                                                    ravl_balance() <void ravl_balance (struct ravl *ravl, struct ravl_node *n) at core/ravl.c:337>:
                                                                        ravl_node_is() <int ravl_node_is (struct ravl_node *n, int i, int j) at core/ravl.c:306>:
                                                                            ravl_node_is_i_j() <int ravl_node_is_i_j (struct ravl_node *n, int i, int j) at core/ravl.c:296>:
                                                                                ravl_node_rank_difference_parent() <int ravl_node_rank_difference_parent (struct ravl_node *p, struct ravl_node *n) at core/ravl.c:275>:
                                                                                    ravl_node_rank() <int ravl_node_rank (struct ravl_node *n) at core/ravl.c:261>:
                                                                        ravl_node_promote() <void ravl_node_promote (struct ravl_node *n) at core/ravl.c:315>
                                                                        ravl_node_sibling() <struct ravl_node *ravl_node_sibling (struct ravl_node *n) at core/ravl.c:209>:
                                                                            ravl_node_slot_type() <enum ravl_slot_type ravl_node_slot_type (struct ravl_node *n) at core/ravl.c:196>:
                                                                        ravl_node_rank_difference() <int ravl_node_rank_difference (struct ravl_node *n) at core/ravl.c:287>:
                                                                            ravl_node_rank_difference_parent() <int ravl_node_rank_difference_parent (struct ravl_node *p, struct ravl_node *n) at core/ravl.c:275>:
                                                                                ravl_node_rank() <int ravl_node_rank (struct ravl_node *n) at core/ravl.c:261>:
                                                                        ravl_node_rank_difference_parent() <int ravl_node_rank_difference_parent (struct ravl_node *p, struct ravl_node *n) at core/ravl.c:275>:
                                                                            ravl_node_rank() <int ravl_node_rank (struct ravl_node *n) at core/ravl.c:261>:
                                                                        ravl_slot_opposite() <enum ravl_slot_type ravl_slot_opposite (enum ravl_slot_type t) at core/ravl.c:184>:
                                                                            ASSERTne()
                                                                        ravl_node_slot_type() <enum ravl_slot_type ravl_node_slot_type (struct ravl_node *n) at core/ravl.c:196>:
                                                                        ravl_rotate() <void ravl_rotate (struct ravl *ravl, struct ravl_node *n) at core/ravl.c:237>:
                                                                            ASSERTne()
                                                                            ravl_node_ref() <struct ravl_node **ravl_node_ref (struct ravl *ravl, struct ravl_node *n) at core/ravl.c:223>:
                                                                                ravl_node_slot_type() <enum ravl_slot_type ravl_node_slot_type (struct ravl_node *n) at core/ravl.c:196>:
                                                                            ravl_node_slot_type() <enum ravl_slot_type ravl_node_slot_type (struct ravl_node *n) at core/ravl.c:196>:
                                                                            ravl_slot_opposite() <enum ravl_slot_type ravl_slot_opposite (enum ravl_slot_type t) at core/ravl.c:184>:
                                                                                ASSERTne()
                                                                        ravl_node_demote() <void ravl_node_demote (struct ravl_node *n) at core/ravl.c:324>:
                                                                            ASSERT()
                                                                    Free() <Free_func Free at core/alloc.c:91>
                                                                ravl_node_copy_constructor() <void ravl_node_copy_constructor (void *data, size_t data_size, const void *arg) at core/ravl.c:152>:
                                                                    memcpy()
                                                            VEC_CLEAR()
                                                            util_mutex_unlock()
                                                        VEC_SIZE()
                                                        heap_bucket_acquire() <struct bucket *heap_bucket_acquire (struct palloc_heap *heap, uint8_t class_id, uint16_t arena_id) at libpmemobj/heap.c:470>:
                                                            out() <void out (const char *fmt, ...) at core/out.c:480>:
                                                                va_start()
                                                                out_common() <} void out_common (const char *file, int line, const char *func, int level, const char *suffix, const char *fmt, va_list ap) at core/out.c:334>
                                                                va_end()
                                                            heap_thread_arena() <struct arena *heap_thread_arena (struct palloc_heap *heap) at libpmemobj/heap.c:414>:
                                                                os_tls_get() <void *os_tls_get (os_tls_key_t key) at core/os_thread_posix.c:62>:
                                                                    pthread_getspecific()
                                                                heap_thread_arena_assign() <struct arena *heap_thread_arena_assign (struct palloc_heap *heap) at libpmemobj/heap.c:381>:
                                                                    util_mutex_lock()
                                                                    ASSERTne()
                                                                    VEC_SIZE()
                                                                    VEC_FOREACH()
                                                                    LOG()
                                                                    heap_arena_thread_attach() <void heap_arena_thread_attach (struct palloc_heap *heap, struct arena *a) at libpmemobj/heap.c:249>:
                                                                        ASSERTeq()
                                                                        os_tls_get() <void *os_tls_get (os_tls_key_t key) at core/os_thread_posix.c:62>:
                                                                            pthread_getspecific()
                                                                        heap_arena_thread_detach() <void heap_arena_thread_detach (struct arena *a) at libpmemobj/heap.c:232>:
                                                                            util_fetch_and_sub64()
                                                                        ASSERTne()
                                                                        util_fetch_and_add64()
                                                                        os_tls_set() <int os_tls_set (os_tls_key_t key, const void *value) at core/os_thread_posix.c:53>:
                                                                            pthread_setspecific()
                                                                    util_mutex_unlock()
                                                                heap_global_arena_assign() <struct arena *heap_global_arena_assign (struct palloc_heap *heap) at libpmemobj/heap.c:348>:
                                                                    util_mutex_lock()
                                                                    ASSERTne()
                                                                    VEC_SIZE()
                                                                    VEC_FOREACH()
                                                                    LOG()
                                                                    util_mutex_unlock()
                                                                ASSERT()
                                                                ASSERTne()
                                                            ASSERTne()
                                                            VEC_ARR()
                                                            bucket_acquire() <struct bucket *bucket_acquire (struct bucket_locked *b) at libpmemobj/bucket.c:117>:
                                                                util_mutex_lock()
                                                        ASSERT()
                                                        VEC_FOREACH_BY_PTR()
                                                        heap_run_into_free_chunk() <void heap_run_into_free_chunk (struct palloc_heap *heap, struct bucket *bucket, struct memory_block *m) at libpmemobj/heap.c:697>:
                                                            heap_get_chunk_hdr()
                                                            STATS_SUB()
                                                            util_mutex_lock()
                                                            memblock_huge_init() <struct memory_block memblock_huge_init (struct palloc_heap *heap, uint32_t chunk_id, uint32_t zone_id, uint32_t size_idx) at libpmemobj/memblock.c:1329>:
                                                                heap_get_chunk_hdr()
                                                                VALGRIND_DO_MAKE_MEM_UNDEFINED()
                                                                VALGRIND_ANNOTATE_NEW_MEMORY()
                                                                chunk_get_chunk_hdr_value() <uint64_t chunk_get_chunk_hdr_value (uint16_t type, uint16_t flags, uint32_t size_idx) at libpmemobj/memblock.c:604>:
                                                                    COMPILE_ERROR_ON()
                                                                    memcpy()
                                                                util_atomic_store_explicit64()
                                                                pmemops_persist()
                                                                huge_write_footer() <void huge_write_footer (struct chunk_header *hdr, uint32_t size_idx) at libpmemobj/memblock.c:1166>:
                                                                    VALGRIND_DO_MAKE_MEM_UNDEFINED()
                                                                    VALGRIND_SET_CLEAN()
                                                                memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                                                    memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                                                        heap_get_chunk_hdr()
                                                                    memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                                                        heap_get_chunk_hdr()
                                                                        FATAL()
                                                            heap_free_chunk_reuse() <int heap_free_chunk_reuse (struct palloc_heap *heap, struct bucket *bucket, struct memory_block *m) at libpmemobj/heap.c:674>:
                                                                heap_coalesce_huge() <struct memory_block heap_coalesce_huge (struct palloc_heap *heap, struct bucket *b, const struct memory_block *m) at libpmemobj/heap.c:650>:
                                                                    heap_get_adjacent_free_block() <int heap_get_adjacent_free_block (struct palloc_heap *heap, const struct memory_block *in, struct memory_block *out, int prev) at libpmemobj/heap.c:582>:
                                                                        ZID_TO_ZONE()
                                                                        memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                                                            memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                                                                heap_get_chunk_hdr()
                                                                            memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                                                                heap_get_chunk_hdr()
                                                                                FATAL()
                                                                    bucket_remove_block() <int bucket_remove_block (struct bucket *b, const struct memory_block *m) at libpmemobj/bucket.c:178>
                                                                    heap_coalesce() <struct memory_block heap_coalesce (struct palloc_heap *heap, const struct memory_block *blocks[], int n) at libpmemobj/heap.c:621>:
                                                                        ASSERTne()
                                                                        memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                                                            memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                                                                heap_get_chunk_hdr()
                                                                            memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                                                                heap_get_chunk_hdr()
                                                                                FATAL()
                                                                bucket_insert_block() <int bucket_insert_block (struct bucket *b, const struct memory_block *m) at libpmemobj/bucket.c:161>:
                                                                    VALGRIND_DO_MAKE_MEM_NOACCESS()
                                                                    VALGRIND_ANNOTATE_NEW_MEMORY()
                                                            util_mutex_unlock()
                                                        heap_bucket_release() <void heap_bucket_release (struct bucket *b) at libpmemobj/heap.c:498>:
                                                            bucket_release() <void bucket_release (struct bucket *b) at libpmemobj/bucket.c:127>:
                                                                util_mutex_unlock()
                                                        VEC_DELETE()
                                                out() <void out (const char *fmt, ...) at core/out.c:480>:
                                                    va_start()
                                                    out_common() <} void out_common (const char *file, int line, const char *func, int level, const char *suffix, const char *fmt, va_list ap) at core/out.c:334>
                                                    va_end()
                                                heap_bucket_acquire() <struct bucket *heap_bucket_acquire (struct palloc_heap *heap, uint8_t class_id, uint16_t arena_id) at libpmemobj/heap.c:470>:
                                                    out() <void out (const char *fmt, ...) at core/out.c:480>:
                                                        va_start()
                                                        out_common() <} void out_common (const char *file, int line, const char *func, int level, const char *suffix, const char *fmt, va_list ap) at core/out.c:334>
                                                        va_end()
                                                    heap_thread_arena() <struct arena *heap_thread_arena (struct palloc_heap *heap) at libpmemobj/heap.c:414>:
                                                        os_tls_get() <void *os_tls_get (os_tls_key_t key) at core/os_thread_posix.c:62>:
                                                            pthread_getspecific()
                                                        heap_thread_arena_assign() <struct arena *heap_thread_arena_assign (struct palloc_heap *heap) at libpmemobj/heap.c:381>:
                                                            util_mutex_lock()
                                                            ASSERTne()
                                                            VEC_SIZE()
                                                            VEC_FOREACH()
                                                            LOG()
                                                            heap_arena_thread_attach() <void heap_arena_thread_attach (struct palloc_heap *heap, struct arena *a) at libpmemobj/heap.c:249>:
                                                                ASSERTeq()
                                                                os_tls_get() <void *os_tls_get (os_tls_key_t key) at core/os_thread_posix.c:62>:
                                                                    pthread_getspecific()
                                                                heap_arena_thread_detach() <void heap_arena_thread_detach (struct arena *a) at libpmemobj/heap.c:232>:
                                                                    util_fetch_and_sub64()
                                                                ASSERTne()
                                                                util_fetch_and_add64()
                                                                os_tls_set() <int os_tls_set (os_tls_key_t key, const void *value) at core/os_thread_posix.c:53>:
                                                                    pthread_setspecific()
                                                            util_mutex_unlock()
                                                        heap_global_arena_assign() <struct arena *heap_global_arena_assign (struct palloc_heap *heap) at libpmemobj/heap.c:348>:
                                                            util_mutex_lock()
                                                            ASSERTne()
                                                            VEC_SIZE()
                                                            VEC_FOREACH()
                                                            LOG()
                                                            util_mutex_unlock()
                                                        ASSERT()
                                                        ASSERTne()
                                                    ASSERTne()
                                                    VEC_ARR()
                                                    bucket_acquire() <struct bucket *bucket_acquire (struct bucket_locked *b) at libpmemobj/bucket.c:117>:
                                                        util_mutex_lock()
                                                heap_populate_bucket() <int heap_populate_bucket (struct palloc_heap *heap, struct bucket *bucket) at libpmemobj/heap.c:850>:
                                                    util_atomic_store_explicit32()
                                                    ZID_TO_ZONE()
                                                    VALGRIND_ADD_TO_GLOBAL_TX_IGNORE()
                                                    heap_zone_init() <void heap_zone_init (struct palloc_heap *heap, uint32_t zone_id, uint32_t first_chunk_id) at libpmemobj/heap.c:559>:
                                                        ZID_TO_ZONE()
                                                        zone_calc_size_idx() <uint32_t zone_calc_size_idx (uint32_t zone_id, unsigned max_zone, size_t heap_size) at libpmemobj/heap.c:533>:
                                                            ASSERT()
                                                        ASSERT()
                                                        memblock_huge_init() <struct memory_block memblock_huge_init (struct palloc_heap *heap, uint32_t chunk_id, uint32_t zone_id, uint32_t size_idx) at libpmemobj/memblock.c:1329>:
                                                            heap_get_chunk_hdr()
                                                            VALGRIND_DO_MAKE_MEM_UNDEFINED()
                                                            VALGRIND_ANNOTATE_NEW_MEMORY()
                                                            chunk_get_chunk_hdr_value() <uint64_t chunk_get_chunk_hdr_value (uint16_t type, uint16_t flags, uint32_t size_idx) at libpmemobj/memblock.c:604>:
                                                                COMPILE_ERROR_ON()
                                                                memcpy()
                                                            util_atomic_store_explicit64()
                                                            pmemops_persist()
                                                            huge_write_footer() <void huge_write_footer (struct chunk_header *hdr, uint32_t size_idx) at libpmemobj/memblock.c:1166>:
                                                                VALGRIND_DO_MAKE_MEM_UNDEFINED()
                                                                VALGRIND_SET_CLEAN()
                                                            memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                                                memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                                                    heap_get_chunk_hdr()
                                                                memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                                                    heap_get_chunk_hdr()
                                                                    FATAL()
                                                        pmemops_persist()
                                                    heap_reclaim_zone_garbage() <void heap_reclaim_zone_garbage (struct palloc_heap *heap, struct bucket *bucket, uint32_t zone_id) at libpmemobj/heap.c:775>:
                                                        ZID_TO_ZONE()
                                                        ASSERT()
                                                        memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                                            memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                                                heap_get_chunk_hdr()
                                                            memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                                                heap_get_chunk_hdr()
                                                                FATAL()
                                                        heap_reclaim_run() <int heap_reclaim_run (struct palloc_heap *heap, struct memory_block *m, int startup) at libpmemobj/heap.c:733>:
                                                            heap_get_chunk_run()
                                                            heap_get_chunk_hdr()
                                                            alloc_class_by_run() <struct alloc_class *alloc_class_by_run (struct alloc_class_collection *ac, size_t unit_size, uint16_t flags, uint32_t size_idx) at libpmemobj/alloc_class.c:594>:
                                                                SIZE_TO_CLASS_MAP_INDEX()
                                                                ASSERT()
                                                                critnib_get() <void *critnib_get (struct critnib *c, uint64_t key) at libpmemobj/critnib.c:515>:
                                                                    load() <void load (void *src, void *dst) at libpmemobj/critnib.c:130>:
                                                                        util_atomic_load_explicit64()
                                                                    is_leaf() <inline bool is_leaf (struct critnib_node *n) at libpmemobj/critnib.c:150>:
                                                                    slice_index() <inline unsigned slice_index (uint64_t key, sh_t shift) at libpmemobj/critnib.c:178>:
                                                                    to_leaf() <inline struct critnib_leaf *to_leaf (struct critnib_node *n) at libpmemobj/critnib.c:159>:
                                                                RUN_CLASS_KEY_PACK()
                                                            recycler_element_new() <struct recycler_element recycler_element_new (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/recycler.c:122>:
                                                                SUPPRESS_UNUSED()
                                                                util_mutex_lock()
                                                                util_mutex_unlock()
                                                            ASSERTeq()
                                                            STATS_INC()
                                                            heap_get_recycler() <struct recycler *heap_get_recycler (struct palloc_heap *heap, size_t id, size_t nallocs) at libpmemobj/heap.c:106> (R):
                                                                util_atomic_load_explicit64()
                                                                recycler_new() <struct recycler *recycler_new (struct palloc_heap *heap, size_t nallocs, size_t *peak_arenas) at libpmemobj/recycler.c:74>:
                                                                    Malloc()
                                                                    ravl_new_sized() <struct ravl *ravl_new_sized (ravl_compare *compare, size_t data_size) at core/ravl.c:45>:
                                                                        Malloc()
                                                                        ERR()
                                                                    recycler_element_cmp() <int recycler_element_cmp (const void *lhs, const void *rhs) at libpmemobj/recycler.c:23>:
                                                                    memset()
                                                                    VEC_INIT()
                                                                    util_mutex_init()
                                                                    Free() <Free_func Free at core/alloc.c:91>
                                                                util_bool_compare_and_swap64()
                                                                recycler_delete() <void recycler_delete (struct recycler *r) at libpmemobj/recycler.c:107>:
                                                                    VEC_DELETE()
                                                                    util_mutex_destroy()
                                                                    ravl_delete() <void ravl_delete (struct ravl *ravl) at core/ravl.c:112>:
                                                                        ravl_delete_cb() <void ravl_delete_cb (struct ravl *ravl, ravl_cb cb, void *arg) at core/ravl.c:102>:
                                                                            ravl_foreach_node() <void ravl_foreach_node (struct ravl_node *n, ravl_cb cb, void *arg, int free_node) at core/ravl.c:74> (R):
                                                                                ravl_foreach_node() <void ravl_foreach_node (struct ravl_node *n, ravl_cb cb, void *arg, int free_node) at core/ravl.c:74> (recursive: see 6687)
                                                                                Free() <Free_func Free at core/alloc.c:91>
                                                                            Free() <Free_func Free at core/alloc.c:91>
                                                                    Free() <Free_func Free at core/alloc.c:91>
                                                                heap_get_recycler() <struct recycler *heap_get_recycler (struct palloc_heap *heap, size_t id, size_t nallocs) at libpmemobj/heap.c:106> (recursive: see 6669)
                                                            recycler_put() <int recycler_put (struct recycler *r, struct recycler_element element) at libpmemobj/recycler.c:154>:
                                                                util_mutex_lock()
                                                                ravl_emplace_copy() <int ravl_emplace_copy (struct ravl *ravl, const void *data) at core/ravl.c:384>:
                                                                    ravl_emplace() <int ravl_emplace (struct ravl *ravl, ravl_constr constr, const void *arg) at core/ravl.c:393>:
                                                                        LOG()
                                                                        ravl_new_node() <struct ravl_node *ravl_new_node (struct ravl *ravl, ravl_constr constr, const void *arg) at core/ravl.c:161>:
                                                                            Malloc()
                                                                            ERR()
                                                                            ravl_node_insert_constructor() <void ravl_node_insert_constructor (void *data, size_t data_size, const void *arg) at core/ravl.c:139>:
                                                                                SUPPRESS_UNUSED()
                                                                                memcpy()
                                                                        ravl_data() <void *ravl_data (struct ravl_node *node) at core/ravl.c:571>:
                                                                            memcpy()
                                                                        ravl_balance() <void ravl_balance (struct ravl *ravl, struct ravl_node *n) at core/ravl.c:337>:
                                                                            ravl_node_is() <int ravl_node_is (struct ravl_node *n, int i, int j) at core/ravl.c:306>:
                                                                                ravl_node_is_i_j() <int ravl_node_is_i_j (struct ravl_node *n, int i, int j) at core/ravl.c:296>:
                                                                                    ravl_node_rank_difference_parent() <int ravl_node_rank_difference_parent (struct ravl_node *p, struct ravl_node *n) at core/ravl.c:275>:
                                                                                        ravl_node_rank() <int ravl_node_rank (struct ravl_node *n) at core/ravl.c:261>:
                                                                            ravl_node_promote() <void ravl_node_promote (struct ravl_node *n) at core/ravl.c:315>
                                                                            ravl_node_sibling() <struct ravl_node *ravl_node_sibling (struct ravl_node *n) at core/ravl.c:209>:
                                                                                ravl_node_slot_type() <enum ravl_slot_type ravl_node_slot_type (struct ravl_node *n) at core/ravl.c:196>:
                                                                            ravl_node_rank_difference() <int ravl_node_rank_difference (struct ravl_node *n) at core/ravl.c:287>:
                                                                                ravl_node_rank_difference_parent() <int ravl_node_rank_difference_parent (struct ravl_node *p, struct ravl_node *n) at core/ravl.c:275>:
                                                                                    ravl_node_rank() <int ravl_node_rank (struct ravl_node *n) at core/ravl.c:261>:
                                                                            ravl_node_rank_difference_parent() <int ravl_node_rank_difference_parent (struct ravl_node *p, struct ravl_node *n) at core/ravl.c:275>:
                                                                                ravl_node_rank() <int ravl_node_rank (struct ravl_node *n) at core/ravl.c:261>:
                                                                            ravl_slot_opposite() <enum ravl_slot_type ravl_slot_opposite (enum ravl_slot_type t) at core/ravl.c:184>:
                                                                                ASSERTne()
                                                                            ravl_node_slot_type() <enum ravl_slot_type ravl_node_slot_type (struct ravl_node *n) at core/ravl.c:196>:
                                                                            ravl_rotate() <void ravl_rotate (struct ravl *ravl, struct ravl_node *n) at core/ravl.c:237>:
                                                                                ASSERTne()
                                                                                ravl_node_ref() <struct ravl_node **ravl_node_ref (struct ravl *ravl, struct ravl_node *n) at core/ravl.c:223>:
                                                                                    ravl_node_slot_type() <enum ravl_slot_type ravl_node_slot_type (struct ravl_node *n) at core/ravl.c:196>:
                                                                                ravl_node_slot_type() <enum ravl_slot_type ravl_node_slot_type (struct ravl_node *n) at core/ravl.c:196>:
                                                                                ravl_slot_opposite() <enum ravl_slot_type ravl_slot_opposite (enum ravl_slot_type t) at core/ravl.c:184>:
                                                                                    ASSERTne()
                                                                            ravl_node_demote() <void ravl_node_demote (struct ravl_node *n) at core/ravl.c:324>:
                                                                                ASSERT()
                                                                        Free() <Free_func Free at core/alloc.c:91>
                                                                    ravl_node_copy_constructor() <void ravl_node_copy_constructor (void *data, size_t data_size, const void *arg) at core/ravl.c:152>:
                                                                        memcpy()
                                                                util_mutex_unlock()
                                                            ERR()
                                                        heap_run_into_free_chunk() <void heap_run_into_free_chunk (struct palloc_heap *heap, struct bucket *bucket, struct memory_block *m) at libpmemobj/heap.c:697>:
                                                            heap_get_chunk_hdr()
                                                            STATS_SUB()
                                                            util_mutex_lock()
                                                            memblock_huge_init() <struct memory_block memblock_huge_init (struct palloc_heap *heap, uint32_t chunk_id, uint32_t zone_id, uint32_t size_idx) at libpmemobj/memblock.c:1329>:
                                                                heap_get_chunk_hdr()
                                                                VALGRIND_DO_MAKE_MEM_UNDEFINED()
                                                                VALGRIND_ANNOTATE_NEW_MEMORY()
                                                                chunk_get_chunk_hdr_value() <uint64_t chunk_get_chunk_hdr_value (uint16_t type, uint16_t flags, uint32_t size_idx) at libpmemobj/memblock.c:604>:
                                                                    COMPILE_ERROR_ON()
                                                                    memcpy()
                                                                util_atomic_store_explicit64()
                                                                pmemops_persist()
                                                                huge_write_footer() <void huge_write_footer (struct chunk_header *hdr, uint32_t size_idx) at libpmemobj/memblock.c:1166>:
                                                                    VALGRIND_DO_MAKE_MEM_UNDEFINED()
                                                                    VALGRIND_SET_CLEAN()
                                                                memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                                                    memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                                                        heap_get_chunk_hdr()
                                                                    memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                                                        heap_get_chunk_hdr()
                                                                        FATAL()
                                                            heap_free_chunk_reuse() <int heap_free_chunk_reuse (struct palloc_heap *heap, struct bucket *bucket, struct memory_block *m) at libpmemobj/heap.c:674>:
                                                                heap_coalesce_huge() <struct memory_block heap_coalesce_huge (struct palloc_heap *heap, struct bucket *b, const struct memory_block *m) at libpmemobj/heap.c:650>:
                                                                    heap_get_adjacent_free_block() <int heap_get_adjacent_free_block (struct palloc_heap *heap, const struct memory_block *in, struct memory_block *out, int prev) at libpmemobj/heap.c:582>:
                                                                        ZID_TO_ZONE()
                                                                        memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                                                            memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                                                                heap_get_chunk_hdr()
                                                                            memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                                                                heap_get_chunk_hdr()
                                                                                FATAL()
                                                                    bucket_remove_block() <int bucket_remove_block (struct bucket *b, const struct memory_block *m) at libpmemobj/bucket.c:178>
                                                                    heap_coalesce() <struct memory_block heap_coalesce (struct palloc_heap *heap, const struct memory_block *blocks[], int n) at libpmemobj/heap.c:621>:
                                                                        ASSERTne()
                                                                        memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                                                            memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                                                                heap_get_chunk_hdr()
                                                                            memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                                                                heap_get_chunk_hdr()
                                                                                FATAL()
                                                                bucket_insert_block() <int bucket_insert_block (struct bucket *b, const struct memory_block *m) at libpmemobj/bucket.c:161>:
                                                                    VALGRIND_DO_MAKE_MEM_NOACCESS()
                                                                    VALGRIND_ANNOTATE_NEW_MEMORY()
                                                            util_mutex_unlock()
                                                        heap_free_chunk_reuse() <int heap_free_chunk_reuse (struct palloc_heap *heap, struct bucket *bucket, struct memory_block *m) at libpmemobj/heap.c:674>:
                                                            heap_coalesce_huge() <struct memory_block heap_coalesce_huge (struct palloc_heap *heap, struct bucket *b, const struct memory_block *m) at libpmemobj/heap.c:650>:
                                                                heap_get_adjacent_free_block() <int heap_get_adjacent_free_block (struct palloc_heap *heap, const struct memory_block *in, struct memory_block *out, int prev) at libpmemobj/heap.c:582>:
                                                                    ZID_TO_ZONE()
                                                                    memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                                                        memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                                                            heap_get_chunk_hdr()
                                                                        memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                                                            heap_get_chunk_hdr()
                                                                            FATAL()
                                                                bucket_remove_block() <int bucket_remove_block (struct bucket *b, const struct memory_block *m) at libpmemobj/bucket.c:178>
                                                                heap_coalesce() <struct memory_block heap_coalesce (struct palloc_heap *heap, const struct memory_block *blocks[], int n) at libpmemobj/heap.c:621>:
                                                                    ASSERTne()
                                                                    memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                                                        memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                                                            heap_get_chunk_hdr()
                                                                        memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                                                            heap_get_chunk_hdr()
                                                                            FATAL()
                                                            bucket_insert_block() <int bucket_insert_block (struct bucket *b, const struct memory_block *m) at libpmemobj/bucket.c:161>:
                                                                VALGRIND_DO_MAKE_MEM_NOACCESS()
                                                                VALGRIND_ANNOTATE_NEW_MEMORY()
                                                heap_bucket_release() <void heap_bucket_release (struct bucket *b) at libpmemobj/heap.c:498>:
                                                    bucket_release() <void bucket_release (struct bucket *b) at libpmemobj/bucket.c:127>:
                                                        util_mutex_unlock()
                                                heap_get_bestfit_block() <int heap_get_bestfit_block (struct palloc_heap *heap, struct bucket *b, struct memory_block *m) at libpmemobj/heap.c:1210> (recursive: see 5402)
                                                heap_run_create() <int heap_run_create (struct palloc_heap *heap, struct bucket *b, struct memory_block *m) at libpmemobj/heap.c:1065>:
                                                    bucket_alloc_class() <struct alloc_class *bucket_alloc_class (struct bucket *b) at libpmemobj/bucket.c:152>
                                                    memblock_run_init() <struct memory_block memblock_run_init (struct palloc_heap *heap, uint32_t chunk_id, uint32_t zone_id, struct run_descriptor *rdsc) at libpmemobj/memblock.c:1361>:
                                                        ASSERTne()
                                                        ZID_TO_ZONE()
                                                        heap_get_chunk_run()
                                                        SIZEOF_RUN()
                                                        VALGRIND_DO_MAKE_MEM_UNDEFINED()
                                                        VALGRIND_ADD_TO_TX()
                                                        memset()
                                                        VALGRIND_REMOVE_FROM_TX()
                                                        pmemops_flush()
                                                        VALGRIND_ANNOTATE_NEW_MEMORY()
                                                        pmemops_persist()
                                                        ASSERT()
                                                        chunk_get_chunk_hdr_value() <uint64_t chunk_get_chunk_hdr_value (uint16_t type, uint16_t flags, uint32_t size_idx) at libpmemobj/memblock.c:604>:
                                                            COMPILE_ERROR_ON()
                                                            memcpy()
                                                        util_atomic_store_explicit64()
                                                        memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                                            memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                                                heap_get_chunk_hdr()
                                                            memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                                                heap_get_chunk_hdr()
                                                                FATAL()
                                                    bucket_attach_run() <int bucket_attach_run (struct bucket *b, const struct memory_block *m) at libpmemobj/bucket.c:206>:
                                                        util_mutex_lock()
                                                        bucket_memblock_insert_block() <int bucket_memblock_insert_block (const struct memory_block *m, void *b) at libpmemobj/bucket.c:197>:
                                                            bucket_insert_block() <int bucket_insert_block (struct bucket *b, const struct memory_block *m) at libpmemobj/bucket.c:161>:
                                                                VALGRIND_DO_MAKE_MEM_NOACCESS()
                                                                VALGRIND_ANNOTATE_NEW_MEMORY()
                                                        util_mutex_unlock()
                                                        util_fetch_and_add64()
                                                    STATS_INC()
                                            ASSERT()
                                            heap_split_block() <void heap_split_block (struct palloc_heap *heap, struct bucket *b, struct memory_block *m, uint32_t units) at libpmemobj/heap.c:1172>:
                                                bucket_alloc_class() <struct alloc_class *bucket_alloc_class (struct bucket *b) at libpmemobj/bucket.c:152>
                                                ASSERT()
                                                memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                                    memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                                        heap_get_chunk_hdr()
                                                    memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                                        heap_get_chunk_hdr()
                                                        FATAL()
                                                bucket_insert_block() <int bucket_insert_block (struct bucket *b, const struct memory_block *m) at libpmemobj/bucket.c:161>:
                                                    VALGRIND_DO_MAKE_MEM_NOACCESS()
                                                    VALGRIND_ANNOTATE_NEW_MEMORY()
                                                LOG()
                                                memblock_huge_init() <struct memory_block memblock_huge_init (struct palloc_heap *heap, uint32_t chunk_id, uint32_t zone_id, uint32_t size_idx) at libpmemobj/memblock.c:1329>:
                                                    heap_get_chunk_hdr()
                                                    VALGRIND_DO_MAKE_MEM_UNDEFINED()
                                                    VALGRIND_ANNOTATE_NEW_MEMORY()
                                                    chunk_get_chunk_hdr_value() <uint64_t chunk_get_chunk_hdr_value (uint16_t type, uint16_t flags, uint32_t size_idx) at libpmemobj/memblock.c:604>:
                                                        COMPILE_ERROR_ON()
                                                        memcpy()
                                                    util_atomic_store_explicit64()
                                                    pmemops_persist()
                                                    huge_write_footer() <void huge_write_footer (struct chunk_header *hdr, uint32_t size_idx) at libpmemobj/memblock.c:1166>:
                                                        VALGRIND_DO_MAKE_MEM_UNDEFINED()
                                                        VALGRIND_SET_CLEAN()
                                                    memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                                        memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                                            heap_get_chunk_hdr()
                                                        memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                                            heap_get_chunk_hdr()
                                                            FATAL()
                                        alloc_prep_block() <int alloc_prep_block (struct palloc_heap *heap, const struct memory_block *m, palloc_constr constructor, void *arg, uint64_t extra_field, uint16_t object_flags, struct pobj_action_internal *out) at libpmemobj/palloc.c:112>:
                                            VALGRIND_DO_MEMPOOL_ALLOC()
                                            VALGRIND_DO_MAKE_MEM_UNDEFINED()
                                            VALGRIND_ANNOTATE_NEW_MEMORY()
                                            unlikely()
                                            pmemops_memset()
                                            VALGRIND_DO_MEMPOOL_FREE()
                                            HEAP_PTR_TO_OFF()
                                        bucket_insert_block() <int bucket_insert_block (struct bucket *b, const struct memory_block *m) at libpmemobj/bucket.c:161>:
                                            VALGRIND_DO_MAKE_MEM_NOACCESS()
                                            VALGRIND_ANNOTATE_NEW_MEMORY()
                                        bucket_active_block() <struct memory_block_reserved *bucket_active_block (struct bucket *b) at libpmemobj/bucket.c:265>:
                                        util_fetch_and_add64()
                                        heap_bucket_release() <void heap_bucket_release (struct bucket *b) at libpmemobj/heap.c:498>:
                                            bucket_release() <void bucket_release (struct bucket *b) at libpmemobj/bucket.c:127>:
                                                util_mutex_unlock()
                                    VALGRIND_ADD_TO_TX()
                                    HEAP_OFF_TO_PTR()
                                    pmemops_memcpy()
                                    VALGRIND_REMOVE_FROM_TX()
                                    operation_add_entry() <int operation_add_entry (struct operation_context *ctx, void *ptr, uint64_t value, ulog_operation_type type) at libpmemobj/memops.c:411>:
                                        OBJ_OFF_IS_VALID()
                                        operation_add_typed_entry() <int operation_add_typed_entry (struct operation_context *ctx, void *ptr, uint64_t value, ulog_operation_type type, enum operation_log_type log_type) at libpmemobj/memops.c:362>:
                                            Realloc()
                                            SIZEOF_ULOG()
                                            VECQ_CLEAR()
                                            operation_try_merge_entry() <int operation_try_merge_entry (struct operation_context *ctx, void *ptr, uint64_t value, ulog_operation_type type) at libpmemobj/memops.c:318>:
                                                OBJ_PTR_TO_OFF()
                                                VECQ_FOREACH_REVERSE()
                                                ulog_entry_offset() <uint64_t ulog_entry_offset (const struct ulog_entry_base *entry) at libpmemobj/ulog.c:68>:
                                                ulog_entry_type() <ulog_operation_type ulog_entry_type (const struct ulog_entry_base *entry) at libpmemobj/ulog.c:59>:
                                                    ULOG_OPERATION_FROM_OFFSET()
                                                operation_merge() <inline void operation_merge (struct ulog_entry_base *entry, uint64_t value, ulog_operation_type type) at libpmemobj/memops.c:288>:
                                                    ASSERT()
                                            ulog_entry_val_create() <struct ulog_entry_val *ulog_entry_val_create (struct ulog *ulog, size_t offset, uint64_t *dest, uint64_t value, ulog_operation_type type, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:372>:
                                                COMPILE_ERROR_ON()
                                                ULOG_OPERATION()
                                                pmemops_memcpy()
                                            operation_merge_entry_add() <void operation_merge_entry_add (struct operation_context *ctx, struct ulog_entry_val *entry) at libpmemobj/memops.c:344>:
                                                VECQ_SIZE()
                                                VECQ_DEQUEUE()
                                                VECQ_ENQUEUE()
                                                LOG()
                                            ulog_entry_size() <size_t ulog_entry_size (const struct ulog_entry_base *entry) at libpmemobj/ulog.c:77>:
                                                ulog_entry_type() <ulog_operation_type ulog_entry_type (const struct ulog_entry_base *entry) at libpmemobj/ulog.c:59>:
                                                    ULOG_OPERATION_FROM_OFFSET()
                                                CACHELINE_ALIGN()
                                                ASSERT()
                                    palloc_exec_actions() <void palloc_exec_actions (struct palloc_heap *heap, struct operation_context *ctx, struct pobj_action_internal *actv, size_t actvcnt) at libpmemobj/palloc.c:526>:
                                        qsort()
                                        palloc_action_compare() <int palloc_action_compare (const void *lhs, const void *rhs) at libpmemobj/palloc.c:507>:
                                        ASSERTeq()
                                        util_mutex_lock()
                                        pmemops_drain()
                                        operation_process() <void operation_process (struct operation_context *ctx) at libpmemobj/memops.c:776>:
                                            ulog_entry_type() <ulog_operation_type ulog_entry_type (const struct ulog_entry_base *entry) at libpmemobj/ulog.c:59>:
                                                ULOG_OPERATION_FROM_OFFSET()
                                            ulog_entry_apply() <void ulog_entry_apply (const struct ulog_entry_base *e, int persist, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:526>:
                                                ulog_entry_type() <ulog_operation_type ulog_entry_type (const struct ulog_entry_base *entry) at libpmemobj/ulog.c:59>:
                                                    ULOG_OPERATION_FROM_OFFSET()
                                                ulog_entry_offset() <uint64_t ulog_entry_offset (const struct ulog_entry_base *entry) at libpmemobj/ulog.c:68>:
                                                f()
                                                VALGRIND_ADD_TO_TX()
                                                pmemops_memset()
                                                pmemops_memcpy()
                                                ASSERT()
                                                VALGRIND_REMOVE_FROM_TX()
                                            operation_process_persistent_redo() <void operation_process_persistent_redo (struct operation_context *ctx) at libpmemobj/memops.c:654>:
                                                ASSERTeq()
                                                ulog_store() <void ulog_store (struct ulog *dest, struct ulog *src, size_t nbytes, size_t ulog_base_nbytes, size_t ulog_total_capacity, struct ulog_next *next, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:288>:
                                                    MIN()
                                                    CACHELINE_ALIGN()
                                                    ASSERT()
                                                    ulog_by_offset() <struct ulog *ulog_by_offset (size_t offset, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:36>:
                                                        CACHELINE_ALIGN()
                                                    VEC_ARR()
                                                    ASSERTne()
                                                    IS_CACHELINE_ALIGNED()
                                                    VALGRIND_ADD_TO_TX()
                                                    pmemops_memcpy()
                                                    VALGRIND_REMOVE_FROM_TX()
                                                    pmemops_drain()
                                                    VEC_SIZE()
                                                    VEC_FRONT()
                                                    ulog_checksum() <int ulog_checksum (struct ulog *ulog, size_t ulog_base_bytes, int insert) at libpmemobj/ulog.c:275>:
                                                        util_checksum() <int util_checksum (void *addr, size_t len, uint64_t *csump, int insert, size_t skip_off) at core/util.c:178>:
                                                            util_checksum_compute() <uint64_t util_checksum_compute (void *addr, size_t len, uint64_t *csump, size_t skip_off) at core/util.c:134>:
                                                                abort()
                                                                le32toh()
                                                            htole64()
                                                        SIZEOF_ULOG()
                                                    SIZEOF_ULOG()
                                                ulog_process() <void ulog_process (struct ulog *ulog, ulog_check_offset_fn check, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:786>:
                                                    SUPPRESS_UNUSED()
                                                    LOG()
                                                    ulog_check() <int ulog_check (struct ulog *ulog, ulog_check_offset_fn check, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:881>:
                                                        LOG()
                                                        ulog_foreach_entry() <int ulog_foreach_entry (struct ulog *ulog, ulog_entry_cb cb, void *arg, const struct pmem_ops *ops) at libpmemobj/ulog.c:180>
                                                        ulog_check_entry() <int ulog_check_entry (struct ulog_entry_base *e, void *arg, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:862>:
                                                            ulog_entry_offset() <uint64_t ulog_entry_offset (const struct ulog_entry_base *entry) at libpmemobj/ulog.c:68>:
                                                            check()
                                                            LOG()
                                                    ulog_foreach_entry() <int ulog_foreach_entry (struct ulog *ulog, ulog_entry_cb cb, void *arg, const struct pmem_ops *ops) at libpmemobj/ulog.c:180>
                                                    ulog_process_entry() <int ulog_process_entry (struct ulog_entry_base *e, void *arg, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:591>:
                                                        SUPPRESS_UNUSED()
                                                        ulog_entry_apply() <void ulog_entry_apply (const struct ulog_entry_base *e, int persist, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:526>:
                                                            ulog_entry_type() <ulog_operation_type ulog_entry_type (const struct ulog_entry_base *entry) at libpmemobj/ulog.c:59>:
                                                                ULOG_OPERATION_FROM_OFFSET()
                                                            ulog_entry_offset() <uint64_t ulog_entry_offset (const struct ulog_entry_base *entry) at libpmemobj/ulog.c:68>:
                                                            f()
                                                            VALGRIND_ADD_TO_TX()
                                                            pmemops_memset()
                                                            pmemops_memcpy()
                                                            ASSERT()
                                                            VALGRIND_REMOVE_FROM_TX()
                                                    pmemops_drain()
                                                ulog_clobber() <void ulog_clobber (struct ulog *dest, struct ulog_next *next, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:694>:
                                                    memset()
                                                    VEC_SIZE()
                                                    VEC_FRONT()
                                                    pmemops_memcpy()
                                            operation_process_persistent_undo() <void operation_process_persistent_undo (struct operation_context *ctx) at libpmemobj/memops.c:673>:
                                                ASSERTeq()
                                                ulog_process() <void ulog_process (struct ulog *ulog, ulog_check_offset_fn check, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:786>:
                                                    SUPPRESS_UNUSED()
                                                    LOG()
                                                    ulog_check() <int ulog_check (struct ulog *ulog, ulog_check_offset_fn check, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:881>:
                                                        LOG()
                                                        ulog_foreach_entry() <int ulog_foreach_entry (struct ulog *ulog, ulog_entry_cb cb, void *arg, const struct pmem_ops *ops) at libpmemobj/ulog.c:180>
                                                        ulog_check_entry() <int ulog_check_entry (struct ulog_entry_base *e, void *arg, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:862>:
                                                            ulog_entry_offset() <uint64_t ulog_entry_offset (const struct ulog_entry_base *entry) at libpmemobj/ulog.c:68>:
                                                            check()
                                                            LOG()
                                                    ulog_foreach_entry() <int ulog_foreach_entry (struct ulog *ulog, ulog_entry_cb cb, void *arg, const struct pmem_ops *ops) at libpmemobj/ulog.c:180>
                                                    ulog_process_entry() <int ulog_process_entry (struct ulog_entry_base *e, void *arg, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:591>:
                                                        SUPPRESS_UNUSED()
                                                        ulog_entry_apply() <void ulog_entry_apply (const struct ulog_entry_base *e, int persist, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:526>:
                                                            ulog_entry_type() <ulog_operation_type ulog_entry_type (const struct ulog_entry_base *entry) at libpmemobj/ulog.c:59>:
                                                                ULOG_OPERATION_FROM_OFFSET()
                                                            ulog_entry_offset() <uint64_t ulog_entry_offset (const struct ulog_entry_base *entry) at libpmemobj/ulog.c:68>:
                                                            f()
                                                            VALGRIND_ADD_TO_TX()
                                                            pmemops_memset()
                                                            pmemops_memcpy()
                                                            ASSERT()
                                                            VALGRIND_REMOVE_FROM_TX()
                                                    pmemops_drain()
                                            ulog_process() <void ulog_process (struct ulog *ulog, ulog_check_offset_fn check, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:786>:
                                                SUPPRESS_UNUSED()
                                                LOG()
                                                ulog_check() <int ulog_check (struct ulog *ulog, ulog_check_offset_fn check, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:881>:
                                                    LOG()
                                                    ulog_foreach_entry() <int ulog_foreach_entry (struct ulog *ulog, ulog_entry_cb cb, void *arg, const struct pmem_ops *ops) at libpmemobj/ulog.c:180>
                                                    ulog_check_entry() <int ulog_check_entry (struct ulog_entry_base *e, void *arg, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:862>:
                                                        ulog_entry_offset() <uint64_t ulog_entry_offset (const struct ulog_entry_base *entry) at libpmemobj/ulog.c:68>:
                                                        check()
                                                        LOG()
                                                ulog_foreach_entry() <int ulog_foreach_entry (struct ulog *ulog, ulog_entry_cb cb, void *arg, const struct pmem_ops *ops) at libpmemobj/ulog.c:180>
                                                ulog_process_entry() <int ulog_process_entry (struct ulog_entry_base *e, void *arg, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:591>:
                                                    SUPPRESS_UNUSED()
                                                    ulog_entry_apply() <void ulog_entry_apply (const struct ulog_entry_base *e, int persist, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:526>:
                                                        ulog_entry_type() <ulog_operation_type ulog_entry_type (const struct ulog_entry_base *entry) at libpmemobj/ulog.c:59>:
                                                            ULOG_OPERATION_FROM_OFFSET()
                                                        ulog_entry_offset() <uint64_t ulog_entry_offset (const struct ulog_entry_base *entry) at libpmemobj/ulog.c:68>:
                                                        f()
                                                        VALGRIND_ADD_TO_TX()
                                                        pmemops_memset()
                                                        pmemops_memcpy()
                                                        ASSERT()
                                                        VALGRIND_REMOVE_FROM_TX()
                                                pmemops_drain()
                                        util_mutex_unlock()
                                        operation_finish() <void operation_finish (struct operation_context *ctx, unsigned flags) at libpmemobj/memops.c:814>:
                                            ASSERTne()
                                            out() <void out (const char *fmt, ...) at core/out.c:480>:
                                                va_start()
                                                out_common() <} void out_common (const char *file, int line, const char *func, int level, const char *suffix, const char *fmt, va_list ap) at core/out.c:334>
                                                va_end()
                                            ulog_clobber_data() <int ulog_clobber_data (struct ulog *ulog_first, struct ulog_next *next, ulog_free_fn ulog_free, ulog_rm_user_buffer_fn user_buff_remove, const struct pmem_ops *p_ops, unsigned flags) at libpmemobj/ulog.c:713>:
                                                ASSERTne()
                                                ulog_inc_gen_num() <void ulog_inc_gen_num (struct ulog *ulog, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:605>:
                                                    VALGRIND_ADD_TO_TX()
                                                    pmemops_persist()
                                                    VALGRIND_SET_CLEAN()
                                                    VALGRIND_REMOVE_FROM_TX()
                                                VEC_SIZE()
                                                VEC_GET()
                                                ulog_by_offset() <struct ulog *ulog_by_offset (size_t offset, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:36>:
                                                    CACHELINE_ALIGN()
                                                ulog_free_next() <int ulog_free_next (struct ulog *u, const struct pmem_ops *p_ops, ulog_free_fn ulog_free, ulog_rm_user_buffer_fn user_buff_remove, uint64_t flags) at libpmemobj/ulog.c:625>:
                                                    VEC()
                                                    VEC_INIT()
                                                    ulog_by_offset() <struct ulog *ulog_by_offset (size_t offset, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:36>:
                                                        CACHELINE_ALIGN()
                                                    pmemops_persist()
                                                    VEC_PUSH_BACK()
                                                    LOG()
                                                    out() <void out (const char *fmt, ...) at core/out.c:480>:
                                                        va_start()
                                                        out_common() <} void out_common (const char *file, int line, const char *func, int level, const char *suffix, const char *fmt, va_list ap) at core/out.c:334>
                                                        va_end()
                                                    VEC_FOREACH_REVERSE()
                                                    VEC_DELETE()
                                            operation_user_buffer_remove() <int operation_user_buffer_remove (void *base, void *addr) at libpmemobj/memops.c:242>:
                                                util_mutex_lock()
                                                ravl_find() <struct ravl_node *ravl_find (struct ravl *ravl, const void *data, enum ravl_predicate flags) at core/ravl.c:524>:
                                                    LOG()
                                                    ravl_data() <void *ravl_data (struct ravl_node *node) at core/ravl.c:571>:
                                                        memcpy()
                                                    ravl_predicate_holds() <int ravl_predicate_holds (int result, struct ravl_node **ret, struct ravl_node *n, enum ravl_predicate flags) at core/ravl.c:489>:
                                                        ravl_node_successor() <struct ravl_node *ravl_node_successor (struct ravl_node *n) at core/ravl.c:465>:
                                                            ravl_node_cessor() <struct ravl_node *ravl_node_cessor (struct ravl_node *n, enum ravl_slot_type t) at core/ravl.c:443>:
                                                                ravl_node_type_most() <struct ravl_node *ravl_node_type_most (struct ravl_node *n, enum ravl_slot_type t) at core/ravl.c:430>:
                                                                ravl_slot_opposite() <enum ravl_slot_type ravl_slot_opposite (enum ravl_slot_type t) at core/ravl.c:184>:
                                                                    ASSERTne()
                                                        ravl_node_predecessor() <struct ravl_node *ravl_node_predecessor (struct ravl_node *n) at core/ravl.c:476>:
                                                            ravl_node_cessor() <struct ravl_node *ravl_node_cessor (struct ravl_node *n, enum ravl_slot_type t) at core/ravl.c:443>:
                                                                ravl_node_type_most() <struct ravl_node *ravl_node_type_most (struct ravl_node *n, enum ravl_slot_type t) at core/ravl.c:430>:
                                                                ravl_slot_opposite() <enum ravl_slot_type ravl_slot_opposite (enum ravl_slot_type t) at core/ravl.c:184>:
                                                                    ASSERTne()
                                                ASSERTne()
                                                ravl_remove() <void ravl_remove (struct ravl *ravl, struct ravl_node *n) at core/ravl.c:545> (R):
                                                    LOG()
                                                    ravl_node_successor() <struct ravl_node *ravl_node_successor (struct ravl_node *n) at core/ravl.c:465>:
                                                        ravl_node_cessor() <struct ravl_node *ravl_node_cessor (struct ravl_node *n, enum ravl_slot_type t) at core/ravl.c:443>:
                                                            ravl_node_type_most() <struct ravl_node *ravl_node_type_most (struct ravl_node *n, enum ravl_slot_type t) at core/ravl.c:430>:
                                                            ravl_slot_opposite() <enum ravl_slot_type ravl_slot_opposite (enum ravl_slot_type t) at core/ravl.c:184>:
                                                                ASSERTne()
                                                    memcpy()
                                                    ravl_remove() <void ravl_remove (struct ravl *ravl, struct ravl_node *n) at core/ravl.c:545> (recursive: see 7094)
                                                    ravl_node_ref() <struct ravl_node **ravl_node_ref (struct ravl *ravl, struct ravl_node *n) at core/ravl.c:223>:
                                                        ravl_node_slot_type() <enum ravl_slot_type ravl_node_slot_type (struct ravl_node *n) at core/ravl.c:196>:
                                                    Free() <Free_func Free at core/alloc.c:91>
                                                util_mutex_unlock()
                                            ulog_free_next() <int ulog_free_next (struct ulog *u, const struct pmem_ops *p_ops, ulog_free_fn ulog_free, ulog_rm_user_buffer_fn user_buff_remove, uint64_t flags) at libpmemobj/ulog.c:625>:
                                                VEC()
                                                VEC_INIT()
                                                ulog_by_offset() <struct ulog *ulog_by_offset (size_t offset, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:36>:
                                                    CACHELINE_ALIGN()
                                                pmemops_persist()
                                                VEC_PUSH_BACK()
                                                LOG()
                                                out() <void out (const char *fmt, ...) at core/out.c:480>:
                                                    va_start()
                                                    out_common() <} void out_common (const char *file, int line, const char *func, int level, const char *suffix, const char *fmt, va_list ap) at core/out.c:334>
                                                    va_end()
                                                VEC_FOREACH_REVERSE()
                                                VEC_DELETE()
                                            ulog_capacity() <size_t ulog_capacity (struct ulog *ulog, size_t ulog_base_bytes, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:206>:
                                                ulog_next() <struct ulog *ulog_next (struct ulog *ulog, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:50>:
                                                    ulog_by_offset() <struct ulog *ulog_by_offset (size_t offset, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:36>:
                                                        CACHELINE_ALIGN()
                                            VEC_CLEAR()
                                            ulog_rebuild_next_vec() <void ulog_rebuild_next_vec (struct ulog *ulog, struct ulog_next *next, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:223>:
                                                VEC_PUSH_BACK()
                                                ulog_next() <struct ulog *ulog_next (struct ulog *ulog, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:50>:
                                                    ulog_by_offset() <struct ulog *ulog_by_offset (size_t offset, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:36>:
                                                        CACHELINE_ALIGN()
                                pmalloc_operation_release() <void pmalloc_operation_release (PMEMobjpool *pop) at libpmemobj/pmalloc.c:83>:
                                    lane_release() <void lane_release (PMEMobjpool *pop) at libpmemobj/lane.c:546>:
                                        get_lane_info_record() <inline struct lane_info *get_lane_info_record (PMEMobjpool *pop) at libpmemobj/lane.c:466>:
                                            likely()
                                            unlikely()
                                            lane_info_ht_boot() <inline void lane_info_ht_boot (void) at libpmemobj/lane.c:74>:
                                                lane_info_create() <inline void lane_info_create (void) at libpmemobj/lane.c:39>:
                                                    critnib_new() <struct critnib *critnib_new (void) at libpmemobj/critnib.c:187>:
                                                        Zalloc() <void *Zalloc (size_t sz) at core/alloc.c:98>:
                                                            Malloc()
                                                            memset()
                                                        util_mutex_init()
                                                        VALGRIND_HG_DRD_DISABLE_CHECKING()
                                                    FATAL()
                                                os_tls_set() <int os_tls_set (os_tls_key_t key, const void *value) at core/os_thread_posix.c:53>:
                                                    pthread_setspecific()
                                                FATAL()
                                            critnib_get() <void *critnib_get (struct critnib *c, uint64_t key) at libpmemobj/critnib.c:515>:
                                                load() <void load (void *src, void *dst) at libpmemobj/critnib.c:130>:
                                                    util_atomic_load_explicit64()
                                                is_leaf() <inline bool is_leaf (struct critnib_node *n) at libpmemobj/critnib.c:150>:
                                                slice_index() <inline unsigned slice_index (uint64_t key, sh_t shift) at libpmemobj/critnib.c:178>:
                                                to_leaf() <inline struct critnib_leaf *to_leaf (struct critnib_node *n) at libpmemobj/critnib.c:159>:
                                            Malloc()
                                            FATAL()
                                            critnib_insert() <int critnib_insert (struct critnib *c, uint64_t key, void *value) at libpmemobj/critnib.c:340>:
                                                util_mutex_lock()
                                                alloc_leaf() <struct critnib_leaf *alloc_leaf (struct critnib *__restrict c) at libpmemobj/critnib.c:311>:
                                                    Malloc()
                                                    ERR()
                                                    VALGRIND_ANNOTATE_NEW_MEMORY()
                                                util_mutex_unlock()
                                                VALGRIND_HG_DRD_DISABLE_CHECKING()
                                                is_leaf() <inline bool is_leaf (struct critnib_node *n) at libpmemobj/critnib.c:150>:
                                                path_mask() <inline uint64_t path_mask (sh_t shift) at libpmemobj/critnib.c:169>:
                                                slice_index() <inline unsigned slice_index (uint64_t key, sh_t shift) at libpmemobj/critnib.c:178>:
                                                store() <void store (void *dst, void *src) at libpmemobj/critnib.c:140>:
                                                    util_atomic_store_explicit64()
                                                to_leaf() <inline struct critnib_leaf *to_leaf (struct critnib_node *n) at libpmemobj/critnib.c:159>:
                                                ASSERT()
                                                free_leaf() <void free_leaf (struct critnib *__restrict c, struct critnib_leaf *__restrict k) at libpmemobj/critnib.c:298>
                                                util_mssb_index64()
                                                alloc_node() <struct critnib_node *alloc_node (struct critnib *__restrict c) at libpmemobj/critnib.c:274>:
                                                    Malloc()
                                                    ERR()
                                                    VALGRIND_ANNOTATE_NEW_MEMORY()
                                        ASSERTne()
                                        unlikely()
                                        FATAL()
                                        util_bool_compare_and_swap64()
                            lane_ulog_constructor() <int lane_ulog_constructor (void *base, void *ptr, size_t usable_size, void *arg) at libpmemobj/lane.c:160>:
                                ALIGN_DOWN()
                                ulog_construct() <void ulog_construct (uint64_t offset, size_t capacity, uint64_t gen_num, int flush, uint64_t flags, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:136>:
                                    ulog_by_offset() <struct ulog *ulog_by_offset (size_t offset, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:36>:
                                        CACHELINE_ALIGN()
                                    ASSERTne()
                                    OBJ_PTR_TO_OFF()
                                    ALIGN_DOWN()
                                    VALGRIND_ADD_TO_TX()
                                    SIZEOF_ULOG()
                                    memset()
                                    CACHELINE_ALIGN()
                                    pmemops_xflush()
                                    pmemops_memset()
                                    VALGRIND_REMOVE_FROM_TX()
                                OBJ_PTR_TO_OFF()
                        pfree() <void pfree (PMEMobjpool *pop, uint64_t *off) at libpmemobj/pmalloc.c:164>:
                            pmalloc_operation_hold_type() <struct operation_context *pmalloc_operation_hold_type (PMEMobjpool *pop, enum pmalloc_operation_type type, int start) at libpmemobj/pmalloc.c:45>:
                                lane_hold() <unsigned lane_hold (PMEMobjpool *pop, struct lane **lanep) at libpmemobj/lane.c:510>:
                                    get_lane_info_record() <inline struct lane_info *get_lane_info_record (PMEMobjpool *pop) at libpmemobj/lane.c:466>:
                                        likely()
                                        unlikely()
                                        lane_info_ht_boot() <inline void lane_info_ht_boot (void) at libpmemobj/lane.c:74>:
                                            lane_info_create() <inline void lane_info_create (void) at libpmemobj/lane.c:39>:
                                                critnib_new() <struct critnib *critnib_new (void) at libpmemobj/critnib.c:187>:
                                                    Zalloc() <void *Zalloc (size_t sz) at core/alloc.c:98>:
                                                        Malloc()
                                                        memset()
                                                    util_mutex_init()
                                                    VALGRIND_HG_DRD_DISABLE_CHECKING()
                                                FATAL()
                                            os_tls_set() <int os_tls_set (os_tls_key_t key, const void *value) at core/os_thread_posix.c:53>:
                                                pthread_setspecific()
                                            FATAL()
                                        critnib_get() <void *critnib_get (struct critnib *c, uint64_t key) at libpmemobj/critnib.c:515>:
                                            load() <void load (void *src, void *dst) at libpmemobj/critnib.c:130>:
                                                util_atomic_load_explicit64()
                                            is_leaf() <inline bool is_leaf (struct critnib_node *n) at libpmemobj/critnib.c:150>:
                                            slice_index() <inline unsigned slice_index (uint64_t key, sh_t shift) at libpmemobj/critnib.c:178>:
                                            to_leaf() <inline struct critnib_leaf *to_leaf (struct critnib_node *n) at libpmemobj/critnib.c:159>:
                                        Malloc()
                                        FATAL()
                                        critnib_insert() <int critnib_insert (struct critnib *c, uint64_t key, void *value) at libpmemobj/critnib.c:340>:
                                            util_mutex_lock()
                                            alloc_leaf() <struct critnib_leaf *alloc_leaf (struct critnib *__restrict c) at libpmemobj/critnib.c:311>:
                                                Malloc()
                                                ERR()
                                                VALGRIND_ANNOTATE_NEW_MEMORY()
                                            util_mutex_unlock()
                                            VALGRIND_HG_DRD_DISABLE_CHECKING()
                                            is_leaf() <inline bool is_leaf (struct critnib_node *n) at libpmemobj/critnib.c:150>:
                                            path_mask() <inline uint64_t path_mask (sh_t shift) at libpmemobj/critnib.c:169>:
                                            slice_index() <inline unsigned slice_index (uint64_t key, sh_t shift) at libpmemobj/critnib.c:178>:
                                            store() <void store (void *dst, void *src) at libpmemobj/critnib.c:140>:
                                                util_atomic_store_explicit64()
                                            to_leaf() <inline struct critnib_leaf *to_leaf (struct critnib_node *n) at libpmemobj/critnib.c:159>:
                                            ASSERT()
                                            free_leaf() <void free_leaf (struct critnib *__restrict c, struct critnib_leaf *__restrict k) at libpmemobj/critnib.c:298>
                                            util_mssb_index64()
                                            alloc_node() <struct critnib_node *alloc_node (struct critnib *__restrict c) at libpmemobj/critnib.c:274>:
                                                Malloc()
                                                ERR()
                                                VALGRIND_ANNOTATE_NEW_MEMORY()
                                    unlikely()
                                    util_fetch_and_add32()
                                    get_lane() <inline void get_lane (uint64_t *locks, struct lane_info *info, uint64_t nlocks) at libpmemobj/lane.c:430>:
                                        likely()
                                        util_bool_compare_and_swap64()
                                        sched_yield()
                                    VALGRIND_ANNOTATE_NEW_MEMORY()
                                    operation_init() <void operation_init (struct operation_context *ctx) at libpmemobj/memops.c:709>:
                                        VALGRIND_ANNOTATE_NEW_MEMORY()
                                        VECQ_REINIT()
                                operation_start() <void operation_start (struct operation_context *ctx) at libpmemobj/memops.c:736>:
                                    operation_init() <void operation_init (struct operation_context *ctx) at libpmemobj/memops.c:709>:
                                        VALGRIND_ANNOTATE_NEW_MEMORY()
                                        VECQ_REINIT()
                                    ASSERTeq()
                            palloc_operation() <int palloc_operation (struct palloc_heap *heap, uint64_t off, uint64_t *dest_off, size_t size, palloc_constr constructor, void *arg, uint64_t extra_field, uint16_t object_flags, uint16_t class_id, uint16_t arena_id, struct operation_context *ctx) at libpmemobj/palloc.c:705>:
                                palloc_defer_free_create() <void palloc_defer_free_create (struct palloc_heap *heap, uint64_t off, struct pobj_action_internal *out) at libpmemobj/palloc.c:610>:
                                    COMPILE_ERROR_ON()
                                    memblock_from_offset() <struct memory_block memblock_from_offset (struct palloc_heap *heap, uint64_t off) at libpmemobj/memblock.c:1532>:
                                        memblock_from_offset_opt() <struct memory_block memblock_from_offset_opt (struct palloc_heap *heap, uint64_t off, int size) at libpmemobj/memblock.c:1476>:
                                            HEAP_PTR_TO_OFF()
                                            heap_get_chunk_hdr()
                                            memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                                heap_get_chunk_hdr()
                                            ASSERTeq()
                                            memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                                heap_get_chunk_hdr()
                                                FATAL()
                                            run_get_data_offset() <size_t run_get_data_offset (const struct memory_block *m) at libpmemobj/memblock.c:572>:
                                                heap_get_chunk_run()
                                                run_get_data_start() <char *run_get_data_start (const struct memory_block *m) at libpmemobj/memblock.c:544>:
                                                    heap_get_chunk_hdr()
                                                    heap_get_chunk_run()
                                                    run_get_bitmap() <void run_get_bitmap (const struct memory_block *m, struct run_bitmap *b) at libpmemobj/memblock.c:488>:
                                                        heap_get_chunk_run()
                                                        heap_get_chunk_hdr()
                                                        memblock_run_bitmap() <void memblock_run_bitmap (uint32_t *size_idx, uint16_t flags, uint64_t unit_size, uint64_t alignment, void *content, struct run_bitmap *b) at libpmemobj/memblock.c:410>:
                                                            ASSERTne()
                                                            RUN_CONTENT_SIZE_BYTES()
                                                            util_div_ceil()
                                                            ALIGN_UP()
                                                            memblock_run_default_nallocs() <unsigned memblock_run_default_nallocs (uint32_t *size_idx, uint16_t flags, uint64_t unit_size, uint64_t alignment) at libpmemobj/memblock.c:370>:
                                                                SUPPRESS_UNUSED()
                                                                RUN_DEFAULT_SIZE_BYTES()
                                                                LOG()
                                                        ASSERTeq()
                                                    ALIGN_UP()
                                            heap_alloc_classes() <struct alloc_class_collection *heap_alloc_classes (struct palloc_heap *heap) at libpmemobj/heap.c:160>:
                                            alloc_class_by_run() <struct alloc_class *alloc_class_by_run (struct alloc_class_collection *ac, size_t unit_size, uint16_t flags, uint32_t size_idx) at libpmemobj/alloc_class.c:594>:
                                                SIZE_TO_CLASS_MAP_INDEX()
                                                ASSERT()
                                                critnib_get() <void *critnib_get (struct critnib *c, uint64_t key) at libpmemobj/critnib.c:515>:
                                                    load() <void load (void *src, void *dst) at libpmemobj/critnib.c:130>:
                                                        util_atomic_load_explicit64()
                                                    is_leaf() <inline bool is_leaf (struct critnib_node *n) at libpmemobj/critnib.c:150>:
                                                    slice_index() <inline unsigned slice_index (uint64_t key, sh_t shift) at libpmemobj/critnib.c:178>:
                                                    to_leaf() <inline struct critnib_leaf *to_leaf (struct critnib_node *n) at libpmemobj/critnib.c:159>:
                                                RUN_CLASS_KEY_PACK()
                                            CALC_SIZE_IDX()
                                    heap_ensure_zone_reclaimed() <void heap_ensure_zone_reclaimed (struct palloc_heap *heap, uint32_t zone_id) at libpmemobj/heap.c:816>:
                                        util_atomic_load_explicit32()
                                        heap_bucket_acquire() <struct bucket *heap_bucket_acquire (struct palloc_heap *heap, uint8_t class_id, uint16_t arena_id) at libpmemobj/heap.c:470>:
                                            out() <void out (const char *fmt, ...) at core/out.c:480>:
                                                va_start()
                                                out_common() <} void out_common (const char *file, int line, const char *func, int level, const char *suffix, const char *fmt, va_list ap) at core/out.c:334>
                                                va_end()
                                            heap_thread_arena() <struct arena *heap_thread_arena (struct palloc_heap *heap) at libpmemobj/heap.c:414>:
                                                os_tls_get() <void *os_tls_get (os_tls_key_t key) at core/os_thread_posix.c:62>:
                                                    pthread_getspecific()
                                                heap_thread_arena_assign() <struct arena *heap_thread_arena_assign (struct palloc_heap *heap) at libpmemobj/heap.c:381>:
                                                    util_mutex_lock()
                                                    ASSERTne()
                                                    VEC_SIZE()
                                                    VEC_FOREACH()
                                                    LOG()
                                                    heap_arena_thread_attach() <void heap_arena_thread_attach (struct palloc_heap *heap, struct arena *a) at libpmemobj/heap.c:249>:
                                                        ASSERTeq()
                                                        os_tls_get() <void *os_tls_get (os_tls_key_t key) at core/os_thread_posix.c:62>:
                                                            pthread_getspecific()
                                                        heap_arena_thread_detach() <void heap_arena_thread_detach (struct arena *a) at libpmemobj/heap.c:232>:
                                                            util_fetch_and_sub64()
                                                        ASSERTne()
                                                        util_fetch_and_add64()
                                                        os_tls_set() <int os_tls_set (os_tls_key_t key, const void *value) at core/os_thread_posix.c:53>:
                                                            pthread_setspecific()
                                                    util_mutex_unlock()
                                                heap_global_arena_assign() <struct arena *heap_global_arena_assign (struct palloc_heap *heap) at libpmemobj/heap.c:348>:
                                                    util_mutex_lock()
                                                    ASSERTne()
                                                    VEC_SIZE()
                                                    VEC_FOREACH()
                                                    LOG()
                                                    util_mutex_unlock()
                                                ASSERT()
                                                ASSERTne()
                                            ASSERTne()
                                            VEC_ARR()
                                            bucket_acquire() <struct bucket *bucket_acquire (struct bucket_locked *b) at libpmemobj/bucket.c:117>:
                                                util_mutex_lock()
                                        ZID_TO_ZONE()
                                        ASSERTeq()
                                        out() <void out (const char *fmt, ...) at core/out.c:480>:
                                            va_start()
                                            out_common() <} void out_common (const char *file, int line, const char *func, int level, const char *suffix, const char *fmt, va_list ap) at core/out.c:334>
                                            va_end()
                                        util_atomic_store_explicit32()
                                        heap_reclaim_zone_garbage() <void heap_reclaim_zone_garbage (struct palloc_heap *heap, struct bucket *bucket, uint32_t zone_id) at libpmemobj/heap.c:775>:
                                            ZID_TO_ZONE()
                                            ASSERT()
                                            memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                                memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                                    heap_get_chunk_hdr()
                                                memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                                    heap_get_chunk_hdr()
                                                    FATAL()
                                            heap_reclaim_run() <int heap_reclaim_run (struct palloc_heap *heap, struct memory_block *m, int startup) at libpmemobj/heap.c:733>:
                                                heap_get_chunk_run()
                                                heap_get_chunk_hdr()
                                                alloc_class_by_run() <struct alloc_class *alloc_class_by_run (struct alloc_class_collection *ac, size_t unit_size, uint16_t flags, uint32_t size_idx) at libpmemobj/alloc_class.c:594>:
                                                    SIZE_TO_CLASS_MAP_INDEX()
                                                    ASSERT()
                                                    critnib_get() <void *critnib_get (struct critnib *c, uint64_t key) at libpmemobj/critnib.c:515>:
                                                        load() <void load (void *src, void *dst) at libpmemobj/critnib.c:130>:
                                                            util_atomic_load_explicit64()
                                                        is_leaf() <inline bool is_leaf (struct critnib_node *n) at libpmemobj/critnib.c:150>:
                                                        slice_index() <inline unsigned slice_index (uint64_t key, sh_t shift) at libpmemobj/critnib.c:178>:
                                                        to_leaf() <inline struct critnib_leaf *to_leaf (struct critnib_node *n) at libpmemobj/critnib.c:159>:
                                                    RUN_CLASS_KEY_PACK()
                                                recycler_element_new() <struct recycler_element recycler_element_new (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/recycler.c:122>:
                                                    SUPPRESS_UNUSED()
                                                    util_mutex_lock()
                                                    util_mutex_unlock()
                                                ASSERTeq()
                                                STATS_INC()
                                                heap_get_recycler() <struct recycler *heap_get_recycler (struct palloc_heap *heap, size_t id, size_t nallocs) at libpmemobj/heap.c:106> (R):
                                                    util_atomic_load_explicit64()
                                                    recycler_new() <struct recycler *recycler_new (struct palloc_heap *heap, size_t nallocs, size_t *peak_arenas) at libpmemobj/recycler.c:74>:
                                                        Malloc()
                                                        ravl_new_sized() <struct ravl *ravl_new_sized (ravl_compare *compare, size_t data_size) at core/ravl.c:45>:
                                                            Malloc()
                                                            ERR()
                                                        recycler_element_cmp() <int recycler_element_cmp (const void *lhs, const void *rhs) at libpmemobj/recycler.c:23>:
                                                        memset()
                                                        VEC_INIT()
                                                        util_mutex_init()
                                                        Free() <Free_func Free at core/alloc.c:91>
                                                    util_bool_compare_and_swap64()
                                                    recycler_delete() <void recycler_delete (struct recycler *r) at libpmemobj/recycler.c:107>:
                                                        VEC_DELETE()
                                                        util_mutex_destroy()
                                                        ravl_delete() <void ravl_delete (struct ravl *ravl) at core/ravl.c:112>:
                                                            ravl_delete_cb() <void ravl_delete_cb (struct ravl *ravl, ravl_cb cb, void *arg) at core/ravl.c:102>:
                                                                ravl_foreach_node() <void ravl_foreach_node (struct ravl_node *n, ravl_cb cb, void *arg, int free_node) at core/ravl.c:74> (R):
                                                                    ravl_foreach_node() <void ravl_foreach_node (struct ravl_node *n, ravl_cb cb, void *arg, int free_node) at core/ravl.c:74> (recursive: see 7396)
                                                                    Free() <Free_func Free at core/alloc.c:91>
                                                                Free() <Free_func Free at core/alloc.c:91>
                                                        Free() <Free_func Free at core/alloc.c:91>
                                                    heap_get_recycler() <struct recycler *heap_get_recycler (struct palloc_heap *heap, size_t id, size_t nallocs) at libpmemobj/heap.c:106> (recursive: see 7378)
                                                recycler_put() <int recycler_put (struct recycler *r, struct recycler_element element) at libpmemobj/recycler.c:154>:
                                                    util_mutex_lock()
                                                    ravl_emplace_copy() <int ravl_emplace_copy (struct ravl *ravl, const void *data) at core/ravl.c:384>:
                                                        ravl_emplace() <int ravl_emplace (struct ravl *ravl, ravl_constr constr, const void *arg) at core/ravl.c:393>:
                                                            LOG()
                                                            ravl_new_node() <struct ravl_node *ravl_new_node (struct ravl *ravl, ravl_constr constr, const void *arg) at core/ravl.c:161>:
                                                                Malloc()
                                                                ERR()
                                                                ravl_node_insert_constructor() <void ravl_node_insert_constructor (void *data, size_t data_size, const void *arg) at core/ravl.c:139>:
                                                                    SUPPRESS_UNUSED()
                                                                    memcpy()
                                                            ravl_data() <void *ravl_data (struct ravl_node *node) at core/ravl.c:571>:
                                                                memcpy()
                                                            ravl_balance() <void ravl_balance (struct ravl *ravl, struct ravl_node *n) at core/ravl.c:337>:
                                                                ravl_node_is() <int ravl_node_is (struct ravl_node *n, int i, int j) at core/ravl.c:306>:
                                                                    ravl_node_is_i_j() <int ravl_node_is_i_j (struct ravl_node *n, int i, int j) at core/ravl.c:296>:
                                                                        ravl_node_rank_difference_parent() <int ravl_node_rank_difference_parent (struct ravl_node *p, struct ravl_node *n) at core/ravl.c:275>:
                                                                            ravl_node_rank() <int ravl_node_rank (struct ravl_node *n) at core/ravl.c:261>:
                                                                ravl_node_promote() <void ravl_node_promote (struct ravl_node *n) at core/ravl.c:315>
                                                                ravl_node_sibling() <struct ravl_node *ravl_node_sibling (struct ravl_node *n) at core/ravl.c:209>:
                                                                    ravl_node_slot_type() <enum ravl_slot_type ravl_node_slot_type (struct ravl_node *n) at core/ravl.c:196>:
                                                                ravl_node_rank_difference() <int ravl_node_rank_difference (struct ravl_node *n) at core/ravl.c:287>:
                                                                    ravl_node_rank_difference_parent() <int ravl_node_rank_difference_parent (struct ravl_node *p, struct ravl_node *n) at core/ravl.c:275>:
                                                                        ravl_node_rank() <int ravl_node_rank (struct ravl_node *n) at core/ravl.c:261>:
                                                                ravl_node_rank_difference_parent() <int ravl_node_rank_difference_parent (struct ravl_node *p, struct ravl_node *n) at core/ravl.c:275>:
                                                                    ravl_node_rank() <int ravl_node_rank (struct ravl_node *n) at core/ravl.c:261>:
                                                                ravl_slot_opposite() <enum ravl_slot_type ravl_slot_opposite (enum ravl_slot_type t) at core/ravl.c:184>:
                                                                    ASSERTne()
                                                                ravl_node_slot_type() <enum ravl_slot_type ravl_node_slot_type (struct ravl_node *n) at core/ravl.c:196>:
                                                                ravl_rotate() <void ravl_rotate (struct ravl *ravl, struct ravl_node *n) at core/ravl.c:237>:
                                                                    ASSERTne()
                                                                    ravl_node_ref() <struct ravl_node **ravl_node_ref (struct ravl *ravl, struct ravl_node *n) at core/ravl.c:223>:
                                                                        ravl_node_slot_type() <enum ravl_slot_type ravl_node_slot_type (struct ravl_node *n) at core/ravl.c:196>:
                                                                    ravl_node_slot_type() <enum ravl_slot_type ravl_node_slot_type (struct ravl_node *n) at core/ravl.c:196>:
                                                                    ravl_slot_opposite() <enum ravl_slot_type ravl_slot_opposite (enum ravl_slot_type t) at core/ravl.c:184>:
                                                                        ASSERTne()
                                                                ravl_node_demote() <void ravl_node_demote (struct ravl_node *n) at core/ravl.c:324>:
                                                                    ASSERT()
                                                            Free() <Free_func Free at core/alloc.c:91>
                                                        ravl_node_copy_constructor() <void ravl_node_copy_constructor (void *data, size_t data_size, const void *arg) at core/ravl.c:152>:
                                                            memcpy()
                                                    util_mutex_unlock()
                                                ERR()
                                            heap_run_into_free_chunk() <void heap_run_into_free_chunk (struct palloc_heap *heap, struct bucket *bucket, struct memory_block *m) at libpmemobj/heap.c:697>:
                                                heap_get_chunk_hdr()
                                                STATS_SUB()
                                                util_mutex_lock()
                                                memblock_huge_init() <struct memory_block memblock_huge_init (struct palloc_heap *heap, uint32_t chunk_id, uint32_t zone_id, uint32_t size_idx) at libpmemobj/memblock.c:1329>:
                                                    heap_get_chunk_hdr()
                                                    VALGRIND_DO_MAKE_MEM_UNDEFINED()
                                                    VALGRIND_ANNOTATE_NEW_MEMORY()
                                                    chunk_get_chunk_hdr_value() <uint64_t chunk_get_chunk_hdr_value (uint16_t type, uint16_t flags, uint32_t size_idx) at libpmemobj/memblock.c:604>:
                                                        COMPILE_ERROR_ON()
                                                        memcpy()
                                                    util_atomic_store_explicit64()
                                                    pmemops_persist()
                                                    huge_write_footer() <void huge_write_footer (struct chunk_header *hdr, uint32_t size_idx) at libpmemobj/memblock.c:1166>:
                                                        VALGRIND_DO_MAKE_MEM_UNDEFINED()
                                                        VALGRIND_SET_CLEAN()
                                                    memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                                        memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                                            heap_get_chunk_hdr()
                                                        memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                                            heap_get_chunk_hdr()
                                                            FATAL()
                                                heap_free_chunk_reuse() <int heap_free_chunk_reuse (struct palloc_heap *heap, struct bucket *bucket, struct memory_block *m) at libpmemobj/heap.c:674>:
                                                    heap_coalesce_huge() <struct memory_block heap_coalesce_huge (struct palloc_heap *heap, struct bucket *b, const struct memory_block *m) at libpmemobj/heap.c:650>:
                                                        heap_get_adjacent_free_block() <int heap_get_adjacent_free_block (struct palloc_heap *heap, const struct memory_block *in, struct memory_block *out, int prev) at libpmemobj/heap.c:582>:
                                                            ZID_TO_ZONE()
                                                            memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                                                memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                                                    heap_get_chunk_hdr()
                                                                memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                                                    heap_get_chunk_hdr()
                                                                    FATAL()
                                                        bucket_remove_block() <int bucket_remove_block (struct bucket *b, const struct memory_block *m) at libpmemobj/bucket.c:178>
                                                        heap_coalesce() <struct memory_block heap_coalesce (struct palloc_heap *heap, const struct memory_block *blocks[], int n) at libpmemobj/heap.c:621>:
                                                            ASSERTne()
                                                            memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                                                memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                                                    heap_get_chunk_hdr()
                                                                memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                                                    heap_get_chunk_hdr()
                                                                    FATAL()
                                                    bucket_insert_block() <int bucket_insert_block (struct bucket *b, const struct memory_block *m) at libpmemobj/bucket.c:161>:
                                                        VALGRIND_DO_MAKE_MEM_NOACCESS()
                                                        VALGRIND_ANNOTATE_NEW_MEMORY()
                                                util_mutex_unlock()
                                            heap_free_chunk_reuse() <int heap_free_chunk_reuse (struct palloc_heap *heap, struct bucket *bucket, struct memory_block *m) at libpmemobj/heap.c:674>:
                                                heap_coalesce_huge() <struct memory_block heap_coalesce_huge (struct palloc_heap *heap, struct bucket *b, const struct memory_block *m) at libpmemobj/heap.c:650>:
                                                    heap_get_adjacent_free_block() <int heap_get_adjacent_free_block (struct palloc_heap *heap, const struct memory_block *in, struct memory_block *out, int prev) at libpmemobj/heap.c:582>:
                                                        ZID_TO_ZONE()
                                                        memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                                            memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                                                heap_get_chunk_hdr()
                                                            memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                                                heap_get_chunk_hdr()
                                                                FATAL()
                                                    bucket_remove_block() <int bucket_remove_block (struct bucket *b, const struct memory_block *m) at libpmemobj/bucket.c:178>
                                                    heap_coalesce() <struct memory_block heap_coalesce (struct palloc_heap *heap, const struct memory_block *blocks[], int n) at libpmemobj/heap.c:621>:
                                                        ASSERTne()
                                                        memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                                            memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                                                heap_get_chunk_hdr()
                                                            memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                                                heap_get_chunk_hdr()
                                                                FATAL()
                                                bucket_insert_block() <int bucket_insert_block (struct bucket *b, const struct memory_block *m) at libpmemobj/bucket.c:161>:
                                                    VALGRIND_DO_MAKE_MEM_NOACCESS()
                                                    VALGRIND_ANNOTATE_NEW_MEMORY()
                                        heap_bucket_release() <void heap_bucket_release (struct bucket *b) at libpmemobj/heap.c:498>:
                                            bucket_release() <void bucket_release (struct bucket *b) at libpmemobj/bucket.c:127>:
                                                util_mutex_unlock()
                                operation_cancel() <void operation_cancel (struct operation_context *ctx) at libpmemobj/memops.c:761>:
                                    ASSERTeq()
                                palloc_reservation_create() <int palloc_reservation_create (struct palloc_heap *heap, size_t size, palloc_constr constructor, void *arg, uint64_t extra_field, uint16_t object_flags, uint16_t class_id, uint16_t arena_id, struct pobj_action_internal *out) at libpmemobj/palloc.c:178>:
                                    ASSERT()
                                    heap_get_best_class() <struct alloc_class *heap_get_best_class (struct palloc_heap *heap, size_t size) at libpmemobj/heap.c:221>:
                                        alloc_class_by_alloc_size() <struct alloc_class *alloc_class_by_alloc_size (struct alloc_class_collection *ac, size_t size) at libpmemobj/alloc_class.c:568>:
                                            SIZE_TO_CLASS_MAP_INDEX()
                                            alloc_class_assign_by_size() <struct alloc_class *alloc_class_assign_by_size (struct alloc_class_collection *ac, size_t size) at libpmemobj/alloc_class.c:538>:
                                                LOG()
                                                SIZE_TO_CLASS_MAP_INDEX()
                                                alloc_class_find_min_frag() <struct alloc_class *alloc_class_find_min_frag (struct alloc_class_collection *ac, size_t n) at libpmemobj/alloc_class.c:340>:
                                                    LOG()
                                                    ASSERTne()
                                                ASSERTne()
                                                util_bool_compare_and_swap64()
                                    alloc_class_by_id() <struct alloc_class *alloc_class_by_id (struct alloc_class_collection *ac, uint8_t id) at libpmemobj/alloc_class.c:612>
                                    heap_alloc_classes() <struct alloc_class_collection *heap_alloc_classes (struct palloc_heap *heap) at libpmemobj/heap.c:160>:
                                    ERR()
                                    alloc_class_calc_size_idx() <ssize_t alloc_class_calc_size_idx (struct alloc_class *c, size_t size) at libpmemobj/alloc_class.c:621>:
                                        CALC_SIZE_IDX()
                                    heap_bucket_acquire() <struct bucket *heap_bucket_acquire (struct palloc_heap *heap, uint8_t class_id, uint16_t arena_id) at libpmemobj/heap.c:470>:
                                        out() <void out (const char *fmt, ...) at core/out.c:480>:
                                            va_start()
                                            out_common() <} void out_common (const char *file, int line, const char *func, int level, const char *suffix, const char *fmt, va_list ap) at core/out.c:334>
                                            va_end()
                                        heap_thread_arena() <struct arena *heap_thread_arena (struct palloc_heap *heap) at libpmemobj/heap.c:414>:
                                            os_tls_get() <void *os_tls_get (os_tls_key_t key) at core/os_thread_posix.c:62>:
                                                pthread_getspecific()
                                            heap_thread_arena_assign() <struct arena *heap_thread_arena_assign (struct palloc_heap *heap) at libpmemobj/heap.c:381>:
                                                util_mutex_lock()
                                                ASSERTne()
                                                VEC_SIZE()
                                                VEC_FOREACH()
                                                LOG()
                                                heap_arena_thread_attach() <void heap_arena_thread_attach (struct palloc_heap *heap, struct arena *a) at libpmemobj/heap.c:249>:
                                                    ASSERTeq()
                                                    os_tls_get() <void *os_tls_get (os_tls_key_t key) at core/os_thread_posix.c:62>:
                                                        pthread_getspecific()
                                                    heap_arena_thread_detach() <void heap_arena_thread_detach (struct arena *a) at libpmemobj/heap.c:232>:
                                                        util_fetch_and_sub64()
                                                    ASSERTne()
                                                    util_fetch_and_add64()
                                                    os_tls_set() <int os_tls_set (os_tls_key_t key, const void *value) at core/os_thread_posix.c:53>:
                                                        pthread_setspecific()
                                                util_mutex_unlock()
                                            heap_global_arena_assign() <struct arena *heap_global_arena_assign (struct palloc_heap *heap) at libpmemobj/heap.c:348>:
                                                util_mutex_lock()
                                                ASSERTne()
                                                VEC_SIZE()
                                                VEC_FOREACH()
                                                LOG()
                                                util_mutex_unlock()
                                            ASSERT()
                                            ASSERTne()
                                        ASSERTne()
                                        VEC_ARR()
                                        bucket_acquire() <struct bucket *bucket_acquire (struct bucket_locked *b) at libpmemobj/bucket.c:117>:
                                            util_mutex_lock()
                                    heap_get_bestfit_block() <int heap_get_bestfit_block (struct palloc_heap *heap, struct bucket *b, struct memory_block *m) at libpmemobj/heap.c:1210> (R):
                                        bucket_alloc_class() <struct alloc_class *bucket_alloc_class (struct bucket *b) at libpmemobj/bucket.c:152>
                                        bucket_alloc_block() <int bucket_alloc_block (struct bucket *b, struct memory_block *m_out) at libpmemobj/bucket.c:187>
                                        heap_ensure_huge_bucket_filled() <int heap_ensure_huge_bucket_filled (struct palloc_heap *heap, struct bucket *bucket) at libpmemobj/heap.c:943>:
                                            heap_reclaim_garbage() <int heap_reclaim_garbage (struct palloc_heap *heap, struct bucket *bucket) at libpmemobj/heap.c:923>:
                                                heap_recycle_unused() <int heap_recycle_unused (struct palloc_heap *heap, struct recycler *recycler, struct bucket *defb, int force) at libpmemobj/heap.c:894>:
                                                    recycler_recalc() <struct empty_runs recycler_recalc (struct recycler *r, int force) at libpmemobj/recycler.c:207>:
                                                        VEC_INIT()
                                                        util_atomic_load64()
                                                        util_mutex_trylock()
                                                        ravl_find() <struct ravl_node *ravl_find (struct ravl *ravl, const void *data, enum ravl_predicate flags) at core/ravl.c:524>:
                                                            LOG()
                                                            ravl_data() <void *ravl_data (struct ravl_node *node) at core/ravl.c:571>:
                                                                memcpy()
                                                            ravl_predicate_holds() <int ravl_predicate_holds (int result, struct ravl_node **ret, struct ravl_node *n, enum ravl_predicate flags) at core/ravl.c:489>:
                                                                ravl_node_successor() <struct ravl_node *ravl_node_successor (struct ravl_node *n) at core/ravl.c:465>:
                                                                    ravl_node_cessor() <struct ravl_node *ravl_node_cessor (struct ravl_node *n, enum ravl_slot_type t) at core/ravl.c:443>:
                                                                        ravl_node_type_most() <struct ravl_node *ravl_node_type_most (struct ravl_node *n, enum ravl_slot_type t) at core/ravl.c:430>:
                                                                        ravl_slot_opposite() <enum ravl_slot_type ravl_slot_opposite (enum ravl_slot_type t) at core/ravl.c:184>:
                                                                            ASSERTne()
                                                                ravl_node_predecessor() <struct ravl_node *ravl_node_predecessor (struct ravl_node *n) at core/ravl.c:476>:
                                                                    ravl_node_cessor() <struct ravl_node *ravl_node_cessor (struct ravl_node *n, enum ravl_slot_type t) at core/ravl.c:443>:
                                                                        ravl_node_type_most() <struct ravl_node *ravl_node_type_most (struct ravl_node *n, enum ravl_slot_type t) at core/ravl.c:430>:
                                                                        ravl_slot_opposite() <enum ravl_slot_type ravl_slot_opposite (enum ravl_slot_type t) at core/ravl.c:184>:
                                                                            ASSERTne()
                                                        ravl_data() <void *ravl_data (struct ravl_node *node) at core/ravl.c:571>:
                                                            memcpy()
                                                        memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                                            memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                                                heap_get_chunk_hdr()
                                                            memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                                                heap_get_chunk_hdr()
                                                                FATAL()
                                                        recycler_element_new() <struct recycler_element recycler_element_new (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/recycler.c:122>:
                                                            SUPPRESS_UNUSED()
                                                            util_mutex_lock()
                                                            util_mutex_unlock()
                                                        ASSERT()
                                                        util_fetch_and_sub64()
                                                        MIN()
                                                        ravl_remove() <void ravl_remove (struct ravl *ravl, struct ravl_node *n) at core/ravl.c:545> (R):
                                                            LOG()
                                                            ravl_node_successor() <struct ravl_node *ravl_node_successor (struct ravl_node *n) at core/ravl.c:465>:
                                                                ravl_node_cessor() <struct ravl_node *ravl_node_cessor (struct ravl_node *n, enum ravl_slot_type t) at core/ravl.c:443>:
                                                                    ravl_node_type_most() <struct ravl_node *ravl_node_type_most (struct ravl_node *n, enum ravl_slot_type t) at core/ravl.c:430>:
                                                                    ravl_slot_opposite() <enum ravl_slot_type ravl_slot_opposite (enum ravl_slot_type t) at core/ravl.c:184>:
                                                                        ASSERTne()
                                                            memcpy()
                                                            ravl_remove() <void ravl_remove (struct ravl *ravl, struct ravl_node *n) at core/ravl.c:545> (recursive: see 7613)
                                                            ravl_node_ref() <struct ravl_node **ravl_node_ref (struct ravl *ravl, struct ravl_node *n) at core/ravl.c:223>:
                                                                ravl_node_slot_type() <enum ravl_slot_type ravl_node_slot_type (struct ravl_node *n) at core/ravl.c:196>:
                                                            Free() <Free_func Free at core/alloc.c:91>
                                                        VEC_PUSH_BACK()
                                                        VEC_FOREACH_BY_PTR()
                                                        ravl_emplace_copy() <int ravl_emplace_copy (struct ravl *ravl, const void *data) at core/ravl.c:384>:
                                                            ravl_emplace() <int ravl_emplace (struct ravl *ravl, ravl_constr constr, const void *arg) at core/ravl.c:393>:
                                                                LOG()
                                                                ravl_new_node() <struct ravl_node *ravl_new_node (struct ravl *ravl, ravl_constr constr, const void *arg) at core/ravl.c:161>:
                                                                    Malloc()
                                                                    ERR()
                                                                    ravl_node_insert_constructor() <void ravl_node_insert_constructor (void *data, size_t data_size, const void *arg) at core/ravl.c:139>:
                                                                        SUPPRESS_UNUSED()
                                                                        memcpy()
                                                                ravl_data() <void *ravl_data (struct ravl_node *node) at core/ravl.c:571>:
                                                                    memcpy()
                                                                ravl_balance() <void ravl_balance (struct ravl *ravl, struct ravl_node *n) at core/ravl.c:337>:
                                                                    ravl_node_is() <int ravl_node_is (struct ravl_node *n, int i, int j) at core/ravl.c:306>:
                                                                        ravl_node_is_i_j() <int ravl_node_is_i_j (struct ravl_node *n, int i, int j) at core/ravl.c:296>:
                                                                            ravl_node_rank_difference_parent() <int ravl_node_rank_difference_parent (struct ravl_node *p, struct ravl_node *n) at core/ravl.c:275>:
                                                                                ravl_node_rank() <int ravl_node_rank (struct ravl_node *n) at core/ravl.c:261>:
                                                                    ravl_node_promote() <void ravl_node_promote (struct ravl_node *n) at core/ravl.c:315>
                                                                    ravl_node_sibling() <struct ravl_node *ravl_node_sibling (struct ravl_node *n) at core/ravl.c:209>:
                                                                        ravl_node_slot_type() <enum ravl_slot_type ravl_node_slot_type (struct ravl_node *n) at core/ravl.c:196>:
                                                                    ravl_node_rank_difference() <int ravl_node_rank_difference (struct ravl_node *n) at core/ravl.c:287>:
                                                                        ravl_node_rank_difference_parent() <int ravl_node_rank_difference_parent (struct ravl_node *p, struct ravl_node *n) at core/ravl.c:275>:
                                                                            ravl_node_rank() <int ravl_node_rank (struct ravl_node *n) at core/ravl.c:261>:
                                                                    ravl_node_rank_difference_parent() <int ravl_node_rank_difference_parent (struct ravl_node *p, struct ravl_node *n) at core/ravl.c:275>:
                                                                        ravl_node_rank() <int ravl_node_rank (struct ravl_node *n) at core/ravl.c:261>:
                                                                    ravl_slot_opposite() <enum ravl_slot_type ravl_slot_opposite (enum ravl_slot_type t) at core/ravl.c:184>:
                                                                        ASSERTne()
                                                                    ravl_node_slot_type() <enum ravl_slot_type ravl_node_slot_type (struct ravl_node *n) at core/ravl.c:196>:
                                                                    ravl_rotate() <void ravl_rotate (struct ravl *ravl, struct ravl_node *n) at core/ravl.c:237>:
                                                                        ASSERTne()
                                                                        ravl_node_ref() <struct ravl_node **ravl_node_ref (struct ravl *ravl, struct ravl_node *n) at core/ravl.c:223>:
                                                                            ravl_node_slot_type() <enum ravl_slot_type ravl_node_slot_type (struct ravl_node *n) at core/ravl.c:196>:
                                                                        ravl_node_slot_type() <enum ravl_slot_type ravl_node_slot_type (struct ravl_node *n) at core/ravl.c:196>:
                                                                        ravl_slot_opposite() <enum ravl_slot_type ravl_slot_opposite (enum ravl_slot_type t) at core/ravl.c:184>:
                                                                            ASSERTne()
                                                                    ravl_node_demote() <void ravl_node_demote (struct ravl_node *n) at core/ravl.c:324>:
                                                                        ASSERT()
                                                                Free() <Free_func Free at core/alloc.c:91>
                                                            ravl_node_copy_constructor() <void ravl_node_copy_constructor (void *data, size_t data_size, const void *arg) at core/ravl.c:152>:
                                                                memcpy()
                                                        VEC_CLEAR()
                                                        util_mutex_unlock()
                                                    VEC_SIZE()
                                                    heap_bucket_acquire() <struct bucket *heap_bucket_acquire (struct palloc_heap *heap, uint8_t class_id, uint16_t arena_id) at libpmemobj/heap.c:470>:
                                                        out() <void out (const char *fmt, ...) at core/out.c:480>:
                                                            va_start()
                                                            out_common() <} void out_common (const char *file, int line, const char *func, int level, const char *suffix, const char *fmt, va_list ap) at core/out.c:334>
                                                            va_end()
                                                        heap_thread_arena() <struct arena *heap_thread_arena (struct palloc_heap *heap) at libpmemobj/heap.c:414>:
                                                            os_tls_get() <void *os_tls_get (os_tls_key_t key) at core/os_thread_posix.c:62>:
                                                                pthread_getspecific()
                                                            heap_thread_arena_assign() <struct arena *heap_thread_arena_assign (struct palloc_heap *heap) at libpmemobj/heap.c:381>:
                                                                util_mutex_lock()
                                                                ASSERTne()
                                                                VEC_SIZE()
                                                                VEC_FOREACH()
                                                                LOG()
                                                                heap_arena_thread_attach() <void heap_arena_thread_attach (struct palloc_heap *heap, struct arena *a) at libpmemobj/heap.c:249>:
                                                                    ASSERTeq()
                                                                    os_tls_get() <void *os_tls_get (os_tls_key_t key) at core/os_thread_posix.c:62>:
                                                                        pthread_getspecific()
                                                                    heap_arena_thread_detach() <void heap_arena_thread_detach (struct arena *a) at libpmemobj/heap.c:232>:
                                                                        util_fetch_and_sub64()
                                                                    ASSERTne()
                                                                    util_fetch_and_add64()
                                                                    os_tls_set() <int os_tls_set (os_tls_key_t key, const void *value) at core/os_thread_posix.c:53>:
                                                                        pthread_setspecific()
                                                                util_mutex_unlock()
                                                            heap_global_arena_assign() <struct arena *heap_global_arena_assign (struct palloc_heap *heap) at libpmemobj/heap.c:348>:
                                                                util_mutex_lock()
                                                                ASSERTne()
                                                                VEC_SIZE()
                                                                VEC_FOREACH()
                                                                LOG()
                                                                util_mutex_unlock()
                                                            ASSERT()
                                                            ASSERTne()
                                                        ASSERTne()
                                                        VEC_ARR()
                                                        bucket_acquire() <struct bucket *bucket_acquire (struct bucket_locked *b) at libpmemobj/bucket.c:117>:
                                                            util_mutex_lock()
                                                    ASSERT()
                                                    VEC_FOREACH_BY_PTR()
                                                    heap_run_into_free_chunk() <void heap_run_into_free_chunk (struct palloc_heap *heap, struct bucket *bucket, struct memory_block *m) at libpmemobj/heap.c:697>:
                                                        heap_get_chunk_hdr()
                                                        STATS_SUB()
                                                        util_mutex_lock()
                                                        memblock_huge_init() <struct memory_block memblock_huge_init (struct palloc_heap *heap, uint32_t chunk_id, uint32_t zone_id, uint32_t size_idx) at libpmemobj/memblock.c:1329>:
                                                            heap_get_chunk_hdr()
                                                            VALGRIND_DO_MAKE_MEM_UNDEFINED()
                                                            VALGRIND_ANNOTATE_NEW_MEMORY()
                                                            chunk_get_chunk_hdr_value() <uint64_t chunk_get_chunk_hdr_value (uint16_t type, uint16_t flags, uint32_t size_idx) at libpmemobj/memblock.c:604>:
                                                                COMPILE_ERROR_ON()
                                                                memcpy()
                                                            util_atomic_store_explicit64()
                                                            pmemops_persist()
                                                            huge_write_footer() <void huge_write_footer (struct chunk_header *hdr, uint32_t size_idx) at libpmemobj/memblock.c:1166>:
                                                                VALGRIND_DO_MAKE_MEM_UNDEFINED()
                                                                VALGRIND_SET_CLEAN()
                                                            memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                                                memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                                                    heap_get_chunk_hdr()
                                                                memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                                                    heap_get_chunk_hdr()
                                                                    FATAL()
                                                        heap_free_chunk_reuse() <int heap_free_chunk_reuse (struct palloc_heap *heap, struct bucket *bucket, struct memory_block *m) at libpmemobj/heap.c:674>:
                                                            heap_coalesce_huge() <struct memory_block heap_coalesce_huge (struct palloc_heap *heap, struct bucket *b, const struct memory_block *m) at libpmemobj/heap.c:650>:
                                                                heap_get_adjacent_free_block() <int heap_get_adjacent_free_block (struct palloc_heap *heap, const struct memory_block *in, struct memory_block *out, int prev) at libpmemobj/heap.c:582>:
                                                                    ZID_TO_ZONE()
                                                                    memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                                                        memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                                                            heap_get_chunk_hdr()
                                                                        memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                                                            heap_get_chunk_hdr()
                                                                            FATAL()
                                                                bucket_remove_block() <int bucket_remove_block (struct bucket *b, const struct memory_block *m) at libpmemobj/bucket.c:178>
                                                                heap_coalesce() <struct memory_block heap_coalesce (struct palloc_heap *heap, const struct memory_block *blocks[], int n) at libpmemobj/heap.c:621>:
                                                                    ASSERTne()
                                                                    memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                                                        memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                                                            heap_get_chunk_hdr()
                                                                        memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                                                            heap_get_chunk_hdr()
                                                                            FATAL()
                                                            bucket_insert_block() <int bucket_insert_block (struct bucket *b, const struct memory_block *m) at libpmemobj/bucket.c:161>:
                                                                VALGRIND_DO_MAKE_MEM_NOACCESS()
                                                                VALGRIND_ANNOTATE_NEW_MEMORY()
                                                        util_mutex_unlock()
                                                    heap_bucket_release() <void heap_bucket_release (struct bucket *b) at libpmemobj/heap.c:498>:
                                                        bucket_release() <void bucket_release (struct bucket *b) at libpmemobj/bucket.c:127>:
                                                            util_mutex_unlock()
                                                    VEC_DELETE()
                                            heap_populate_bucket() <int heap_populate_bucket (struct palloc_heap *heap, struct bucket *bucket) at libpmemobj/heap.c:850>:
                                                util_atomic_store_explicit32()
                                                ZID_TO_ZONE()
                                                VALGRIND_ADD_TO_GLOBAL_TX_IGNORE()
                                                heap_zone_init() <void heap_zone_init (struct palloc_heap *heap, uint32_t zone_id, uint32_t first_chunk_id) at libpmemobj/heap.c:559>:
                                                    ZID_TO_ZONE()
                                                    zone_calc_size_idx() <uint32_t zone_calc_size_idx (uint32_t zone_id, unsigned max_zone, size_t heap_size) at libpmemobj/heap.c:533>:
                                                        ASSERT()
                                                    ASSERT()
                                                    memblock_huge_init() <struct memory_block memblock_huge_init (struct palloc_heap *heap, uint32_t chunk_id, uint32_t zone_id, uint32_t size_idx) at libpmemobj/memblock.c:1329>:
                                                        heap_get_chunk_hdr()
                                                        VALGRIND_DO_MAKE_MEM_UNDEFINED()
                                                        VALGRIND_ANNOTATE_NEW_MEMORY()
                                                        chunk_get_chunk_hdr_value() <uint64_t chunk_get_chunk_hdr_value (uint16_t type, uint16_t flags, uint32_t size_idx) at libpmemobj/memblock.c:604>:
                                                            COMPILE_ERROR_ON()
                                                            memcpy()
                                                        util_atomic_store_explicit64()
                                                        pmemops_persist()
                                                        huge_write_footer() <void huge_write_footer (struct chunk_header *hdr, uint32_t size_idx) at libpmemobj/memblock.c:1166>:
                                                            VALGRIND_DO_MAKE_MEM_UNDEFINED()
                                                            VALGRIND_SET_CLEAN()
                                                        memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                                            memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                                                heap_get_chunk_hdr()
                                                            memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                                                heap_get_chunk_hdr()
                                                                FATAL()
                                                    pmemops_persist()
                                                heap_reclaim_zone_garbage() <void heap_reclaim_zone_garbage (struct palloc_heap *heap, struct bucket *bucket, uint32_t zone_id) at libpmemobj/heap.c:775>:
                                                    ZID_TO_ZONE()
                                                    ASSERT()
                                                    memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                                        memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                                            heap_get_chunk_hdr()
                                                        memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                                            heap_get_chunk_hdr()
                                                            FATAL()
                                                    heap_reclaim_run() <int heap_reclaim_run (struct palloc_heap *heap, struct memory_block *m, int startup) at libpmemobj/heap.c:733>:
                                                        heap_get_chunk_run()
                                                        heap_get_chunk_hdr()
                                                        alloc_class_by_run() <struct alloc_class *alloc_class_by_run (struct alloc_class_collection *ac, size_t unit_size, uint16_t flags, uint32_t size_idx) at libpmemobj/alloc_class.c:594>:
                                                            SIZE_TO_CLASS_MAP_INDEX()
                                                            ASSERT()
                                                            critnib_get() <void *critnib_get (struct critnib *c, uint64_t key) at libpmemobj/critnib.c:515>:
                                                                load() <void load (void *src, void *dst) at libpmemobj/critnib.c:130>:
                                                                    util_atomic_load_explicit64()
                                                                is_leaf() <inline bool is_leaf (struct critnib_node *n) at libpmemobj/critnib.c:150>:
                                                                slice_index() <inline unsigned slice_index (uint64_t key, sh_t shift) at libpmemobj/critnib.c:178>:
                                                                to_leaf() <inline struct critnib_leaf *to_leaf (struct critnib_node *n) at libpmemobj/critnib.c:159>:
                                                            RUN_CLASS_KEY_PACK()
                                                        recycler_element_new() <struct recycler_element recycler_element_new (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/recycler.c:122>:
                                                            SUPPRESS_UNUSED()
                                                            util_mutex_lock()
                                                            util_mutex_unlock()
                                                        ASSERTeq()
                                                        STATS_INC()
                                                        heap_get_recycler() <struct recycler *heap_get_recycler (struct palloc_heap *heap, size_t id, size_t nallocs) at libpmemobj/heap.c:106> (R):
                                                            util_atomic_load_explicit64()
                                                            recycler_new() <struct recycler *recycler_new (struct palloc_heap *heap, size_t nallocs, size_t *peak_arenas) at libpmemobj/recycler.c:74>:
                                                                Malloc()
                                                                ravl_new_sized() <struct ravl *ravl_new_sized (ravl_compare *compare, size_t data_size) at core/ravl.c:45>:
                                                                    Malloc()
                                                                    ERR()
                                                                recycler_element_cmp() <int recycler_element_cmp (const void *lhs, const void *rhs) at libpmemobj/recycler.c:23>:
                                                                memset()
                                                                VEC_INIT()
                                                                util_mutex_init()
                                                                Free() <Free_func Free at core/alloc.c:91>
                                                            util_bool_compare_and_swap64()
                                                            recycler_delete() <void recycler_delete (struct recycler *r) at libpmemobj/recycler.c:107>:
                                                                VEC_DELETE()
                                                                util_mutex_destroy()
                                                                ravl_delete() <void ravl_delete (struct ravl *ravl) at core/ravl.c:112>:
                                                                    ravl_delete_cb() <void ravl_delete_cb (struct ravl *ravl, ravl_cb cb, void *arg) at core/ravl.c:102>:
                                                                        ravl_foreach_node() <void ravl_foreach_node (struct ravl_node *n, ravl_cb cb, void *arg, int free_node) at core/ravl.c:74> (R):
                                                                            ravl_foreach_node() <void ravl_foreach_node (struct ravl_node *n, ravl_cb cb, void *arg, int free_node) at core/ravl.c:74> (recursive: see 7832)
                                                                            Free() <Free_func Free at core/alloc.c:91>
                                                                        Free() <Free_func Free at core/alloc.c:91>
                                                                Free() <Free_func Free at core/alloc.c:91>
                                                            heap_get_recycler() <struct recycler *heap_get_recycler (struct palloc_heap *heap, size_t id, size_t nallocs) at libpmemobj/heap.c:106> (recursive: see 7814)
                                                        recycler_put() <int recycler_put (struct recycler *r, struct recycler_element element) at libpmemobj/recycler.c:154>:
                                                            util_mutex_lock()
                                                            ravl_emplace_copy() <int ravl_emplace_copy (struct ravl *ravl, const void *data) at core/ravl.c:384>:
                                                                ravl_emplace() <int ravl_emplace (struct ravl *ravl, ravl_constr constr, const void *arg) at core/ravl.c:393>:
                                                                    LOG()
                                                                    ravl_new_node() <struct ravl_node *ravl_new_node (struct ravl *ravl, ravl_constr constr, const void *arg) at core/ravl.c:161>:
                                                                        Malloc()
                                                                        ERR()
                                                                        ravl_node_insert_constructor() <void ravl_node_insert_constructor (void *data, size_t data_size, const void *arg) at core/ravl.c:139>:
                                                                            SUPPRESS_UNUSED()
                                                                            memcpy()
                                                                    ravl_data() <void *ravl_data (struct ravl_node *node) at core/ravl.c:571>:
                                                                        memcpy()
                                                                    ravl_balance() <void ravl_balance (struct ravl *ravl, struct ravl_node *n) at core/ravl.c:337>:
                                                                        ravl_node_is() <int ravl_node_is (struct ravl_node *n, int i, int j) at core/ravl.c:306>:
                                                                            ravl_node_is_i_j() <int ravl_node_is_i_j (struct ravl_node *n, int i, int j) at core/ravl.c:296>:
                                                                                ravl_node_rank_difference_parent() <int ravl_node_rank_difference_parent (struct ravl_node *p, struct ravl_node *n) at core/ravl.c:275>:
                                                                                    ravl_node_rank() <int ravl_node_rank (struct ravl_node *n) at core/ravl.c:261>:
                                                                        ravl_node_promote() <void ravl_node_promote (struct ravl_node *n) at core/ravl.c:315>
                                                                        ravl_node_sibling() <struct ravl_node *ravl_node_sibling (struct ravl_node *n) at core/ravl.c:209>:
                                                                            ravl_node_slot_type() <enum ravl_slot_type ravl_node_slot_type (struct ravl_node *n) at core/ravl.c:196>:
                                                                        ravl_node_rank_difference() <int ravl_node_rank_difference (struct ravl_node *n) at core/ravl.c:287>:
                                                                            ravl_node_rank_difference_parent() <int ravl_node_rank_difference_parent (struct ravl_node *p, struct ravl_node *n) at core/ravl.c:275>:
                                                                                ravl_node_rank() <int ravl_node_rank (struct ravl_node *n) at core/ravl.c:261>:
                                                                        ravl_node_rank_difference_parent() <int ravl_node_rank_difference_parent (struct ravl_node *p, struct ravl_node *n) at core/ravl.c:275>:
                                                                            ravl_node_rank() <int ravl_node_rank (struct ravl_node *n) at core/ravl.c:261>:
                                                                        ravl_slot_opposite() <enum ravl_slot_type ravl_slot_opposite (enum ravl_slot_type t) at core/ravl.c:184>:
                                                                            ASSERTne()
                                                                        ravl_node_slot_type() <enum ravl_slot_type ravl_node_slot_type (struct ravl_node *n) at core/ravl.c:196>:
                                                                        ravl_rotate() <void ravl_rotate (struct ravl *ravl, struct ravl_node *n) at core/ravl.c:237>:
                                                                            ASSERTne()
                                                                            ravl_node_ref() <struct ravl_node **ravl_node_ref (struct ravl *ravl, struct ravl_node *n) at core/ravl.c:223>:
                                                                                ravl_node_slot_type() <enum ravl_slot_type ravl_node_slot_type (struct ravl_node *n) at core/ravl.c:196>:
                                                                            ravl_node_slot_type() <enum ravl_slot_type ravl_node_slot_type (struct ravl_node *n) at core/ravl.c:196>:
                                                                            ravl_slot_opposite() <enum ravl_slot_type ravl_slot_opposite (enum ravl_slot_type t) at core/ravl.c:184>:
                                                                                ASSERTne()
                                                                        ravl_node_demote() <void ravl_node_demote (struct ravl_node *n) at core/ravl.c:324>:
                                                                            ASSERT()
                                                                    Free() <Free_func Free at core/alloc.c:91>
                                                                ravl_node_copy_constructor() <void ravl_node_copy_constructor (void *data, size_t data_size, const void *arg) at core/ravl.c:152>:
                                                                    memcpy()
                                                            util_mutex_unlock()
                                                        ERR()
                                                    heap_run_into_free_chunk() <void heap_run_into_free_chunk (struct palloc_heap *heap, struct bucket *bucket, struct memory_block *m) at libpmemobj/heap.c:697>:
                                                        heap_get_chunk_hdr()
                                                        STATS_SUB()
                                                        util_mutex_lock()
                                                        memblock_huge_init() <struct memory_block memblock_huge_init (struct palloc_heap *heap, uint32_t chunk_id, uint32_t zone_id, uint32_t size_idx) at libpmemobj/memblock.c:1329>:
                                                            heap_get_chunk_hdr()
                                                            VALGRIND_DO_MAKE_MEM_UNDEFINED()
                                                            VALGRIND_ANNOTATE_NEW_MEMORY()
                                                            chunk_get_chunk_hdr_value() <uint64_t chunk_get_chunk_hdr_value (uint16_t type, uint16_t flags, uint32_t size_idx) at libpmemobj/memblock.c:604>:
                                                                COMPILE_ERROR_ON()
                                                                memcpy()
                                                            util_atomic_store_explicit64()
                                                            pmemops_persist()
                                                            huge_write_footer() <void huge_write_footer (struct chunk_header *hdr, uint32_t size_idx) at libpmemobj/memblock.c:1166>:
                                                                VALGRIND_DO_MAKE_MEM_UNDEFINED()
                                                                VALGRIND_SET_CLEAN()
                                                            memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                                                memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                                                    heap_get_chunk_hdr()
                                                                memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                                                    heap_get_chunk_hdr()
                                                                    FATAL()
                                                        heap_free_chunk_reuse() <int heap_free_chunk_reuse (struct palloc_heap *heap, struct bucket *bucket, struct memory_block *m) at libpmemobj/heap.c:674>:
                                                            heap_coalesce_huge() <struct memory_block heap_coalesce_huge (struct palloc_heap *heap, struct bucket *b, const struct memory_block *m) at libpmemobj/heap.c:650>:
                                                                heap_get_adjacent_free_block() <int heap_get_adjacent_free_block (struct palloc_heap *heap, const struct memory_block *in, struct memory_block *out, int prev) at libpmemobj/heap.c:582>:
                                                                    ZID_TO_ZONE()
                                                                    memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                                                        memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                                                            heap_get_chunk_hdr()
                                                                        memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                                                            heap_get_chunk_hdr()
                                                                            FATAL()
                                                                bucket_remove_block() <int bucket_remove_block (struct bucket *b, const struct memory_block *m) at libpmemobj/bucket.c:178>
                                                                heap_coalesce() <struct memory_block heap_coalesce (struct palloc_heap *heap, const struct memory_block *blocks[], int n) at libpmemobj/heap.c:621>:
                                                                    ASSERTne()
                                                                    memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                                                        memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                                                            heap_get_chunk_hdr()
                                                                        memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                                                            heap_get_chunk_hdr()
                                                                            FATAL()
                                                            bucket_insert_block() <int bucket_insert_block (struct bucket *b, const struct memory_block *m) at libpmemobj/bucket.c:161>:
                                                                VALGRIND_DO_MAKE_MEM_NOACCESS()
                                                                VALGRIND_ANNOTATE_NEW_MEMORY()
                                                        util_mutex_unlock()
                                                    heap_free_chunk_reuse() <int heap_free_chunk_reuse (struct palloc_heap *heap, struct bucket *bucket, struct memory_block *m) at libpmemobj/heap.c:674>:
                                                        heap_coalesce_huge() <struct memory_block heap_coalesce_huge (struct palloc_heap *heap, struct bucket *b, const struct memory_block *m) at libpmemobj/heap.c:650>:
                                                            heap_get_adjacent_free_block() <int heap_get_adjacent_free_block (struct palloc_heap *heap, const struct memory_block *in, struct memory_block *out, int prev) at libpmemobj/heap.c:582>:
                                                                ZID_TO_ZONE()
                                                                memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                                                    memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                                                        heap_get_chunk_hdr()
                                                                    memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                                                        heap_get_chunk_hdr()
                                                                        FATAL()
                                                            bucket_remove_block() <int bucket_remove_block (struct bucket *b, const struct memory_block *m) at libpmemobj/bucket.c:178>
                                                            heap_coalesce() <struct memory_block heap_coalesce (struct palloc_heap *heap, const struct memory_block *blocks[], int n) at libpmemobj/heap.c:621>:
                                                                ASSERTne()
                                                                memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                                                    memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                                                        heap_get_chunk_hdr()
                                                                    memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                                                        heap_get_chunk_hdr()
                                                                        FATAL()
                                                        bucket_insert_block() <int bucket_insert_block (struct bucket *b, const struct memory_block *m) at libpmemobj/bucket.c:161>:
                                                            VALGRIND_DO_MAKE_MEM_NOACCESS()
                                                            VALGRIND_ANNOTATE_NEW_MEMORY()
                                            heap_extend() <int heap_extend (struct palloc_heap *heap, struct bucket *b, size_t size) at libpmemobj/heap.c:1515>:
                                                util_pool_extend() <void *util_pool_extend (struct pool_set *set, size_t *size, size_t minpartsize) at common/set.c:2231>:
                                                    LOG()
                                                    ERR()
                                                    util_poolset_append_new_part() <int util_poolset_append_new_part (struct pool_set *set, size_t size) at common/set.c:2174>:
                                                        LOG()
                                                        VEC_SIZE()
                                                        VEC_GET()
                                                        strlen()
                                                        Malloc()
                                                        ERR()
                                                        snprintf()
                                                        util_replica_add_part() <int util_replica_add_part (struct pool_replica **repp, const char *path, size_t filesize) at common/set.c:708>:
                                                            LOG()
                                                            util_replica_add_part_by_idx() <int util_replica_add_part_by_idx (struct pool_replica **repp, const char *path, size_t filesize, unsigned p) at common/set.c:662>:
                                                                LOG()
                                                                util_replica_reserve() <int util_replica_reserve (struct pool_replica **repp, unsigned n) at common/set.c:633>:
                                                                    LOG()
                                                                    Realloc()
                                                                    ERR()
                                                                    memset()
                                                                ASSERTne()
                                                                util_file_get_type() <enum file_type util_file_get_type (const char *path) at common/file.c:106>:
                                                                    LOG()
                                                                    ERR()
                                                                    util_file_exists() <int util_file_exists (const char *path) at common/file.c:32>:
                                                                        LOG()
                                                                        os_access() <int os_access (const char *pathname, int mode) at core/os_posix.c:97>:
                                                                            access()
                                                                        ERR()
                                                                    os_stat() <int os_stat (const char *pathname, os_stat_t *buf) at core/os_posix.c:79>:
                                                                        stat()
                                                                    util_stat_get_type() <enum file_type util_stat_get_type (const os_stat_t *st) at common/file.c:62>:
                                                                        pmem2_get_type_from_stat() <int pmem2_get_type_from_stat (const os_stat_t *st, enum pmem2_file_type *type) at libpmem2/pmem2_utils_linux.c:23>:
                                                                            S_ISREG()
                                                                            S_ISDIR()
                                                                            S_ISCHR()
                                                                            ERR()
                                                                            util_snprintf() <int util_snprintf (char *str, size_t size, const char *format, ...) at core/util.c:434>:
                                                                                va_start()
                                                                                vsnprintf()
                                                                                va_end()
                                                                            os_major()
                                                                            os_minor()
                                                                            ASSERTinfo()
                                                                            LOG()
                                                                            realpath()
                                                                            strrchr()
                                                                            strcmp()
                                                                        pmem2_err_to_errno() <int pmem2_err_to_errno (int err) at libpmem2/pmem2_utils.c:67>:
                                                                            FATAL()
                                                                        ASSERTinfo()
                                                                util_file_device_dax_alignment() <size_t util_file_device_dax_alignment (const char *path) at common/file_posix.c:139>:
                                                                    LOG()
                                                                    device_dax_alignment() <size_t device_dax_alignment (const char *path) at common/file_posix.c:105>:
                                                                        LOG()
                                                                        os_open() <int os_open (const char *pathname, int flags, ...) at core/os_posix.c:29>:
                                                                            va_start()
                                                                            va_arg()
                                                                            va_end()
                                                                            open()
                                                                        pmem2_source_from_fd() <int pmem2_source_from_fd (struct pmem2_source **src, int fd) at libpmem2/source_posix.c:19>:
                                                                            PMEM2_ERR_CLR()
                                                                            fcntl()
                                                                            ERR()
                                                                            os_fstat()
                                                                            pmem2_get_type_from_stat() <int pmem2_get_type_from_stat (const os_stat_t *st, enum pmem2_file_type *type) at libpmem2/pmem2_utils_linux.c:23>:
                                                                                S_ISREG()
                                                                                S_ISDIR()
                                                                                S_ISCHR()
                                                                                ERR()
                                                                                util_snprintf() <int util_snprintf (char *str, size_t size, const char *format, ...) at core/util.c:434>:
                                                                                    va_start()
                                                                                    vsnprintf()
                                                                                    va_end()
                                                                                os_major()
                                                                                os_minor()
                                                                                ASSERTinfo()
                                                                                LOG()
                                                                                realpath()
                                                                                strrchr()
                                                                                strcmp()
                                                                            pmem2_malloc() <void *pmem2_malloc (size_t size, int *err) at libpmem2/pmem2_utils.c:19>:
                                                                                Malloc()
                                                                                ERR()
                                                                            ASSERTne()
                                                                        pmem2_device_dax_alignment() <int pmem2_device_dax_alignment (const struct pmem2_source *src, size_t *alignment) at libpmem2/pmem2_utils_ndctl.c:18>:
                                                                            ndctl_new()
                                                                            ERR()
                                                                            pmem2_region_namespace() <int pmem2_region_namespace (struct ndctl_ctx *ctx, const struct pmem2_source *src, struct ndctl_region **pregion, struct ndctl_namespace **pndns) at libpmem2/region_namespace_ndctl.c:131>:
                                                                                LOG()
                                                                                ERR()
                                                                                FOREACH_BUS_REGION_NAMESPACE()
                                                                                ndctl_namespace_get_dax()
                                                                                ASSERTeq()
                                                                                ndctl_dax_get_daxctl_region()
                                                                                daxctl_dev_foreach()
                                                                                daxctl_dev_get_devname()
                                                                                ndctl_match_devdax() <int ndctl_match_devdax (dev_t st_rdev, const char *devname) at libpmem2/region_namespace_ndctl.c:26>:
                                                                                    LOG()
                                                                                    stat()
                                                                                    util_snprintf() <int util_snprintf (char *str, size_t size, const char *format, ...) at core/util.c:434>:
                                                                                        va_start()
                                                                                        vsnprintf()
                                                                                        va_end()
                                                                                    ERR()
                                                                                    os_stat() <int os_stat (const char *pathname, os_stat_t *buf) at core/os_posix.c:79>:
                                                                                        stat()
                                                                                ndctl_namespace_get_btt()
                                                                                ndctl_btt_get_block_device()
                                                                                ndctl_namespace_get_pfn()
                                                                                ndctl_pfn_get_block_device()
                                                                                ndctl_namespace_get_block_device()
                                                                                ndctl_match_fsdax() <int ndctl_match_fsdax (dev_t st_dev, const char *devname) at libpmem2/region_namespace_ndctl.c:64>:
                                                                                    LOG()
                                                                                    util_snprintf() <int util_snprintf (char *str, size_t size, const char *format, ...) at core/util.c:434>:
                                                                                        va_start()
                                                                                        vsnprintf()
                                                                                        va_end()
                                                                                    ERR()
                                                                                    major()
                                                                                    minor()
                                                                                    os_open() <int os_open (const char *pathname, int flags, ...) at core/os_posix.c:29>:
                                                                                        va_start()
                                                                                        va_arg()
                                                                                        va_end()
                                                                                        open()
                                                                                    read()
                                                                                    os_close()
                                                                                    strcmp()
                                                                            LOG()
                                                                            ndctl_namespace_get_dax()
                                                                            ndctl_dax_get_align()
                                                                            ndctl_unref()
                                                                        pmem2_source_delete() <int pmem2_source_delete (struct pmem2_source **src) at libpmem2/source.c:30>:
                                                                            Free() <Free_func Free at core/alloc.c:91>
                                                                        os_close()
                                                        FATAL()
                                                        util_poolset_set_size() <void util_poolset_set_size (struct pool_set *set) at common/set.c:949>:
                                                            LOG()
                                                        Free() <Free_func Free at core/alloc.c:91>
                                                    util_part_open() <int util_part_open (struct pool_set_part *part, size_t minsize, int create_part) at common/set.c:1459>:
                                                        LOG()
                                                        util_file_exists() <int util_file_exists (const char *path) at common/file.c:32>:
                                                            LOG()
                                                            os_access() <int os_access (const char *pathname, int mode) at core/os_posix.c:97>:
                                                                access()
                                                            ERR()
                                                        util_file_create() <int util_file_create (const char *path, size_t size, size_t minsize) at common/file.c:398>:
                                                            LOG()
                                                            ASSERTne()
                                                            ERR()
                                                            os_open() <int os_open (const char *pathname, int flags, ...) at core/os_posix.c:29>:
                                                                va_start()
                                                                va_arg()
                                                                va_end()
                                                                open()
                                                            os_posix_fallocate() <int os_posix_fallocate (int fd, os_off_t offset, off_t len) at core/os_posix.c:142>:
                                                                posix_fallocate()
                                                            os_flock() <int os_flock (int fd, int operation) at core/os_posix.c:215>:
                                                                flock()
                                                            os_close()
                                                            os_unlink() <int os_unlink (const char *pathname) at core/os_posix.c:88>:
                                                                unlink()
                                                        util_file_open() <int util_file_open (const char *path, size_t *size, size_t minsize, int flags) at common/file.c:456>:
                                                            LOG()
                                                            os_open() <int os_open (const char *pathname, int flags, ...) at core/os_posix.c:29>:
                                                                va_start()
                                                                va_arg()
                                                                va_end()
                                                                open()
                                                            ERR()
                                                            os_flock() <int os_flock (int fd, int operation) at core/os_posix.c:215>:
                                                                flock()
                                                            os_close()
                                                            ASSERTeq()
                                                            util_fd_get_size() <ssize_t util_fd_get_size (int fd) at common/file.c:157>:
                                                                LOG()
                                                                pmem2_source_from_fd() <int pmem2_source_from_fd (struct pmem2_source **src, int fd) at libpmem2/source_posix.c:19>:
                                                                    PMEM2_ERR_CLR()
                                                                    fcntl()
                                                                    ERR()
                                                                    os_fstat()
                                                                    pmem2_get_type_from_stat() <int pmem2_get_type_from_stat (const os_stat_t *st, enum pmem2_file_type *type) at libpmem2/pmem2_utils_linux.c:23>:
                                                                        S_ISREG()
                                                                        S_ISDIR()
                                                                        S_ISCHR()
                                                                        ERR()
                                                                        util_snprintf() <int util_snprintf (char *str, size_t size, const char *format, ...) at core/util.c:434>:
                                                                            va_start()
                                                                            vsnprintf()
                                                                            va_end()
                                                                        os_major()
                                                                        os_minor()
                                                                        ASSERTinfo()
                                                                        LOG()
                                                                        realpath()
                                                                        strrchr()
                                                                        strcmp()
                                                                    pmem2_malloc() <void *pmem2_malloc (size_t size, int *err) at libpmem2/pmem2_utils.c:19>:
                                                                        Malloc()
                                                                        ERR()
                                                                    ASSERTne()
                                                                pmem2_err_to_errno() <int pmem2_err_to_errno (int err) at libpmem2/pmem2_utils.c:67>:
                                                                    FATAL()
                                                                pmem2_source_size() <int pmem2_source_size (const struct pmem2_source *src, size_t *size) at libpmem2/source_posix.c:90>:
                                                                    LOG()
                                                                    PMEM2_ERR_CLR()
                                                                    ASSERT()
                                                                    os_fstat()
                                                                    ERR()
                                                                    pmem2_device_dax_size() <int pmem2_device_dax_size (const struct pmem2_source *src, size_t *size) at libpmem2/pmem2_utils_ndctl.c:58>:
                                                                        ndctl_new()
                                                                        ERR()
                                                                        pmem2_region_namespace() <int pmem2_region_namespace (struct ndctl_ctx *ctx, const struct pmem2_source *src, struct ndctl_region **pregion, struct ndctl_namespace **pndns) at libpmem2/region_namespace_ndctl.c:131>:
                                                                            LOG()
                                                                            ERR()
                                                                            FOREACH_BUS_REGION_NAMESPACE()
                                                                            ndctl_namespace_get_dax()
                                                                            ASSERTeq()
                                                                            ndctl_dax_get_daxctl_region()
                                                                            daxctl_dev_foreach()
                                                                            daxctl_dev_get_devname()
                                                                            ndctl_match_devdax() <int ndctl_match_devdax (dev_t st_rdev, const char *devname) at libpmem2/region_namespace_ndctl.c:26>:
                                                                                LOG()
                                                                                stat()
                                                                                util_snprintf() <int util_snprintf (char *str, size_t size, const char *format, ...) at core/util.c:434>:
                                                                                    va_start()
                                                                                    vsnprintf()
                                                                                    va_end()
                                                                                ERR()
                                                                                os_stat() <int os_stat (const char *pathname, os_stat_t *buf) at core/os_posix.c:79>:
                                                                                    stat()
                                                                            ndctl_namespace_get_btt()
                                                                            ndctl_btt_get_block_device()
                                                                            ndctl_namespace_get_pfn()
                                                                            ndctl_pfn_get_block_device()
                                                                            ndctl_namespace_get_block_device()
                                                                            ndctl_match_fsdax() <int ndctl_match_fsdax (dev_t st_dev, const char *devname) at libpmem2/region_namespace_ndctl.c:64>:
                                                                                LOG()
                                                                                util_snprintf() <int util_snprintf (char *str, size_t size, const char *format, ...) at core/util.c:434>:
                                                                                    va_start()
                                                                                    vsnprintf()
                                                                                    va_end()
                                                                                ERR()
                                                                                major()
                                                                                minor()
                                                                                os_open() <int os_open (const char *pathname, int flags, ...) at core/os_posix.c:29>:
                                                                                    va_start()
                                                                                    va_arg()
                                                                                    va_end()
                                                                                    open()
                                                                                read()
                                                                                os_close()
                                                                                strcmp()
                                                                        LOG()
                                                                        ndctl_namespace_get_dax()
                                                                        ndctl_dax_get_size()
                                                                        ndctl_unref()
                                                                    FATAL()
                                                                pmem2_source_delete() <int pmem2_source_delete (struct pmem2_source **src) at libpmem2/source.c:30>:
                                                                    Free() <Free_func Free at core/alloc.c:91>
                                                                ERR()
                                                        os_posix_fallocate() <int os_posix_fallocate (int fd, os_off_t offset, off_t len) at core/os_posix.c:142>:
                                                            posix_fallocate()
                                                        ERR()
                                                    util_map_part() <int util_map_part (struct pool_set_part *part, void *addr, size_t size, size_t offset, int flags, int rdonly) at common/set.c:229>:
                                                        LOG()
                                                        ASSERTeq()
                                                        ASSERT()
                                                        roundup()
                                                        util_map_sync() <void *util_map_sync (void *addr, size_t len, int proto, int flags, int fd, os_off_t offset, int *map_sync) at common/mmap_posix.c:159>:
                                                            LOG()
                                                            mmap()
                                                        ERR()
                                                        munmap()
                                                        VALGRIND_REGISTER_PMEM_MAPPING()
                                                        VALGRIND_REGISTER_PMEM_FILE()
                                                    util_poolset_chmod() <int util_poolset_chmod (struct pool_set *set, mode_t mode) at common/set.c:404>:
                                                        LOG()
                                                        os_fstat()
                                                        ERR()
                                                        os_chmod() <int os_chmod (const char *pathname, mode_t mode) at core/os_posix.c:124>:
                                                            chmod()
                                                    util_poolset_fdclose() <void util_poolset_fdclose (struct pool_set *set) at common/set.c:457>:
                                                        util_poolset_fdclose_always() <void util_poolset_fdclose_always (struct pool_set *set) at common/set.c:445>:
                                                            LOG()
                                                            util_replica_fdclose() <void util_replica_fdclose (struct pool_replica *rep) at common/set.c:3232>:
                                                                util_part_fdclose() <void util_part_fdclose (struct pool_set_part *part) at common/set.c:1517>:
                                                                    LOG()
                                                                    os_close()
                                                    os_close()
                                                    os_unlink() <int os_unlink (const char *pathname) at core/os_posix.c:88>:
                                                        unlink()
                                                    Free() <Free_func Free at core/alloc.c:91>
                                                    util_poolset_set_size() <void util_poolset_set_size (struct pool_set *set) at common/set.c:949>:
                                                        LOG()
                                                pmemops_persist()
                                                heap_max_zone() <unsigned heap_max_zone (size_t size) at libpmemobj/heap.c:516>:
                                                ZID_TO_ZONE()
                                                heap_zone_init() <void heap_zone_init (struct palloc_heap *heap, uint32_t zone_id, uint32_t first_chunk_id) at libpmemobj/heap.c:559>:
                                                    ZID_TO_ZONE()
                                                    zone_calc_size_idx() <uint32_t zone_calc_size_idx (uint32_t zone_id, unsigned max_zone, size_t heap_size) at libpmemobj/heap.c:533>:
                                                        ASSERT()
                                                    ASSERT()
                                                    memblock_huge_init() <struct memory_block memblock_huge_init (struct palloc_heap *heap, uint32_t chunk_id, uint32_t zone_id, uint32_t size_idx) at libpmemobj/memblock.c:1329>:
                                                        heap_get_chunk_hdr()
                                                        VALGRIND_DO_MAKE_MEM_UNDEFINED()
                                                        VALGRIND_ANNOTATE_NEW_MEMORY()
                                                        chunk_get_chunk_hdr_value() <uint64_t chunk_get_chunk_hdr_value (uint16_t type, uint16_t flags, uint32_t size_idx) at libpmemobj/memblock.c:604>:
                                                            COMPILE_ERROR_ON()
                                                            memcpy()
                                                        util_atomic_store_explicit64()
                                                        pmemops_persist()
                                                        huge_write_footer() <void huge_write_footer (struct chunk_header *hdr, uint32_t size_idx) at libpmemobj/memblock.c:1166>:
                                                            VALGRIND_DO_MAKE_MEM_UNDEFINED()
                                                            VALGRIND_SET_CLEAN()
                                                        memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                                            memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                                                heap_get_chunk_hdr()
                                                            memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                                                heap_get_chunk_hdr()
                                                                FATAL()
                                                    pmemops_persist()
                                                memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                                    memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                                        heap_get_chunk_hdr()
                                                    memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                                        heap_get_chunk_hdr()
                                                        FATAL()
                                                heap_free_chunk_reuse() <int heap_free_chunk_reuse (struct palloc_heap *heap, struct bucket *bucket, struct memory_block *m) at libpmemobj/heap.c:674>:
                                                    heap_coalesce_huge() <struct memory_block heap_coalesce_huge (struct palloc_heap *heap, struct bucket *b, const struct memory_block *m) at libpmemobj/heap.c:650>:
                                                        heap_get_adjacent_free_block() <int heap_get_adjacent_free_block (struct palloc_heap *heap, const struct memory_block *in, struct memory_block *out, int prev) at libpmemobj/heap.c:582>:
                                                            ZID_TO_ZONE()
                                                            memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                                                memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                                                    heap_get_chunk_hdr()
                                                                memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                                                    heap_get_chunk_hdr()
                                                                    FATAL()
                                                        bucket_remove_block() <int bucket_remove_block (struct bucket *b, const struct memory_block *m) at libpmemobj/bucket.c:178>
                                                        heap_coalesce() <struct memory_block heap_coalesce (struct palloc_heap *heap, const struct memory_block *blocks[], int n) at libpmemobj/heap.c:621>:
                                                            ASSERTne()
                                                            memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                                                memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                                                    heap_get_chunk_hdr()
                                                                memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                                                    heap_get_chunk_hdr()
                                                                    FATAL()
                                                    bucket_insert_block() <int bucket_insert_block (struct bucket *b, const struct memory_block *m) at libpmemobj/bucket.c:161>:
                                                        VALGRIND_DO_MAKE_MEM_NOACCESS()
                                                        VALGRIND_ANNOTATE_NEW_MEMORY()
                                        heap_ensure_run_bucket_filled() <int heap_ensure_run_bucket_filled (struct palloc_heap *heap, struct bucket *b, uint32_t units) at libpmemobj/heap.c:1083> (R):
                                            bucket_alloc_class() <struct alloc_class *bucket_alloc_class (struct bucket *b) at libpmemobj/bucket.c:152>
                                            ASSERTeq()
                                            heap_detach_and_try_discard_run() <int heap_detach_and_try_discard_run (struct palloc_heap *heap, struct bucket *b) at libpmemobj/heap.c:992>:
                                                bucket_detach_run() <int bucket_detach_run (struct bucket *b, struct memory_block *m_out, int *empty) at libpmemobj/bucket.c:231>:
                                                    util_fetch_and_sub64()
                                                    VALGRIND_ANNOTATE_HAPPENS_AFTER()
                                                    VALGRIND_ANNOTATE_HAPPENS_BEFORE()
                                                    Zalloc() <void *Zalloc (size_t sz) at core/alloc.c:98>:
                                                        Malloc()
                                                        memset()
                                                heap_discard_run() <void heap_discard_run (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/heap.c:974>:
                                                    heap_reclaim_run() <int heap_reclaim_run (struct palloc_heap *heap, struct memory_block *m, int startup) at libpmemobj/heap.c:733>:
                                                        heap_get_chunk_run()
                                                        heap_get_chunk_hdr()
                                                        alloc_class_by_run() <struct alloc_class *alloc_class_by_run (struct alloc_class_collection *ac, size_t unit_size, uint16_t flags, uint32_t size_idx) at libpmemobj/alloc_class.c:594>:
                                                            SIZE_TO_CLASS_MAP_INDEX()
                                                            ASSERT()
                                                            critnib_get() <void *critnib_get (struct critnib *c, uint64_t key) at libpmemobj/critnib.c:515>:
                                                                load() <void load (void *src, void *dst) at libpmemobj/critnib.c:130>:
                                                                    util_atomic_load_explicit64()
                                                                is_leaf() <inline bool is_leaf (struct critnib_node *n) at libpmemobj/critnib.c:150>:
                                                                slice_index() <inline unsigned slice_index (uint64_t key, sh_t shift) at libpmemobj/critnib.c:178>:
                                                                to_leaf() <inline struct critnib_leaf *to_leaf (struct critnib_node *n) at libpmemobj/critnib.c:159>:
                                                            RUN_CLASS_KEY_PACK()
                                                        recycler_element_new() <struct recycler_element recycler_element_new (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/recycler.c:122>:
                                                            SUPPRESS_UNUSED()
                                                            util_mutex_lock()
                                                            util_mutex_unlock()
                                                        ASSERTeq()
                                                        STATS_INC()
                                                        heap_get_recycler() <struct recycler *heap_get_recycler (struct palloc_heap *heap, size_t id, size_t nallocs) at libpmemobj/heap.c:106> (R):
                                                            util_atomic_load_explicit64()
                                                            recycler_new() <struct recycler *recycler_new (struct palloc_heap *heap, size_t nallocs, size_t *peak_arenas) at libpmemobj/recycler.c:74>:
                                                                Malloc()
                                                                ravl_new_sized() <struct ravl *ravl_new_sized (ravl_compare *compare, size_t data_size) at core/ravl.c:45>:
                                                                    Malloc()
                                                                    ERR()
                                                                recycler_element_cmp() <int recycler_element_cmp (const void *lhs, const void *rhs) at libpmemobj/recycler.c:23>:
                                                                memset()
                                                                VEC_INIT()
                                                                util_mutex_init()
                                                                Free() <Free_func Free at core/alloc.c:91>
                                                            util_bool_compare_and_swap64()
                                                            recycler_delete() <void recycler_delete (struct recycler *r) at libpmemobj/recycler.c:107>:
                                                                VEC_DELETE()
                                                                util_mutex_destroy()
                                                                ravl_delete() <void ravl_delete (struct ravl *ravl) at core/ravl.c:112>:
                                                                    ravl_delete_cb() <void ravl_delete_cb (struct ravl *ravl, ravl_cb cb, void *arg) at core/ravl.c:102>:
                                                                        ravl_foreach_node() <void ravl_foreach_node (struct ravl_node *n, ravl_cb cb, void *arg, int free_node) at core/ravl.c:74> (R):
                                                                            ravl_foreach_node() <void ravl_foreach_node (struct ravl_node *n, ravl_cb cb, void *arg, int free_node) at core/ravl.c:74> (recursive: see 8349)
                                                                            Free() <Free_func Free at core/alloc.c:91>
                                                                        Free() <Free_func Free at core/alloc.c:91>
                                                                Free() <Free_func Free at core/alloc.c:91>
                                                            heap_get_recycler() <struct recycler *heap_get_recycler (struct palloc_heap *heap, size_t id, size_t nallocs) at libpmemobj/heap.c:106> (recursive: see 8331)
                                                        recycler_put() <int recycler_put (struct recycler *r, struct recycler_element element) at libpmemobj/recycler.c:154>:
                                                            util_mutex_lock()
                                                            ravl_emplace_copy() <int ravl_emplace_copy (struct ravl *ravl, const void *data) at core/ravl.c:384>:
                                                                ravl_emplace() <int ravl_emplace (struct ravl *ravl, ravl_constr constr, const void *arg) at core/ravl.c:393>:
                                                                    LOG()
                                                                    ravl_new_node() <struct ravl_node *ravl_new_node (struct ravl *ravl, ravl_constr constr, const void *arg) at core/ravl.c:161>:
                                                                        Malloc()
                                                                        ERR()
                                                                        ravl_node_insert_constructor() <void ravl_node_insert_constructor (void *data, size_t data_size, const void *arg) at core/ravl.c:139>:
                                                                            SUPPRESS_UNUSED()
                                                                            memcpy()
                                                                    ravl_data() <void *ravl_data (struct ravl_node *node) at core/ravl.c:571>:
                                                                        memcpy()
                                                                    ravl_balance() <void ravl_balance (struct ravl *ravl, struct ravl_node *n) at core/ravl.c:337>:
                                                                        ravl_node_is() <int ravl_node_is (struct ravl_node *n, int i, int j) at core/ravl.c:306>:
                                                                            ravl_node_is_i_j() <int ravl_node_is_i_j (struct ravl_node *n, int i, int j) at core/ravl.c:296>:
                                                                                ravl_node_rank_difference_parent() <int ravl_node_rank_difference_parent (struct ravl_node *p, struct ravl_node *n) at core/ravl.c:275>:
                                                                                    ravl_node_rank() <int ravl_node_rank (struct ravl_node *n) at core/ravl.c:261>:
                                                                        ravl_node_promote() <void ravl_node_promote (struct ravl_node *n) at core/ravl.c:315>
                                                                        ravl_node_sibling() <struct ravl_node *ravl_node_sibling (struct ravl_node *n) at core/ravl.c:209>:
                                                                            ravl_node_slot_type() <enum ravl_slot_type ravl_node_slot_type (struct ravl_node *n) at core/ravl.c:196>:
                                                                        ravl_node_rank_difference() <int ravl_node_rank_difference (struct ravl_node *n) at core/ravl.c:287>:
                                                                            ravl_node_rank_difference_parent() <int ravl_node_rank_difference_parent (struct ravl_node *p, struct ravl_node *n) at core/ravl.c:275>:
                                                                                ravl_node_rank() <int ravl_node_rank (struct ravl_node *n) at core/ravl.c:261>:
                                                                        ravl_node_rank_difference_parent() <int ravl_node_rank_difference_parent (struct ravl_node *p, struct ravl_node *n) at core/ravl.c:275>:
                                                                            ravl_node_rank() <int ravl_node_rank (struct ravl_node *n) at core/ravl.c:261>:
                                                                        ravl_slot_opposite() <enum ravl_slot_type ravl_slot_opposite (enum ravl_slot_type t) at core/ravl.c:184>:
                                                                            ASSERTne()
                                                                        ravl_node_slot_type() <enum ravl_slot_type ravl_node_slot_type (struct ravl_node *n) at core/ravl.c:196>:
                                                                        ravl_rotate() <void ravl_rotate (struct ravl *ravl, struct ravl_node *n) at core/ravl.c:237>:
                                                                            ASSERTne()
                                                                            ravl_node_ref() <struct ravl_node **ravl_node_ref (struct ravl *ravl, struct ravl_node *n) at core/ravl.c:223>:
                                                                                ravl_node_slot_type() <enum ravl_slot_type ravl_node_slot_type (struct ravl_node *n) at core/ravl.c:196>:
                                                                            ravl_node_slot_type() <enum ravl_slot_type ravl_node_slot_type (struct ravl_node *n) at core/ravl.c:196>:
                                                                            ravl_slot_opposite() <enum ravl_slot_type ravl_slot_opposite (enum ravl_slot_type t) at core/ravl.c:184>:
                                                                                ASSERTne()
                                                                        ravl_node_demote() <void ravl_node_demote (struct ravl_node *n) at core/ravl.c:324>:
                                                                            ASSERT()
                                                                    Free() <Free_func Free at core/alloc.c:91>
                                                                ravl_node_copy_constructor() <void ravl_node_copy_constructor (void *data, size_t data_size, const void *arg) at core/ravl.c:152>:
                                                                    memcpy()
                                                            util_mutex_unlock()
                                                        ERR()
                                                    heap_bucket_acquire() <struct bucket *heap_bucket_acquire (struct palloc_heap *heap, uint8_t class_id, uint16_t arena_id) at libpmemobj/heap.c:470>:
                                                        out() <void out (const char *fmt, ...) at core/out.c:480>:
                                                            va_start()
                                                            out_common() <} void out_common (const char *file, int line, const char *func, int level, const char *suffix, const char *fmt, va_list ap) at core/out.c:334>
                                                            va_end()
                                                        heap_thread_arena() <struct arena *heap_thread_arena (struct palloc_heap *heap) at libpmemobj/heap.c:414>:
                                                            os_tls_get() <void *os_tls_get (os_tls_key_t key) at core/os_thread_posix.c:62>:
                                                                pthread_getspecific()
                                                            heap_thread_arena_assign() <struct arena *heap_thread_arena_assign (struct palloc_heap *heap) at libpmemobj/heap.c:381>:
                                                                util_mutex_lock()
                                                                ASSERTne()
                                                                VEC_SIZE()
                                                                VEC_FOREACH()
                                                                LOG()
                                                                heap_arena_thread_attach() <void heap_arena_thread_attach (struct palloc_heap *heap, struct arena *a) at libpmemobj/heap.c:249>:
                                                                    ASSERTeq()
                                                                    os_tls_get() <void *os_tls_get (os_tls_key_t key) at core/os_thread_posix.c:62>:
                                                                        pthread_getspecific()
                                                                    heap_arena_thread_detach() <void heap_arena_thread_detach (struct arena *a) at libpmemobj/heap.c:232>:
                                                                        util_fetch_and_sub64()
                                                                    ASSERTne()
                                                                    util_fetch_and_add64()
                                                                    os_tls_set() <int os_tls_set (os_tls_key_t key, const void *value) at core/os_thread_posix.c:53>:
                                                                        pthread_setspecific()
                                                                util_mutex_unlock()
                                                            heap_global_arena_assign() <struct arena *heap_global_arena_assign (struct palloc_heap *heap) at libpmemobj/heap.c:348>:
                                                                util_mutex_lock()
                                                                ASSERTne()
                                                                VEC_SIZE()
                                                                VEC_FOREACH()
                                                                LOG()
                                                                util_mutex_unlock()
                                                            ASSERT()
                                                            ASSERTne()
                                                        ASSERTne()
                                                        VEC_ARR()
                                                        bucket_acquire() <struct bucket *bucket_acquire (struct bucket_locked *b) at libpmemobj/bucket.c:117>:
                                                            util_mutex_lock()
                                                    heap_run_into_free_chunk() <void heap_run_into_free_chunk (struct palloc_heap *heap, struct bucket *bucket, struct memory_block *m) at libpmemobj/heap.c:697>:
                                                        heap_get_chunk_hdr()
                                                        STATS_SUB()
                                                        util_mutex_lock()
                                                        memblock_huge_init() <struct memory_block memblock_huge_init (struct palloc_heap *heap, uint32_t chunk_id, uint32_t zone_id, uint32_t size_idx) at libpmemobj/memblock.c:1329>:
                                                            heap_get_chunk_hdr()
                                                            VALGRIND_DO_MAKE_MEM_UNDEFINED()
                                                            VALGRIND_ANNOTATE_NEW_MEMORY()
                                                            chunk_get_chunk_hdr_value() <uint64_t chunk_get_chunk_hdr_value (uint16_t type, uint16_t flags, uint32_t size_idx) at libpmemobj/memblock.c:604>:
                                                                COMPILE_ERROR_ON()
                                                                memcpy()
                                                            util_atomic_store_explicit64()
                                                            pmemops_persist()
                                                            huge_write_footer() <void huge_write_footer (struct chunk_header *hdr, uint32_t size_idx) at libpmemobj/memblock.c:1166>:
                                                                VALGRIND_DO_MAKE_MEM_UNDEFINED()
                                                                VALGRIND_SET_CLEAN()
                                                            memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                                                memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                                                    heap_get_chunk_hdr()
                                                                memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                                                    heap_get_chunk_hdr()
                                                                    FATAL()
                                                        heap_free_chunk_reuse() <int heap_free_chunk_reuse (struct palloc_heap *heap, struct bucket *bucket, struct memory_block *m) at libpmemobj/heap.c:674>:
                                                            heap_coalesce_huge() <struct memory_block heap_coalesce_huge (struct palloc_heap *heap, struct bucket *b, const struct memory_block *m) at libpmemobj/heap.c:650>:
                                                                heap_get_adjacent_free_block() <int heap_get_adjacent_free_block (struct palloc_heap *heap, const struct memory_block *in, struct memory_block *out, int prev) at libpmemobj/heap.c:582>:
                                                                    ZID_TO_ZONE()
                                                                    memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                                                        memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                                                            heap_get_chunk_hdr()
                                                                        memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                                                            heap_get_chunk_hdr()
                                                                            FATAL()
                                                                bucket_remove_block() <int bucket_remove_block (struct bucket *b, const struct memory_block *m) at libpmemobj/bucket.c:178>
                                                                heap_coalesce() <struct memory_block heap_coalesce (struct palloc_heap *heap, const struct memory_block *blocks[], int n) at libpmemobj/heap.c:621>:
                                                                    ASSERTne()
                                                                    memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                                                        memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                                                            heap_get_chunk_hdr()
                                                                        memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                                                            heap_get_chunk_hdr()
                                                                            FATAL()
                                                            bucket_insert_block() <int bucket_insert_block (struct bucket *b, const struct memory_block *m) at libpmemobj/bucket.c:161>:
                                                                VALGRIND_DO_MAKE_MEM_NOACCESS()
                                                                VALGRIND_ANNOTATE_NEW_MEMORY()
                                                        util_mutex_unlock()
                                                    heap_bucket_release() <void heap_bucket_release (struct bucket *b) at libpmemobj/heap.c:498>:
                                                        bucket_release() <void bucket_release (struct bucket *b) at libpmemobj/bucket.c:127>:
                                                            util_mutex_unlock()
                                            heap_reuse_from_recycler() <int heap_reuse_from_recycler (struct palloc_heap *heap, struct bucket *b, uint32_t units, int force) at libpmemobj/heap.c:1034>:
                                                bucket_alloc_class() <struct alloc_class *bucket_alloc_class (struct bucket *b) at libpmemobj/bucket.c:152>
                                                heap_get_recycler() <struct recycler *heap_get_recycler (struct palloc_heap *heap, size_t id, size_t nallocs) at libpmemobj/heap.c:106> (R):
                                                    util_atomic_load_explicit64()
                                                    recycler_new() <struct recycler *recycler_new (struct palloc_heap *heap, size_t nallocs, size_t *peak_arenas) at libpmemobj/recycler.c:74>:
                                                        Malloc()
                                                        ravl_new_sized() <struct ravl *ravl_new_sized (ravl_compare *compare, size_t data_size) at core/ravl.c:45>:
                                                            Malloc()
                                                            ERR()
                                                        recycler_element_cmp() <int recycler_element_cmp (const void *lhs, const void *rhs) at libpmemobj/recycler.c:23>:
                                                        memset()
                                                        VEC_INIT()
                                                        util_mutex_init()
                                                        Free() <Free_func Free at core/alloc.c:91>
                                                    util_bool_compare_and_swap64()
                                                    recycler_delete() <void recycler_delete (struct recycler *r) at libpmemobj/recycler.c:107>:
                                                        VEC_DELETE()
                                                        util_mutex_destroy()
                                                        ravl_delete() <void ravl_delete (struct ravl *ravl) at core/ravl.c:112>:
                                                            ravl_delete_cb() <void ravl_delete_cb (struct ravl *ravl, ravl_cb cb, void *arg) at core/ravl.c:102>:
                                                                ravl_foreach_node() <void ravl_foreach_node (struct ravl_node *n, ravl_cb cb, void *arg, int free_node) at core/ravl.c:74> (R):
                                                                    ravl_foreach_node() <void ravl_foreach_node (struct ravl_node *n, ravl_cb cb, void *arg, int free_node) at core/ravl.c:74> (recursive: see 8504)
                                                                    Free() <Free_func Free at core/alloc.c:91>
                                                                Free() <Free_func Free at core/alloc.c:91>
                                                        Free() <Free_func Free at core/alloc.c:91>
                                                    heap_get_recycler() <struct recycler *heap_get_recycler (struct palloc_heap *heap, size_t id, size_t nallocs) at libpmemobj/heap.c:106> (recursive: see 8486)
                                                ERR()
                                                recycler_get() <int recycler_get (struct recycler *r, struct memory_block *m) at libpmemobj/recycler.c:171>:
                                                    util_mutex_lock()
                                                    ravl_find() <struct ravl_node *ravl_find (struct ravl *ravl, const void *data, enum ravl_predicate flags) at core/ravl.c:524>:
                                                        LOG()
                                                        ravl_data() <void *ravl_data (struct ravl_node *node) at core/ravl.c:571>:
                                                            memcpy()
                                                        ravl_predicate_holds() <int ravl_predicate_holds (int result, struct ravl_node **ret, struct ravl_node *n, enum ravl_predicate flags) at core/ravl.c:489>:
                                                            ravl_node_successor() <struct ravl_node *ravl_node_successor (struct ravl_node *n) at core/ravl.c:465>:
                                                                ravl_node_cessor() <struct ravl_node *ravl_node_cessor (struct ravl_node *n, enum ravl_slot_type t) at core/ravl.c:443>:
                                                                    ravl_node_type_most() <struct ravl_node *ravl_node_type_most (struct ravl_node *n, enum ravl_slot_type t) at core/ravl.c:430>:
                                                                    ravl_slot_opposite() <enum ravl_slot_type ravl_slot_opposite (enum ravl_slot_type t) at core/ravl.c:184>:
                                                                        ASSERTne()
                                                            ravl_node_predecessor() <struct ravl_node *ravl_node_predecessor (struct ravl_node *n) at core/ravl.c:476>:
                                                                ravl_node_cessor() <struct ravl_node *ravl_node_cessor (struct ravl_node *n, enum ravl_slot_type t) at core/ravl.c:443>:
                                                                    ravl_node_type_most() <struct ravl_node *ravl_node_type_most (struct ravl_node *n, enum ravl_slot_type t) at core/ravl.c:430>:
                                                                    ravl_slot_opposite() <enum ravl_slot_type ravl_slot_opposite (enum ravl_slot_type t) at core/ravl.c:184>:
                                                                        ASSERTne()
                                                    out() <void out (const char *fmt, ...) at core/out.c:480>:
                                                        va_start()
                                                        out_common() <} void out_common (const char *file, int line, const char *func, int level, const char *suffix, const char *fmt, va_list ap) at core/out.c:334>
                                                        va_end()
                                                    ravl_data() <void *ravl_data (struct ravl_node *node) at core/ravl.c:571>:
                                                        memcpy()
                                                    ravl_remove() <void ravl_remove (struct ravl *ravl, struct ravl_node *n) at core/ravl.c:545> (R):
                                                        LOG()
                                                        ravl_node_successor() <struct ravl_node *ravl_node_successor (struct ravl_node *n) at core/ravl.c:465>:
                                                            ravl_node_cessor() <struct ravl_node *ravl_node_cessor (struct ravl_node *n, enum ravl_slot_type t) at core/ravl.c:443>:
                                                                ravl_node_type_most() <struct ravl_node *ravl_node_type_most (struct ravl_node *n, enum ravl_slot_type t) at core/ravl.c:430>:
                                                                ravl_slot_opposite() <enum ravl_slot_type ravl_slot_opposite (enum ravl_slot_type t) at core/ravl.c:184>:
                                                                    ASSERTne()
                                                        memcpy()
                                                        ravl_remove() <void ravl_remove (struct ravl *ravl, struct ravl_node *n) at core/ravl.c:545> (recursive: see 8534)
                                                        ravl_node_ref() <struct ravl_node **ravl_node_ref (struct ravl *ravl, struct ravl_node *n) at core/ravl.c:223>:
                                                            ravl_node_slot_type() <enum ravl_slot_type ravl_node_slot_type (struct ravl_node *n) at core/ravl.c:196>:
                                                        Free() <Free_func Free at core/alloc.c:91>
                                                    heap_get_chunk_hdr()
                                                    memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                                        memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                                            heap_get_chunk_hdr()
                                                        memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                                            heap_get_chunk_hdr()
                                                            FATAL()
                                                    util_mutex_unlock()
                                                bucket_attach_run() <int bucket_attach_run (struct bucket *b, const struct memory_block *m) at libpmemobj/bucket.c:206>:
                                                    util_mutex_lock()
                                                    bucket_memblock_insert_block() <int bucket_memblock_insert_block (const struct memory_block *m, void *b) at libpmemobj/bucket.c:197>:
                                                        bucket_insert_block() <int bucket_insert_block (struct bucket *b, const struct memory_block *m) at libpmemobj/bucket.c:161>:
                                                            VALGRIND_DO_MAKE_MEM_NOACCESS()
                                                            VALGRIND_ANNOTATE_NEW_MEMORY()
                                                    util_mutex_unlock()
                                                    util_fetch_and_add64()
                                                heap_recycle_unused() <int heap_recycle_unused (struct palloc_heap *heap, struct recycler *recycler, struct bucket *defb, int force) at libpmemobj/heap.c:894>:
                                                    recycler_recalc() <struct empty_runs recycler_recalc (struct recycler *r, int force) at libpmemobj/recycler.c:207>:
                                                        VEC_INIT()
                                                        util_atomic_load64()
                                                        util_mutex_trylock()
                                                        ravl_find() <struct ravl_node *ravl_find (struct ravl *ravl, const void *data, enum ravl_predicate flags) at core/ravl.c:524>:
                                                            LOG()
                                                            ravl_data() <void *ravl_data (struct ravl_node *node) at core/ravl.c:571>:
                                                                memcpy()
                                                            ravl_predicate_holds() <int ravl_predicate_holds (int result, struct ravl_node **ret, struct ravl_node *n, enum ravl_predicate flags) at core/ravl.c:489>:
                                                                ravl_node_successor() <struct ravl_node *ravl_node_successor (struct ravl_node *n) at core/ravl.c:465>:
                                                                    ravl_node_cessor() <struct ravl_node *ravl_node_cessor (struct ravl_node *n, enum ravl_slot_type t) at core/ravl.c:443>:
                                                                        ravl_node_type_most() <struct ravl_node *ravl_node_type_most (struct ravl_node *n, enum ravl_slot_type t) at core/ravl.c:430>:
                                                                        ravl_slot_opposite() <enum ravl_slot_type ravl_slot_opposite (enum ravl_slot_type t) at core/ravl.c:184>:
                                                                            ASSERTne()
                                                                ravl_node_predecessor() <struct ravl_node *ravl_node_predecessor (struct ravl_node *n) at core/ravl.c:476>:
                                                                    ravl_node_cessor() <struct ravl_node *ravl_node_cessor (struct ravl_node *n, enum ravl_slot_type t) at core/ravl.c:443>:
                                                                        ravl_node_type_most() <struct ravl_node *ravl_node_type_most (struct ravl_node *n, enum ravl_slot_type t) at core/ravl.c:430>:
                                                                        ravl_slot_opposite() <enum ravl_slot_type ravl_slot_opposite (enum ravl_slot_type t) at core/ravl.c:184>:
                                                                            ASSERTne()
                                                        ravl_data() <void *ravl_data (struct ravl_node *node) at core/ravl.c:571>:
                                                            memcpy()
                                                        memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                                            memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                                                heap_get_chunk_hdr()
                                                            memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                                                heap_get_chunk_hdr()
                                                                FATAL()
                                                        recycler_element_new() <struct recycler_element recycler_element_new (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/recycler.c:122>:
                                                            SUPPRESS_UNUSED()
                                                            util_mutex_lock()
                                                            util_mutex_unlock()
                                                        ASSERT()
                                                        util_fetch_and_sub64()
                                                        MIN()
                                                        ravl_remove() <void ravl_remove (struct ravl *ravl, struct ravl_node *n) at core/ravl.c:545> (R):
                                                            LOG()
                                                            ravl_node_successor() <struct ravl_node *ravl_node_successor (struct ravl_node *n) at core/ravl.c:465>:
                                                                ravl_node_cessor() <struct ravl_node *ravl_node_cessor (struct ravl_node *n, enum ravl_slot_type t) at core/ravl.c:443>:
                                                                    ravl_node_type_most() <struct ravl_node *ravl_node_type_most (struct ravl_node *n, enum ravl_slot_type t) at core/ravl.c:430>:
                                                                    ravl_slot_opposite() <enum ravl_slot_type ravl_slot_opposite (enum ravl_slot_type t) at core/ravl.c:184>:
                                                                        ASSERTne()
                                                            memcpy()
                                                            ravl_remove() <void ravl_remove (struct ravl *ravl, struct ravl_node *n) at core/ravl.c:545> (recursive: see 8597)
                                                            ravl_node_ref() <struct ravl_node **ravl_node_ref (struct ravl *ravl, struct ravl_node *n) at core/ravl.c:223>:
                                                                ravl_node_slot_type() <enum ravl_slot_type ravl_node_slot_type (struct ravl_node *n) at core/ravl.c:196>:
                                                            Free() <Free_func Free at core/alloc.c:91>
                                                        VEC_PUSH_BACK()
                                                        VEC_FOREACH_BY_PTR()
                                                        ravl_emplace_copy() <int ravl_emplace_copy (struct ravl *ravl, const void *data) at core/ravl.c:384>:
                                                            ravl_emplace() <int ravl_emplace (struct ravl *ravl, ravl_constr constr, const void *arg) at core/ravl.c:393>:
                                                                LOG()
                                                                ravl_new_node() <struct ravl_node *ravl_new_node (struct ravl *ravl, ravl_constr constr, const void *arg) at core/ravl.c:161>:
                                                                    Malloc()
                                                                    ERR()
                                                                    ravl_node_insert_constructor() <void ravl_node_insert_constructor (void *data, size_t data_size, const void *arg) at core/ravl.c:139>:
                                                                        SUPPRESS_UNUSED()
                                                                        memcpy()
                                                                ravl_data() <void *ravl_data (struct ravl_node *node) at core/ravl.c:571>:
                                                                    memcpy()
                                                                ravl_balance() <void ravl_balance (struct ravl *ravl, struct ravl_node *n) at core/ravl.c:337>:
                                                                    ravl_node_is() <int ravl_node_is (struct ravl_node *n, int i, int j) at core/ravl.c:306>:
                                                                        ravl_node_is_i_j() <int ravl_node_is_i_j (struct ravl_node *n, int i, int j) at core/ravl.c:296>:
                                                                            ravl_node_rank_difference_parent() <int ravl_node_rank_difference_parent (struct ravl_node *p, struct ravl_node *n) at core/ravl.c:275>:
                                                                                ravl_node_rank() <int ravl_node_rank (struct ravl_node *n) at core/ravl.c:261>:
                                                                    ravl_node_promote() <void ravl_node_promote (struct ravl_node *n) at core/ravl.c:315>
                                                                    ravl_node_sibling() <struct ravl_node *ravl_node_sibling (struct ravl_node *n) at core/ravl.c:209>:
                                                                        ravl_node_slot_type() <enum ravl_slot_type ravl_node_slot_type (struct ravl_node *n) at core/ravl.c:196>:
                                                                    ravl_node_rank_difference() <int ravl_node_rank_difference (struct ravl_node *n) at core/ravl.c:287>:
                                                                        ravl_node_rank_difference_parent() <int ravl_node_rank_difference_parent (struct ravl_node *p, struct ravl_node *n) at core/ravl.c:275>:
                                                                            ravl_node_rank() <int ravl_node_rank (struct ravl_node *n) at core/ravl.c:261>:
                                                                    ravl_node_rank_difference_parent() <int ravl_node_rank_difference_parent (struct ravl_node *p, struct ravl_node *n) at core/ravl.c:275>:
                                                                        ravl_node_rank() <int ravl_node_rank (struct ravl_node *n) at core/ravl.c:261>:
                                                                    ravl_slot_opposite() <enum ravl_slot_type ravl_slot_opposite (enum ravl_slot_type t) at core/ravl.c:184>:
                                                                        ASSERTne()
                                                                    ravl_node_slot_type() <enum ravl_slot_type ravl_node_slot_type (struct ravl_node *n) at core/ravl.c:196>:
                                                                    ravl_rotate() <void ravl_rotate (struct ravl *ravl, struct ravl_node *n) at core/ravl.c:237>:
                                                                        ASSERTne()
                                                                        ravl_node_ref() <struct ravl_node **ravl_node_ref (struct ravl *ravl, struct ravl_node *n) at core/ravl.c:223>:
                                                                            ravl_node_slot_type() <enum ravl_slot_type ravl_node_slot_type (struct ravl_node *n) at core/ravl.c:196>:
                                                                        ravl_node_slot_type() <enum ravl_slot_type ravl_node_slot_type (struct ravl_node *n) at core/ravl.c:196>:
                                                                        ravl_slot_opposite() <enum ravl_slot_type ravl_slot_opposite (enum ravl_slot_type t) at core/ravl.c:184>:
                                                                            ASSERTne()
                                                                    ravl_node_demote() <void ravl_node_demote (struct ravl_node *n) at core/ravl.c:324>:
                                                                        ASSERT()
                                                                Free() <Free_func Free at core/alloc.c:91>
                                                            ravl_node_copy_constructor() <void ravl_node_copy_constructor (void *data, size_t data_size, const void *arg) at core/ravl.c:152>:
                                                                memcpy()
                                                        VEC_CLEAR()
                                                        util_mutex_unlock()
                                                    VEC_SIZE()
                                                    heap_bucket_acquire() <struct bucket *heap_bucket_acquire (struct palloc_heap *heap, uint8_t class_id, uint16_t arena_id) at libpmemobj/heap.c:470>:
                                                        out() <void out (const char *fmt, ...) at core/out.c:480>:
                                                            va_start()
                                                            out_common() <} void out_common (const char *file, int line, const char *func, int level, const char *suffix, const char *fmt, va_list ap) at core/out.c:334>
                                                            va_end()
                                                        heap_thread_arena() <struct arena *heap_thread_arena (struct palloc_heap *heap) at libpmemobj/heap.c:414>:
                                                            os_tls_get() <void *os_tls_get (os_tls_key_t key) at core/os_thread_posix.c:62>:
                                                                pthread_getspecific()
                                                            heap_thread_arena_assign() <struct arena *heap_thread_arena_assign (struct palloc_heap *heap) at libpmemobj/heap.c:381>:
                                                                util_mutex_lock()
                                                                ASSERTne()
                                                                VEC_SIZE()
                                                                VEC_FOREACH()
                                                                LOG()
                                                                heap_arena_thread_attach() <void heap_arena_thread_attach (struct palloc_heap *heap, struct arena *a) at libpmemobj/heap.c:249>:
                                                                    ASSERTeq()
                                                                    os_tls_get() <void *os_tls_get (os_tls_key_t key) at core/os_thread_posix.c:62>:
                                                                        pthread_getspecific()
                                                                    heap_arena_thread_detach() <void heap_arena_thread_detach (struct arena *a) at libpmemobj/heap.c:232>:
                                                                        util_fetch_and_sub64()
                                                                    ASSERTne()
                                                                    util_fetch_and_add64()
                                                                    os_tls_set() <int os_tls_set (os_tls_key_t key, const void *value) at core/os_thread_posix.c:53>:
                                                                        pthread_setspecific()
                                                                util_mutex_unlock()
                                                            heap_global_arena_assign() <struct arena *heap_global_arena_assign (struct palloc_heap *heap) at libpmemobj/heap.c:348>:
                                                                util_mutex_lock()
                                                                ASSERTne()
                                                                VEC_SIZE()
                                                                VEC_FOREACH()
                                                                LOG()
                                                                util_mutex_unlock()
                                                            ASSERT()
                                                            ASSERTne()
                                                        ASSERTne()
                                                        VEC_ARR()
                                                        bucket_acquire() <struct bucket *bucket_acquire (struct bucket_locked *b) at libpmemobj/bucket.c:117>:
                                                            util_mutex_lock()
                                                    ASSERT()
                                                    VEC_FOREACH_BY_PTR()
                                                    heap_run_into_free_chunk() <void heap_run_into_free_chunk (struct palloc_heap *heap, struct bucket *bucket, struct memory_block *m) at libpmemobj/heap.c:697>:
                                                        heap_get_chunk_hdr()
                                                        STATS_SUB()
                                                        util_mutex_lock()
                                                        memblock_huge_init() <struct memory_block memblock_huge_init (struct palloc_heap *heap, uint32_t chunk_id, uint32_t zone_id, uint32_t size_idx) at libpmemobj/memblock.c:1329>:
                                                            heap_get_chunk_hdr()
                                                            VALGRIND_DO_MAKE_MEM_UNDEFINED()
                                                            VALGRIND_ANNOTATE_NEW_MEMORY()
                                                            chunk_get_chunk_hdr_value() <uint64_t chunk_get_chunk_hdr_value (uint16_t type, uint16_t flags, uint32_t size_idx) at libpmemobj/memblock.c:604>:
                                                                COMPILE_ERROR_ON()
                                                                memcpy()
                                                            util_atomic_store_explicit64()
                                                            pmemops_persist()
                                                            huge_write_footer() <void huge_write_footer (struct chunk_header *hdr, uint32_t size_idx) at libpmemobj/memblock.c:1166>:
                                                                VALGRIND_DO_MAKE_MEM_UNDEFINED()
                                                                VALGRIND_SET_CLEAN()
                                                            memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                                                memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                                                    heap_get_chunk_hdr()
                                                                memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                                                    heap_get_chunk_hdr()
                                                                    FATAL()
                                                        heap_free_chunk_reuse() <int heap_free_chunk_reuse (struct palloc_heap *heap, struct bucket *bucket, struct memory_block *m) at libpmemobj/heap.c:674>:
                                                            heap_coalesce_huge() <struct memory_block heap_coalesce_huge (struct palloc_heap *heap, struct bucket *b, const struct memory_block *m) at libpmemobj/heap.c:650>:
                                                                heap_get_adjacent_free_block() <int heap_get_adjacent_free_block (struct palloc_heap *heap, const struct memory_block *in, struct memory_block *out, int prev) at libpmemobj/heap.c:582>:
                                                                    ZID_TO_ZONE()
                                                                    memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                                                        memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                                                            heap_get_chunk_hdr()
                                                                        memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                                                            heap_get_chunk_hdr()
                                                                            FATAL()
                                                                bucket_remove_block() <int bucket_remove_block (struct bucket *b, const struct memory_block *m) at libpmemobj/bucket.c:178>
                                                                heap_coalesce() <struct memory_block heap_coalesce (struct palloc_heap *heap, const struct memory_block *blocks[], int n) at libpmemobj/heap.c:621>:
                                                                    ASSERTne()
                                                                    memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                                                        memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                                                            heap_get_chunk_hdr()
                                                                        memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                                                            heap_get_chunk_hdr()
                                                                            FATAL()
                                                            bucket_insert_block() <int bucket_insert_block (struct bucket *b, const struct memory_block *m) at libpmemobj/bucket.c:161>:
                                                                VALGRIND_DO_MAKE_MEM_NOACCESS()
                                                                VALGRIND_ANNOTATE_NEW_MEMORY()
                                                        util_mutex_unlock()
                                                    heap_bucket_release() <void heap_bucket_release (struct bucket *b) at libpmemobj/heap.c:498>:
                                                        bucket_release() <void bucket_release (struct bucket *b) at libpmemobj/bucket.c:127>:
                                                            util_mutex_unlock()
                                                    VEC_DELETE()
                                            out() <void out (const char *fmt, ...) at core/out.c:480>:
                                                va_start()
                                                out_common() <} void out_common (const char *file, int line, const char *func, int level, const char *suffix, const char *fmt, va_list ap) at core/out.c:334>
                                                va_end()
                                            heap_bucket_acquire() <struct bucket *heap_bucket_acquire (struct palloc_heap *heap, uint8_t class_id, uint16_t arena_id) at libpmemobj/heap.c:470>:
                                                out() <void out (const char *fmt, ...) at core/out.c:480>:
                                                    va_start()
                                                    out_common() <} void out_common (const char *file, int line, const char *func, int level, const char *suffix, const char *fmt, va_list ap) at core/out.c:334>
                                                    va_end()
                                                heap_thread_arena() <struct arena *heap_thread_arena (struct palloc_heap *heap) at libpmemobj/heap.c:414>:
                                                    os_tls_get() <void *os_tls_get (os_tls_key_t key) at core/os_thread_posix.c:62>:
                                                        pthread_getspecific()
                                                    heap_thread_arena_assign() <struct arena *heap_thread_arena_assign (struct palloc_heap *heap) at libpmemobj/heap.c:381>:
                                                        util_mutex_lock()
                                                        ASSERTne()
                                                        VEC_SIZE()
                                                        VEC_FOREACH()
                                                        LOG()
                                                        heap_arena_thread_attach() <void heap_arena_thread_attach (struct palloc_heap *heap, struct arena *a) at libpmemobj/heap.c:249>:
                                                            ASSERTeq()
                                                            os_tls_get() <void *os_tls_get (os_tls_key_t key) at core/os_thread_posix.c:62>:
                                                                pthread_getspecific()
                                                            heap_arena_thread_detach() <void heap_arena_thread_detach (struct arena *a) at libpmemobj/heap.c:232>:
                                                                util_fetch_and_sub64()
                                                            ASSERTne()
                                                            util_fetch_and_add64()
                                                            os_tls_set() <int os_tls_set (os_tls_key_t key, const void *value) at core/os_thread_posix.c:53>:
                                                                pthread_setspecific()
                                                        util_mutex_unlock()
                                                    heap_global_arena_assign() <struct arena *heap_global_arena_assign (struct palloc_heap *heap) at libpmemobj/heap.c:348>:
                                                        util_mutex_lock()
                                                        ASSERTne()
                                                        VEC_SIZE()
                                                        VEC_FOREACH()
                                                        LOG()
                                                        util_mutex_unlock()
                                                    ASSERT()
                                                    ASSERTne()
                                                ASSERTne()
                                                VEC_ARR()
                                                bucket_acquire() <struct bucket *bucket_acquire (struct bucket_locked *b) at libpmemobj/bucket.c:117>:
                                                    util_mutex_lock()
                                            heap_populate_bucket() <int heap_populate_bucket (struct palloc_heap *heap, struct bucket *bucket) at libpmemobj/heap.c:850>:
                                                util_atomic_store_explicit32()
                                                ZID_TO_ZONE()
                                                VALGRIND_ADD_TO_GLOBAL_TX_IGNORE()
                                                heap_zone_init() <void heap_zone_init (struct palloc_heap *heap, uint32_t zone_id, uint32_t first_chunk_id) at libpmemobj/heap.c:559>:
                                                    ZID_TO_ZONE()
                                                    zone_calc_size_idx() <uint32_t zone_calc_size_idx (uint32_t zone_id, unsigned max_zone, size_t heap_size) at libpmemobj/heap.c:533>:
                                                        ASSERT()
                                                    ASSERT()
                                                    memblock_huge_init() <struct memory_block memblock_huge_init (struct palloc_heap *heap, uint32_t chunk_id, uint32_t zone_id, uint32_t size_idx) at libpmemobj/memblock.c:1329>:
                                                        heap_get_chunk_hdr()
                                                        VALGRIND_DO_MAKE_MEM_UNDEFINED()
                                                        VALGRIND_ANNOTATE_NEW_MEMORY()
                                                        chunk_get_chunk_hdr_value() <uint64_t chunk_get_chunk_hdr_value (uint16_t type, uint16_t flags, uint32_t size_idx) at libpmemobj/memblock.c:604>:
                                                            COMPILE_ERROR_ON()
                                                            memcpy()
                                                        util_atomic_store_explicit64()
                                                        pmemops_persist()
                                                        huge_write_footer() <void huge_write_footer (struct chunk_header *hdr, uint32_t size_idx) at libpmemobj/memblock.c:1166>:
                                                            VALGRIND_DO_MAKE_MEM_UNDEFINED()
                                                            VALGRIND_SET_CLEAN()
                                                        memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                                            memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                                                heap_get_chunk_hdr()
                                                            memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                                                heap_get_chunk_hdr()
                                                                FATAL()
                                                    pmemops_persist()
                                                heap_reclaim_zone_garbage() <void heap_reclaim_zone_garbage (struct palloc_heap *heap, struct bucket *bucket, uint32_t zone_id) at libpmemobj/heap.c:775>:
                                                    ZID_TO_ZONE()
                                                    ASSERT()
                                                    memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                                        memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                                            heap_get_chunk_hdr()
                                                        memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                                            heap_get_chunk_hdr()
                                                            FATAL()
                                                    heap_reclaim_run() <int heap_reclaim_run (struct palloc_heap *heap, struct memory_block *m, int startup) at libpmemobj/heap.c:733>:
                                                        heap_get_chunk_run()
                                                        heap_get_chunk_hdr()
                                                        alloc_class_by_run() <struct alloc_class *alloc_class_by_run (struct alloc_class_collection *ac, size_t unit_size, uint16_t flags, uint32_t size_idx) at libpmemobj/alloc_class.c:594>:
                                                            SIZE_TO_CLASS_MAP_INDEX()
                                                            ASSERT()
                                                            critnib_get() <void *critnib_get (struct critnib *c, uint64_t key) at libpmemobj/critnib.c:515>:
                                                                load() <void load (void *src, void *dst) at libpmemobj/critnib.c:130>:
                                                                    util_atomic_load_explicit64()
                                                                is_leaf() <inline bool is_leaf (struct critnib_node *n) at libpmemobj/critnib.c:150>:
                                                                slice_index() <inline unsigned slice_index (uint64_t key, sh_t shift) at libpmemobj/critnib.c:178>:
                                                                to_leaf() <inline struct critnib_leaf *to_leaf (struct critnib_node *n) at libpmemobj/critnib.c:159>:
                                                            RUN_CLASS_KEY_PACK()
                                                        recycler_element_new() <struct recycler_element recycler_element_new (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/recycler.c:122>:
                                                            SUPPRESS_UNUSED()
                                                            util_mutex_lock()
                                                            util_mutex_unlock()
                                                        ASSERTeq()
                                                        STATS_INC()
                                                        heap_get_recycler() <struct recycler *heap_get_recycler (struct palloc_heap *heap, size_t id, size_t nallocs) at libpmemobj/heap.c:106> (R):
                                                            util_atomic_load_explicit64()
                                                            recycler_new() <struct recycler *recycler_new (struct palloc_heap *heap, size_t nallocs, size_t *peak_arenas) at libpmemobj/recycler.c:74>:
                                                                Malloc()
                                                                ravl_new_sized() <struct ravl *ravl_new_sized (ravl_compare *compare, size_t data_size) at core/ravl.c:45>:
                                                                    Malloc()
                                                                    ERR()
                                                                recycler_element_cmp() <int recycler_element_cmp (const void *lhs, const void *rhs) at libpmemobj/recycler.c:23>:
                                                                memset()
                                                                VEC_INIT()
                                                                util_mutex_init()
                                                                Free() <Free_func Free at core/alloc.c:91>
                                                            util_bool_compare_and_swap64()
                                                            recycler_delete() <void recycler_delete (struct recycler *r) at libpmemobj/recycler.c:107>:
                                                                VEC_DELETE()
                                                                util_mutex_destroy()
                                                                ravl_delete() <void ravl_delete (struct ravl *ravl) at core/ravl.c:112>:
                                                                    ravl_delete_cb() <void ravl_delete_cb (struct ravl *ravl, ravl_cb cb, void *arg) at core/ravl.c:102>:
                                                                        ravl_foreach_node() <void ravl_foreach_node (struct ravl_node *n, ravl_cb cb, void *arg, int free_node) at core/ravl.c:74> (R):
                                                                            ravl_foreach_node() <void ravl_foreach_node (struct ravl_node *n, ravl_cb cb, void *arg, int free_node) at core/ravl.c:74> (recursive: see 8858)
                                                                            Free() <Free_func Free at core/alloc.c:91>
                                                                        Free() <Free_func Free at core/alloc.c:91>
                                                                Free() <Free_func Free at core/alloc.c:91>
                                                            heap_get_recycler() <struct recycler *heap_get_recycler (struct palloc_heap *heap, size_t id, size_t nallocs) at libpmemobj/heap.c:106> (recursive: see 8840)
                                                        recycler_put() <int recycler_put (struct recycler *r, struct recycler_element element) at libpmemobj/recycler.c:154>:
                                                            util_mutex_lock()
                                                            ravl_emplace_copy() <int ravl_emplace_copy (struct ravl *ravl, const void *data) at core/ravl.c:384>:
                                                                ravl_emplace() <int ravl_emplace (struct ravl *ravl, ravl_constr constr, const void *arg) at core/ravl.c:393>:
                                                                    LOG()
                                                                    ravl_new_node() <struct ravl_node *ravl_new_node (struct ravl *ravl, ravl_constr constr, const void *arg) at core/ravl.c:161>:
                                                                        Malloc()
                                                                        ERR()
                                                                        ravl_node_insert_constructor() <void ravl_node_insert_constructor (void *data, size_t data_size, const void *arg) at core/ravl.c:139>:
                                                                            SUPPRESS_UNUSED()
                                                                            memcpy()
                                                                    ravl_data() <void *ravl_data (struct ravl_node *node) at core/ravl.c:571>:
                                                                        memcpy()
                                                                    ravl_balance() <void ravl_balance (struct ravl *ravl, struct ravl_node *n) at core/ravl.c:337>:
                                                                        ravl_node_is() <int ravl_node_is (struct ravl_node *n, int i, int j) at core/ravl.c:306>:
                                                                            ravl_node_is_i_j() <int ravl_node_is_i_j (struct ravl_node *n, int i, int j) at core/ravl.c:296>:
                                                                                ravl_node_rank_difference_parent() <int ravl_node_rank_difference_parent (struct ravl_node *p, struct ravl_node *n) at core/ravl.c:275>:
                                                                                    ravl_node_rank() <int ravl_node_rank (struct ravl_node *n) at core/ravl.c:261>:
                                                                        ravl_node_promote() <void ravl_node_promote (struct ravl_node *n) at core/ravl.c:315>
                                                                        ravl_node_sibling() <struct ravl_node *ravl_node_sibling (struct ravl_node *n) at core/ravl.c:209>:
                                                                            ravl_node_slot_type() <enum ravl_slot_type ravl_node_slot_type (struct ravl_node *n) at core/ravl.c:196>:
                                                                        ravl_node_rank_difference() <int ravl_node_rank_difference (struct ravl_node *n) at core/ravl.c:287>:
                                                                            ravl_node_rank_difference_parent() <int ravl_node_rank_difference_parent (struct ravl_node *p, struct ravl_node *n) at core/ravl.c:275>:
                                                                                ravl_node_rank() <int ravl_node_rank (struct ravl_node *n) at core/ravl.c:261>:
                                                                        ravl_node_rank_difference_parent() <int ravl_node_rank_difference_parent (struct ravl_node *p, struct ravl_node *n) at core/ravl.c:275>:
                                                                            ravl_node_rank() <int ravl_node_rank (struct ravl_node *n) at core/ravl.c:261>:
                                                                        ravl_slot_opposite() <enum ravl_slot_type ravl_slot_opposite (enum ravl_slot_type t) at core/ravl.c:184>:
                                                                            ASSERTne()
                                                                        ravl_node_slot_type() <enum ravl_slot_type ravl_node_slot_type (struct ravl_node *n) at core/ravl.c:196>:
                                                                        ravl_rotate() <void ravl_rotate (struct ravl *ravl, struct ravl_node *n) at core/ravl.c:237>:
                                                                            ASSERTne()
                                                                            ravl_node_ref() <struct ravl_node **ravl_node_ref (struct ravl *ravl, struct ravl_node *n) at core/ravl.c:223>:
                                                                                ravl_node_slot_type() <enum ravl_slot_type ravl_node_slot_type (struct ravl_node *n) at core/ravl.c:196>:
                                                                            ravl_node_slot_type() <enum ravl_slot_type ravl_node_slot_type (struct ravl_node *n) at core/ravl.c:196>:
                                                                            ravl_slot_opposite() <enum ravl_slot_type ravl_slot_opposite (enum ravl_slot_type t) at core/ravl.c:184>:
                                                                                ASSERTne()
                                                                        ravl_node_demote() <void ravl_node_demote (struct ravl_node *n) at core/ravl.c:324>:
                                                                            ASSERT()
                                                                    Free() <Free_func Free at core/alloc.c:91>
                                                                ravl_node_copy_constructor() <void ravl_node_copy_constructor (void *data, size_t data_size, const void *arg) at core/ravl.c:152>:
                                                                    memcpy()
                                                            util_mutex_unlock()
                                                        ERR()
                                                    heap_run_into_free_chunk() <void heap_run_into_free_chunk (struct palloc_heap *heap, struct bucket *bucket, struct memory_block *m) at libpmemobj/heap.c:697>:
                                                        heap_get_chunk_hdr()
                                                        STATS_SUB()
                                                        util_mutex_lock()
                                                        memblock_huge_init() <struct memory_block memblock_huge_init (struct palloc_heap *heap, uint32_t chunk_id, uint32_t zone_id, uint32_t size_idx) at libpmemobj/memblock.c:1329>:
                                                            heap_get_chunk_hdr()
                                                            VALGRIND_DO_MAKE_MEM_UNDEFINED()
                                                            VALGRIND_ANNOTATE_NEW_MEMORY()
                                                            chunk_get_chunk_hdr_value() <uint64_t chunk_get_chunk_hdr_value (uint16_t type, uint16_t flags, uint32_t size_idx) at libpmemobj/memblock.c:604>:
                                                                COMPILE_ERROR_ON()
                                                                memcpy()
                                                            util_atomic_store_explicit64()
                                                            pmemops_persist()
                                                            huge_write_footer() <void huge_write_footer (struct chunk_header *hdr, uint32_t size_idx) at libpmemobj/memblock.c:1166>:
                                                                VALGRIND_DO_MAKE_MEM_UNDEFINED()
                                                                VALGRIND_SET_CLEAN()
                                                            memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                                                memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                                                    heap_get_chunk_hdr()
                                                                memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                                                    heap_get_chunk_hdr()
                                                                    FATAL()
                                                        heap_free_chunk_reuse() <int heap_free_chunk_reuse (struct palloc_heap *heap, struct bucket *bucket, struct memory_block *m) at libpmemobj/heap.c:674>:
                                                            heap_coalesce_huge() <struct memory_block heap_coalesce_huge (struct palloc_heap *heap, struct bucket *b, const struct memory_block *m) at libpmemobj/heap.c:650>:
                                                                heap_get_adjacent_free_block() <int heap_get_adjacent_free_block (struct palloc_heap *heap, const struct memory_block *in, struct memory_block *out, int prev) at libpmemobj/heap.c:582>:
                                                                    ZID_TO_ZONE()
                                                                    memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                                                        memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                                                            heap_get_chunk_hdr()
                                                                        memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                                                            heap_get_chunk_hdr()
                                                                            FATAL()
                                                                bucket_remove_block() <int bucket_remove_block (struct bucket *b, const struct memory_block *m) at libpmemobj/bucket.c:178>
                                                                heap_coalesce() <struct memory_block heap_coalesce (struct palloc_heap *heap, const struct memory_block *blocks[], int n) at libpmemobj/heap.c:621>:
                                                                    ASSERTne()
                                                                    memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                                                        memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                                                            heap_get_chunk_hdr()
                                                                        memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                                                            heap_get_chunk_hdr()
                                                                            FATAL()
                                                            bucket_insert_block() <int bucket_insert_block (struct bucket *b, const struct memory_block *m) at libpmemobj/bucket.c:161>:
                                                                VALGRIND_DO_MAKE_MEM_NOACCESS()
                                                                VALGRIND_ANNOTATE_NEW_MEMORY()
                                                        util_mutex_unlock()
                                                    heap_free_chunk_reuse() <int heap_free_chunk_reuse (struct palloc_heap *heap, struct bucket *bucket, struct memory_block *m) at libpmemobj/heap.c:674>:
                                                        heap_coalesce_huge() <struct memory_block heap_coalesce_huge (struct palloc_heap *heap, struct bucket *b, const struct memory_block *m) at libpmemobj/heap.c:650>:
                                                            heap_get_adjacent_free_block() <int heap_get_adjacent_free_block (struct palloc_heap *heap, const struct memory_block *in, struct memory_block *out, int prev) at libpmemobj/heap.c:582>:
                                                                ZID_TO_ZONE()
                                                                memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                                                    memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                                                        heap_get_chunk_hdr()
                                                                    memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                                                        heap_get_chunk_hdr()
                                                                        FATAL()
                                                            bucket_remove_block() <int bucket_remove_block (struct bucket *b, const struct memory_block *m) at libpmemobj/bucket.c:178>
                                                            heap_coalesce() <struct memory_block heap_coalesce (struct palloc_heap *heap, const struct memory_block *blocks[], int n) at libpmemobj/heap.c:621>:
                                                                ASSERTne()
                                                                memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                                                    memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                                                        heap_get_chunk_hdr()
                                                                    memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                                                        heap_get_chunk_hdr()
                                                                        FATAL()
                                                        bucket_insert_block() <int bucket_insert_block (struct bucket *b, const struct memory_block *m) at libpmemobj/bucket.c:161>:
                                                            VALGRIND_DO_MAKE_MEM_NOACCESS()
                                                            VALGRIND_ANNOTATE_NEW_MEMORY()
                                            heap_bucket_release() <void heap_bucket_release (struct bucket *b) at libpmemobj/heap.c:498>:
                                                bucket_release() <void bucket_release (struct bucket *b) at libpmemobj/bucket.c:127>:
                                                    util_mutex_unlock()
                                            heap_get_bestfit_block() <int heap_get_bestfit_block (struct palloc_heap *heap, struct bucket *b, struct memory_block *m) at libpmemobj/heap.c:1210> (recursive: see 7573)
                                            heap_run_create() <int heap_run_create (struct palloc_heap *heap, struct bucket *b, struct memory_block *m) at libpmemobj/heap.c:1065>:
                                                bucket_alloc_class() <struct alloc_class *bucket_alloc_class (struct bucket *b) at libpmemobj/bucket.c:152>
                                                memblock_run_init() <struct memory_block memblock_run_init (struct palloc_heap *heap, uint32_t chunk_id, uint32_t zone_id, struct run_descriptor *rdsc) at libpmemobj/memblock.c:1361>:
                                                    ASSERTne()
                                                    ZID_TO_ZONE()
                                                    heap_get_chunk_run()
                                                    SIZEOF_RUN()
                                                    VALGRIND_DO_MAKE_MEM_UNDEFINED()
                                                    VALGRIND_ADD_TO_TX()
                                                    memset()
                                                    VALGRIND_REMOVE_FROM_TX()
                                                    pmemops_flush()
                                                    VALGRIND_ANNOTATE_NEW_MEMORY()
                                                    pmemops_persist()
                                                    ASSERT()
                                                    chunk_get_chunk_hdr_value() <uint64_t chunk_get_chunk_hdr_value (uint16_t type, uint16_t flags, uint32_t size_idx) at libpmemobj/memblock.c:604>:
                                                        COMPILE_ERROR_ON()
                                                        memcpy()
                                                    util_atomic_store_explicit64()
                                                    memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                                        memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                                            heap_get_chunk_hdr()
                                                        memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                                            heap_get_chunk_hdr()
                                                            FATAL()
                                                bucket_attach_run() <int bucket_attach_run (struct bucket *b, const struct memory_block *m) at libpmemobj/bucket.c:206>:
                                                    util_mutex_lock()
                                                    bucket_memblock_insert_block() <int bucket_memblock_insert_block (const struct memory_block *m, void *b) at libpmemobj/bucket.c:197>:
                                                        bucket_insert_block() <int bucket_insert_block (struct bucket *b, const struct memory_block *m) at libpmemobj/bucket.c:161>:
                                                            VALGRIND_DO_MAKE_MEM_NOACCESS()
                                                            VALGRIND_ANNOTATE_NEW_MEMORY()
                                                    util_mutex_unlock()
                                                    util_fetch_and_add64()
                                                STATS_INC()
                                        ASSERT()
                                        heap_split_block() <void heap_split_block (struct palloc_heap *heap, struct bucket *b, struct memory_block *m, uint32_t units) at libpmemobj/heap.c:1172>:
                                            bucket_alloc_class() <struct alloc_class *bucket_alloc_class (struct bucket *b) at libpmemobj/bucket.c:152>
                                            ASSERT()
                                            memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                                memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                                    heap_get_chunk_hdr()
                                                memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                                    heap_get_chunk_hdr()
                                                    FATAL()
                                            bucket_insert_block() <int bucket_insert_block (struct bucket *b, const struct memory_block *m) at libpmemobj/bucket.c:161>:
                                                VALGRIND_DO_MAKE_MEM_NOACCESS()
                                                VALGRIND_ANNOTATE_NEW_MEMORY()
                                            LOG()
                                            memblock_huge_init() <struct memory_block memblock_huge_init (struct palloc_heap *heap, uint32_t chunk_id, uint32_t zone_id, uint32_t size_idx) at libpmemobj/memblock.c:1329>:
                                                heap_get_chunk_hdr()
                                                VALGRIND_DO_MAKE_MEM_UNDEFINED()
                                                VALGRIND_ANNOTATE_NEW_MEMORY()
                                                chunk_get_chunk_hdr_value() <uint64_t chunk_get_chunk_hdr_value (uint16_t type, uint16_t flags, uint32_t size_idx) at libpmemobj/memblock.c:604>:
                                                    COMPILE_ERROR_ON()
                                                    memcpy()
                                                util_atomic_store_explicit64()
                                                pmemops_persist()
                                                huge_write_footer() <void huge_write_footer (struct chunk_header *hdr, uint32_t size_idx) at libpmemobj/memblock.c:1166>:
                                                    VALGRIND_DO_MAKE_MEM_UNDEFINED()
                                                    VALGRIND_SET_CLEAN()
                                                memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                                    memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                                        heap_get_chunk_hdr()
                                                    memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                                        heap_get_chunk_hdr()
                                                        FATAL()
                                    alloc_prep_block() <int alloc_prep_block (struct palloc_heap *heap, const struct memory_block *m, palloc_constr constructor, void *arg, uint64_t extra_field, uint16_t object_flags, struct pobj_action_internal *out) at libpmemobj/palloc.c:112>:
                                        VALGRIND_DO_MEMPOOL_ALLOC()
                                        VALGRIND_DO_MAKE_MEM_UNDEFINED()
                                        VALGRIND_ANNOTATE_NEW_MEMORY()
                                        unlikely()
                                        pmemops_memset()
                                        VALGRIND_DO_MEMPOOL_FREE()
                                        HEAP_PTR_TO_OFF()
                                    bucket_insert_block() <int bucket_insert_block (struct bucket *b, const struct memory_block *m) at libpmemobj/bucket.c:161>:
                                        VALGRIND_DO_MAKE_MEM_NOACCESS()
                                        VALGRIND_ANNOTATE_NEW_MEMORY()
                                    bucket_active_block() <struct memory_block_reserved *bucket_active_block (struct bucket *b) at libpmemobj/bucket.c:265>:
                                    util_fetch_and_add64()
                                    heap_bucket_release() <void heap_bucket_release (struct bucket *b) at libpmemobj/heap.c:498>:
                                        bucket_release() <void bucket_release (struct bucket *b) at libpmemobj/bucket.c:127>:
                                            util_mutex_unlock()
                                VALGRIND_ADD_TO_TX()
                                HEAP_OFF_TO_PTR()
                                pmemops_memcpy()
                                VALGRIND_REMOVE_FROM_TX()
                                operation_add_entry() <int operation_add_entry (struct operation_context *ctx, void *ptr, uint64_t value, ulog_operation_type type) at libpmemobj/memops.c:411>:
                                    OBJ_OFF_IS_VALID()
                                    operation_add_typed_entry() <int operation_add_typed_entry (struct operation_context *ctx, void *ptr, uint64_t value, ulog_operation_type type, enum operation_log_type log_type) at libpmemobj/memops.c:362>:
                                        Realloc()
                                        SIZEOF_ULOG()
                                        VECQ_CLEAR()
                                        operation_try_merge_entry() <int operation_try_merge_entry (struct operation_context *ctx, void *ptr, uint64_t value, ulog_operation_type type) at libpmemobj/memops.c:318>:
                                            OBJ_PTR_TO_OFF()
                                            VECQ_FOREACH_REVERSE()
                                            ulog_entry_offset() <uint64_t ulog_entry_offset (const struct ulog_entry_base *entry) at libpmemobj/ulog.c:68>:
                                            ulog_entry_type() <ulog_operation_type ulog_entry_type (const struct ulog_entry_base *entry) at libpmemobj/ulog.c:59>:
                                                ULOG_OPERATION_FROM_OFFSET()
                                            operation_merge() <inline void operation_merge (struct ulog_entry_base *entry, uint64_t value, ulog_operation_type type) at libpmemobj/memops.c:288>:
                                                ASSERT()
                                        ulog_entry_val_create() <struct ulog_entry_val *ulog_entry_val_create (struct ulog *ulog, size_t offset, uint64_t *dest, uint64_t value, ulog_operation_type type, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:372>:
                                            COMPILE_ERROR_ON()
                                            ULOG_OPERATION()
                                            pmemops_memcpy()
                                        operation_merge_entry_add() <void operation_merge_entry_add (struct operation_context *ctx, struct ulog_entry_val *entry) at libpmemobj/memops.c:344>:
                                            VECQ_SIZE()
                                            VECQ_DEQUEUE()
                                            VECQ_ENQUEUE()
                                            LOG()
                                        ulog_entry_size() <size_t ulog_entry_size (const struct ulog_entry_base *entry) at libpmemobj/ulog.c:77>:
                                            ulog_entry_type() <ulog_operation_type ulog_entry_type (const struct ulog_entry_base *entry) at libpmemobj/ulog.c:59>:
                                                ULOG_OPERATION_FROM_OFFSET()
                                            CACHELINE_ALIGN()
                                            ASSERT()
                                palloc_exec_actions() <void palloc_exec_actions (struct palloc_heap *heap, struct operation_context *ctx, struct pobj_action_internal *actv, size_t actvcnt) at libpmemobj/palloc.c:526>:
                                    qsort()
                                    palloc_action_compare() <int palloc_action_compare (const void *lhs, const void *rhs) at libpmemobj/palloc.c:507>:
                                    ASSERTeq()
                                    util_mutex_lock()
                                    pmemops_drain()
                                    operation_process() <void operation_process (struct operation_context *ctx) at libpmemobj/memops.c:776>:
                                        ulog_entry_type() <ulog_operation_type ulog_entry_type (const struct ulog_entry_base *entry) at libpmemobj/ulog.c:59>:
                                            ULOG_OPERATION_FROM_OFFSET()
                                        ulog_entry_apply() <void ulog_entry_apply (const struct ulog_entry_base *e, int persist, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:526>:
                                            ulog_entry_type() <ulog_operation_type ulog_entry_type (const struct ulog_entry_base *entry) at libpmemobj/ulog.c:59>:
                                                ULOG_OPERATION_FROM_OFFSET()
                                            ulog_entry_offset() <uint64_t ulog_entry_offset (const struct ulog_entry_base *entry) at libpmemobj/ulog.c:68>:
                                            f()
                                            VALGRIND_ADD_TO_TX()
                                            pmemops_memset()
                                            pmemops_memcpy()
                                            ASSERT()
                                            VALGRIND_REMOVE_FROM_TX()
                                        operation_process_persistent_redo() <void operation_process_persistent_redo (struct operation_context *ctx) at libpmemobj/memops.c:654>:
                                            ASSERTeq()
                                            ulog_store() <void ulog_store (struct ulog *dest, struct ulog *src, size_t nbytes, size_t ulog_base_nbytes, size_t ulog_total_capacity, struct ulog_next *next, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:288>:
                                                MIN()
                                                CACHELINE_ALIGN()
                                                ASSERT()
                                                ulog_by_offset() <struct ulog *ulog_by_offset (size_t offset, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:36>:
                                                    CACHELINE_ALIGN()
                                                VEC_ARR()
                                                ASSERTne()
                                                IS_CACHELINE_ALIGNED()
                                                VALGRIND_ADD_TO_TX()
                                                pmemops_memcpy()
                                                VALGRIND_REMOVE_FROM_TX()
                                                pmemops_drain()
                                                VEC_SIZE()
                                                VEC_FRONT()
                                                ulog_checksum() <int ulog_checksum (struct ulog *ulog, size_t ulog_base_bytes, int insert) at libpmemobj/ulog.c:275>:
                                                    util_checksum() <int util_checksum (void *addr, size_t len, uint64_t *csump, int insert, size_t skip_off) at core/util.c:178>:
                                                        util_checksum_compute() <uint64_t util_checksum_compute (void *addr, size_t len, uint64_t *csump, size_t skip_off) at core/util.c:134>:
                                                            abort()
                                                            le32toh()
                                                        htole64()
                                                    SIZEOF_ULOG()
                                                SIZEOF_ULOG()
                                            ulog_process() <void ulog_process (struct ulog *ulog, ulog_check_offset_fn check, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:786>:
                                                SUPPRESS_UNUSED()
                                                LOG()
                                                ulog_check() <int ulog_check (struct ulog *ulog, ulog_check_offset_fn check, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:881>:
                                                    LOG()
                                                    ulog_foreach_entry() <int ulog_foreach_entry (struct ulog *ulog, ulog_entry_cb cb, void *arg, const struct pmem_ops *ops) at libpmemobj/ulog.c:180>
                                                    ulog_check_entry() <int ulog_check_entry (struct ulog_entry_base *e, void *arg, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:862>:
                                                        ulog_entry_offset() <uint64_t ulog_entry_offset (const struct ulog_entry_base *entry) at libpmemobj/ulog.c:68>:
                                                        check()
                                                        LOG()
                                                ulog_foreach_entry() <int ulog_foreach_entry (struct ulog *ulog, ulog_entry_cb cb, void *arg, const struct pmem_ops *ops) at libpmemobj/ulog.c:180>
                                                ulog_process_entry() <int ulog_process_entry (struct ulog_entry_base *e, void *arg, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:591>:
                                                    SUPPRESS_UNUSED()
                                                    ulog_entry_apply() <void ulog_entry_apply (const struct ulog_entry_base *e, int persist, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:526>:
                                                        ulog_entry_type() <ulog_operation_type ulog_entry_type (const struct ulog_entry_base *entry) at libpmemobj/ulog.c:59>:
                                                            ULOG_OPERATION_FROM_OFFSET()
                                                        ulog_entry_offset() <uint64_t ulog_entry_offset (const struct ulog_entry_base *entry) at libpmemobj/ulog.c:68>:
                                                        f()
                                                        VALGRIND_ADD_TO_TX()
                                                        pmemops_memset()
                                                        pmemops_memcpy()
                                                        ASSERT()
                                                        VALGRIND_REMOVE_FROM_TX()
                                                pmemops_drain()
                                            ulog_clobber() <void ulog_clobber (struct ulog *dest, struct ulog_next *next, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:694>:
                                                memset()
                                                VEC_SIZE()
                                                VEC_FRONT()
                                                pmemops_memcpy()
                                        operation_process_persistent_undo() <void operation_process_persistent_undo (struct operation_context *ctx) at libpmemobj/memops.c:673>:
                                            ASSERTeq()
                                            ulog_process() <void ulog_process (struct ulog *ulog, ulog_check_offset_fn check, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:786>:
                                                SUPPRESS_UNUSED()
                                                LOG()
                                                ulog_check() <int ulog_check (struct ulog *ulog, ulog_check_offset_fn check, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:881>:
                                                    LOG()
                                                    ulog_foreach_entry() <int ulog_foreach_entry (struct ulog *ulog, ulog_entry_cb cb, void *arg, const struct pmem_ops *ops) at libpmemobj/ulog.c:180>
                                                    ulog_check_entry() <int ulog_check_entry (struct ulog_entry_base *e, void *arg, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:862>:
                                                        ulog_entry_offset() <uint64_t ulog_entry_offset (const struct ulog_entry_base *entry) at libpmemobj/ulog.c:68>:
                                                        check()
                                                        LOG()
                                                ulog_foreach_entry() <int ulog_foreach_entry (struct ulog *ulog, ulog_entry_cb cb, void *arg, const struct pmem_ops *ops) at libpmemobj/ulog.c:180>
                                                ulog_process_entry() <int ulog_process_entry (struct ulog_entry_base *e, void *arg, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:591>:
                                                    SUPPRESS_UNUSED()
                                                    ulog_entry_apply() <void ulog_entry_apply (const struct ulog_entry_base *e, int persist, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:526>:
                                                        ulog_entry_type() <ulog_operation_type ulog_entry_type (const struct ulog_entry_base *entry) at libpmemobj/ulog.c:59>:
                                                            ULOG_OPERATION_FROM_OFFSET()
                                                        ulog_entry_offset() <uint64_t ulog_entry_offset (const struct ulog_entry_base *entry) at libpmemobj/ulog.c:68>:
                                                        f()
                                                        VALGRIND_ADD_TO_TX()
                                                        pmemops_memset()
                                                        pmemops_memcpy()
                                                        ASSERT()
                                                        VALGRIND_REMOVE_FROM_TX()
                                                pmemops_drain()
                                        ulog_process() <void ulog_process (struct ulog *ulog, ulog_check_offset_fn check, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:786>:
                                            SUPPRESS_UNUSED()
                                            LOG()
                                            ulog_check() <int ulog_check (struct ulog *ulog, ulog_check_offset_fn check, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:881>:
                                                LOG()
                                                ulog_foreach_entry() <int ulog_foreach_entry (struct ulog *ulog, ulog_entry_cb cb, void *arg, const struct pmem_ops *ops) at libpmemobj/ulog.c:180>
                                                ulog_check_entry() <int ulog_check_entry (struct ulog_entry_base *e, void *arg, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:862>:
                                                    ulog_entry_offset() <uint64_t ulog_entry_offset (const struct ulog_entry_base *entry) at libpmemobj/ulog.c:68>:
                                                    check()
                                                    LOG()
                                            ulog_foreach_entry() <int ulog_foreach_entry (struct ulog *ulog, ulog_entry_cb cb, void *arg, const struct pmem_ops *ops) at libpmemobj/ulog.c:180>
                                            ulog_process_entry() <int ulog_process_entry (struct ulog_entry_base *e, void *arg, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:591>:
                                                SUPPRESS_UNUSED()
                                                ulog_entry_apply() <void ulog_entry_apply (const struct ulog_entry_base *e, int persist, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:526>:
                                                    ulog_entry_type() <ulog_operation_type ulog_entry_type (const struct ulog_entry_base *entry) at libpmemobj/ulog.c:59>:
                                                        ULOG_OPERATION_FROM_OFFSET()
                                                    ulog_entry_offset() <uint64_t ulog_entry_offset (const struct ulog_entry_base *entry) at libpmemobj/ulog.c:68>:
                                                    f()
                                                    VALGRIND_ADD_TO_TX()
                                                    pmemops_memset()
                                                    pmemops_memcpy()
                                                    ASSERT()
                                                    VALGRIND_REMOVE_FROM_TX()
                                            pmemops_drain()
                                    util_mutex_unlock()
                                    operation_finish() <void operation_finish (struct operation_context *ctx, unsigned flags) at libpmemobj/memops.c:814>:
                                        ASSERTne()
                                        out() <void out (const char *fmt, ...) at core/out.c:480>:
                                            va_start()
                                            out_common() <} void out_common (const char *file, int line, const char *func, int level, const char *suffix, const char *fmt, va_list ap) at core/out.c:334>
                                            va_end()
                                        ulog_clobber_data() <int ulog_clobber_data (struct ulog *ulog_first, struct ulog_next *next, ulog_free_fn ulog_free, ulog_rm_user_buffer_fn user_buff_remove, const struct pmem_ops *p_ops, unsigned flags) at libpmemobj/ulog.c:713>:
                                            ASSERTne()
                                            ulog_inc_gen_num() <void ulog_inc_gen_num (struct ulog *ulog, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:605>:
                                                VALGRIND_ADD_TO_TX()
                                                pmemops_persist()
                                                VALGRIND_SET_CLEAN()
                                                VALGRIND_REMOVE_FROM_TX()
                                            VEC_SIZE()
                                            VEC_GET()
                                            ulog_by_offset() <struct ulog *ulog_by_offset (size_t offset, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:36>:
                                                CACHELINE_ALIGN()
                                            ulog_free_next() <int ulog_free_next (struct ulog *u, const struct pmem_ops *p_ops, ulog_free_fn ulog_free, ulog_rm_user_buffer_fn user_buff_remove, uint64_t flags) at libpmemobj/ulog.c:625>:
                                                VEC()
                                                VEC_INIT()
                                                ulog_by_offset() <struct ulog *ulog_by_offset (size_t offset, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:36>:
                                                    CACHELINE_ALIGN()
                                                pmemops_persist()
                                                VEC_PUSH_BACK()
                                                LOG()
                                                out() <void out (const char *fmt, ...) at core/out.c:480>:
                                                    va_start()
                                                    out_common() <} void out_common (const char *file, int line, const char *func, int level, const char *suffix, const char *fmt, va_list ap) at core/out.c:334>
                                                    va_end()
                                                VEC_FOREACH_REVERSE()
                                                VEC_DELETE()
                                        operation_user_buffer_remove() <int operation_user_buffer_remove (void *base, void *addr) at libpmemobj/memops.c:242>:
                                            util_mutex_lock()
                                            ravl_find() <struct ravl_node *ravl_find (struct ravl *ravl, const void *data, enum ravl_predicate flags) at core/ravl.c:524>:
                                                LOG()
                                                ravl_data() <void *ravl_data (struct ravl_node *node) at core/ravl.c:571>:
                                                    memcpy()
                                                ravl_predicate_holds() <int ravl_predicate_holds (int result, struct ravl_node **ret, struct ravl_node *n, enum ravl_predicate flags) at core/ravl.c:489>:
                                                    ravl_node_successor() <struct ravl_node *ravl_node_successor (struct ravl_node *n) at core/ravl.c:465>:
                                                        ravl_node_cessor() <struct ravl_node *ravl_node_cessor (struct ravl_node *n, enum ravl_slot_type t) at core/ravl.c:443>:
                                                            ravl_node_type_most() <struct ravl_node *ravl_node_type_most (struct ravl_node *n, enum ravl_slot_type t) at core/ravl.c:430>:
                                                            ravl_slot_opposite() <enum ravl_slot_type ravl_slot_opposite (enum ravl_slot_type t) at core/ravl.c:184>:
                                                                ASSERTne()
                                                    ravl_node_predecessor() <struct ravl_node *ravl_node_predecessor (struct ravl_node *n) at core/ravl.c:476>:
                                                        ravl_node_cessor() <struct ravl_node *ravl_node_cessor (struct ravl_node *n, enum ravl_slot_type t) at core/ravl.c:443>:
                                                            ravl_node_type_most() <struct ravl_node *ravl_node_type_most (struct ravl_node *n, enum ravl_slot_type t) at core/ravl.c:430>:
                                                            ravl_slot_opposite() <enum ravl_slot_type ravl_slot_opposite (enum ravl_slot_type t) at core/ravl.c:184>:
                                                                ASSERTne()
                                            ASSERTne()
                                            ravl_remove() <void ravl_remove (struct ravl *ravl, struct ravl_node *n) at core/ravl.c:545> (R):
                                                LOG()
                                                ravl_node_successor() <struct ravl_node *ravl_node_successor (struct ravl_node *n) at core/ravl.c:465>:
                                                    ravl_node_cessor() <struct ravl_node *ravl_node_cessor (struct ravl_node *n, enum ravl_slot_type t) at core/ravl.c:443>:
                                                        ravl_node_type_most() <struct ravl_node *ravl_node_type_most (struct ravl_node *n, enum ravl_slot_type t) at core/ravl.c:430>:
                                                        ravl_slot_opposite() <enum ravl_slot_type ravl_slot_opposite (enum ravl_slot_type t) at core/ravl.c:184>:
                                                            ASSERTne()
                                                memcpy()
                                                ravl_remove() <void ravl_remove (struct ravl *ravl, struct ravl_node *n) at core/ravl.c:545> (recursive: see 9265)
                                                ravl_node_ref() <struct ravl_node **ravl_node_ref (struct ravl *ravl, struct ravl_node *n) at core/ravl.c:223>:
                                                    ravl_node_slot_type() <enum ravl_slot_type ravl_node_slot_type (struct ravl_node *n) at core/ravl.c:196>:
                                                Free() <Free_func Free at core/alloc.c:91>
                                            util_mutex_unlock()
                                        ulog_free_next() <int ulog_free_next (struct ulog *u, const struct pmem_ops *p_ops, ulog_free_fn ulog_free, ulog_rm_user_buffer_fn user_buff_remove, uint64_t flags) at libpmemobj/ulog.c:625>:
                                            VEC()
                                            VEC_INIT()
                                            ulog_by_offset() <struct ulog *ulog_by_offset (size_t offset, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:36>:
                                                CACHELINE_ALIGN()
                                            pmemops_persist()
                                            VEC_PUSH_BACK()
                                            LOG()
                                            out() <void out (const char *fmt, ...) at core/out.c:480>:
                                                va_start()
                                                out_common() <} void out_common (const char *file, int line, const char *func, int level, const char *suffix, const char *fmt, va_list ap) at core/out.c:334>
                                                va_end()
                                            VEC_FOREACH_REVERSE()
                                            VEC_DELETE()
                                        ulog_capacity() <size_t ulog_capacity (struct ulog *ulog, size_t ulog_base_bytes, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:206>:
                                            ulog_next() <struct ulog *ulog_next (struct ulog *ulog, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:50>:
                                                ulog_by_offset() <struct ulog *ulog_by_offset (size_t offset, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:36>:
                                                    CACHELINE_ALIGN()
                                        VEC_CLEAR()
                                        ulog_rebuild_next_vec() <void ulog_rebuild_next_vec (struct ulog *ulog, struct ulog_next *next, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:223>:
                                            VEC_PUSH_BACK()
                                            ulog_next() <struct ulog *ulog_next (struct ulog *ulog, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:50>:
                                                ulog_by_offset() <struct ulog *ulog_by_offset (size_t offset, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:36>:
                                                    CACHELINE_ALIGN()
                            ASSERTeq()
                            pmalloc_operation_release() <void pmalloc_operation_release (PMEMobjpool *pop) at libpmemobj/pmalloc.c:83>:
                                lane_release() <void lane_release (PMEMobjpool *pop) at libpmemobj/lane.c:546>:
                                    get_lane_info_record() <inline struct lane_info *get_lane_info_record (PMEMobjpool *pop) at libpmemobj/lane.c:466>:
                                        likely()
                                        unlikely()
                                        lane_info_ht_boot() <inline void lane_info_ht_boot (void) at libpmemobj/lane.c:74>:
                                            lane_info_create() <inline void lane_info_create (void) at libpmemobj/lane.c:39>:
                                                critnib_new() <struct critnib *critnib_new (void) at libpmemobj/critnib.c:187>:
                                                    Zalloc() <void *Zalloc (size_t sz) at core/alloc.c:98>:
                                                        Malloc()
                                                        memset()
                                                    util_mutex_init()
                                                    VALGRIND_HG_DRD_DISABLE_CHECKING()
                                                FATAL()
                                            os_tls_set() <int os_tls_set (os_tls_key_t key, const void *value) at core/os_thread_posix.c:53>:
                                                pthread_setspecific()
                                            FATAL()
                                        critnib_get() <void *critnib_get (struct critnib *c, uint64_t key) at libpmemobj/critnib.c:515>:
                                            load() <void load (void *src, void *dst) at libpmemobj/critnib.c:130>:
                                                util_atomic_load_explicit64()
                                            is_leaf() <inline bool is_leaf (struct critnib_node *n) at libpmemobj/critnib.c:150>:
                                            slice_index() <inline unsigned slice_index (uint64_t key, sh_t shift) at libpmemobj/critnib.c:178>:
                                            to_leaf() <inline struct critnib_leaf *to_leaf (struct critnib_node *n) at libpmemobj/critnib.c:159>:
                                        Malloc()
                                        FATAL()
                                        critnib_insert() <int critnib_insert (struct critnib *c, uint64_t key, void *value) at libpmemobj/critnib.c:340>:
                                            util_mutex_lock()
                                            alloc_leaf() <struct critnib_leaf *alloc_leaf (struct critnib *__restrict c) at libpmemobj/critnib.c:311>:
                                                Malloc()
                                                ERR()
                                                VALGRIND_ANNOTATE_NEW_MEMORY()
                                            util_mutex_unlock()
                                            VALGRIND_HG_DRD_DISABLE_CHECKING()
                                            is_leaf() <inline bool is_leaf (struct critnib_node *n) at libpmemobj/critnib.c:150>:
                                            path_mask() <inline uint64_t path_mask (sh_t shift) at libpmemobj/critnib.c:169>:
                                            slice_index() <inline unsigned slice_index (uint64_t key, sh_t shift) at libpmemobj/critnib.c:178>:
                                            store() <void store (void *dst, void *src) at libpmemobj/critnib.c:140>:
                                                util_atomic_store_explicit64()
                                            to_leaf() <inline struct critnib_leaf *to_leaf (struct critnib_node *n) at libpmemobj/critnib.c:159>:
                                            ASSERT()
                                            free_leaf() <void free_leaf (struct critnib *__restrict c, struct critnib_leaf *__restrict k) at libpmemobj/critnib.c:298>
                                            util_mssb_index64()
                                            alloc_node() <struct critnib_node *alloc_node (struct critnib *__restrict c) at libpmemobj/critnib.c:274>:
                                                Malloc()
                                                ERR()
                                                VALGRIND_ANNOTATE_NEW_MEMORY()
                                    ASSERTne()
                                    unlikely()
                                    FATAL()
                                    util_bool_compare_and_swap64()
                        lane_undo_extend() <int lane_undo_extend (void *base, uint64_t *redo, uint64_t gen_num) at libpmemobj/lane.c:179>:
                            SIZEOF_ALIGNED_ULOG()
                            pmalloc_construct() <int pmalloc_construct (PMEMobjpool *pop, uint64_t *off, size_t size, palloc_constr constructor, void *arg, uint64_t extra_field, uint16_t object_flags, uint16_t class_id) at libpmemobj/pmalloc.c:119>:
                                pmalloc_operation_hold_type() <struct operation_context *pmalloc_operation_hold_type (PMEMobjpool *pop, enum pmalloc_operation_type type, int start) at libpmemobj/pmalloc.c:45>:
                                    lane_hold() <unsigned lane_hold (PMEMobjpool *pop, struct lane **lanep) at libpmemobj/lane.c:510>:
                                        get_lane_info_record() <inline struct lane_info *get_lane_info_record (PMEMobjpool *pop) at libpmemobj/lane.c:466>:
                                            likely()
                                            unlikely()
                                            lane_info_ht_boot() <inline void lane_info_ht_boot (void) at libpmemobj/lane.c:74>:
                                                lane_info_create() <inline void lane_info_create (void) at libpmemobj/lane.c:39>:
                                                    critnib_new() <struct critnib *critnib_new (void) at libpmemobj/critnib.c:187>:
                                                        Zalloc() <void *Zalloc (size_t sz) at core/alloc.c:98>:
                                                            Malloc()
                                                            memset()
                                                        util_mutex_init()
                                                        VALGRIND_HG_DRD_DISABLE_CHECKING()
                                                    FATAL()
                                                os_tls_set() <int os_tls_set (os_tls_key_t key, const void *value) at core/os_thread_posix.c:53>:
                                                    pthread_setspecific()
                                                FATAL()
                                            critnib_get() <void *critnib_get (struct critnib *c, uint64_t key) at libpmemobj/critnib.c:515>:
                                                load() <void load (void *src, void *dst) at libpmemobj/critnib.c:130>:
                                                    util_atomic_load_explicit64()
                                                is_leaf() <inline bool is_leaf (struct critnib_node *n) at libpmemobj/critnib.c:150>:
                                                slice_index() <inline unsigned slice_index (uint64_t key, sh_t shift) at libpmemobj/critnib.c:178>:
                                                to_leaf() <inline struct critnib_leaf *to_leaf (struct critnib_node *n) at libpmemobj/critnib.c:159>:
                                            Malloc()
                                            FATAL()
                                            critnib_insert() <int critnib_insert (struct critnib *c, uint64_t key, void *value) at libpmemobj/critnib.c:340>:
                                                util_mutex_lock()
                                                alloc_leaf() <struct critnib_leaf *alloc_leaf (struct critnib *__restrict c) at libpmemobj/critnib.c:311>:
                                                    Malloc()
                                                    ERR()
                                                    VALGRIND_ANNOTATE_NEW_MEMORY()
                                                util_mutex_unlock()
                                                VALGRIND_HG_DRD_DISABLE_CHECKING()
                                                is_leaf() <inline bool is_leaf (struct critnib_node *n) at libpmemobj/critnib.c:150>:
                                                path_mask() <inline uint64_t path_mask (sh_t shift) at libpmemobj/critnib.c:169>:
                                                slice_index() <inline unsigned slice_index (uint64_t key, sh_t shift) at libpmemobj/critnib.c:178>:
                                                store() <void store (void *dst, void *src) at libpmemobj/critnib.c:140>:
                                                    util_atomic_store_explicit64()
                                                to_leaf() <inline struct critnib_leaf *to_leaf (struct critnib_node *n) at libpmemobj/critnib.c:159>:
                                                ASSERT()
                                                free_leaf() <void free_leaf (struct critnib *__restrict c, struct critnib_leaf *__restrict k) at libpmemobj/critnib.c:298>
                                                util_mssb_index64()
                                                alloc_node() <struct critnib_node *alloc_node (struct critnib *__restrict c) at libpmemobj/critnib.c:274>:
                                                    Malloc()
                                                    ERR()
                                                    VALGRIND_ANNOTATE_NEW_MEMORY()
                                        unlikely()
                                        util_fetch_and_add32()
                                        get_lane() <inline void get_lane (uint64_t *locks, struct lane_info *info, uint64_t nlocks) at libpmemobj/lane.c:430>:
                                            likely()
                                            util_bool_compare_and_swap64()
                                            sched_yield()
                                        VALGRIND_ANNOTATE_NEW_MEMORY()
                                        operation_init() <void operation_init (struct operation_context *ctx) at libpmemobj/memops.c:709>:
                                            VALGRIND_ANNOTATE_NEW_MEMORY()
                                            VECQ_REINIT()
                                    operation_start() <void operation_start (struct operation_context *ctx) at libpmemobj/memops.c:736>:
                                        operation_init() <void operation_init (struct operation_context *ctx) at libpmemobj/memops.c:709>:
                                            VALGRIND_ANNOTATE_NEW_MEMORY()
                                            VECQ_REINIT()
                                        ASSERTeq()
                                palloc_operation() <int palloc_operation (struct palloc_heap *heap, uint64_t off, uint64_t *dest_off, size_t size, palloc_constr constructor, void *arg, uint64_t extra_field, uint16_t object_flags, uint16_t class_id, uint16_t arena_id, struct operation_context *ctx) at libpmemobj/palloc.c:705>:
                                    palloc_defer_free_create() <void palloc_defer_free_create (struct palloc_heap *heap, uint64_t off, struct pobj_action_internal *out) at libpmemobj/palloc.c:610>:
                                        COMPILE_ERROR_ON()
                                        memblock_from_offset() <struct memory_block memblock_from_offset (struct palloc_heap *heap, uint64_t off) at libpmemobj/memblock.c:1532>:
                                            memblock_from_offset_opt() <struct memory_block memblock_from_offset_opt (struct palloc_heap *heap, uint64_t off, int size) at libpmemobj/memblock.c:1476>:
                                                HEAP_PTR_TO_OFF()
                                                heap_get_chunk_hdr()
                                                memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                                    heap_get_chunk_hdr()
                                                ASSERTeq()
                                                memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                                    heap_get_chunk_hdr()
                                                    FATAL()
                                                run_get_data_offset() <size_t run_get_data_offset (const struct memory_block *m) at libpmemobj/memblock.c:572>:
                                                    heap_get_chunk_run()
                                                    run_get_data_start() <char *run_get_data_start (const struct memory_block *m) at libpmemobj/memblock.c:544>:
                                                        heap_get_chunk_hdr()
                                                        heap_get_chunk_run()
                                                        run_get_bitmap() <void run_get_bitmap (const struct memory_block *m, struct run_bitmap *b) at libpmemobj/memblock.c:488>:
                                                            heap_get_chunk_run()
                                                            heap_get_chunk_hdr()
                                                            memblock_run_bitmap() <void memblock_run_bitmap (uint32_t *size_idx, uint16_t flags, uint64_t unit_size, uint64_t alignment, void *content, struct run_bitmap *b) at libpmemobj/memblock.c:410>:
                                                                ASSERTne()
                                                                RUN_CONTENT_SIZE_BYTES()
                                                                util_div_ceil()
                                                                ALIGN_UP()
                                                                memblock_run_default_nallocs() <unsigned memblock_run_default_nallocs (uint32_t *size_idx, uint16_t flags, uint64_t unit_size, uint64_t alignment) at libpmemobj/memblock.c:370>:
                                                                    SUPPRESS_UNUSED()
                                                                    RUN_DEFAULT_SIZE_BYTES()
                                                                    LOG()
                                                            ASSERTeq()
                                                        ALIGN_UP()
                                                heap_alloc_classes() <struct alloc_class_collection *heap_alloc_classes (struct palloc_heap *heap) at libpmemobj/heap.c:160>:
                                                alloc_class_by_run() <struct alloc_class *alloc_class_by_run (struct alloc_class_collection *ac, size_t unit_size, uint16_t flags, uint32_t size_idx) at libpmemobj/alloc_class.c:594>:
                                                    SIZE_TO_CLASS_MAP_INDEX()
                                                    ASSERT()
                                                    critnib_get() <void *critnib_get (struct critnib *c, uint64_t key) at libpmemobj/critnib.c:515>:
                                                        load() <void load (void *src, void *dst) at libpmemobj/critnib.c:130>:
                                                            util_atomic_load_explicit64()
                                                        is_leaf() <inline bool is_leaf (struct critnib_node *n) at libpmemobj/critnib.c:150>:
                                                        slice_index() <inline unsigned slice_index (uint64_t key, sh_t shift) at libpmemobj/critnib.c:178>:
                                                        to_leaf() <inline struct critnib_leaf *to_leaf (struct critnib_node *n) at libpmemobj/critnib.c:159>:
                                                    RUN_CLASS_KEY_PACK()
                                                CALC_SIZE_IDX()
                                        heap_ensure_zone_reclaimed() <void heap_ensure_zone_reclaimed (struct palloc_heap *heap, uint32_t zone_id) at libpmemobj/heap.c:816>:
                                            util_atomic_load_explicit32()
                                            heap_bucket_acquire() <struct bucket *heap_bucket_acquire (struct palloc_heap *heap, uint8_t class_id, uint16_t arena_id) at libpmemobj/heap.c:470>:
                                                out() <void out (const char *fmt, ...) at core/out.c:480>:
                                                    va_start()
                                                    out_common() <} void out_common (const char *file, int line, const char *func, int level, const char *suffix, const char *fmt, va_list ap) at core/out.c:334>
                                                    va_end()
                                                heap_thread_arena() <struct arena *heap_thread_arena (struct palloc_heap *heap) at libpmemobj/heap.c:414>:
                                                    os_tls_get() <void *os_tls_get (os_tls_key_t key) at core/os_thread_posix.c:62>:
                                                        pthread_getspecific()
                                                    heap_thread_arena_assign() <struct arena *heap_thread_arena_assign (struct palloc_heap *heap) at libpmemobj/heap.c:381>:
                                                        util_mutex_lock()
                                                        ASSERTne()
                                                        VEC_SIZE()
                                                        VEC_FOREACH()
                                                        LOG()
                                                        heap_arena_thread_attach() <void heap_arena_thread_attach (struct palloc_heap *heap, struct arena *a) at libpmemobj/heap.c:249>:
                                                            ASSERTeq()
                                                            os_tls_get() <void *os_tls_get (os_tls_key_t key) at core/os_thread_posix.c:62>:
                                                                pthread_getspecific()
                                                            heap_arena_thread_detach() <void heap_arena_thread_detach (struct arena *a) at libpmemobj/heap.c:232>:
                                                                util_fetch_and_sub64()
                                                            ASSERTne()
                                                            util_fetch_and_add64()
                                                            os_tls_set() <int os_tls_set (os_tls_key_t key, const void *value) at core/os_thread_posix.c:53>:
                                                                pthread_setspecific()
                                                        util_mutex_unlock()
                                                    heap_global_arena_assign() <struct arena *heap_global_arena_assign (struct palloc_heap *heap) at libpmemobj/heap.c:348>:
                                                        util_mutex_lock()
                                                        ASSERTne()
                                                        VEC_SIZE()
                                                        VEC_FOREACH()
                                                        LOG()
                                                        util_mutex_unlock()
                                                    ASSERT()
                                                    ASSERTne()
                                                ASSERTne()
                                                VEC_ARR()
                                                bucket_acquire() <struct bucket *bucket_acquire (struct bucket_locked *b) at libpmemobj/bucket.c:117>:
                                                    util_mutex_lock()
                                            ZID_TO_ZONE()
                                            ASSERTeq()
                                            out() <void out (const char *fmt, ...) at core/out.c:480>:
                                                va_start()
                                                out_common() <} void out_common (const char *file, int line, const char *func, int level, const char *suffix, const char *fmt, va_list ap) at core/out.c:334>
                                                va_end()
                                            util_atomic_store_explicit32()
                                            heap_reclaim_zone_garbage() <void heap_reclaim_zone_garbage (struct palloc_heap *heap, struct bucket *bucket, uint32_t zone_id) at libpmemobj/heap.c:775>:
                                                ZID_TO_ZONE()
                                                ASSERT()
                                                memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                                    memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                                        heap_get_chunk_hdr()
                                                    memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                                        heap_get_chunk_hdr()
                                                        FATAL()
                                                heap_reclaim_run() <int heap_reclaim_run (struct palloc_heap *heap, struct memory_block *m, int startup) at libpmemobj/heap.c:733>:
                                                    heap_get_chunk_run()
                                                    heap_get_chunk_hdr()
                                                    alloc_class_by_run() <struct alloc_class *alloc_class_by_run (struct alloc_class_collection *ac, size_t unit_size, uint16_t flags, uint32_t size_idx) at libpmemobj/alloc_class.c:594>:
                                                        SIZE_TO_CLASS_MAP_INDEX()
                                                        ASSERT()
                                                        critnib_get() <void *critnib_get (struct critnib *c, uint64_t key) at libpmemobj/critnib.c:515>:
                                                            load() <void load (void *src, void *dst) at libpmemobj/critnib.c:130>:
                                                                util_atomic_load_explicit64()
                                                            is_leaf() <inline bool is_leaf (struct critnib_node *n) at libpmemobj/critnib.c:150>:
                                                            slice_index() <inline unsigned slice_index (uint64_t key, sh_t shift) at libpmemobj/critnib.c:178>:
                                                            to_leaf() <inline struct critnib_leaf *to_leaf (struct critnib_node *n) at libpmemobj/critnib.c:159>:
                                                        RUN_CLASS_KEY_PACK()
                                                    recycler_element_new() <struct recycler_element recycler_element_new (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/recycler.c:122>:
                                                        SUPPRESS_UNUSED()
                                                        util_mutex_lock()
                                                        util_mutex_unlock()
                                                    ASSERTeq()
                                                    STATS_INC()
                                                    heap_get_recycler() <struct recycler *heap_get_recycler (struct palloc_heap *heap, size_t id, size_t nallocs) at libpmemobj/heap.c:106> (R):
                                                        util_atomic_load_explicit64()
                                                        recycler_new() <struct recycler *recycler_new (struct palloc_heap *heap, size_t nallocs, size_t *peak_arenas) at libpmemobj/recycler.c:74>:
                                                            Malloc()
                                                            ravl_new_sized() <struct ravl *ravl_new_sized (ravl_compare *compare, size_t data_size) at core/ravl.c:45>:
                                                                Malloc()
                                                                ERR()
                                                            recycler_element_cmp() <int recycler_element_cmp (const void *lhs, const void *rhs) at libpmemobj/recycler.c:23>:
                                                            memset()
                                                            VEC_INIT()
                                                            util_mutex_init()
                                                            Free() <Free_func Free at core/alloc.c:91>
                                                        util_bool_compare_and_swap64()
                                                        recycler_delete() <void recycler_delete (struct recycler *r) at libpmemobj/recycler.c:107>:
                                                            VEC_DELETE()
                                                            util_mutex_destroy()
                                                            ravl_delete() <void ravl_delete (struct ravl *ravl) at core/ravl.c:112>:
                                                                ravl_delete_cb() <void ravl_delete_cb (struct ravl *ravl, ravl_cb cb, void *arg) at core/ravl.c:102>:
                                                                    ravl_foreach_node() <void ravl_foreach_node (struct ravl_node *n, ravl_cb cb, void *arg, int free_node) at core/ravl.c:74> (R):
                                                                        ravl_foreach_node() <void ravl_foreach_node (struct ravl_node *n, ravl_cb cb, void *arg, int free_node) at core/ravl.c:74> (recursive: see 9554)
                                                                        Free() <Free_func Free at core/alloc.c:91>
                                                                    Free() <Free_func Free at core/alloc.c:91>
                                                            Free() <Free_func Free at core/alloc.c:91>
                                                        heap_get_recycler() <struct recycler *heap_get_recycler (struct palloc_heap *heap, size_t id, size_t nallocs) at libpmemobj/heap.c:106> (recursive: see 9536)
                                                    recycler_put() <int recycler_put (struct recycler *r, struct recycler_element element) at libpmemobj/recycler.c:154>:
                                                        util_mutex_lock()
                                                        ravl_emplace_copy() <int ravl_emplace_copy (struct ravl *ravl, const void *data) at core/ravl.c:384>:
                                                            ravl_emplace() <int ravl_emplace (struct ravl *ravl, ravl_constr constr, const void *arg) at core/ravl.c:393>:
                                                                LOG()
                                                                ravl_new_node() <struct ravl_node *ravl_new_node (struct ravl *ravl, ravl_constr constr, const void *arg) at core/ravl.c:161>:
                                                                    Malloc()
                                                                    ERR()
                                                                    ravl_node_insert_constructor() <void ravl_node_insert_constructor (void *data, size_t data_size, const void *arg) at core/ravl.c:139>:
                                                                        SUPPRESS_UNUSED()
                                                                        memcpy()
                                                                ravl_data() <void *ravl_data (struct ravl_node *node) at core/ravl.c:571>:
                                                                    memcpy()
                                                                ravl_balance() <void ravl_balance (struct ravl *ravl, struct ravl_node *n) at core/ravl.c:337>:
                                                                    ravl_node_is() <int ravl_node_is (struct ravl_node *n, int i, int j) at core/ravl.c:306>:
                                                                        ravl_node_is_i_j() <int ravl_node_is_i_j (struct ravl_node *n, int i, int j) at core/ravl.c:296>:
                                                                            ravl_node_rank_difference_parent() <int ravl_node_rank_difference_parent (struct ravl_node *p, struct ravl_node *n) at core/ravl.c:275>:
                                                                                ravl_node_rank() <int ravl_node_rank (struct ravl_node *n) at core/ravl.c:261>:
                                                                    ravl_node_promote() <void ravl_node_promote (struct ravl_node *n) at core/ravl.c:315>
                                                                    ravl_node_sibling() <struct ravl_node *ravl_node_sibling (struct ravl_node *n) at core/ravl.c:209>:
                                                                        ravl_node_slot_type() <enum ravl_slot_type ravl_node_slot_type (struct ravl_node *n) at core/ravl.c:196>:
                                                                    ravl_node_rank_difference() <int ravl_node_rank_difference (struct ravl_node *n) at core/ravl.c:287>:
                                                                        ravl_node_rank_difference_parent() <int ravl_node_rank_difference_parent (struct ravl_node *p, struct ravl_node *n) at core/ravl.c:275>:
                                                                            ravl_node_rank() <int ravl_node_rank (struct ravl_node *n) at core/ravl.c:261>:
                                                                    ravl_node_rank_difference_parent() <int ravl_node_rank_difference_parent (struct ravl_node *p, struct ravl_node *n) at core/ravl.c:275>:
                                                                        ravl_node_rank() <int ravl_node_rank (struct ravl_node *n) at core/ravl.c:261>:
                                                                    ravl_slot_opposite() <enum ravl_slot_type ravl_slot_opposite (enum ravl_slot_type t) at core/ravl.c:184>:
                                                                        ASSERTne()
                                                                    ravl_node_slot_type() <enum ravl_slot_type ravl_node_slot_type (struct ravl_node *n) at core/ravl.c:196>:
                                                                    ravl_rotate() <void ravl_rotate (struct ravl *ravl, struct ravl_node *n) at core/ravl.c:237>:
                                                                        ASSERTne()
                                                                        ravl_node_ref() <struct ravl_node **ravl_node_ref (struct ravl *ravl, struct ravl_node *n) at core/ravl.c:223>:
                                                                            ravl_node_slot_type() <enum ravl_slot_type ravl_node_slot_type (struct ravl_node *n) at core/ravl.c:196>:
                                                                        ravl_node_slot_type() <enum ravl_slot_type ravl_node_slot_type (struct ravl_node *n) at core/ravl.c:196>:
                                                                        ravl_slot_opposite() <enum ravl_slot_type ravl_slot_opposite (enum ravl_slot_type t) at core/ravl.c:184>:
                                                                            ASSERTne()
                                                                    ravl_node_demote() <void ravl_node_demote (struct ravl_node *n) at core/ravl.c:324>:
                                                                        ASSERT()
                                                                Free() <Free_func Free at core/alloc.c:91>
                                                            ravl_node_copy_constructor() <void ravl_node_copy_constructor (void *data, size_t data_size, const void *arg) at core/ravl.c:152>:
                                                                memcpy()
                                                        util_mutex_unlock()
                                                    ERR()
                                                heap_run_into_free_chunk() <void heap_run_into_free_chunk (struct palloc_heap *heap, struct bucket *bucket, struct memory_block *m) at libpmemobj/heap.c:697>:
                                                    heap_get_chunk_hdr()
                                                    STATS_SUB()
                                                    util_mutex_lock()
                                                    memblock_huge_init() <struct memory_block memblock_huge_init (struct palloc_heap *heap, uint32_t chunk_id, uint32_t zone_id, uint32_t size_idx) at libpmemobj/memblock.c:1329>:
                                                        heap_get_chunk_hdr()
                                                        VALGRIND_DO_MAKE_MEM_UNDEFINED()
                                                        VALGRIND_ANNOTATE_NEW_MEMORY()
                                                        chunk_get_chunk_hdr_value() <uint64_t chunk_get_chunk_hdr_value (uint16_t type, uint16_t flags, uint32_t size_idx) at libpmemobj/memblock.c:604>:
                                                            COMPILE_ERROR_ON()
                                                            memcpy()
                                                        util_atomic_store_explicit64()
                                                        pmemops_persist()
                                                        huge_write_footer() <void huge_write_footer (struct chunk_header *hdr, uint32_t size_idx) at libpmemobj/memblock.c:1166>:
                                                            VALGRIND_DO_MAKE_MEM_UNDEFINED()
                                                            VALGRIND_SET_CLEAN()
                                                        memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                                            memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                                                heap_get_chunk_hdr()
                                                            memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                                                heap_get_chunk_hdr()
                                                                FATAL()
                                                    heap_free_chunk_reuse() <int heap_free_chunk_reuse (struct palloc_heap *heap, struct bucket *bucket, struct memory_block *m) at libpmemobj/heap.c:674>:
                                                        heap_coalesce_huge() <struct memory_block heap_coalesce_huge (struct palloc_heap *heap, struct bucket *b, const struct memory_block *m) at libpmemobj/heap.c:650>:
                                                            heap_get_adjacent_free_block() <int heap_get_adjacent_free_block (struct palloc_heap *heap, const struct memory_block *in, struct memory_block *out, int prev) at libpmemobj/heap.c:582>:
                                                                ZID_TO_ZONE()
                                                                memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                                                    memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                                                        heap_get_chunk_hdr()
                                                                    memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                                                        heap_get_chunk_hdr()
                                                                        FATAL()
                                                            bucket_remove_block() <int bucket_remove_block (struct bucket *b, const struct memory_block *m) at libpmemobj/bucket.c:178>
                                                            heap_coalesce() <struct memory_block heap_coalesce (struct palloc_heap *heap, const struct memory_block *blocks[], int n) at libpmemobj/heap.c:621>:
                                                                ASSERTne()
                                                                memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                                                    memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                                                        heap_get_chunk_hdr()
                                                                    memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                                                        heap_get_chunk_hdr()
                                                                        FATAL()
                                                        bucket_insert_block() <int bucket_insert_block (struct bucket *b, const struct memory_block *m) at libpmemobj/bucket.c:161>:
                                                            VALGRIND_DO_MAKE_MEM_NOACCESS()
                                                            VALGRIND_ANNOTATE_NEW_MEMORY()
                                                    util_mutex_unlock()
                                                heap_free_chunk_reuse() <int heap_free_chunk_reuse (struct palloc_heap *heap, struct bucket *bucket, struct memory_block *m) at libpmemobj/heap.c:674>:
                                                    heap_coalesce_huge() <struct memory_block heap_coalesce_huge (struct palloc_heap *heap, struct bucket *b, const struct memory_block *m) at libpmemobj/heap.c:650>:
                                                        heap_get_adjacent_free_block() <int heap_get_adjacent_free_block (struct palloc_heap *heap, const struct memory_block *in, struct memory_block *out, int prev) at libpmemobj/heap.c:582>:
                                                            ZID_TO_ZONE()
                                                            memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                                                memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                                                    heap_get_chunk_hdr()
                                                                memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                                                    heap_get_chunk_hdr()
                                                                    FATAL()
                                                        bucket_remove_block() <int bucket_remove_block (struct bucket *b, const struct memory_block *m) at libpmemobj/bucket.c:178>
                                                        heap_coalesce() <struct memory_block heap_coalesce (struct palloc_heap *heap, const struct memory_block *blocks[], int n) at libpmemobj/heap.c:621>:
                                                            ASSERTne()
                                                            memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                                                memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                                                    heap_get_chunk_hdr()
                                                                memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                                                    heap_get_chunk_hdr()
                                                                    FATAL()
                                                    bucket_insert_block() <int bucket_insert_block (struct bucket *b, const struct memory_block *m) at libpmemobj/bucket.c:161>:
                                                        VALGRIND_DO_MAKE_MEM_NOACCESS()
                                                        VALGRIND_ANNOTATE_NEW_MEMORY()
                                            heap_bucket_release() <void heap_bucket_release (struct bucket *b) at libpmemobj/heap.c:498>:
                                                bucket_release() <void bucket_release (struct bucket *b) at libpmemobj/bucket.c:127>:
                                                    util_mutex_unlock()
                                    operation_cancel() <void operation_cancel (struct operation_context *ctx) at libpmemobj/memops.c:761>:
                                        ASSERTeq()
                                    palloc_reservation_create() <int palloc_reservation_create (struct palloc_heap *heap, size_t size, palloc_constr constructor, void *arg, uint64_t extra_field, uint16_t object_flags, uint16_t class_id, uint16_t arena_id, struct pobj_action_internal *out) at libpmemobj/palloc.c:178>:
                                        ASSERT()
                                        heap_get_best_class() <struct alloc_class *heap_get_best_class (struct palloc_heap *heap, size_t size) at libpmemobj/heap.c:221>:
                                            alloc_class_by_alloc_size() <struct alloc_class *alloc_class_by_alloc_size (struct alloc_class_collection *ac, size_t size) at libpmemobj/alloc_class.c:568>:
                                                SIZE_TO_CLASS_MAP_INDEX()
                                                alloc_class_assign_by_size() <struct alloc_class *alloc_class_assign_by_size (struct alloc_class_collection *ac, size_t size) at libpmemobj/alloc_class.c:538>:
                                                    LOG()
                                                    SIZE_TO_CLASS_MAP_INDEX()
                                                    alloc_class_find_min_frag() <struct alloc_class *alloc_class_find_min_frag (struct alloc_class_collection *ac, size_t n) at libpmemobj/alloc_class.c:340>:
                                                        LOG()
                                                        ASSERTne()
                                                    ASSERTne()
                                                    util_bool_compare_and_swap64()
                                        alloc_class_by_id() <struct alloc_class *alloc_class_by_id (struct alloc_class_collection *ac, uint8_t id) at libpmemobj/alloc_class.c:612>
                                        heap_alloc_classes() <struct alloc_class_collection *heap_alloc_classes (struct palloc_heap *heap) at libpmemobj/heap.c:160>:
                                        ERR()
                                        alloc_class_calc_size_idx() <ssize_t alloc_class_calc_size_idx (struct alloc_class *c, size_t size) at libpmemobj/alloc_class.c:621>:
                                            CALC_SIZE_IDX()
                                        heap_bucket_acquire() <struct bucket *heap_bucket_acquire (struct palloc_heap *heap, uint8_t class_id, uint16_t arena_id) at libpmemobj/heap.c:470>:
                                            out() <void out (const char *fmt, ...) at core/out.c:480>:
                                                va_start()
                                                out_common() <} void out_common (const char *file, int line, const char *func, int level, const char *suffix, const char *fmt, va_list ap) at core/out.c:334>
                                                va_end()
                                            heap_thread_arena() <struct arena *heap_thread_arena (struct palloc_heap *heap) at libpmemobj/heap.c:414>:
                                                os_tls_get() <void *os_tls_get (os_tls_key_t key) at core/os_thread_posix.c:62>:
                                                    pthread_getspecific()
                                                heap_thread_arena_assign() <struct arena *heap_thread_arena_assign (struct palloc_heap *heap) at libpmemobj/heap.c:381>:
                                                    util_mutex_lock()
                                                    ASSERTne()
                                                    VEC_SIZE()
                                                    VEC_FOREACH()
                                                    LOG()
                                                    heap_arena_thread_attach() <void heap_arena_thread_attach (struct palloc_heap *heap, struct arena *a) at libpmemobj/heap.c:249>:
                                                        ASSERTeq()
                                                        os_tls_get() <void *os_tls_get (os_tls_key_t key) at core/os_thread_posix.c:62>:
                                                            pthread_getspecific()
                                                        heap_arena_thread_detach() <void heap_arena_thread_detach (struct arena *a) at libpmemobj/heap.c:232>:
                                                            util_fetch_and_sub64()
                                                        ASSERTne()
                                                        util_fetch_and_add64()
                                                        os_tls_set() <int os_tls_set (os_tls_key_t key, const void *value) at core/os_thread_posix.c:53>:
                                                            pthread_setspecific()
                                                    util_mutex_unlock()
                                                heap_global_arena_assign() <struct arena *heap_global_arena_assign (struct palloc_heap *heap) at libpmemobj/heap.c:348>:
                                                    util_mutex_lock()
                                                    ASSERTne()
                                                    VEC_SIZE()
                                                    VEC_FOREACH()
                                                    LOG()
                                                    util_mutex_unlock()
                                                ASSERT()
                                                ASSERTne()
                                            ASSERTne()
                                            VEC_ARR()
                                            bucket_acquire() <struct bucket *bucket_acquire (struct bucket_locked *b) at libpmemobj/bucket.c:117>:
                                                util_mutex_lock()
                                        heap_get_bestfit_block() <int heap_get_bestfit_block (struct palloc_heap *heap, struct bucket *b, struct memory_block *m) at libpmemobj/heap.c:1210> (R):
                                            bucket_alloc_class() <struct alloc_class *bucket_alloc_class (struct bucket *b) at libpmemobj/bucket.c:152>
                                            bucket_alloc_block() <int bucket_alloc_block (struct bucket *b, struct memory_block *m_out) at libpmemobj/bucket.c:187>
                                            heap_ensure_huge_bucket_filled() <int heap_ensure_huge_bucket_filled (struct palloc_heap *heap, struct bucket *bucket) at libpmemobj/heap.c:943>:
                                                heap_reclaim_garbage() <int heap_reclaim_garbage (struct palloc_heap *heap, struct bucket *bucket) at libpmemobj/heap.c:923>:
                                                    heap_recycle_unused() <int heap_recycle_unused (struct palloc_heap *heap, struct recycler *recycler, struct bucket *defb, int force) at libpmemobj/heap.c:894>:
                                                        recycler_recalc() <struct empty_runs recycler_recalc (struct recycler *r, int force) at libpmemobj/recycler.c:207>:
                                                            VEC_INIT()
                                                            util_atomic_load64()
                                                            util_mutex_trylock()
                                                            ravl_find() <struct ravl_node *ravl_find (struct ravl *ravl, const void *data, enum ravl_predicate flags) at core/ravl.c:524>:
                                                                LOG()
                                                                ravl_data() <void *ravl_data (struct ravl_node *node) at core/ravl.c:571>:
                                                                    memcpy()
                                                                ravl_predicate_holds() <int ravl_predicate_holds (int result, struct ravl_node **ret, struct ravl_node *n, enum ravl_predicate flags) at core/ravl.c:489>:
                                                                    ravl_node_successor() <struct ravl_node *ravl_node_successor (struct ravl_node *n) at core/ravl.c:465>:
                                                                        ravl_node_cessor() <struct ravl_node *ravl_node_cessor (struct ravl_node *n, enum ravl_slot_type t) at core/ravl.c:443>:
                                                                            ravl_node_type_most() <struct ravl_node *ravl_node_type_most (struct ravl_node *n, enum ravl_slot_type t) at core/ravl.c:430>:
                                                                            ravl_slot_opposite() <enum ravl_slot_type ravl_slot_opposite (enum ravl_slot_type t) at core/ravl.c:184>:
                                                                                ASSERTne()
                                                                    ravl_node_predecessor() <struct ravl_node *ravl_node_predecessor (struct ravl_node *n) at core/ravl.c:476>:
                                                                        ravl_node_cessor() <struct ravl_node *ravl_node_cessor (struct ravl_node *n, enum ravl_slot_type t) at core/ravl.c:443>:
                                                                            ravl_node_type_most() <struct ravl_node *ravl_node_type_most (struct ravl_node *n, enum ravl_slot_type t) at core/ravl.c:430>:
                                                                            ravl_slot_opposite() <enum ravl_slot_type ravl_slot_opposite (enum ravl_slot_type t) at core/ravl.c:184>:
                                                                                ASSERTne()
                                                            ravl_data() <void *ravl_data (struct ravl_node *node) at core/ravl.c:571>:
                                                                memcpy()
                                                            memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                                                memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                                                    heap_get_chunk_hdr()
                                                                memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                                                    heap_get_chunk_hdr()
                                                                    FATAL()
                                                            recycler_element_new() <struct recycler_element recycler_element_new (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/recycler.c:122>:
                                                                SUPPRESS_UNUSED()
                                                                util_mutex_lock()
                                                                util_mutex_unlock()
                                                            ASSERT()
                                                            util_fetch_and_sub64()
                                                            MIN()
                                                            ravl_remove() <void ravl_remove (struct ravl *ravl, struct ravl_node *n) at core/ravl.c:545> (R):
                                                                LOG()
                                                                ravl_node_successor() <struct ravl_node *ravl_node_successor (struct ravl_node *n) at core/ravl.c:465>:
                                                                    ravl_node_cessor() <struct ravl_node *ravl_node_cessor (struct ravl_node *n, enum ravl_slot_type t) at core/ravl.c:443>:
                                                                        ravl_node_type_most() <struct ravl_node *ravl_node_type_most (struct ravl_node *n, enum ravl_slot_type t) at core/ravl.c:430>:
                                                                        ravl_slot_opposite() <enum ravl_slot_type ravl_slot_opposite (enum ravl_slot_type t) at core/ravl.c:184>:
                                                                            ASSERTne()
                                                                memcpy()
                                                                ravl_remove() <void ravl_remove (struct ravl *ravl, struct ravl_node *n) at core/ravl.c:545> (recursive: see 9771)
                                                                ravl_node_ref() <struct ravl_node **ravl_node_ref (struct ravl *ravl, struct ravl_node *n) at core/ravl.c:223>:
                                                                    ravl_node_slot_type() <enum ravl_slot_type ravl_node_slot_type (struct ravl_node *n) at core/ravl.c:196>:
                                                                Free() <Free_func Free at core/alloc.c:91>
                                                            VEC_PUSH_BACK()
                                                            VEC_FOREACH_BY_PTR()
                                                            ravl_emplace_copy() <int ravl_emplace_copy (struct ravl *ravl, const void *data) at core/ravl.c:384>:
                                                                ravl_emplace() <int ravl_emplace (struct ravl *ravl, ravl_constr constr, const void *arg) at core/ravl.c:393>:
                                                                    LOG()
                                                                    ravl_new_node() <struct ravl_node *ravl_new_node (struct ravl *ravl, ravl_constr constr, const void *arg) at core/ravl.c:161>:
                                                                        Malloc()
                                                                        ERR()
                                                                        ravl_node_insert_constructor() <void ravl_node_insert_constructor (void *data, size_t data_size, const void *arg) at core/ravl.c:139>:
                                                                            SUPPRESS_UNUSED()
                                                                            memcpy()
                                                                    ravl_data() <void *ravl_data (struct ravl_node *node) at core/ravl.c:571>:
                                                                        memcpy()
                                                                    ravl_balance() <void ravl_balance (struct ravl *ravl, struct ravl_node *n) at core/ravl.c:337>:
                                                                        ravl_node_is() <int ravl_node_is (struct ravl_node *n, int i, int j) at core/ravl.c:306>:
                                                                            ravl_node_is_i_j() <int ravl_node_is_i_j (struct ravl_node *n, int i, int j) at core/ravl.c:296>:
                                                                                ravl_node_rank_difference_parent() <int ravl_node_rank_difference_parent (struct ravl_node *p, struct ravl_node *n) at core/ravl.c:275>:
                                                                                    ravl_node_rank() <int ravl_node_rank (struct ravl_node *n) at core/ravl.c:261>:
                                                                        ravl_node_promote() <void ravl_node_promote (struct ravl_node *n) at core/ravl.c:315>
                                                                        ravl_node_sibling() <struct ravl_node *ravl_node_sibling (struct ravl_node *n) at core/ravl.c:209>:
                                                                            ravl_node_slot_type() <enum ravl_slot_type ravl_node_slot_type (struct ravl_node *n) at core/ravl.c:196>:
                                                                        ravl_node_rank_difference() <int ravl_node_rank_difference (struct ravl_node *n) at core/ravl.c:287>:
                                                                            ravl_node_rank_difference_parent() <int ravl_node_rank_difference_parent (struct ravl_node *p, struct ravl_node *n) at core/ravl.c:275>:
                                                                                ravl_node_rank() <int ravl_node_rank (struct ravl_node *n) at core/ravl.c:261>:
                                                                        ravl_node_rank_difference_parent() <int ravl_node_rank_difference_parent (struct ravl_node *p, struct ravl_node *n) at core/ravl.c:275>:
                                                                            ravl_node_rank() <int ravl_node_rank (struct ravl_node *n) at core/ravl.c:261>:
                                                                        ravl_slot_opposite() <enum ravl_slot_type ravl_slot_opposite (enum ravl_slot_type t) at core/ravl.c:184>:
                                                                            ASSERTne()
                                                                        ravl_node_slot_type() <enum ravl_slot_type ravl_node_slot_type (struct ravl_node *n) at core/ravl.c:196>:
                                                                        ravl_rotate() <void ravl_rotate (struct ravl *ravl, struct ravl_node *n) at core/ravl.c:237>:
                                                                            ASSERTne()
                                                                            ravl_node_ref() <struct ravl_node **ravl_node_ref (struct ravl *ravl, struct ravl_node *n) at core/ravl.c:223>:
                                                                                ravl_node_slot_type() <enum ravl_slot_type ravl_node_slot_type (struct ravl_node *n) at core/ravl.c:196>:
                                                                            ravl_node_slot_type() <enum ravl_slot_type ravl_node_slot_type (struct ravl_node *n) at core/ravl.c:196>:
                                                                            ravl_slot_opposite() <enum ravl_slot_type ravl_slot_opposite (enum ravl_slot_type t) at core/ravl.c:184>:
                                                                                ASSERTne()
                                                                        ravl_node_demote() <void ravl_node_demote (struct ravl_node *n) at core/ravl.c:324>:
                                                                            ASSERT()
                                                                    Free() <Free_func Free at core/alloc.c:91>
                                                                ravl_node_copy_constructor() <void ravl_node_copy_constructor (void *data, size_t data_size, const void *arg) at core/ravl.c:152>:
                                                                    memcpy()
                                                            VEC_CLEAR()
                                                            util_mutex_unlock()
                                                        VEC_SIZE()
                                                        heap_bucket_acquire() <struct bucket *heap_bucket_acquire (struct palloc_heap *heap, uint8_t class_id, uint16_t arena_id) at libpmemobj/heap.c:470>:
                                                            out() <void out (const char *fmt, ...) at core/out.c:480>:
                                                                va_start()
                                                                out_common() <} void out_common (const char *file, int line, const char *func, int level, const char *suffix, const char *fmt, va_list ap) at core/out.c:334>
                                                                va_end()
                                                            heap_thread_arena() <struct arena *heap_thread_arena (struct palloc_heap *heap) at libpmemobj/heap.c:414>:
                                                                os_tls_get() <void *os_tls_get (os_tls_key_t key) at core/os_thread_posix.c:62>:
                                                                    pthread_getspecific()
                                                                heap_thread_arena_assign() <struct arena *heap_thread_arena_assign (struct palloc_heap *heap) at libpmemobj/heap.c:381>:
                                                                    util_mutex_lock()
                                                                    ASSERTne()
                                                                    VEC_SIZE()
                                                                    VEC_FOREACH()
                                                                    LOG()
                                                                    heap_arena_thread_attach() <void heap_arena_thread_attach (struct palloc_heap *heap, struct arena *a) at libpmemobj/heap.c:249>:
                                                                        ASSERTeq()
                                                                        os_tls_get() <void *os_tls_get (os_tls_key_t key) at core/os_thread_posix.c:62>:
                                                                            pthread_getspecific()
                                                                        heap_arena_thread_detach() <void heap_arena_thread_detach (struct arena *a) at libpmemobj/heap.c:232>:
                                                                            util_fetch_and_sub64()
                                                                        ASSERTne()
                                                                        util_fetch_and_add64()
                                                                        os_tls_set() <int os_tls_set (os_tls_key_t key, const void *value) at core/os_thread_posix.c:53>:
                                                                            pthread_setspecific()
                                                                    util_mutex_unlock()
                                                                heap_global_arena_assign() <struct arena *heap_global_arena_assign (struct palloc_heap *heap) at libpmemobj/heap.c:348>:
                                                                    util_mutex_lock()
                                                                    ASSERTne()
                                                                    VEC_SIZE()
                                                                    VEC_FOREACH()
                                                                    LOG()
                                                                    util_mutex_unlock()
                                                                ASSERT()
                                                                ASSERTne()
                                                            ASSERTne()
                                                            VEC_ARR()
                                                            bucket_acquire() <struct bucket *bucket_acquire (struct bucket_locked *b) at libpmemobj/bucket.c:117>:
                                                                util_mutex_lock()
                                                        ASSERT()
                                                        VEC_FOREACH_BY_PTR()
                                                        heap_run_into_free_chunk() <void heap_run_into_free_chunk (struct palloc_heap *heap, struct bucket *bucket, struct memory_block *m) at libpmemobj/heap.c:697>:
                                                            heap_get_chunk_hdr()
                                                            STATS_SUB()
                                                            util_mutex_lock()
                                                            memblock_huge_init() <struct memory_block memblock_huge_init (struct palloc_heap *heap, uint32_t chunk_id, uint32_t zone_id, uint32_t size_idx) at libpmemobj/memblock.c:1329>:
                                                                heap_get_chunk_hdr()
                                                                VALGRIND_DO_MAKE_MEM_UNDEFINED()
                                                                VALGRIND_ANNOTATE_NEW_MEMORY()
                                                                chunk_get_chunk_hdr_value() <uint64_t chunk_get_chunk_hdr_value (uint16_t type, uint16_t flags, uint32_t size_idx) at libpmemobj/memblock.c:604>:
                                                                    COMPILE_ERROR_ON()
                                                                    memcpy()
                                                                util_atomic_store_explicit64()
                                                                pmemops_persist()
                                                                huge_write_footer() <void huge_write_footer (struct chunk_header *hdr, uint32_t size_idx) at libpmemobj/memblock.c:1166>:
                                                                    VALGRIND_DO_MAKE_MEM_UNDEFINED()
                                                                    VALGRIND_SET_CLEAN()
                                                                memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                                                    memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                                                        heap_get_chunk_hdr()
                                                                    memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                                                        heap_get_chunk_hdr()
                                                                        FATAL()
                                                            heap_free_chunk_reuse() <int heap_free_chunk_reuse (struct palloc_heap *heap, struct bucket *bucket, struct memory_block *m) at libpmemobj/heap.c:674>:
                                                                heap_coalesce_huge() <struct memory_block heap_coalesce_huge (struct palloc_heap *heap, struct bucket *b, const struct memory_block *m) at libpmemobj/heap.c:650>:
                                                                    heap_get_adjacent_free_block() <int heap_get_adjacent_free_block (struct palloc_heap *heap, const struct memory_block *in, struct memory_block *out, int prev) at libpmemobj/heap.c:582>:
                                                                        ZID_TO_ZONE()
                                                                        memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                                                            memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                                                                heap_get_chunk_hdr()
                                                                            memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                                                                heap_get_chunk_hdr()
                                                                                FATAL()
                                                                    bucket_remove_block() <int bucket_remove_block (struct bucket *b, const struct memory_block *m) at libpmemobj/bucket.c:178>
                                                                    heap_coalesce() <struct memory_block heap_coalesce (struct palloc_heap *heap, const struct memory_block *blocks[], int n) at libpmemobj/heap.c:621>:
                                                                        ASSERTne()
                                                                        memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                                                            memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                                                                heap_get_chunk_hdr()
                                                                            memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                                                                heap_get_chunk_hdr()
                                                                                FATAL()
                                                                bucket_insert_block() <int bucket_insert_block (struct bucket *b, const struct memory_block *m) at libpmemobj/bucket.c:161>:
                                                                    VALGRIND_DO_MAKE_MEM_NOACCESS()
                                                                    VALGRIND_ANNOTATE_NEW_MEMORY()
                                                            util_mutex_unlock()
                                                        heap_bucket_release() <void heap_bucket_release (struct bucket *b) at libpmemobj/heap.c:498>:
                                                            bucket_release() <void bucket_release (struct bucket *b) at libpmemobj/bucket.c:127>:
                                                                util_mutex_unlock()
                                                        VEC_DELETE()
                                                heap_populate_bucket() <int heap_populate_bucket (struct palloc_heap *heap, struct bucket *bucket) at libpmemobj/heap.c:850>:
                                                    util_atomic_store_explicit32()
                                                    ZID_TO_ZONE()
                                                    VALGRIND_ADD_TO_GLOBAL_TX_IGNORE()
                                                    heap_zone_init() <void heap_zone_init (struct palloc_heap *heap, uint32_t zone_id, uint32_t first_chunk_id) at libpmemobj/heap.c:559>:
                                                        ZID_TO_ZONE()
                                                        zone_calc_size_idx() <uint32_t zone_calc_size_idx (uint32_t zone_id, unsigned max_zone, size_t heap_size) at libpmemobj/heap.c:533>:
                                                            ASSERT()
                                                        ASSERT()
                                                        memblock_huge_init() <struct memory_block memblock_huge_init (struct palloc_heap *heap, uint32_t chunk_id, uint32_t zone_id, uint32_t size_idx) at libpmemobj/memblock.c:1329>:
                                                            heap_get_chunk_hdr()
                                                            VALGRIND_DO_MAKE_MEM_UNDEFINED()
                                                            VALGRIND_ANNOTATE_NEW_MEMORY()
                                                            chunk_get_chunk_hdr_value() <uint64_t chunk_get_chunk_hdr_value (uint16_t type, uint16_t flags, uint32_t size_idx) at libpmemobj/memblock.c:604>:
                                                                COMPILE_ERROR_ON()
                                                                memcpy()
                                                            util_atomic_store_explicit64()
                                                            pmemops_persist()
                                                            huge_write_footer() <void huge_write_footer (struct chunk_header *hdr, uint32_t size_idx) at libpmemobj/memblock.c:1166>:
                                                                VALGRIND_DO_MAKE_MEM_UNDEFINED()
                                                                VALGRIND_SET_CLEAN()
                                                            memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                                                memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                                                    heap_get_chunk_hdr()
                                                                memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                                                    heap_get_chunk_hdr()
                                                                    FATAL()
                                                        pmemops_persist()
                                                    heap_reclaim_zone_garbage() <void heap_reclaim_zone_garbage (struct palloc_heap *heap, struct bucket *bucket, uint32_t zone_id) at libpmemobj/heap.c:775>:
                                                        ZID_TO_ZONE()
                                                        ASSERT()
                                                        memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                                            memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                                                heap_get_chunk_hdr()
                                                            memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                                                heap_get_chunk_hdr()
                                                                FATAL()
                                                        heap_reclaim_run() <int heap_reclaim_run (struct palloc_heap *heap, struct memory_block *m, int startup) at libpmemobj/heap.c:733>:
                                                            heap_get_chunk_run()
                                                            heap_get_chunk_hdr()
                                                            alloc_class_by_run() <struct alloc_class *alloc_class_by_run (struct alloc_class_collection *ac, size_t unit_size, uint16_t flags, uint32_t size_idx) at libpmemobj/alloc_class.c:594>:
                                                                SIZE_TO_CLASS_MAP_INDEX()
                                                                ASSERT()
                                                                critnib_get() <void *critnib_get (struct critnib *c, uint64_t key) at libpmemobj/critnib.c:515>:
                                                                    load() <void load (void *src, void *dst) at libpmemobj/critnib.c:130>:
                                                                        util_atomic_load_explicit64()
                                                                    is_leaf() <inline bool is_leaf (struct critnib_node *n) at libpmemobj/critnib.c:150>:
                                                                    slice_index() <inline unsigned slice_index (uint64_t key, sh_t shift) at libpmemobj/critnib.c:178>:
                                                                    to_leaf() <inline struct critnib_leaf *to_leaf (struct critnib_node *n) at libpmemobj/critnib.c:159>:
                                                                RUN_CLASS_KEY_PACK()
                                                            recycler_element_new() <struct recycler_element recycler_element_new (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/recycler.c:122>:
                                                                SUPPRESS_UNUSED()
                                                                util_mutex_lock()
                                                                util_mutex_unlock()
                                                            ASSERTeq()
                                                            STATS_INC()
                                                            heap_get_recycler() <struct recycler *heap_get_recycler (struct palloc_heap *heap, size_t id, size_t nallocs) at libpmemobj/heap.c:106> (R):
                                                                util_atomic_load_explicit64()
                                                                recycler_new() <struct recycler *recycler_new (struct palloc_heap *heap, size_t nallocs, size_t *peak_arenas) at libpmemobj/recycler.c:74>:
                                                                    Malloc()
                                                                    ravl_new_sized() <struct ravl *ravl_new_sized (ravl_compare *compare, size_t data_size) at core/ravl.c:45>:
                                                                        Malloc()
                                                                        ERR()
                                                                    recycler_element_cmp() <int recycler_element_cmp (const void *lhs, const void *rhs) at libpmemobj/recycler.c:23>:
                                                                    memset()
                                                                    VEC_INIT()
                                                                    util_mutex_init()
                                                                    Free() <Free_func Free at core/alloc.c:91>
                                                                util_bool_compare_and_swap64()
                                                                recycler_delete() <void recycler_delete (struct recycler *r) at libpmemobj/recycler.c:107>:
                                                                    VEC_DELETE()
                                                                    util_mutex_destroy()
                                                                    ravl_delete() <void ravl_delete (struct ravl *ravl) at core/ravl.c:112>:
                                                                        ravl_delete_cb() <void ravl_delete_cb (struct ravl *ravl, ravl_cb cb, void *arg) at core/ravl.c:102>:
                                                                            ravl_foreach_node() <void ravl_foreach_node (struct ravl_node *n, ravl_cb cb, void *arg, int free_node) at core/ravl.c:74> (R):
                                                                                ravl_foreach_node() <void ravl_foreach_node (struct ravl_node *n, ravl_cb cb, void *arg, int free_node) at core/ravl.c:74> (recursive: see 9990)
                                                                                Free() <Free_func Free at core/alloc.c:91>
                                                                            Free() <Free_func Free at core/alloc.c:91>
                                                                    Free() <Free_func Free at core/alloc.c:91>
                                                                heap_get_recycler() <struct recycler *heap_get_recycler (struct palloc_heap *heap, size_t id, size_t nallocs) at libpmemobj/heap.c:106> (recursive: see 9972)
                                                            recycler_put() <int recycler_put (struct recycler *r, struct recycler_element element) at libpmemobj/recycler.c:154>:
                                                                util_mutex_lock()
                                                                ravl_emplace_copy() <int ravl_emplace_copy (struct ravl *ravl, const void *data) at core/ravl.c:384>:
                                                                    ravl_emplace() <int ravl_emplace (struct ravl *ravl, ravl_constr constr, const void *arg) at core/ravl.c:393>:
                                                                        LOG()
                                                                        ravl_new_node() <struct ravl_node *ravl_new_node (struct ravl *ravl, ravl_constr constr, const void *arg) at core/ravl.c:161>:
                                                                            Malloc()
                                                                            ERR()
                                                                            ravl_node_insert_constructor() <void ravl_node_insert_constructor (void *data, size_t data_size, const void *arg) at core/ravl.c:139>:
                                                                                SUPPRESS_UNUSED()
                                                                                memcpy()
                                                                        ravl_data() <void *ravl_data (struct ravl_node *node) at core/ravl.c:571>:
                                                                            memcpy()
                                                                        ravl_balance() <void ravl_balance (struct ravl *ravl, struct ravl_node *n) at core/ravl.c:337>:
                                                                            ravl_node_is() <int ravl_node_is (struct ravl_node *n, int i, int j) at core/ravl.c:306>:
                                                                                ravl_node_is_i_j() <int ravl_node_is_i_j (struct ravl_node *n, int i, int j) at core/ravl.c:296>:
                                                                                    ravl_node_rank_difference_parent() <int ravl_node_rank_difference_parent (struct ravl_node *p, struct ravl_node *n) at core/ravl.c:275>:
                                                                                        ravl_node_rank() <int ravl_node_rank (struct ravl_node *n) at core/ravl.c:261>:
                                                                            ravl_node_promote() <void ravl_node_promote (struct ravl_node *n) at core/ravl.c:315>
                                                                            ravl_node_sibling() <struct ravl_node *ravl_node_sibling (struct ravl_node *n) at core/ravl.c:209>:
                                                                                ravl_node_slot_type() <enum ravl_slot_type ravl_node_slot_type (struct ravl_node *n) at core/ravl.c:196>:
                                                                            ravl_node_rank_difference() <int ravl_node_rank_difference (struct ravl_node *n) at core/ravl.c:287>:
                                                                                ravl_node_rank_difference_parent() <int ravl_node_rank_difference_parent (struct ravl_node *p, struct ravl_node *n) at core/ravl.c:275>:
                                                                                    ravl_node_rank() <int ravl_node_rank (struct ravl_node *n) at core/ravl.c:261>:
                                                                            ravl_node_rank_difference_parent() <int ravl_node_rank_difference_parent (struct ravl_node *p, struct ravl_node *n) at core/ravl.c:275>:
                                                                                ravl_node_rank() <int ravl_node_rank (struct ravl_node *n) at core/ravl.c:261>:
                                                                            ravl_slot_opposite() <enum ravl_slot_type ravl_slot_opposite (enum ravl_slot_type t) at core/ravl.c:184>:
                                                                                ASSERTne()
                                                                            ravl_node_slot_type() <enum ravl_slot_type ravl_node_slot_type (struct ravl_node *n) at core/ravl.c:196>:
                                                                            ravl_rotate() <void ravl_rotate (struct ravl *ravl, struct ravl_node *n) at core/ravl.c:237>:
                                                                                ASSERTne()
                                                                                ravl_node_ref() <struct ravl_node **ravl_node_ref (struct ravl *ravl, struct ravl_node *n) at core/ravl.c:223>:
                                                                                    ravl_node_slot_type() <enum ravl_slot_type ravl_node_slot_type (struct ravl_node *n) at core/ravl.c:196>:
                                                                                ravl_node_slot_type() <enum ravl_slot_type ravl_node_slot_type (struct ravl_node *n) at core/ravl.c:196>:
                                                                                ravl_slot_opposite() <enum ravl_slot_type ravl_slot_opposite (enum ravl_slot_type t) at core/ravl.c:184>:
                                                                                    ASSERTne()
                                                                            ravl_node_demote() <void ravl_node_demote (struct ravl_node *n) at core/ravl.c:324>:
                                                                                ASSERT()
                                                                        Free() <Free_func Free at core/alloc.c:91>
                                                                    ravl_node_copy_constructor() <void ravl_node_copy_constructor (void *data, size_t data_size, const void *arg) at core/ravl.c:152>:
                                                                        memcpy()
                                                                util_mutex_unlock()
                                                            ERR()
                                                        heap_run_into_free_chunk() <void heap_run_into_free_chunk (struct palloc_heap *heap, struct bucket *bucket, struct memory_block *m) at libpmemobj/heap.c:697>:
                                                            heap_get_chunk_hdr()
                                                            STATS_SUB()
                                                            util_mutex_lock()
                                                            memblock_huge_init() <struct memory_block memblock_huge_init (struct palloc_heap *heap, uint32_t chunk_id, uint32_t zone_id, uint32_t size_idx) at libpmemobj/memblock.c:1329>:
                                                                heap_get_chunk_hdr()
                                                                VALGRIND_DO_MAKE_MEM_UNDEFINED()
                                                                VALGRIND_ANNOTATE_NEW_MEMORY()
                                                                chunk_get_chunk_hdr_value() <uint64_t chunk_get_chunk_hdr_value (uint16_t type, uint16_t flags, uint32_t size_idx) at libpmemobj/memblock.c:604>:
                                                                    COMPILE_ERROR_ON()
                                                                    memcpy()
                                                                util_atomic_store_explicit64()
                                                                pmemops_persist()
                                                                huge_write_footer() <void huge_write_footer (struct chunk_header *hdr, uint32_t size_idx) at libpmemobj/memblock.c:1166>:
                                                                    VALGRIND_DO_MAKE_MEM_UNDEFINED()
                                                                    VALGRIND_SET_CLEAN()
                                                                memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                                                    memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                                                        heap_get_chunk_hdr()
                                                                    memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                                                        heap_get_chunk_hdr()
                                                                        FATAL()
                                                            heap_free_chunk_reuse() <int heap_free_chunk_reuse (struct palloc_heap *heap, struct bucket *bucket, struct memory_block *m) at libpmemobj/heap.c:674>:
                                                                heap_coalesce_huge() <struct memory_block heap_coalesce_huge (struct palloc_heap *heap, struct bucket *b, const struct memory_block *m) at libpmemobj/heap.c:650>:
                                                                    heap_get_adjacent_free_block() <int heap_get_adjacent_free_block (struct palloc_heap *heap, const struct memory_block *in, struct memory_block *out, int prev) at libpmemobj/heap.c:582>:
                                                                        ZID_TO_ZONE()
                                                                        memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                                                            memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                                                                heap_get_chunk_hdr()
                                                                            memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                                                                heap_get_chunk_hdr()
                                                                                FATAL()
                                                                    bucket_remove_block() <int bucket_remove_block (struct bucket *b, const struct memory_block *m) at libpmemobj/bucket.c:178>
                                                                    heap_coalesce() <struct memory_block heap_coalesce (struct palloc_heap *heap, const struct memory_block *blocks[], int n) at libpmemobj/heap.c:621>:
                                                                        ASSERTne()
                                                                        memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                                                            memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                                                                heap_get_chunk_hdr()
                                                                            memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                                                                heap_get_chunk_hdr()
                                                                                FATAL()
                                                                bucket_insert_block() <int bucket_insert_block (struct bucket *b, const struct memory_block *m) at libpmemobj/bucket.c:161>:
                                                                    VALGRIND_DO_MAKE_MEM_NOACCESS()
                                                                    VALGRIND_ANNOTATE_NEW_MEMORY()
                                                            util_mutex_unlock()
                                                        heap_free_chunk_reuse() <int heap_free_chunk_reuse (struct palloc_heap *heap, struct bucket *bucket, struct memory_block *m) at libpmemobj/heap.c:674>:
                                                            heap_coalesce_huge() <struct memory_block heap_coalesce_huge (struct palloc_heap *heap, struct bucket *b, const struct memory_block *m) at libpmemobj/heap.c:650>:
                                                                heap_get_adjacent_free_block() <int heap_get_adjacent_free_block (struct palloc_heap *heap, const struct memory_block *in, struct memory_block *out, int prev) at libpmemobj/heap.c:582>:
                                                                    ZID_TO_ZONE()
                                                                    memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                                                        memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                                                            heap_get_chunk_hdr()
                                                                        memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                                                            heap_get_chunk_hdr()
                                                                            FATAL()
                                                                bucket_remove_block() <int bucket_remove_block (struct bucket *b, const struct memory_block *m) at libpmemobj/bucket.c:178>
                                                                heap_coalesce() <struct memory_block heap_coalesce (struct palloc_heap *heap, const struct memory_block *blocks[], int n) at libpmemobj/heap.c:621>:
                                                                    ASSERTne()
                                                                    memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                                                        memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                                                            heap_get_chunk_hdr()
                                                                        memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                                                            heap_get_chunk_hdr()
                                                                            FATAL()
                                                            bucket_insert_block() <int bucket_insert_block (struct bucket *b, const struct memory_block *m) at libpmemobj/bucket.c:161>:
                                                                VALGRIND_DO_MAKE_MEM_NOACCESS()
                                                                VALGRIND_ANNOTATE_NEW_MEMORY()
                                                heap_extend() <int heap_extend (struct palloc_heap *heap, struct bucket *b, size_t size) at libpmemobj/heap.c:1515>:
                                                    util_pool_extend() <void *util_pool_extend (struct pool_set *set, size_t *size, size_t minpartsize) at common/set.c:2231>:
                                                        LOG()
                                                        ERR()
                                                        util_poolset_append_new_part() <int util_poolset_append_new_part (struct pool_set *set, size_t size) at common/set.c:2174>:
                                                            LOG()
                                                            VEC_SIZE()
                                                            VEC_GET()
                                                            strlen()
                                                            Malloc()
                                                            ERR()
                                                            snprintf()
                                                            util_replica_add_part() <int util_replica_add_part (struct pool_replica **repp, const char *path, size_t filesize) at common/set.c:708>:
                                                                LOG()
                                                                util_replica_add_part_by_idx() <int util_replica_add_part_by_idx (struct pool_replica **repp, const char *path, size_t filesize, unsigned p) at common/set.c:662>:
                                                                    LOG()
                                                                    util_replica_reserve() <int util_replica_reserve (struct pool_replica **repp, unsigned n) at common/set.c:633>:
                                                                        LOG()
                                                                        Realloc()
                                                                        ERR()
                                                                        memset()
                                                                    ASSERTne()
                                                                    util_file_get_type() <enum file_type util_file_get_type (const char *path) at common/file.c:106>:
                                                                        LOG()
                                                                        ERR()
                                                                        util_file_exists() <int util_file_exists (const char *path) at common/file.c:32>:
                                                                            LOG()
                                                                            os_access() <int os_access (const char *pathname, int mode) at core/os_posix.c:97>:
                                                                                access()
                                                                            ERR()
                                                                        os_stat() <int os_stat (const char *pathname, os_stat_t *buf) at core/os_posix.c:79>:
                                                                            stat()
                                                                        util_stat_get_type() <enum file_type util_stat_get_type (const os_stat_t *st) at common/file.c:62>:
                                                                            pmem2_get_type_from_stat() <int pmem2_get_type_from_stat (const os_stat_t *st, enum pmem2_file_type *type) at libpmem2/pmem2_utils_linux.c:23>:
                                                                                S_ISREG()
                                                                                S_ISDIR()
                                                                                S_ISCHR()
                                                                                ERR()
                                                                                util_snprintf() <int util_snprintf (char *str, size_t size, const char *format, ...) at core/util.c:434>:
                                                                                    va_start()
                                                                                    vsnprintf()
                                                                                    va_end()
                                                                                os_major()
                                                                                os_minor()
                                                                                ASSERTinfo()
                                                                                LOG()
                                                                                realpath()
                                                                                strrchr()
                                                                                strcmp()
                                                                            pmem2_err_to_errno() <int pmem2_err_to_errno (int err) at libpmem2/pmem2_utils.c:67>:
                                                                                FATAL()
                                                                            ASSERTinfo()
                                                                    util_file_device_dax_alignment() <size_t util_file_device_dax_alignment (const char *path) at common/file_posix.c:139>:
                                                                        LOG()
                                                                        device_dax_alignment() <size_t device_dax_alignment (const char *path) at common/file_posix.c:105>:
                                                                            LOG()
                                                                            os_open() <int os_open (const char *pathname, int flags, ...) at core/os_posix.c:29>:
                                                                                va_start()
                                                                                va_arg()
                                                                                va_end()
                                                                                open()
                                                                            pmem2_source_from_fd() <int pmem2_source_from_fd (struct pmem2_source **src, int fd) at libpmem2/source_posix.c:19>:
                                                                                PMEM2_ERR_CLR()
                                                                                fcntl()
                                                                                ERR()
                                                                                os_fstat()
                                                                                pmem2_get_type_from_stat() <int pmem2_get_type_from_stat (const os_stat_t *st, enum pmem2_file_type *type) at libpmem2/pmem2_utils_linux.c:23>:
                                                                                    S_ISREG()
                                                                                    S_ISDIR()
                                                                                    S_ISCHR()
                                                                                    ERR()
                                                                                    util_snprintf() <int util_snprintf (char *str, size_t size, const char *format, ...) at core/util.c:434>:
                                                                                        va_start()
                                                                                        vsnprintf()
                                                                                        va_end()
                                                                                    os_major()
                                                                                    os_minor()
                                                                                    ASSERTinfo()
                                                                                    LOG()
                                                                                    realpath()
                                                                                    strrchr()
                                                                                    strcmp()
                                                                                pmem2_malloc() <void *pmem2_malloc (size_t size, int *err) at libpmem2/pmem2_utils.c:19>:
                                                                                    Malloc()
                                                                                    ERR()
                                                                                ASSERTne()
                                                                            pmem2_device_dax_alignment() <int pmem2_device_dax_alignment (const struct pmem2_source *src, size_t *alignment) at libpmem2/pmem2_utils_ndctl.c:18>:
                                                                                ndctl_new()
                                                                                ERR()
                                                                                pmem2_region_namespace() <int pmem2_region_namespace (struct ndctl_ctx *ctx, const struct pmem2_source *src, struct ndctl_region **pregion, struct ndctl_namespace **pndns) at libpmem2/region_namespace_ndctl.c:131>:
                                                                                    LOG()
                                                                                    ERR()
                                                                                    FOREACH_BUS_REGION_NAMESPACE()
                                                                                    ndctl_namespace_get_dax()
                                                                                    ASSERTeq()
                                                                                    ndctl_dax_get_daxctl_region()
                                                                                    daxctl_dev_foreach()
                                                                                    daxctl_dev_get_devname()
                                                                                    ndctl_match_devdax() <int ndctl_match_devdax (dev_t st_rdev, const char *devname) at libpmem2/region_namespace_ndctl.c:26>:
                                                                                        LOG()
                                                                                        stat()
                                                                                        util_snprintf() <int util_snprintf (char *str, size_t size, const char *format, ...) at core/util.c:434>:
                                                                                            va_start()
                                                                                            vsnprintf()
                                                                                            va_end()
                                                                                        ERR()
                                                                                        os_stat() <int os_stat (const char *pathname, os_stat_t *buf) at core/os_posix.c:79>:
                                                                                            stat()
                                                                                    ndctl_namespace_get_btt()
                                                                                    ndctl_btt_get_block_device()
                                                                                    ndctl_namespace_get_pfn()
                                                                                    ndctl_pfn_get_block_device()
                                                                                    ndctl_namespace_get_block_device()
                                                                                    ndctl_match_fsdax() <int ndctl_match_fsdax (dev_t st_dev, const char *devname) at libpmem2/region_namespace_ndctl.c:64>:
                                                                                        LOG()
                                                                                        util_snprintf() <int util_snprintf (char *str, size_t size, const char *format, ...) at core/util.c:434>:
                                                                                            va_start()
                                                                                            vsnprintf()
                                                                                            va_end()
                                                                                        ERR()
                                                                                        major()
                                                                                        minor()
                                                                                        os_open() <int os_open (const char *pathname, int flags, ...) at core/os_posix.c:29>:
                                                                                            va_start()
                                                                                            va_arg()
                                                                                            va_end()
                                                                                            open()
                                                                                        read()
                                                                                        os_close()
                                                                                        strcmp()
                                                                                LOG()
                                                                                ndctl_namespace_get_dax()
                                                                                ndctl_dax_get_align()
                                                                                ndctl_unref()
                                                                            pmem2_source_delete() <int pmem2_source_delete (struct pmem2_source **src) at libpmem2/source.c:30>:
                                                                                Free() <Free_func Free at core/alloc.c:91>
                                                                            os_close()
                                                            FATAL()
                                                            util_poolset_set_size() <void util_poolset_set_size (struct pool_set *set) at common/set.c:949>:
                                                                LOG()
                                                            Free() <Free_func Free at core/alloc.c:91>
                                                        util_part_open() <int util_part_open (struct pool_set_part *part, size_t minsize, int create_part) at common/set.c:1459>:
                                                            LOG()
                                                            util_file_exists() <int util_file_exists (const char *path) at common/file.c:32>:
                                                                LOG()
                                                                os_access() <int os_access (const char *pathname, int mode) at core/os_posix.c:97>:
                                                                    access()
                                                                ERR()
                                                            util_file_create() <int util_file_create (const char *path, size_t size, size_t minsize) at common/file.c:398>:
                                                                LOG()
                                                                ASSERTne()
                                                                ERR()
                                                                os_open() <int os_open (const char *pathname, int flags, ...) at core/os_posix.c:29>:
                                                                    va_start()
                                                                    va_arg()
                                                                    va_end()
                                                                    open()
                                                                os_posix_fallocate() <int os_posix_fallocate (int fd, os_off_t offset, off_t len) at core/os_posix.c:142>:
                                                                    posix_fallocate()
                                                                os_flock() <int os_flock (int fd, int operation) at core/os_posix.c:215>:
                                                                    flock()
                                                                os_close()
                                                                os_unlink() <int os_unlink (const char *pathname) at core/os_posix.c:88>:
                                                                    unlink()
                                                            util_file_open() <int util_file_open (const char *path, size_t *size, size_t minsize, int flags) at common/file.c:456>:
                                                                LOG()
                                                                os_open() <int os_open (const char *pathname, int flags, ...) at core/os_posix.c:29>:
                                                                    va_start()
                                                                    va_arg()
                                                                    va_end()
                                                                    open()
                                                                ERR()
                                                                os_flock() <int os_flock (int fd, int operation) at core/os_posix.c:215>:
                                                                    flock()
                                                                os_close()
                                                                ASSERTeq()
                                                                util_fd_get_size() <ssize_t util_fd_get_size (int fd) at common/file.c:157>:
                                                                    LOG()
                                                                    pmem2_source_from_fd() <int pmem2_source_from_fd (struct pmem2_source **src, int fd) at libpmem2/source_posix.c:19>:
                                                                        PMEM2_ERR_CLR()
                                                                        fcntl()
                                                                        ERR()
                                                                        os_fstat()
                                                                        pmem2_get_type_from_stat() <int pmem2_get_type_from_stat (const os_stat_t *st, enum pmem2_file_type *type) at libpmem2/pmem2_utils_linux.c:23>:
                                                                            S_ISREG()
                                                                            S_ISDIR()
                                                                            S_ISCHR()
                                                                            ERR()
                                                                            util_snprintf() <int util_snprintf (char *str, size_t size, const char *format, ...) at core/util.c:434>:
                                                                                va_start()
                                                                                vsnprintf()
                                                                                va_end()
                                                                            os_major()
                                                                            os_minor()
                                                                            ASSERTinfo()
                                                                            LOG()
                                                                            realpath()
                                                                            strrchr()
                                                                            strcmp()
                                                                        pmem2_malloc() <void *pmem2_malloc (size_t size, int *err) at libpmem2/pmem2_utils.c:19>:
                                                                            Malloc()
                                                                            ERR()
                                                                        ASSERTne()
                                                                    pmem2_err_to_errno() <int pmem2_err_to_errno (int err) at libpmem2/pmem2_utils.c:67>:
                                                                        FATAL()
                                                                    pmem2_source_size() <int pmem2_source_size (const struct pmem2_source *src, size_t *size) at libpmem2/source_posix.c:90>:
                                                                        LOG()
                                                                        PMEM2_ERR_CLR()
                                                                        ASSERT()
                                                                        os_fstat()
                                                                        ERR()
                                                                        pmem2_device_dax_size() <int pmem2_device_dax_size (const struct pmem2_source *src, size_t *size) at libpmem2/pmem2_utils_ndctl.c:58>:
                                                                            ndctl_new()
                                                                            ERR()
                                                                            pmem2_region_namespace() <int pmem2_region_namespace (struct ndctl_ctx *ctx, const struct pmem2_source *src, struct ndctl_region **pregion, struct ndctl_namespace **pndns) at libpmem2/region_namespace_ndctl.c:131>:
                                                                                LOG()
                                                                                ERR()
                                                                                FOREACH_BUS_REGION_NAMESPACE()
                                                                                ndctl_namespace_get_dax()
                                                                                ASSERTeq()
                                                                                ndctl_dax_get_daxctl_region()
                                                                                daxctl_dev_foreach()
                                                                                daxctl_dev_get_devname()
                                                                                ndctl_match_devdax() <int ndctl_match_devdax (dev_t st_rdev, const char *devname) at libpmem2/region_namespace_ndctl.c:26>:
                                                                                    LOG()
                                                                                    stat()
                                                                                    util_snprintf() <int util_snprintf (char *str, size_t size, const char *format, ...) at core/util.c:434>:
                                                                                        va_start()
                                                                                        vsnprintf()
                                                                                        va_end()
                                                                                    ERR()
                                                                                    os_stat() <int os_stat (const char *pathname, os_stat_t *buf) at core/os_posix.c:79>:
                                                                                        stat()
                                                                                ndctl_namespace_get_btt()
                                                                                ndctl_btt_get_block_device()
                                                                                ndctl_namespace_get_pfn()
                                                                                ndctl_pfn_get_block_device()
                                                                                ndctl_namespace_get_block_device()
                                                                                ndctl_match_fsdax() <int ndctl_match_fsdax (dev_t st_dev, const char *devname) at libpmem2/region_namespace_ndctl.c:64>:
                                                                                    LOG()
                                                                                    util_snprintf() <int util_snprintf (char *str, size_t size, const char *format, ...) at core/util.c:434>:
                                                                                        va_start()
                                                                                        vsnprintf()
                                                                                        va_end()
                                                                                    ERR()
                                                                                    major()
                                                                                    minor()
                                                                                    os_open() <int os_open (const char *pathname, int flags, ...) at core/os_posix.c:29>:
                                                                                        va_start()
                                                                                        va_arg()
                                                                                        va_end()
                                                                                        open()
                                                                                    read()
                                                                                    os_close()
                                                                                    strcmp()
                                                                            LOG()
                                                                            ndctl_namespace_get_dax()
                                                                            ndctl_dax_get_size()
                                                                            ndctl_unref()
                                                                        FATAL()
                                                                    pmem2_source_delete() <int pmem2_source_delete (struct pmem2_source **src) at libpmem2/source.c:30>:
                                                                        Free() <Free_func Free at core/alloc.c:91>
                                                                    ERR()
                                                            os_posix_fallocate() <int os_posix_fallocate (int fd, os_off_t offset, off_t len) at core/os_posix.c:142>:
                                                                posix_fallocate()
                                                            ERR()
                                                        util_map_part() <int util_map_part (struct pool_set_part *part, void *addr, size_t size, size_t offset, int flags, int rdonly) at common/set.c:229>:
                                                            LOG()
                                                            ASSERTeq()
                                                            ASSERT()
                                                            roundup()
                                                            util_map_sync() <void *util_map_sync (void *addr, size_t len, int proto, int flags, int fd, os_off_t offset, int *map_sync) at common/mmap_posix.c:159>:
                                                                LOG()
                                                                mmap()
                                                            ERR()
                                                            munmap()
                                                            VALGRIND_REGISTER_PMEM_MAPPING()
                                                            VALGRIND_REGISTER_PMEM_FILE()
                                                        util_poolset_chmod() <int util_poolset_chmod (struct pool_set *set, mode_t mode) at common/set.c:404>:
                                                            LOG()
                                                            os_fstat()
                                                            ERR()
                                                            os_chmod() <int os_chmod (const char *pathname, mode_t mode) at core/os_posix.c:124>:
                                                                chmod()
                                                        util_poolset_fdclose() <void util_poolset_fdclose (struct pool_set *set) at common/set.c:457>:
                                                            util_poolset_fdclose_always() <void util_poolset_fdclose_always (struct pool_set *set) at common/set.c:445>:
                                                                LOG()
                                                                util_replica_fdclose() <void util_replica_fdclose (struct pool_replica *rep) at common/set.c:3232>:
                                                                    util_part_fdclose() <void util_part_fdclose (struct pool_set_part *part) at common/set.c:1517>:
                                                                        LOG()
                                                                        os_close()
                                                        os_close()
                                                        os_unlink() <int os_unlink (const char *pathname) at core/os_posix.c:88>:
                                                            unlink()
                                                        Free() <Free_func Free at core/alloc.c:91>
                                                        util_poolset_set_size() <void util_poolset_set_size (struct pool_set *set) at common/set.c:949>:
                                                            LOG()
                                                    pmemops_persist()
                                                    heap_max_zone() <unsigned heap_max_zone (size_t size) at libpmemobj/heap.c:516>:
                                                    ZID_TO_ZONE()
                                                    heap_zone_init() <void heap_zone_init (struct palloc_heap *heap, uint32_t zone_id, uint32_t first_chunk_id) at libpmemobj/heap.c:559>:
                                                        ZID_TO_ZONE()
                                                        zone_calc_size_idx() <uint32_t zone_calc_size_idx (uint32_t zone_id, unsigned max_zone, size_t heap_size) at libpmemobj/heap.c:533>:
                                                            ASSERT()
                                                        ASSERT()
                                                        memblock_huge_init() <struct memory_block memblock_huge_init (struct palloc_heap *heap, uint32_t chunk_id, uint32_t zone_id, uint32_t size_idx) at libpmemobj/memblock.c:1329>:
                                                            heap_get_chunk_hdr()
                                                            VALGRIND_DO_MAKE_MEM_UNDEFINED()
                                                            VALGRIND_ANNOTATE_NEW_MEMORY()
                                                            chunk_get_chunk_hdr_value() <uint64_t chunk_get_chunk_hdr_value (uint16_t type, uint16_t flags, uint32_t size_idx) at libpmemobj/memblock.c:604>:
                                                                COMPILE_ERROR_ON()
                                                                memcpy()
                                                            util_atomic_store_explicit64()
                                                            pmemops_persist()
                                                            huge_write_footer() <void huge_write_footer (struct chunk_header *hdr, uint32_t size_idx) at libpmemobj/memblock.c:1166>:
                                                                VALGRIND_DO_MAKE_MEM_UNDEFINED()
                                                                VALGRIND_SET_CLEAN()
                                                            memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                                                memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                                                    heap_get_chunk_hdr()
                                                                memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                                                    heap_get_chunk_hdr()
                                                                    FATAL()
                                                        pmemops_persist()
                                                    memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                                        memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                                            heap_get_chunk_hdr()
                                                        memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                                            heap_get_chunk_hdr()
                                                            FATAL()
                                                    heap_free_chunk_reuse() <int heap_free_chunk_reuse (struct palloc_heap *heap, struct bucket *bucket, struct memory_block *m) at libpmemobj/heap.c:674>:
                                                        heap_coalesce_huge() <struct memory_block heap_coalesce_huge (struct palloc_heap *heap, struct bucket *b, const struct memory_block *m) at libpmemobj/heap.c:650>:
                                                            heap_get_adjacent_free_block() <int heap_get_adjacent_free_block (struct palloc_heap *heap, const struct memory_block *in, struct memory_block *out, int prev) at libpmemobj/heap.c:582>:
                                                                ZID_TO_ZONE()
                                                                memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                                                    memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                                                        heap_get_chunk_hdr()
                                                                    memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                                                        heap_get_chunk_hdr()
                                                                        FATAL()
                                                            bucket_remove_block() <int bucket_remove_block (struct bucket *b, const struct memory_block *m) at libpmemobj/bucket.c:178>
                                                            heap_coalesce() <struct memory_block heap_coalesce (struct palloc_heap *heap, const struct memory_block *blocks[], int n) at libpmemobj/heap.c:621>:
                                                                ASSERTne()
                                                                memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                                                    memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                                                        heap_get_chunk_hdr()
                                                                    memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                                                        heap_get_chunk_hdr()
                                                                        FATAL()
                                                        bucket_insert_block() <int bucket_insert_block (struct bucket *b, const struct memory_block *m) at libpmemobj/bucket.c:161>:
                                                            VALGRIND_DO_MAKE_MEM_NOACCESS()
                                                            VALGRIND_ANNOTATE_NEW_MEMORY()
                                            heap_ensure_run_bucket_filled() <int heap_ensure_run_bucket_filled (struct palloc_heap *heap, struct bucket *b, uint32_t units) at libpmemobj/heap.c:1083> (R):
                                                bucket_alloc_class() <struct alloc_class *bucket_alloc_class (struct bucket *b) at libpmemobj/bucket.c:152>
                                                ASSERTeq()
                                                heap_detach_and_try_discard_run() <int heap_detach_and_try_discard_run (struct palloc_heap *heap, struct bucket *b) at libpmemobj/heap.c:992>:
                                                    bucket_detach_run() <int bucket_detach_run (struct bucket *b, struct memory_block *m_out, int *empty) at libpmemobj/bucket.c:231>:
                                                        util_fetch_and_sub64()
                                                        VALGRIND_ANNOTATE_HAPPENS_AFTER()
                                                        VALGRIND_ANNOTATE_HAPPENS_BEFORE()
                                                        Zalloc() <void *Zalloc (size_t sz) at core/alloc.c:98>:
                                                            Malloc()
                                                            memset()
                                                    heap_discard_run() <void heap_discard_run (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/heap.c:974>:
                                                        heap_reclaim_run() <int heap_reclaim_run (struct palloc_heap *heap, struct memory_block *m, int startup) at libpmemobj/heap.c:733>:
                                                            heap_get_chunk_run()
                                                            heap_get_chunk_hdr()
                                                            alloc_class_by_run() <struct alloc_class *alloc_class_by_run (struct alloc_class_collection *ac, size_t unit_size, uint16_t flags, uint32_t size_idx) at libpmemobj/alloc_class.c:594>:
                                                                SIZE_TO_CLASS_MAP_INDEX()
                                                                ASSERT()
                                                                critnib_get() <void *critnib_get (struct critnib *c, uint64_t key) at libpmemobj/critnib.c:515>:
                                                                    load() <void load (void *src, void *dst) at libpmemobj/critnib.c:130>:
                                                                        util_atomic_load_explicit64()
                                                                    is_leaf() <inline bool is_leaf (struct critnib_node *n) at libpmemobj/critnib.c:150>:
                                                                    slice_index() <inline unsigned slice_index (uint64_t key, sh_t shift) at libpmemobj/critnib.c:178>:
                                                                    to_leaf() <inline struct critnib_leaf *to_leaf (struct critnib_node *n) at libpmemobj/critnib.c:159>:
                                                                RUN_CLASS_KEY_PACK()
                                                            recycler_element_new() <struct recycler_element recycler_element_new (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/recycler.c:122>:
                                                                SUPPRESS_UNUSED()
                                                                util_mutex_lock()
                                                                util_mutex_unlock()
                                                            ASSERTeq()
                                                            STATS_INC()
                                                            heap_get_recycler() <struct recycler *heap_get_recycler (struct palloc_heap *heap, size_t id, size_t nallocs) at libpmemobj/heap.c:106> (R):
                                                                util_atomic_load_explicit64()
                                                                recycler_new() <struct recycler *recycler_new (struct palloc_heap *heap, size_t nallocs, size_t *peak_arenas) at libpmemobj/recycler.c:74>:
                                                                    Malloc()
                                                                    ravl_new_sized() <struct ravl *ravl_new_sized (ravl_compare *compare, size_t data_size) at core/ravl.c:45>:
                                                                        Malloc()
                                                                        ERR()
                                                                    recycler_element_cmp() <int recycler_element_cmp (const void *lhs, const void *rhs) at libpmemobj/recycler.c:23>:
                                                                    memset()
                                                                    VEC_INIT()
                                                                    util_mutex_init()
                                                                    Free() <Free_func Free at core/alloc.c:91>
                                                                util_bool_compare_and_swap64()
                                                                recycler_delete() <void recycler_delete (struct recycler *r) at libpmemobj/recycler.c:107>:
                                                                    VEC_DELETE()
                                                                    util_mutex_destroy()
                                                                    ravl_delete() <void ravl_delete (struct ravl *ravl) at core/ravl.c:112>:
                                                                        ravl_delete_cb() <void ravl_delete_cb (struct ravl *ravl, ravl_cb cb, void *arg) at core/ravl.c:102>:
                                                                            ravl_foreach_node() <void ravl_foreach_node (struct ravl_node *n, ravl_cb cb, void *arg, int free_node) at core/ravl.c:74> (R):
                                                                                ravl_foreach_node() <void ravl_foreach_node (struct ravl_node *n, ravl_cb cb, void *arg, int free_node) at core/ravl.c:74> (recursive: see 10507)
                                                                                Free() <Free_func Free at core/alloc.c:91>
                                                                            Free() <Free_func Free at core/alloc.c:91>
                                                                    Free() <Free_func Free at core/alloc.c:91>
                                                                heap_get_recycler() <struct recycler *heap_get_recycler (struct palloc_heap *heap, size_t id, size_t nallocs) at libpmemobj/heap.c:106> (recursive: see 10489)
                                                            recycler_put() <int recycler_put (struct recycler *r, struct recycler_element element) at libpmemobj/recycler.c:154>:
                                                                util_mutex_lock()
                                                                ravl_emplace_copy() <int ravl_emplace_copy (struct ravl *ravl, const void *data) at core/ravl.c:384>:
                                                                    ravl_emplace() <int ravl_emplace (struct ravl *ravl, ravl_constr constr, const void *arg) at core/ravl.c:393>:
                                                                        LOG()
                                                                        ravl_new_node() <struct ravl_node *ravl_new_node (struct ravl *ravl, ravl_constr constr, const void *arg) at core/ravl.c:161>:
                                                                            Malloc()
                                                                            ERR()
                                                                            ravl_node_insert_constructor() <void ravl_node_insert_constructor (void *data, size_t data_size, const void *arg) at core/ravl.c:139>:
                                                                                SUPPRESS_UNUSED()
                                                                                memcpy()
                                                                        ravl_data() <void *ravl_data (struct ravl_node *node) at core/ravl.c:571>:
                                                                            memcpy()
                                                                        ravl_balance() <void ravl_balance (struct ravl *ravl, struct ravl_node *n) at core/ravl.c:337>:
                                                                            ravl_node_is() <int ravl_node_is (struct ravl_node *n, int i, int j) at core/ravl.c:306>:
                                                                                ravl_node_is_i_j() <int ravl_node_is_i_j (struct ravl_node *n, int i, int j) at core/ravl.c:296>:
                                                                                    ravl_node_rank_difference_parent() <int ravl_node_rank_difference_parent (struct ravl_node *p, struct ravl_node *n) at core/ravl.c:275>:
                                                                                        ravl_node_rank() <int ravl_node_rank (struct ravl_node *n) at core/ravl.c:261>:
                                                                            ravl_node_promote() <void ravl_node_promote (struct ravl_node *n) at core/ravl.c:315>
                                                                            ravl_node_sibling() <struct ravl_node *ravl_node_sibling (struct ravl_node *n) at core/ravl.c:209>:
                                                                                ravl_node_slot_type() <enum ravl_slot_type ravl_node_slot_type (struct ravl_node *n) at core/ravl.c:196>:
                                                                            ravl_node_rank_difference() <int ravl_node_rank_difference (struct ravl_node *n) at core/ravl.c:287>:
                                                                                ravl_node_rank_difference_parent() <int ravl_node_rank_difference_parent (struct ravl_node *p, struct ravl_node *n) at core/ravl.c:275>:
                                                                                    ravl_node_rank() <int ravl_node_rank (struct ravl_node *n) at core/ravl.c:261>:
                                                                            ravl_node_rank_difference_parent() <int ravl_node_rank_difference_parent (struct ravl_node *p, struct ravl_node *n) at core/ravl.c:275>:
                                                                                ravl_node_rank() <int ravl_node_rank (struct ravl_node *n) at core/ravl.c:261>:
                                                                            ravl_slot_opposite() <enum ravl_slot_type ravl_slot_opposite (enum ravl_slot_type t) at core/ravl.c:184>:
                                                                                ASSERTne()
                                                                            ravl_node_slot_type() <enum ravl_slot_type ravl_node_slot_type (struct ravl_node *n) at core/ravl.c:196>:
                                                                            ravl_rotate() <void ravl_rotate (struct ravl *ravl, struct ravl_node *n) at core/ravl.c:237>:
                                                                                ASSERTne()
                                                                                ravl_node_ref() <struct ravl_node **ravl_node_ref (struct ravl *ravl, struct ravl_node *n) at core/ravl.c:223>:
                                                                                    ravl_node_slot_type() <enum ravl_slot_type ravl_node_slot_type (struct ravl_node *n) at core/ravl.c:196>:
                                                                                ravl_node_slot_type() <enum ravl_slot_type ravl_node_slot_type (struct ravl_node *n) at core/ravl.c:196>:
                                                                                ravl_slot_opposite() <enum ravl_slot_type ravl_slot_opposite (enum ravl_slot_type t) at core/ravl.c:184>:
                                                                                    ASSERTne()
                                                                            ravl_node_demote() <void ravl_node_demote (struct ravl_node *n) at core/ravl.c:324>:
                                                                                ASSERT()
                                                                        Free() <Free_func Free at core/alloc.c:91>
                                                                    ravl_node_copy_constructor() <void ravl_node_copy_constructor (void *data, size_t data_size, const void *arg) at core/ravl.c:152>:
                                                                        memcpy()
                                                                util_mutex_unlock()
                                                            ERR()
                                                        heap_bucket_acquire() <struct bucket *heap_bucket_acquire (struct palloc_heap *heap, uint8_t class_id, uint16_t arena_id) at libpmemobj/heap.c:470>:
                                                            out() <void out (const char *fmt, ...) at core/out.c:480>:
                                                                va_start()
                                                                out_common() <} void out_common (const char *file, int line, const char *func, int level, const char *suffix, const char *fmt, va_list ap) at core/out.c:334>
                                                                va_end()
                                                            heap_thread_arena() <struct arena *heap_thread_arena (struct palloc_heap *heap) at libpmemobj/heap.c:414>:
                                                                os_tls_get() <void *os_tls_get (os_tls_key_t key) at core/os_thread_posix.c:62>:
                                                                    pthread_getspecific()
                                                                heap_thread_arena_assign() <struct arena *heap_thread_arena_assign (struct palloc_heap *heap) at libpmemobj/heap.c:381>:
                                                                    util_mutex_lock()
                                                                    ASSERTne()
                                                                    VEC_SIZE()
                                                                    VEC_FOREACH()
                                                                    LOG()
                                                                    heap_arena_thread_attach() <void heap_arena_thread_attach (struct palloc_heap *heap, struct arena *a) at libpmemobj/heap.c:249>:
                                                                        ASSERTeq()
                                                                        os_tls_get() <void *os_tls_get (os_tls_key_t key) at core/os_thread_posix.c:62>:
                                                                            pthread_getspecific()
                                                                        heap_arena_thread_detach() <void heap_arena_thread_detach (struct arena *a) at libpmemobj/heap.c:232>:
                                                                            util_fetch_and_sub64()
                                                                        ASSERTne()
                                                                        util_fetch_and_add64()
                                                                        os_tls_set() <int os_tls_set (os_tls_key_t key, const void *value) at core/os_thread_posix.c:53>:
                                                                            pthread_setspecific()
                                                                    util_mutex_unlock()
                                                                heap_global_arena_assign() <struct arena *heap_global_arena_assign (struct palloc_heap *heap) at libpmemobj/heap.c:348>:
                                                                    util_mutex_lock()
                                                                    ASSERTne()
                                                                    VEC_SIZE()
                                                                    VEC_FOREACH()
                                                                    LOG()
                                                                    util_mutex_unlock()
                                                                ASSERT()
                                                                ASSERTne()
                                                            ASSERTne()
                                                            VEC_ARR()
                                                            bucket_acquire() <struct bucket *bucket_acquire (struct bucket_locked *b) at libpmemobj/bucket.c:117>:
                                                                util_mutex_lock()
                                                        heap_run_into_free_chunk() <void heap_run_into_free_chunk (struct palloc_heap *heap, struct bucket *bucket, struct memory_block *m) at libpmemobj/heap.c:697>:
                                                            heap_get_chunk_hdr()
                                                            STATS_SUB()
                                                            util_mutex_lock()
                                                            memblock_huge_init() <struct memory_block memblock_huge_init (struct palloc_heap *heap, uint32_t chunk_id, uint32_t zone_id, uint32_t size_idx) at libpmemobj/memblock.c:1329>:
                                                                heap_get_chunk_hdr()
                                                                VALGRIND_DO_MAKE_MEM_UNDEFINED()
                                                                VALGRIND_ANNOTATE_NEW_MEMORY()
                                                                chunk_get_chunk_hdr_value() <uint64_t chunk_get_chunk_hdr_value (uint16_t type, uint16_t flags, uint32_t size_idx) at libpmemobj/memblock.c:604>:
                                                                    COMPILE_ERROR_ON()
                                                                    memcpy()
                                                                util_atomic_store_explicit64()
                                                                pmemops_persist()
                                                                huge_write_footer() <void huge_write_footer (struct chunk_header *hdr, uint32_t size_idx) at libpmemobj/memblock.c:1166>:
                                                                    VALGRIND_DO_MAKE_MEM_UNDEFINED()
                                                                    VALGRIND_SET_CLEAN()
                                                                memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                                                    memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                                                        heap_get_chunk_hdr()
                                                                    memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                                                        heap_get_chunk_hdr()
                                                                        FATAL()
                                                            heap_free_chunk_reuse() <int heap_free_chunk_reuse (struct palloc_heap *heap, struct bucket *bucket, struct memory_block *m) at libpmemobj/heap.c:674>:
                                                                heap_coalesce_huge() <struct memory_block heap_coalesce_huge (struct palloc_heap *heap, struct bucket *b, const struct memory_block *m) at libpmemobj/heap.c:650>:
                                                                    heap_get_adjacent_free_block() <int heap_get_adjacent_free_block (struct palloc_heap *heap, const struct memory_block *in, struct memory_block *out, int prev) at libpmemobj/heap.c:582>:
                                                                        ZID_TO_ZONE()
                                                                        memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                                                            memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                                                                heap_get_chunk_hdr()
                                                                            memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                                                                heap_get_chunk_hdr()
                                                                                FATAL()
                                                                    bucket_remove_block() <int bucket_remove_block (struct bucket *b, const struct memory_block *m) at libpmemobj/bucket.c:178>
                                                                    heap_coalesce() <struct memory_block heap_coalesce (struct palloc_heap *heap, const struct memory_block *blocks[], int n) at libpmemobj/heap.c:621>:
                                                                        ASSERTne()
                                                                        memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                                                            memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                                                                heap_get_chunk_hdr()
                                                                            memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                                                                heap_get_chunk_hdr()
                                                                                FATAL()
                                                                bucket_insert_block() <int bucket_insert_block (struct bucket *b, const struct memory_block *m) at libpmemobj/bucket.c:161>:
                                                                    VALGRIND_DO_MAKE_MEM_NOACCESS()
                                                                    VALGRIND_ANNOTATE_NEW_MEMORY()
                                                            util_mutex_unlock()
                                                        heap_bucket_release() <void heap_bucket_release (struct bucket *b) at libpmemobj/heap.c:498>:
                                                            bucket_release() <void bucket_release (struct bucket *b) at libpmemobj/bucket.c:127>:
                                                                util_mutex_unlock()
                                                heap_reuse_from_recycler() <int heap_reuse_from_recycler (struct palloc_heap *heap, struct bucket *b, uint32_t units, int force) at libpmemobj/heap.c:1034>:
                                                    bucket_alloc_class() <struct alloc_class *bucket_alloc_class (struct bucket *b) at libpmemobj/bucket.c:152>
                                                    heap_get_recycler() <struct recycler *heap_get_recycler (struct palloc_heap *heap, size_t id, size_t nallocs) at libpmemobj/heap.c:106> (R):
                                                        util_atomic_load_explicit64()
                                                        recycler_new() <struct recycler *recycler_new (struct palloc_heap *heap, size_t nallocs, size_t *peak_arenas) at libpmemobj/recycler.c:74>:
                                                            Malloc()
                                                            ravl_new_sized() <struct ravl *ravl_new_sized (ravl_compare *compare, size_t data_size) at core/ravl.c:45>:
                                                                Malloc()
                                                                ERR()
                                                            recycler_element_cmp() <int recycler_element_cmp (const void *lhs, const void *rhs) at libpmemobj/recycler.c:23>:
                                                            memset()
                                                            VEC_INIT()
                                                            util_mutex_init()
                                                            Free() <Free_func Free at core/alloc.c:91>
                                                        util_bool_compare_and_swap64()
                                                        recycler_delete() <void recycler_delete (struct recycler *r) at libpmemobj/recycler.c:107>:
                                                            VEC_DELETE()
                                                            util_mutex_destroy()
                                                            ravl_delete() <void ravl_delete (struct ravl *ravl) at core/ravl.c:112>:
                                                                ravl_delete_cb() <void ravl_delete_cb (struct ravl *ravl, ravl_cb cb, void *arg) at core/ravl.c:102>:
                                                                    ravl_foreach_node() <void ravl_foreach_node (struct ravl_node *n, ravl_cb cb, void *arg, int free_node) at core/ravl.c:74> (R):
                                                                        ravl_foreach_node() <void ravl_foreach_node (struct ravl_node *n, ravl_cb cb, void *arg, int free_node) at core/ravl.c:74> (recursive: see 10662)
                                                                        Free() <Free_func Free at core/alloc.c:91>
                                                                    Free() <Free_func Free at core/alloc.c:91>
                                                            Free() <Free_func Free at core/alloc.c:91>
                                                        heap_get_recycler() <struct recycler *heap_get_recycler (struct palloc_heap *heap, size_t id, size_t nallocs) at libpmemobj/heap.c:106> (recursive: see 10644)
                                                    ERR()
                                                    recycler_get() <int recycler_get (struct recycler *r, struct memory_block *m) at libpmemobj/recycler.c:171>:
                                                        util_mutex_lock()
                                                        ravl_find() <struct ravl_node *ravl_find (struct ravl *ravl, const void *data, enum ravl_predicate flags) at core/ravl.c:524>:
                                                            LOG()
                                                            ravl_data() <void *ravl_data (struct ravl_node *node) at core/ravl.c:571>:
                                                                memcpy()
                                                            ravl_predicate_holds() <int ravl_predicate_holds (int result, struct ravl_node **ret, struct ravl_node *n, enum ravl_predicate flags) at core/ravl.c:489>:
                                                                ravl_node_successor() <struct ravl_node *ravl_node_successor (struct ravl_node *n) at core/ravl.c:465>:
                                                                    ravl_node_cessor() <struct ravl_node *ravl_node_cessor (struct ravl_node *n, enum ravl_slot_type t) at core/ravl.c:443>:
                                                                        ravl_node_type_most() <struct ravl_node *ravl_node_type_most (struct ravl_node *n, enum ravl_slot_type t) at core/ravl.c:430>:
                                                                        ravl_slot_opposite() <enum ravl_slot_type ravl_slot_opposite (enum ravl_slot_type t) at core/ravl.c:184>:
                                                                            ASSERTne()
                                                                ravl_node_predecessor() <struct ravl_node *ravl_node_predecessor (struct ravl_node *n) at core/ravl.c:476>:
                                                                    ravl_node_cessor() <struct ravl_node *ravl_node_cessor (struct ravl_node *n, enum ravl_slot_type t) at core/ravl.c:443>:
                                                                        ravl_node_type_most() <struct ravl_node *ravl_node_type_most (struct ravl_node *n, enum ravl_slot_type t) at core/ravl.c:430>:
                                                                        ravl_slot_opposite() <enum ravl_slot_type ravl_slot_opposite (enum ravl_slot_type t) at core/ravl.c:184>:
                                                                            ASSERTne()
                                                        out() <void out (const char *fmt, ...) at core/out.c:480>:
                                                            va_start()
                                                            out_common() <} void out_common (const char *file, int line, const char *func, int level, const char *suffix, const char *fmt, va_list ap) at core/out.c:334>
                                                            va_end()
                                                        ravl_data() <void *ravl_data (struct ravl_node *node) at core/ravl.c:571>:
                                                            memcpy()
                                                        ravl_remove() <void ravl_remove (struct ravl *ravl, struct ravl_node *n) at core/ravl.c:545> (R):
                                                            LOG()
                                                            ravl_node_successor() <struct ravl_node *ravl_node_successor (struct ravl_node *n) at core/ravl.c:465>:
                                                                ravl_node_cessor() <struct ravl_node *ravl_node_cessor (struct ravl_node *n, enum ravl_slot_type t) at core/ravl.c:443>:
                                                                    ravl_node_type_most() <struct ravl_node *ravl_node_type_most (struct ravl_node *n, enum ravl_slot_type t) at core/ravl.c:430>:
                                                                    ravl_slot_opposite() <enum ravl_slot_type ravl_slot_opposite (enum ravl_slot_type t) at core/ravl.c:184>:
                                                                        ASSERTne()
                                                            memcpy()
                                                            ravl_remove() <void ravl_remove (struct ravl *ravl, struct ravl_node *n) at core/ravl.c:545> (recursive: see 10692)
                                                            ravl_node_ref() <struct ravl_node **ravl_node_ref (struct ravl *ravl, struct ravl_node *n) at core/ravl.c:223>:
                                                                ravl_node_slot_type() <enum ravl_slot_type ravl_node_slot_type (struct ravl_node *n) at core/ravl.c:196>:
                                                            Free() <Free_func Free at core/alloc.c:91>
                                                        heap_get_chunk_hdr()
                                                        memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                                            memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                                                heap_get_chunk_hdr()
                                                            memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                                                heap_get_chunk_hdr()
                                                                FATAL()
                                                        util_mutex_unlock()
                                                    bucket_attach_run() <int bucket_attach_run (struct bucket *b, const struct memory_block *m) at libpmemobj/bucket.c:206>:
                                                        util_mutex_lock()
                                                        bucket_memblock_insert_block() <int bucket_memblock_insert_block (const struct memory_block *m, void *b) at libpmemobj/bucket.c:197>:
                                                            bucket_insert_block() <int bucket_insert_block (struct bucket *b, const struct memory_block *m) at libpmemobj/bucket.c:161>:
                                                                VALGRIND_DO_MAKE_MEM_NOACCESS()
                                                                VALGRIND_ANNOTATE_NEW_MEMORY()
                                                        util_mutex_unlock()
                                                        util_fetch_and_add64()
                                                    heap_recycle_unused() <int heap_recycle_unused (struct palloc_heap *heap, struct recycler *recycler, struct bucket *defb, int force) at libpmemobj/heap.c:894>:
                                                        recycler_recalc() <struct empty_runs recycler_recalc (struct recycler *r, int force) at libpmemobj/recycler.c:207>:
                                                            VEC_INIT()
                                                            util_atomic_load64()
                                                            util_mutex_trylock()
                                                            ravl_find() <struct ravl_node *ravl_find (struct ravl *ravl, const void *data, enum ravl_predicate flags) at core/ravl.c:524>:
                                                                LOG()
                                                                ravl_data() <void *ravl_data (struct ravl_node *node) at core/ravl.c:571>:
                                                                    memcpy()
                                                                ravl_predicate_holds() <int ravl_predicate_holds (int result, struct ravl_node **ret, struct ravl_node *n, enum ravl_predicate flags) at core/ravl.c:489>:
                                                                    ravl_node_successor() <struct ravl_node *ravl_node_successor (struct ravl_node *n) at core/ravl.c:465>:
                                                                        ravl_node_cessor() <struct ravl_node *ravl_node_cessor (struct ravl_node *n, enum ravl_slot_type t) at core/ravl.c:443>:
                                                                            ravl_node_type_most() <struct ravl_node *ravl_node_type_most (struct ravl_node *n, enum ravl_slot_type t) at core/ravl.c:430>:
                                                                            ravl_slot_opposite() <enum ravl_slot_type ravl_slot_opposite (enum ravl_slot_type t) at core/ravl.c:184>:
                                                                                ASSERTne()
                                                                    ravl_node_predecessor() <struct ravl_node *ravl_node_predecessor (struct ravl_node *n) at core/ravl.c:476>:
                                                                        ravl_node_cessor() <struct ravl_node *ravl_node_cessor (struct ravl_node *n, enum ravl_slot_type t) at core/ravl.c:443>:
                                                                            ravl_node_type_most() <struct ravl_node *ravl_node_type_most (struct ravl_node *n, enum ravl_slot_type t) at core/ravl.c:430>:
                                                                            ravl_slot_opposite() <enum ravl_slot_type ravl_slot_opposite (enum ravl_slot_type t) at core/ravl.c:184>:
                                                                                ASSERTne()
                                                            ravl_data() <void *ravl_data (struct ravl_node *node) at core/ravl.c:571>:
                                                                memcpy()
                                                            memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                                                memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                                                    heap_get_chunk_hdr()
                                                                memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                                                    heap_get_chunk_hdr()
                                                                    FATAL()
                                                            recycler_element_new() <struct recycler_element recycler_element_new (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/recycler.c:122>:
                                                                SUPPRESS_UNUSED()
                                                                util_mutex_lock()
                                                                util_mutex_unlock()
                                                            ASSERT()
                                                            util_fetch_and_sub64()
                                                            MIN()
                                                            ravl_remove() <void ravl_remove (struct ravl *ravl, struct ravl_node *n) at core/ravl.c:545> (R):
                                                                LOG()
                                                                ravl_node_successor() <struct ravl_node *ravl_node_successor (struct ravl_node *n) at core/ravl.c:465>:
                                                                    ravl_node_cessor() <struct ravl_node *ravl_node_cessor (struct ravl_node *n, enum ravl_slot_type t) at core/ravl.c:443>:
                                                                        ravl_node_type_most() <struct ravl_node *ravl_node_type_most (struct ravl_node *n, enum ravl_slot_type t) at core/ravl.c:430>:
                                                                        ravl_slot_opposite() <enum ravl_slot_type ravl_slot_opposite (enum ravl_slot_type t) at core/ravl.c:184>:
                                                                            ASSERTne()
                                                                memcpy()
                                                                ravl_remove() <void ravl_remove (struct ravl *ravl, struct ravl_node *n) at core/ravl.c:545> (recursive: see 10755)
                                                                ravl_node_ref() <struct ravl_node **ravl_node_ref (struct ravl *ravl, struct ravl_node *n) at core/ravl.c:223>:
                                                                    ravl_node_slot_type() <enum ravl_slot_type ravl_node_slot_type (struct ravl_node *n) at core/ravl.c:196>:
                                                                Free() <Free_func Free at core/alloc.c:91>
                                                            VEC_PUSH_BACK()
                                                            VEC_FOREACH_BY_PTR()
                                                            ravl_emplace_copy() <int ravl_emplace_copy (struct ravl *ravl, const void *data) at core/ravl.c:384>:
                                                                ravl_emplace() <int ravl_emplace (struct ravl *ravl, ravl_constr constr, const void *arg) at core/ravl.c:393>:
                                                                    LOG()
                                                                    ravl_new_node() <struct ravl_node *ravl_new_node (struct ravl *ravl, ravl_constr constr, const void *arg) at core/ravl.c:161>:
                                                                        Malloc()
                                                                        ERR()
                                                                        ravl_node_insert_constructor() <void ravl_node_insert_constructor (void *data, size_t data_size, const void *arg) at core/ravl.c:139>:
                                                                            SUPPRESS_UNUSED()
                                                                            memcpy()
                                                                    ravl_data() <void *ravl_data (struct ravl_node *node) at core/ravl.c:571>:
                                                                        memcpy()
                                                                    ravl_balance() <void ravl_balance (struct ravl *ravl, struct ravl_node *n) at core/ravl.c:337>:
                                                                        ravl_node_is() <int ravl_node_is (struct ravl_node *n, int i, int j) at core/ravl.c:306>:
                                                                            ravl_node_is_i_j() <int ravl_node_is_i_j (struct ravl_node *n, int i, int j) at core/ravl.c:296>:
                                                                                ravl_node_rank_difference_parent() <int ravl_node_rank_difference_parent (struct ravl_node *p, struct ravl_node *n) at core/ravl.c:275>:
                                                                                    ravl_node_rank() <int ravl_node_rank (struct ravl_node *n) at core/ravl.c:261>:
                                                                        ravl_node_promote() <void ravl_node_promote (struct ravl_node *n) at core/ravl.c:315>
                                                                        ravl_node_sibling() <struct ravl_node *ravl_node_sibling (struct ravl_node *n) at core/ravl.c:209>:
                                                                            ravl_node_slot_type() <enum ravl_slot_type ravl_node_slot_type (struct ravl_node *n) at core/ravl.c:196>:
                                                                        ravl_node_rank_difference() <int ravl_node_rank_difference (struct ravl_node *n) at core/ravl.c:287>:
                                                                            ravl_node_rank_difference_parent() <int ravl_node_rank_difference_parent (struct ravl_node *p, struct ravl_node *n) at core/ravl.c:275>:
                                                                                ravl_node_rank() <int ravl_node_rank (struct ravl_node *n) at core/ravl.c:261>:
                                                                        ravl_node_rank_difference_parent() <int ravl_node_rank_difference_parent (struct ravl_node *p, struct ravl_node *n) at core/ravl.c:275>:
                                                                            ravl_node_rank() <int ravl_node_rank (struct ravl_node *n) at core/ravl.c:261>:
                                                                        ravl_slot_opposite() <enum ravl_slot_type ravl_slot_opposite (enum ravl_slot_type t) at core/ravl.c:184>:
                                                                            ASSERTne()
                                                                        ravl_node_slot_type() <enum ravl_slot_type ravl_node_slot_type (struct ravl_node *n) at core/ravl.c:196>:
                                                                        ravl_rotate() <void ravl_rotate (struct ravl *ravl, struct ravl_node *n) at core/ravl.c:237>:
                                                                            ASSERTne()
                                                                            ravl_node_ref() <struct ravl_node **ravl_node_ref (struct ravl *ravl, struct ravl_node *n) at core/ravl.c:223>:
                                                                                ravl_node_slot_type() <enum ravl_slot_type ravl_node_slot_type (struct ravl_node *n) at core/ravl.c:196>:
                                                                            ravl_node_slot_type() <enum ravl_slot_type ravl_node_slot_type (struct ravl_node *n) at core/ravl.c:196>:
                                                                            ravl_slot_opposite() <enum ravl_slot_type ravl_slot_opposite (enum ravl_slot_type t) at core/ravl.c:184>:
                                                                                ASSERTne()
                                                                        ravl_node_demote() <void ravl_node_demote (struct ravl_node *n) at core/ravl.c:324>:
                                                                            ASSERT()
                                                                    Free() <Free_func Free at core/alloc.c:91>
                                                                ravl_node_copy_constructor() <void ravl_node_copy_constructor (void *data, size_t data_size, const void *arg) at core/ravl.c:152>:
                                                                    memcpy()
                                                            VEC_CLEAR()
                                                            util_mutex_unlock()
                                                        VEC_SIZE()
                                                        heap_bucket_acquire() <struct bucket *heap_bucket_acquire (struct palloc_heap *heap, uint8_t class_id, uint16_t arena_id) at libpmemobj/heap.c:470>:
                                                            out() <void out (const char *fmt, ...) at core/out.c:480>:
                                                                va_start()
                                                                out_common() <} void out_common (const char *file, int line, const char *func, int level, const char *suffix, const char *fmt, va_list ap) at core/out.c:334>
                                                                va_end()
                                                            heap_thread_arena() <struct arena *heap_thread_arena (struct palloc_heap *heap) at libpmemobj/heap.c:414>:
                                                                os_tls_get() <void *os_tls_get (os_tls_key_t key) at core/os_thread_posix.c:62>:
                                                                    pthread_getspecific()
                                                                heap_thread_arena_assign() <struct arena *heap_thread_arena_assign (struct palloc_heap *heap) at libpmemobj/heap.c:381>:
                                                                    util_mutex_lock()
                                                                    ASSERTne()
                                                                    VEC_SIZE()
                                                                    VEC_FOREACH()
                                                                    LOG()
                                                                    heap_arena_thread_attach() <void heap_arena_thread_attach (struct palloc_heap *heap, struct arena *a) at libpmemobj/heap.c:249>:
                                                                        ASSERTeq()
                                                                        os_tls_get() <void *os_tls_get (os_tls_key_t key) at core/os_thread_posix.c:62>:
                                                                            pthread_getspecific()
                                                                        heap_arena_thread_detach() <void heap_arena_thread_detach (struct arena *a) at libpmemobj/heap.c:232>:
                                                                            util_fetch_and_sub64()
                                                                        ASSERTne()
                                                                        util_fetch_and_add64()
                                                                        os_tls_set() <int os_tls_set (os_tls_key_t key, const void *value) at core/os_thread_posix.c:53>:
                                                                            pthread_setspecific()
                                                                    util_mutex_unlock()
                                                                heap_global_arena_assign() <struct arena *heap_global_arena_assign (struct palloc_heap *heap) at libpmemobj/heap.c:348>:
                                                                    util_mutex_lock()
                                                                    ASSERTne()
                                                                    VEC_SIZE()
                                                                    VEC_FOREACH()
                                                                    LOG()
                                                                    util_mutex_unlock()
                                                                ASSERT()
                                                                ASSERTne()
                                                            ASSERTne()
                                                            VEC_ARR()
                                                            bucket_acquire() <struct bucket *bucket_acquire (struct bucket_locked *b) at libpmemobj/bucket.c:117>:
                                                                util_mutex_lock()
                                                        ASSERT()
                                                        VEC_FOREACH_BY_PTR()
                                                        heap_run_into_free_chunk() <void heap_run_into_free_chunk (struct palloc_heap *heap, struct bucket *bucket, struct memory_block *m) at libpmemobj/heap.c:697>:
                                                            heap_get_chunk_hdr()
                                                            STATS_SUB()
                                                            util_mutex_lock()
                                                            memblock_huge_init() <struct memory_block memblock_huge_init (struct palloc_heap *heap, uint32_t chunk_id, uint32_t zone_id, uint32_t size_idx) at libpmemobj/memblock.c:1329>:
                                                                heap_get_chunk_hdr()
                                                                VALGRIND_DO_MAKE_MEM_UNDEFINED()
                                                                VALGRIND_ANNOTATE_NEW_MEMORY()
                                                                chunk_get_chunk_hdr_value() <uint64_t chunk_get_chunk_hdr_value (uint16_t type, uint16_t flags, uint32_t size_idx) at libpmemobj/memblock.c:604>:
                                                                    COMPILE_ERROR_ON()
                                                                    memcpy()
                                                                util_atomic_store_explicit64()
                                                                pmemops_persist()
                                                                huge_write_footer() <void huge_write_footer (struct chunk_header *hdr, uint32_t size_idx) at libpmemobj/memblock.c:1166>:
                                                                    VALGRIND_DO_MAKE_MEM_UNDEFINED()
                                                                    VALGRIND_SET_CLEAN()
                                                                memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                                                    memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                                                        heap_get_chunk_hdr()
                                                                    memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                                                        heap_get_chunk_hdr()
                                                                        FATAL()
                                                            heap_free_chunk_reuse() <int heap_free_chunk_reuse (struct palloc_heap *heap, struct bucket *bucket, struct memory_block *m) at libpmemobj/heap.c:674>:
                                                                heap_coalesce_huge() <struct memory_block heap_coalesce_huge (struct palloc_heap *heap, struct bucket *b, const struct memory_block *m) at libpmemobj/heap.c:650>:
                                                                    heap_get_adjacent_free_block() <int heap_get_adjacent_free_block (struct palloc_heap *heap, const struct memory_block *in, struct memory_block *out, int prev) at libpmemobj/heap.c:582>:
                                                                        ZID_TO_ZONE()
                                                                        memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                                                            memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                                                                heap_get_chunk_hdr()
                                                                            memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                                                                heap_get_chunk_hdr()
                                                                                FATAL()
                                                                    bucket_remove_block() <int bucket_remove_block (struct bucket *b, const struct memory_block *m) at libpmemobj/bucket.c:178>
                                                                    heap_coalesce() <struct memory_block heap_coalesce (struct palloc_heap *heap, const struct memory_block *blocks[], int n) at libpmemobj/heap.c:621>:
                                                                        ASSERTne()
                                                                        memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                                                            memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                                                                heap_get_chunk_hdr()
                                                                            memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                                                                heap_get_chunk_hdr()
                                                                                FATAL()
                                                                bucket_insert_block() <int bucket_insert_block (struct bucket *b, const struct memory_block *m) at libpmemobj/bucket.c:161>:
                                                                    VALGRIND_DO_MAKE_MEM_NOACCESS()
                                                                    VALGRIND_ANNOTATE_NEW_MEMORY()
                                                            util_mutex_unlock()
                                                        heap_bucket_release() <void heap_bucket_release (struct bucket *b) at libpmemobj/heap.c:498>:
                                                            bucket_release() <void bucket_release (struct bucket *b) at libpmemobj/bucket.c:127>:
                                                                util_mutex_unlock()
                                                        VEC_DELETE()
                                                out() <void out (const char *fmt, ...) at core/out.c:480>:
                                                    va_start()
                                                    out_common() <} void out_common (const char *file, int line, const char *func, int level, const char *suffix, const char *fmt, va_list ap) at core/out.c:334>
                                                    va_end()
                                                heap_bucket_acquire() <struct bucket *heap_bucket_acquire (struct palloc_heap *heap, uint8_t class_id, uint16_t arena_id) at libpmemobj/heap.c:470>:
                                                    out() <void out (const char *fmt, ...) at core/out.c:480>:
                                                        va_start()
                                                        out_common() <} void out_common (const char *file, int line, const char *func, int level, const char *suffix, const char *fmt, va_list ap) at core/out.c:334>
                                                        va_end()
                                                    heap_thread_arena() <struct arena *heap_thread_arena (struct palloc_heap *heap) at libpmemobj/heap.c:414>:
                                                        os_tls_get() <void *os_tls_get (os_tls_key_t key) at core/os_thread_posix.c:62>:
                                                            pthread_getspecific()
                                                        heap_thread_arena_assign() <struct arena *heap_thread_arena_assign (struct palloc_heap *heap) at libpmemobj/heap.c:381>:
                                                            util_mutex_lock()
                                                            ASSERTne()
                                                            VEC_SIZE()
                                                            VEC_FOREACH()
                                                            LOG()
                                                            heap_arena_thread_attach() <void heap_arena_thread_attach (struct palloc_heap *heap, struct arena *a) at libpmemobj/heap.c:249>:
                                                                ASSERTeq()
                                                                os_tls_get() <void *os_tls_get (os_tls_key_t key) at core/os_thread_posix.c:62>:
                                                                    pthread_getspecific()
                                                                heap_arena_thread_detach() <void heap_arena_thread_detach (struct arena *a) at libpmemobj/heap.c:232>:
                                                                    util_fetch_and_sub64()
                                                                ASSERTne()
                                                                util_fetch_and_add64()
                                                                os_tls_set() <int os_tls_set (os_tls_key_t key, const void *value) at core/os_thread_posix.c:53>:
                                                                    pthread_setspecific()
                                                            util_mutex_unlock()
                                                        heap_global_arena_assign() <struct arena *heap_global_arena_assign (struct palloc_heap *heap) at libpmemobj/heap.c:348>:
                                                            util_mutex_lock()
                                                            ASSERTne()
                                                            VEC_SIZE()
                                                            VEC_FOREACH()
                                                            LOG()
                                                            util_mutex_unlock()
                                                        ASSERT()
                                                        ASSERTne()
                                                    ASSERTne()
                                                    VEC_ARR()
                                                    bucket_acquire() <struct bucket *bucket_acquire (struct bucket_locked *b) at libpmemobj/bucket.c:117>:
                                                        util_mutex_lock()
                                                heap_populate_bucket() <int heap_populate_bucket (struct palloc_heap *heap, struct bucket *bucket) at libpmemobj/heap.c:850>:
                                                    util_atomic_store_explicit32()
                                                    ZID_TO_ZONE()
                                                    VALGRIND_ADD_TO_GLOBAL_TX_IGNORE()
                                                    heap_zone_init() <void heap_zone_init (struct palloc_heap *heap, uint32_t zone_id, uint32_t first_chunk_id) at libpmemobj/heap.c:559>:
                                                        ZID_TO_ZONE()
                                                        zone_calc_size_idx() <uint32_t zone_calc_size_idx (uint32_t zone_id, unsigned max_zone, size_t heap_size) at libpmemobj/heap.c:533>:
                                                            ASSERT()
                                                        ASSERT()
                                                        memblock_huge_init() <struct memory_block memblock_huge_init (struct palloc_heap *heap, uint32_t chunk_id, uint32_t zone_id, uint32_t size_idx) at libpmemobj/memblock.c:1329>:
                                                            heap_get_chunk_hdr()
                                                            VALGRIND_DO_MAKE_MEM_UNDEFINED()
                                                            VALGRIND_ANNOTATE_NEW_MEMORY()
                                                            chunk_get_chunk_hdr_value() <uint64_t chunk_get_chunk_hdr_value (uint16_t type, uint16_t flags, uint32_t size_idx) at libpmemobj/memblock.c:604>:
                                                                COMPILE_ERROR_ON()
                                                                memcpy()
                                                            util_atomic_store_explicit64()
                                                            pmemops_persist()
                                                            huge_write_footer() <void huge_write_footer (struct chunk_header *hdr, uint32_t size_idx) at libpmemobj/memblock.c:1166>:
                                                                VALGRIND_DO_MAKE_MEM_UNDEFINED()
                                                                VALGRIND_SET_CLEAN()
                                                            memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                                                memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                                                    heap_get_chunk_hdr()
                                                                memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                                                    heap_get_chunk_hdr()
                                                                    FATAL()
                                                        pmemops_persist()
                                                    heap_reclaim_zone_garbage() <void heap_reclaim_zone_garbage (struct palloc_heap *heap, struct bucket *bucket, uint32_t zone_id) at libpmemobj/heap.c:775>:
                                                        ZID_TO_ZONE()
                                                        ASSERT()
                                                        memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                                            memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                                                heap_get_chunk_hdr()
                                                            memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                                                heap_get_chunk_hdr()
                                                                FATAL()
                                                        heap_reclaim_run() <int heap_reclaim_run (struct palloc_heap *heap, struct memory_block *m, int startup) at libpmemobj/heap.c:733>:
                                                            heap_get_chunk_run()
                                                            heap_get_chunk_hdr()
                                                            alloc_class_by_run() <struct alloc_class *alloc_class_by_run (struct alloc_class_collection *ac, size_t unit_size, uint16_t flags, uint32_t size_idx) at libpmemobj/alloc_class.c:594>:
                                                                SIZE_TO_CLASS_MAP_INDEX()
                                                                ASSERT()
                                                                critnib_get() <void *critnib_get (struct critnib *c, uint64_t key) at libpmemobj/critnib.c:515>:
                                                                    load() <void load (void *src, void *dst) at libpmemobj/critnib.c:130>:
                                                                        util_atomic_load_explicit64()
                                                                    is_leaf() <inline bool is_leaf (struct critnib_node *n) at libpmemobj/critnib.c:150>:
                                                                    slice_index() <inline unsigned slice_index (uint64_t key, sh_t shift) at libpmemobj/critnib.c:178>:
                                                                    to_leaf() <inline struct critnib_leaf *to_leaf (struct critnib_node *n) at libpmemobj/critnib.c:159>:
                                                                RUN_CLASS_KEY_PACK()
                                                            recycler_element_new() <struct recycler_element recycler_element_new (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/recycler.c:122>:
                                                                SUPPRESS_UNUSED()
                                                                util_mutex_lock()
                                                                util_mutex_unlock()
                                                            ASSERTeq()
                                                            STATS_INC()
                                                            heap_get_recycler() <struct recycler *heap_get_recycler (struct palloc_heap *heap, size_t id, size_t nallocs) at libpmemobj/heap.c:106> (R):
                                                                util_atomic_load_explicit64()
                                                                recycler_new() <struct recycler *recycler_new (struct palloc_heap *heap, size_t nallocs, size_t *peak_arenas) at libpmemobj/recycler.c:74>:
                                                                    Malloc()
                                                                    ravl_new_sized() <struct ravl *ravl_new_sized (ravl_compare *compare, size_t data_size) at core/ravl.c:45>:
                                                                        Malloc()
                                                                        ERR()
                                                                    recycler_element_cmp() <int recycler_element_cmp (const void *lhs, const void *rhs) at libpmemobj/recycler.c:23>:
                                                                    memset()
                                                                    VEC_INIT()
                                                                    util_mutex_init()
                                                                    Free() <Free_func Free at core/alloc.c:91>
                                                                util_bool_compare_and_swap64()
                                                                recycler_delete() <void recycler_delete (struct recycler *r) at libpmemobj/recycler.c:107>:
                                                                    VEC_DELETE()
                                                                    util_mutex_destroy()
                                                                    ravl_delete() <void ravl_delete (struct ravl *ravl) at core/ravl.c:112>:
                                                                        ravl_delete_cb() <void ravl_delete_cb (struct ravl *ravl, ravl_cb cb, void *arg) at core/ravl.c:102>:
                                                                            ravl_foreach_node() <void ravl_foreach_node (struct ravl_node *n, ravl_cb cb, void *arg, int free_node) at core/ravl.c:74> (R):
                                                                                ravl_foreach_node() <void ravl_foreach_node (struct ravl_node *n, ravl_cb cb, void *arg, int free_node) at core/ravl.c:74> (recursive: see 11016)
                                                                                Free() <Free_func Free at core/alloc.c:91>
                                                                            Free() <Free_func Free at core/alloc.c:91>
                                                                    Free() <Free_func Free at core/alloc.c:91>
                                                                heap_get_recycler() <struct recycler *heap_get_recycler (struct palloc_heap *heap, size_t id, size_t nallocs) at libpmemobj/heap.c:106> (recursive: see 10998)
                                                            recycler_put() <int recycler_put (struct recycler *r, struct recycler_element element) at libpmemobj/recycler.c:154>:
                                                                util_mutex_lock()
                                                                ravl_emplace_copy() <int ravl_emplace_copy (struct ravl *ravl, const void *data) at core/ravl.c:384>:
                                                                    ravl_emplace() <int ravl_emplace (struct ravl *ravl, ravl_constr constr, const void *arg) at core/ravl.c:393>:
                                                                        LOG()
                                                                        ravl_new_node() <struct ravl_node *ravl_new_node (struct ravl *ravl, ravl_constr constr, const void *arg) at core/ravl.c:161>:
                                                                            Malloc()
                                                                            ERR()
                                                                            ravl_node_insert_constructor() <void ravl_node_insert_constructor (void *data, size_t data_size, const void *arg) at core/ravl.c:139>:
                                                                                SUPPRESS_UNUSED()
                                                                                memcpy()
                                                                        ravl_data() <void *ravl_data (struct ravl_node *node) at core/ravl.c:571>:
                                                                            memcpy()
                                                                        ravl_balance() <void ravl_balance (struct ravl *ravl, struct ravl_node *n) at core/ravl.c:337>:
                                                                            ravl_node_is() <int ravl_node_is (struct ravl_node *n, int i, int j) at core/ravl.c:306>:
                                                                                ravl_node_is_i_j() <int ravl_node_is_i_j (struct ravl_node *n, int i, int j) at core/ravl.c:296>:
                                                                                    ravl_node_rank_difference_parent() <int ravl_node_rank_difference_parent (struct ravl_node *p, struct ravl_node *n) at core/ravl.c:275>:
                                                                                        ravl_node_rank() <int ravl_node_rank (struct ravl_node *n) at core/ravl.c:261>:
                                                                            ravl_node_promote() <void ravl_node_promote (struct ravl_node *n) at core/ravl.c:315>
                                                                            ravl_node_sibling() <struct ravl_node *ravl_node_sibling (struct ravl_node *n) at core/ravl.c:209>:
                                                                                ravl_node_slot_type() <enum ravl_slot_type ravl_node_slot_type (struct ravl_node *n) at core/ravl.c:196>:
                                                                            ravl_node_rank_difference() <int ravl_node_rank_difference (struct ravl_node *n) at core/ravl.c:287>:
                                                                                ravl_node_rank_difference_parent() <int ravl_node_rank_difference_parent (struct ravl_node *p, struct ravl_node *n) at core/ravl.c:275>:
                                                                                    ravl_node_rank() <int ravl_node_rank (struct ravl_node *n) at core/ravl.c:261>:
                                                                            ravl_node_rank_difference_parent() <int ravl_node_rank_difference_parent (struct ravl_node *p, struct ravl_node *n) at core/ravl.c:275>:
                                                                                ravl_node_rank() <int ravl_node_rank (struct ravl_node *n) at core/ravl.c:261>:
                                                                            ravl_slot_opposite() <enum ravl_slot_type ravl_slot_opposite (enum ravl_slot_type t) at core/ravl.c:184>:
                                                                                ASSERTne()
                                                                            ravl_node_slot_type() <enum ravl_slot_type ravl_node_slot_type (struct ravl_node *n) at core/ravl.c:196>:
                                                                            ravl_rotate() <void ravl_rotate (struct ravl *ravl, struct ravl_node *n) at core/ravl.c:237>:
                                                                                ASSERTne()
                                                                                ravl_node_ref() <struct ravl_node **ravl_node_ref (struct ravl *ravl, struct ravl_node *n) at core/ravl.c:223>:
                                                                                    ravl_node_slot_type() <enum ravl_slot_type ravl_node_slot_type (struct ravl_node *n) at core/ravl.c:196>:
                                                                                ravl_node_slot_type() <enum ravl_slot_type ravl_node_slot_type (struct ravl_node *n) at core/ravl.c:196>:
                                                                                ravl_slot_opposite() <enum ravl_slot_type ravl_slot_opposite (enum ravl_slot_type t) at core/ravl.c:184>:
                                                                                    ASSERTne()
                                                                            ravl_node_demote() <void ravl_node_demote (struct ravl_node *n) at core/ravl.c:324>:
                                                                                ASSERT()
                                                                        Free() <Free_func Free at core/alloc.c:91>
                                                                    ravl_node_copy_constructor() <void ravl_node_copy_constructor (void *data, size_t data_size, const void *arg) at core/ravl.c:152>:
                                                                        memcpy()
                                                                util_mutex_unlock()
                                                            ERR()
                                                        heap_run_into_free_chunk() <void heap_run_into_free_chunk (struct palloc_heap *heap, struct bucket *bucket, struct memory_block *m) at libpmemobj/heap.c:697>:
                                                            heap_get_chunk_hdr()
                                                            STATS_SUB()
                                                            util_mutex_lock()
                                                            memblock_huge_init() <struct memory_block memblock_huge_init (struct palloc_heap *heap, uint32_t chunk_id, uint32_t zone_id, uint32_t size_idx) at libpmemobj/memblock.c:1329>:
                                                                heap_get_chunk_hdr()
                                                                VALGRIND_DO_MAKE_MEM_UNDEFINED()
                                                                VALGRIND_ANNOTATE_NEW_MEMORY()
                                                                chunk_get_chunk_hdr_value() <uint64_t chunk_get_chunk_hdr_value (uint16_t type, uint16_t flags, uint32_t size_idx) at libpmemobj/memblock.c:604>:
                                                                    COMPILE_ERROR_ON()
                                                                    memcpy()
                                                                util_atomic_store_explicit64()
                                                                pmemops_persist()
                                                                huge_write_footer() <void huge_write_footer (struct chunk_header *hdr, uint32_t size_idx) at libpmemobj/memblock.c:1166>:
                                                                    VALGRIND_DO_MAKE_MEM_UNDEFINED()
                                                                    VALGRIND_SET_CLEAN()
                                                                memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                                                    memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                                                        heap_get_chunk_hdr()
                                                                    memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                                                        heap_get_chunk_hdr()
                                                                        FATAL()
                                                            heap_free_chunk_reuse() <int heap_free_chunk_reuse (struct palloc_heap *heap, struct bucket *bucket, struct memory_block *m) at libpmemobj/heap.c:674>:
                                                                heap_coalesce_huge() <struct memory_block heap_coalesce_huge (struct palloc_heap *heap, struct bucket *b, const struct memory_block *m) at libpmemobj/heap.c:650>:
                                                                    heap_get_adjacent_free_block() <int heap_get_adjacent_free_block (struct palloc_heap *heap, const struct memory_block *in, struct memory_block *out, int prev) at libpmemobj/heap.c:582>:
                                                                        ZID_TO_ZONE()
                                                                        memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                                                            memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                                                                heap_get_chunk_hdr()
                                                                            memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                                                                heap_get_chunk_hdr()
                                                                                FATAL()
                                                                    bucket_remove_block() <int bucket_remove_block (struct bucket *b, const struct memory_block *m) at libpmemobj/bucket.c:178>
                                                                    heap_coalesce() <struct memory_block heap_coalesce (struct palloc_heap *heap, const struct memory_block *blocks[], int n) at libpmemobj/heap.c:621>:
                                                                        ASSERTne()
                                                                        memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                                                            memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                                                                heap_get_chunk_hdr()
                                                                            memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                                                                heap_get_chunk_hdr()
                                                                                FATAL()
                                                                bucket_insert_block() <int bucket_insert_block (struct bucket *b, const struct memory_block *m) at libpmemobj/bucket.c:161>:
                                                                    VALGRIND_DO_MAKE_MEM_NOACCESS()
                                                                    VALGRIND_ANNOTATE_NEW_MEMORY()
                                                            util_mutex_unlock()
                                                        heap_free_chunk_reuse() <int heap_free_chunk_reuse (struct palloc_heap *heap, struct bucket *bucket, struct memory_block *m) at libpmemobj/heap.c:674>:
                                                            heap_coalesce_huge() <struct memory_block heap_coalesce_huge (struct palloc_heap *heap, struct bucket *b, const struct memory_block *m) at libpmemobj/heap.c:650>:
                                                                heap_get_adjacent_free_block() <int heap_get_adjacent_free_block (struct palloc_heap *heap, const struct memory_block *in, struct memory_block *out, int prev) at libpmemobj/heap.c:582>:
                                                                    ZID_TO_ZONE()
                                                                    memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                                                        memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                                                            heap_get_chunk_hdr()
                                                                        memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                                                            heap_get_chunk_hdr()
                                                                            FATAL()
                                                                bucket_remove_block() <int bucket_remove_block (struct bucket *b, const struct memory_block *m) at libpmemobj/bucket.c:178>
                                                                heap_coalesce() <struct memory_block heap_coalesce (struct palloc_heap *heap, const struct memory_block *blocks[], int n) at libpmemobj/heap.c:621>:
                                                                    ASSERTne()
                                                                    memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                                                        memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                                                            heap_get_chunk_hdr()
                                                                        memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                                                            heap_get_chunk_hdr()
                                                                            FATAL()
                                                            bucket_insert_block() <int bucket_insert_block (struct bucket *b, const struct memory_block *m) at libpmemobj/bucket.c:161>:
                                                                VALGRIND_DO_MAKE_MEM_NOACCESS()
                                                                VALGRIND_ANNOTATE_NEW_MEMORY()
                                                heap_bucket_release() <void heap_bucket_release (struct bucket *b) at libpmemobj/heap.c:498>:
                                                    bucket_release() <void bucket_release (struct bucket *b) at libpmemobj/bucket.c:127>:
                                                        util_mutex_unlock()
                                                heap_get_bestfit_block() <int heap_get_bestfit_block (struct palloc_heap *heap, struct bucket *b, struct memory_block *m) at libpmemobj/heap.c:1210> (recursive: see 9731)
                                                heap_run_create() <int heap_run_create (struct palloc_heap *heap, struct bucket *b, struct memory_block *m) at libpmemobj/heap.c:1065>:
                                                    bucket_alloc_class() <struct alloc_class *bucket_alloc_class (struct bucket *b) at libpmemobj/bucket.c:152>
                                                    memblock_run_init() <struct memory_block memblock_run_init (struct palloc_heap *heap, uint32_t chunk_id, uint32_t zone_id, struct run_descriptor *rdsc) at libpmemobj/memblock.c:1361>:
                                                        ASSERTne()
                                                        ZID_TO_ZONE()
                                                        heap_get_chunk_run()
                                                        SIZEOF_RUN()
                                                        VALGRIND_DO_MAKE_MEM_UNDEFINED()
                                                        VALGRIND_ADD_TO_TX()
                                                        memset()
                                                        VALGRIND_REMOVE_FROM_TX()
                                                        pmemops_flush()
                                                        VALGRIND_ANNOTATE_NEW_MEMORY()
                                                        pmemops_persist()
                                                        ASSERT()
                                                        chunk_get_chunk_hdr_value() <uint64_t chunk_get_chunk_hdr_value (uint16_t type, uint16_t flags, uint32_t size_idx) at libpmemobj/memblock.c:604>:
                                                            COMPILE_ERROR_ON()
                                                            memcpy()
                                                        util_atomic_store_explicit64()
                                                        memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                                            memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                                                heap_get_chunk_hdr()
                                                            memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                                                heap_get_chunk_hdr()
                                                                FATAL()
                                                    bucket_attach_run() <int bucket_attach_run (struct bucket *b, const struct memory_block *m) at libpmemobj/bucket.c:206>:
                                                        util_mutex_lock()
                                                        bucket_memblock_insert_block() <int bucket_memblock_insert_block (const struct memory_block *m, void *b) at libpmemobj/bucket.c:197>:
                                                            bucket_insert_block() <int bucket_insert_block (struct bucket *b, const struct memory_block *m) at libpmemobj/bucket.c:161>:
                                                                VALGRIND_DO_MAKE_MEM_NOACCESS()
                                                                VALGRIND_ANNOTATE_NEW_MEMORY()
                                                        util_mutex_unlock()
                                                        util_fetch_and_add64()
                                                    STATS_INC()
                                            ASSERT()
                                            heap_split_block() <void heap_split_block (struct palloc_heap *heap, struct bucket *b, struct memory_block *m, uint32_t units) at libpmemobj/heap.c:1172>:
                                                bucket_alloc_class() <struct alloc_class *bucket_alloc_class (struct bucket *b) at libpmemobj/bucket.c:152>
                                                ASSERT()
                                                memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                                    memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                                        heap_get_chunk_hdr()
                                                    memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                                        heap_get_chunk_hdr()
                                                        FATAL()
                                                bucket_insert_block() <int bucket_insert_block (struct bucket *b, const struct memory_block *m) at libpmemobj/bucket.c:161>:
                                                    VALGRIND_DO_MAKE_MEM_NOACCESS()
                                                    VALGRIND_ANNOTATE_NEW_MEMORY()
                                                LOG()
                                                memblock_huge_init() <struct memory_block memblock_huge_init (struct palloc_heap *heap, uint32_t chunk_id, uint32_t zone_id, uint32_t size_idx) at libpmemobj/memblock.c:1329>:
                                                    heap_get_chunk_hdr()
                                                    VALGRIND_DO_MAKE_MEM_UNDEFINED()
                                                    VALGRIND_ANNOTATE_NEW_MEMORY()
                                                    chunk_get_chunk_hdr_value() <uint64_t chunk_get_chunk_hdr_value (uint16_t type, uint16_t flags, uint32_t size_idx) at libpmemobj/memblock.c:604>:
                                                        COMPILE_ERROR_ON()
                                                        memcpy()
                                                    util_atomic_store_explicit64()
                                                    pmemops_persist()
                                                    huge_write_footer() <void huge_write_footer (struct chunk_header *hdr, uint32_t size_idx) at libpmemobj/memblock.c:1166>:
                                                        VALGRIND_DO_MAKE_MEM_UNDEFINED()
                                                        VALGRIND_SET_CLEAN()
                                                    memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                                        memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                                            heap_get_chunk_hdr()
                                                        memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                                            heap_get_chunk_hdr()
                                                            FATAL()
                                        alloc_prep_block() <int alloc_prep_block (struct palloc_heap *heap, const struct memory_block *m, palloc_constr constructor, void *arg, uint64_t extra_field, uint16_t object_flags, struct pobj_action_internal *out) at libpmemobj/palloc.c:112>:
                                            VALGRIND_DO_MEMPOOL_ALLOC()
                                            VALGRIND_DO_MAKE_MEM_UNDEFINED()
                                            VALGRIND_ANNOTATE_NEW_MEMORY()
                                            unlikely()
                                            pmemops_memset()
                                            VALGRIND_DO_MEMPOOL_FREE()
                                            HEAP_PTR_TO_OFF()
                                        bucket_insert_block() <int bucket_insert_block (struct bucket *b, const struct memory_block *m) at libpmemobj/bucket.c:161>:
                                            VALGRIND_DO_MAKE_MEM_NOACCESS()
                                            VALGRIND_ANNOTATE_NEW_MEMORY()
                                        bucket_active_block() <struct memory_block_reserved *bucket_active_block (struct bucket *b) at libpmemobj/bucket.c:265>:
                                        util_fetch_and_add64()
                                        heap_bucket_release() <void heap_bucket_release (struct bucket *b) at libpmemobj/heap.c:498>:
                                            bucket_release() <void bucket_release (struct bucket *b) at libpmemobj/bucket.c:127>:
                                                util_mutex_unlock()
                                    VALGRIND_ADD_TO_TX()
                                    HEAP_OFF_TO_PTR()
                                    pmemops_memcpy()
                                    VALGRIND_REMOVE_FROM_TX()
                                    operation_add_entry() <int operation_add_entry (struct operation_context *ctx, void *ptr, uint64_t value, ulog_operation_type type) at libpmemobj/memops.c:411>:
                                        OBJ_OFF_IS_VALID()
                                        operation_add_typed_entry() <int operation_add_typed_entry (struct operation_context *ctx, void *ptr, uint64_t value, ulog_operation_type type, enum operation_log_type log_type) at libpmemobj/memops.c:362>:
                                            Realloc()
                                            SIZEOF_ULOG()
                                            VECQ_CLEAR()
                                            operation_try_merge_entry() <int operation_try_merge_entry (struct operation_context *ctx, void *ptr, uint64_t value, ulog_operation_type type) at libpmemobj/memops.c:318>:
                                                OBJ_PTR_TO_OFF()
                                                VECQ_FOREACH_REVERSE()
                                                ulog_entry_offset() <uint64_t ulog_entry_offset (const struct ulog_entry_base *entry) at libpmemobj/ulog.c:68>:
                                                ulog_entry_type() <ulog_operation_type ulog_entry_type (const struct ulog_entry_base *entry) at libpmemobj/ulog.c:59>:
                                                    ULOG_OPERATION_FROM_OFFSET()
                                                operation_merge() <inline void operation_merge (struct ulog_entry_base *entry, uint64_t value, ulog_operation_type type) at libpmemobj/memops.c:288>:
                                                    ASSERT()
                                            ulog_entry_val_create() <struct ulog_entry_val *ulog_entry_val_create (struct ulog *ulog, size_t offset, uint64_t *dest, uint64_t value, ulog_operation_type type, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:372>:
                                                COMPILE_ERROR_ON()
                                                ULOG_OPERATION()
                                                pmemops_memcpy()
                                            operation_merge_entry_add() <void operation_merge_entry_add (struct operation_context *ctx, struct ulog_entry_val *entry) at libpmemobj/memops.c:344>:
                                                VECQ_SIZE()
                                                VECQ_DEQUEUE()
                                                VECQ_ENQUEUE()
                                                LOG()
                                            ulog_entry_size() <size_t ulog_entry_size (const struct ulog_entry_base *entry) at libpmemobj/ulog.c:77>:
                                                ulog_entry_type() <ulog_operation_type ulog_entry_type (const struct ulog_entry_base *entry) at libpmemobj/ulog.c:59>:
                                                    ULOG_OPERATION_FROM_OFFSET()
                                                CACHELINE_ALIGN()
                                                ASSERT()
                                    palloc_exec_actions() <void palloc_exec_actions (struct palloc_heap *heap, struct operation_context *ctx, struct pobj_action_internal *actv, size_t actvcnt) at libpmemobj/palloc.c:526>:
                                        qsort()
                                        palloc_action_compare() <int palloc_action_compare (const void *lhs, const void *rhs) at libpmemobj/palloc.c:507>:
                                        ASSERTeq()
                                        util_mutex_lock()
                                        pmemops_drain()
                                        operation_process() <void operation_process (struct operation_context *ctx) at libpmemobj/memops.c:776>:
                                            ulog_entry_type() <ulog_operation_type ulog_entry_type (const struct ulog_entry_base *entry) at libpmemobj/ulog.c:59>:
                                                ULOG_OPERATION_FROM_OFFSET()
                                            ulog_entry_apply() <void ulog_entry_apply (const struct ulog_entry_base *e, int persist, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:526>:
                                                ulog_entry_type() <ulog_operation_type ulog_entry_type (const struct ulog_entry_base *entry) at libpmemobj/ulog.c:59>:
                                                    ULOG_OPERATION_FROM_OFFSET()
                                                ulog_entry_offset() <uint64_t ulog_entry_offset (const struct ulog_entry_base *entry) at libpmemobj/ulog.c:68>:
                                                f()
                                                VALGRIND_ADD_TO_TX()
                                                pmemops_memset()
                                                pmemops_memcpy()
                                                ASSERT()
                                                VALGRIND_REMOVE_FROM_TX()
                                            operation_process_persistent_redo() <void operation_process_persistent_redo (struct operation_context *ctx) at libpmemobj/memops.c:654>:
                                                ASSERTeq()
                                                ulog_store() <void ulog_store (struct ulog *dest, struct ulog *src, size_t nbytes, size_t ulog_base_nbytes, size_t ulog_total_capacity, struct ulog_next *next, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:288>:
                                                    MIN()
                                                    CACHELINE_ALIGN()
                                                    ASSERT()
                                                    ulog_by_offset() <struct ulog *ulog_by_offset (size_t offset, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:36>:
                                                        CACHELINE_ALIGN()
                                                    VEC_ARR()
                                                    ASSERTne()
                                                    IS_CACHELINE_ALIGNED()
                                                    VALGRIND_ADD_TO_TX()
                                                    pmemops_memcpy()
                                                    VALGRIND_REMOVE_FROM_TX()
                                                    pmemops_drain()
                                                    VEC_SIZE()
                                                    VEC_FRONT()
                                                    ulog_checksum() <int ulog_checksum (struct ulog *ulog, size_t ulog_base_bytes, int insert) at libpmemobj/ulog.c:275>:
                                                        util_checksum() <int util_checksum (void *addr, size_t len, uint64_t *csump, int insert, size_t skip_off) at core/util.c:178>:
                                                            util_checksum_compute() <uint64_t util_checksum_compute (void *addr, size_t len, uint64_t *csump, size_t skip_off) at core/util.c:134>:
                                                                abort()
                                                                le32toh()
                                                            htole64()
                                                        SIZEOF_ULOG()
                                                    SIZEOF_ULOG()
                                                ulog_process() <void ulog_process (struct ulog *ulog, ulog_check_offset_fn check, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:786>:
                                                    SUPPRESS_UNUSED()
                                                    LOG()
                                                    ulog_check() <int ulog_check (struct ulog *ulog, ulog_check_offset_fn check, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:881>:
                                                        LOG()
                                                        ulog_foreach_entry() <int ulog_foreach_entry (struct ulog *ulog, ulog_entry_cb cb, void *arg, const struct pmem_ops *ops) at libpmemobj/ulog.c:180>
                                                        ulog_check_entry() <int ulog_check_entry (struct ulog_entry_base *e, void *arg, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:862>:
                                                            ulog_entry_offset() <uint64_t ulog_entry_offset (const struct ulog_entry_base *entry) at libpmemobj/ulog.c:68>:
                                                            check()
                                                            LOG()
                                                    ulog_foreach_entry() <int ulog_foreach_entry (struct ulog *ulog, ulog_entry_cb cb, void *arg, const struct pmem_ops *ops) at libpmemobj/ulog.c:180>
                                                    ulog_process_entry() <int ulog_process_entry (struct ulog_entry_base *e, void *arg, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:591>:
                                                        SUPPRESS_UNUSED()
                                                        ulog_entry_apply() <void ulog_entry_apply (const struct ulog_entry_base *e, int persist, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:526>:
                                                            ulog_entry_type() <ulog_operation_type ulog_entry_type (const struct ulog_entry_base *entry) at libpmemobj/ulog.c:59>:
                                                                ULOG_OPERATION_FROM_OFFSET()
                                                            ulog_entry_offset() <uint64_t ulog_entry_offset (const struct ulog_entry_base *entry) at libpmemobj/ulog.c:68>:
                                                            f()
                                                            VALGRIND_ADD_TO_TX()
                                                            pmemops_memset()
                                                            pmemops_memcpy()
                                                            ASSERT()
                                                            VALGRIND_REMOVE_FROM_TX()
                                                    pmemops_drain()
                                                ulog_clobber() <void ulog_clobber (struct ulog *dest, struct ulog_next *next, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:694>:
                                                    memset()
                                                    VEC_SIZE()
                                                    VEC_FRONT()
                                                    pmemops_memcpy()
                                            operation_process_persistent_undo() <void operation_process_persistent_undo (struct operation_context *ctx) at libpmemobj/memops.c:673>:
                                                ASSERTeq()
                                                ulog_process() <void ulog_process (struct ulog *ulog, ulog_check_offset_fn check, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:786>:
                                                    SUPPRESS_UNUSED()
                                                    LOG()
                                                    ulog_check() <int ulog_check (struct ulog *ulog, ulog_check_offset_fn check, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:881>:
                                                        LOG()
                                                        ulog_foreach_entry() <int ulog_foreach_entry (struct ulog *ulog, ulog_entry_cb cb, void *arg, const struct pmem_ops *ops) at libpmemobj/ulog.c:180>
                                                        ulog_check_entry() <int ulog_check_entry (struct ulog_entry_base *e, void *arg, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:862>:
                                                            ulog_entry_offset() <uint64_t ulog_entry_offset (const struct ulog_entry_base *entry) at libpmemobj/ulog.c:68>:
                                                            check()
                                                            LOG()
                                                    ulog_foreach_entry() <int ulog_foreach_entry (struct ulog *ulog, ulog_entry_cb cb, void *arg, const struct pmem_ops *ops) at libpmemobj/ulog.c:180>
                                                    ulog_process_entry() <int ulog_process_entry (struct ulog_entry_base *e, void *arg, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:591>:
                                                        SUPPRESS_UNUSED()
                                                        ulog_entry_apply() <void ulog_entry_apply (const struct ulog_entry_base *e, int persist, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:526>:
                                                            ulog_entry_type() <ulog_operation_type ulog_entry_type (const struct ulog_entry_base *entry) at libpmemobj/ulog.c:59>:
                                                                ULOG_OPERATION_FROM_OFFSET()
                                                            ulog_entry_offset() <uint64_t ulog_entry_offset (const struct ulog_entry_base *entry) at libpmemobj/ulog.c:68>:
                                                            f()
                                                            VALGRIND_ADD_TO_TX()
                                                            pmemops_memset()
                                                            pmemops_memcpy()
                                                            ASSERT()
                                                            VALGRIND_REMOVE_FROM_TX()
                                                    pmemops_drain()
                                            ulog_process() <void ulog_process (struct ulog *ulog, ulog_check_offset_fn check, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:786>:
                                                SUPPRESS_UNUSED()
                                                LOG()
                                                ulog_check() <int ulog_check (struct ulog *ulog, ulog_check_offset_fn check, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:881>:
                                                    LOG()
                                                    ulog_foreach_entry() <int ulog_foreach_entry (struct ulog *ulog, ulog_entry_cb cb, void *arg, const struct pmem_ops *ops) at libpmemobj/ulog.c:180>
                                                    ulog_check_entry() <int ulog_check_entry (struct ulog_entry_base *e, void *arg, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:862>:
                                                        ulog_entry_offset() <uint64_t ulog_entry_offset (const struct ulog_entry_base *entry) at libpmemobj/ulog.c:68>:
                                                        check()
                                                        LOG()
                                                ulog_foreach_entry() <int ulog_foreach_entry (struct ulog *ulog, ulog_entry_cb cb, void *arg, const struct pmem_ops *ops) at libpmemobj/ulog.c:180>
                                                ulog_process_entry() <int ulog_process_entry (struct ulog_entry_base *e, void *arg, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:591>:
                                                    SUPPRESS_UNUSED()
                                                    ulog_entry_apply() <void ulog_entry_apply (const struct ulog_entry_base *e, int persist, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:526>:
                                                        ulog_entry_type() <ulog_operation_type ulog_entry_type (const struct ulog_entry_base *entry) at libpmemobj/ulog.c:59>:
                                                            ULOG_OPERATION_FROM_OFFSET()
                                                        ulog_entry_offset() <uint64_t ulog_entry_offset (const struct ulog_entry_base *entry) at libpmemobj/ulog.c:68>:
                                                        f()
                                                        VALGRIND_ADD_TO_TX()
                                                        pmemops_memset()
                                                        pmemops_memcpy()
                                                        ASSERT()
                                                        VALGRIND_REMOVE_FROM_TX()
                                                pmemops_drain()
                                        util_mutex_unlock()
                                        operation_finish() <void operation_finish (struct operation_context *ctx, unsigned flags) at libpmemobj/memops.c:814>:
                                            ASSERTne()
                                            out() <void out (const char *fmt, ...) at core/out.c:480>:
                                                va_start()
                                                out_common() <} void out_common (const char *file, int line, const char *func, int level, const char *suffix, const char *fmt, va_list ap) at core/out.c:334>
                                                va_end()
                                            ulog_clobber_data() <int ulog_clobber_data (struct ulog *ulog_first, struct ulog_next *next, ulog_free_fn ulog_free, ulog_rm_user_buffer_fn user_buff_remove, const struct pmem_ops *p_ops, unsigned flags) at libpmemobj/ulog.c:713>:
                                                ASSERTne()
                                                ulog_inc_gen_num() <void ulog_inc_gen_num (struct ulog *ulog, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:605>:
                                                    VALGRIND_ADD_TO_TX()
                                                    pmemops_persist()
                                                    VALGRIND_SET_CLEAN()
                                                    VALGRIND_REMOVE_FROM_TX()
                                                VEC_SIZE()
                                                VEC_GET()
                                                ulog_by_offset() <struct ulog *ulog_by_offset (size_t offset, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:36>:
                                                    CACHELINE_ALIGN()
                                                ulog_free_next() <int ulog_free_next (struct ulog *u, const struct pmem_ops *p_ops, ulog_free_fn ulog_free, ulog_rm_user_buffer_fn user_buff_remove, uint64_t flags) at libpmemobj/ulog.c:625>:
                                                    VEC()
                                                    VEC_INIT()
                                                    ulog_by_offset() <struct ulog *ulog_by_offset (size_t offset, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:36>:
                                                        CACHELINE_ALIGN()
                                                    pmemops_persist()
                                                    VEC_PUSH_BACK()
                                                    LOG()
                                                    out() <void out (const char *fmt, ...) at core/out.c:480>:
                                                        va_start()
                                                        out_common() <} void out_common (const char *file, int line, const char *func, int level, const char *suffix, const char *fmt, va_list ap) at core/out.c:334>
                                                        va_end()
                                                    VEC_FOREACH_REVERSE()
                                                    VEC_DELETE()
                                            operation_user_buffer_remove() <int operation_user_buffer_remove (void *base, void *addr) at libpmemobj/memops.c:242>:
                                                util_mutex_lock()
                                                ravl_find() <struct ravl_node *ravl_find (struct ravl *ravl, const void *data, enum ravl_predicate flags) at core/ravl.c:524>:
                                                    LOG()
                                                    ravl_data() <void *ravl_data (struct ravl_node *node) at core/ravl.c:571>:
                                                        memcpy()
                                                    ravl_predicate_holds() <int ravl_predicate_holds (int result, struct ravl_node **ret, struct ravl_node *n, enum ravl_predicate flags) at core/ravl.c:489>:
                                                        ravl_node_successor() <struct ravl_node *ravl_node_successor (struct ravl_node *n) at core/ravl.c:465>:
                                                            ravl_node_cessor() <struct ravl_node *ravl_node_cessor (struct ravl_node *n, enum ravl_slot_type t) at core/ravl.c:443>:
                                                                ravl_node_type_most() <struct ravl_node *ravl_node_type_most (struct ravl_node *n, enum ravl_slot_type t) at core/ravl.c:430>:
                                                                ravl_slot_opposite() <enum ravl_slot_type ravl_slot_opposite (enum ravl_slot_type t) at core/ravl.c:184>:
                                                                    ASSERTne()
                                                        ravl_node_predecessor() <struct ravl_node *ravl_node_predecessor (struct ravl_node *n) at core/ravl.c:476>:
                                                            ravl_node_cessor() <struct ravl_node *ravl_node_cessor (struct ravl_node *n, enum ravl_slot_type t) at core/ravl.c:443>:
                                                                ravl_node_type_most() <struct ravl_node *ravl_node_type_most (struct ravl_node *n, enum ravl_slot_type t) at core/ravl.c:430>:
                                                                ravl_slot_opposite() <enum ravl_slot_type ravl_slot_opposite (enum ravl_slot_type t) at core/ravl.c:184>:
                                                                    ASSERTne()
                                                ASSERTne()
                                                ravl_remove() <void ravl_remove (struct ravl *ravl, struct ravl_node *n) at core/ravl.c:545> (R):
                                                    LOG()
                                                    ravl_node_successor() <struct ravl_node *ravl_node_successor (struct ravl_node *n) at core/ravl.c:465>:
                                                        ravl_node_cessor() <struct ravl_node *ravl_node_cessor (struct ravl_node *n, enum ravl_slot_type t) at core/ravl.c:443>:
                                                            ravl_node_type_most() <struct ravl_node *ravl_node_type_most (struct ravl_node *n, enum ravl_slot_type t) at core/ravl.c:430>:
                                                            ravl_slot_opposite() <enum ravl_slot_type ravl_slot_opposite (enum ravl_slot_type t) at core/ravl.c:184>:
                                                                ASSERTne()
                                                    memcpy()
                                                    ravl_remove() <void ravl_remove (struct ravl *ravl, struct ravl_node *n) at core/ravl.c:545> (recursive: see 11423)
                                                    ravl_node_ref() <struct ravl_node **ravl_node_ref (struct ravl *ravl, struct ravl_node *n) at core/ravl.c:223>:
                                                        ravl_node_slot_type() <enum ravl_slot_type ravl_node_slot_type (struct ravl_node *n) at core/ravl.c:196>:
                                                    Free() <Free_func Free at core/alloc.c:91>
                                                util_mutex_unlock()
                                            ulog_free_next() <int ulog_free_next (struct ulog *u, const struct pmem_ops *p_ops, ulog_free_fn ulog_free, ulog_rm_user_buffer_fn user_buff_remove, uint64_t flags) at libpmemobj/ulog.c:625>:
                                                VEC()
                                                VEC_INIT()
                                                ulog_by_offset() <struct ulog *ulog_by_offset (size_t offset, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:36>:
                                                    CACHELINE_ALIGN()
                                                pmemops_persist()
                                                VEC_PUSH_BACK()
                                                LOG()
                                                out() <void out (const char *fmt, ...) at core/out.c:480>:
                                                    va_start()
                                                    out_common() <} void out_common (const char *file, int line, const char *func, int level, const char *suffix, const char *fmt, va_list ap) at core/out.c:334>
                                                    va_end()
                                                VEC_FOREACH_REVERSE()
                                                VEC_DELETE()
                                            ulog_capacity() <size_t ulog_capacity (struct ulog *ulog, size_t ulog_base_bytes, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:206>:
                                                ulog_next() <struct ulog *ulog_next (struct ulog *ulog, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:50>:
                                                    ulog_by_offset() <struct ulog *ulog_by_offset (size_t offset, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:36>:
                                                        CACHELINE_ALIGN()
                                            VEC_CLEAR()
                                            ulog_rebuild_next_vec() <void ulog_rebuild_next_vec (struct ulog *ulog, struct ulog_next *next, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:223>:
                                                VEC_PUSH_BACK()
                                                ulog_next() <struct ulog *ulog_next (struct ulog *ulog, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:50>:
                                                    ulog_by_offset() <struct ulog *ulog_by_offset (size_t offset, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:36>:
                                                        CACHELINE_ALIGN()
                                pmalloc_operation_release() <void pmalloc_operation_release (PMEMobjpool *pop) at libpmemobj/pmalloc.c:83>:
                                    lane_release() <void lane_release (PMEMobjpool *pop) at libpmemobj/lane.c:546>:
                                        get_lane_info_record() <inline struct lane_info *get_lane_info_record (PMEMobjpool *pop) at libpmemobj/lane.c:466>:
                                            likely()
                                            unlikely()
                                            lane_info_ht_boot() <inline void lane_info_ht_boot (void) at libpmemobj/lane.c:74>:
                                                lane_info_create() <inline void lane_info_create (void) at libpmemobj/lane.c:39>:
                                                    critnib_new() <struct critnib *critnib_new (void) at libpmemobj/critnib.c:187>:
                                                        Zalloc() <void *Zalloc (size_t sz) at core/alloc.c:98>:
                                                            Malloc()
                                                            memset()
                                                        util_mutex_init()
                                                        VALGRIND_HG_DRD_DISABLE_CHECKING()
                                                    FATAL()
                                                os_tls_set() <int os_tls_set (os_tls_key_t key, const void *value) at core/os_thread_posix.c:53>:
                                                    pthread_setspecific()
                                                FATAL()
                                            critnib_get() <void *critnib_get (struct critnib *c, uint64_t key) at libpmemobj/critnib.c:515>:
                                                load() <void load (void *src, void *dst) at libpmemobj/critnib.c:130>:
                                                    util_atomic_load_explicit64()
                                                is_leaf() <inline bool is_leaf (struct critnib_node *n) at libpmemobj/critnib.c:150>:
                                                slice_index() <inline unsigned slice_index (uint64_t key, sh_t shift) at libpmemobj/critnib.c:178>:
                                                to_leaf() <inline struct critnib_leaf *to_leaf (struct critnib_node *n) at libpmemobj/critnib.c:159>:
                                            Malloc()
                                            FATAL()
                                            critnib_insert() <int critnib_insert (struct critnib *c, uint64_t key, void *value) at libpmemobj/critnib.c:340>:
                                                util_mutex_lock()
                                                alloc_leaf() <struct critnib_leaf *alloc_leaf (struct critnib *__restrict c) at libpmemobj/critnib.c:311>:
                                                    Malloc()
                                                    ERR()
                                                    VALGRIND_ANNOTATE_NEW_MEMORY()
                                                util_mutex_unlock()
                                                VALGRIND_HG_DRD_DISABLE_CHECKING()
                                                is_leaf() <inline bool is_leaf (struct critnib_node *n) at libpmemobj/critnib.c:150>:
                                                path_mask() <inline uint64_t path_mask (sh_t shift) at libpmemobj/critnib.c:169>:
                                                slice_index() <inline unsigned slice_index (uint64_t key, sh_t shift) at libpmemobj/critnib.c:178>:
                                                store() <void store (void *dst, void *src) at libpmemobj/critnib.c:140>:
                                                    util_atomic_store_explicit64()
                                                to_leaf() <inline struct critnib_leaf *to_leaf (struct critnib_node *n) at libpmemobj/critnib.c:159>:
                                                ASSERT()
                                                free_leaf() <void free_leaf (struct critnib *__restrict c, struct critnib_leaf *__restrict k) at libpmemobj/critnib.c:298>
                                                util_mssb_index64()
                                                alloc_node() <struct critnib_node *alloc_node (struct critnib *__restrict c) at libpmemobj/critnib.c:274>:
                                                    Malloc()
                                                    ERR()
                                                    VALGRIND_ANNOTATE_NEW_MEMORY()
                                        ASSERTne()
                                        unlikely()
                                        FATAL()
                                        util_bool_compare_and_swap64()
                            lane_ulog_constructor() <int lane_ulog_constructor (void *base, void *ptr, size_t usable_size, void *arg) at libpmemobj/lane.c:160>:
                                ALIGN_DOWN()
                                ulog_construct() <void ulog_construct (uint64_t offset, size_t capacity, uint64_t gen_num, int flush, uint64_t flags, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:136>:
                                    ulog_by_offset() <struct ulog *ulog_by_offset (size_t offset, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:36>:
                                        CACHELINE_ALIGN()
                                    ASSERTne()
                                    OBJ_PTR_TO_OFF()
                                    ALIGN_DOWN()
                                    VALGRIND_ADD_TO_TX()
                                    SIZEOF_ULOG()
                                    memset()
                                    CACHELINE_ALIGN()
                                    pmemops_xflush()
                                    pmemops_memset()
                                    VALGRIND_REMOVE_FROM_TX()
                                OBJ_PTR_TO_OFF()
                        operation_delete() <void operation_delete (struct operation_context *ctx) at libpmemobj/memops.c:229>:
                            VECQ_DELETE()
                            VEC_DELETE()
                            Free() <Free_func Free at core/alloc.c:91>
                    lane_destroy() <void lane_destroy (PMEMobjpool *pop, struct lane *lane) at libpmemobj/lane.c:246>:
                        SUPPRESS_UNUSED()
                        operation_delete() <void operation_delete (struct operation_context *ctx) at libpmemobj/memops.c:229>:
                            VECQ_DELETE()
                            VEC_DELETE()
                            Free() <Free_func Free at core/alloc.c:91>
                    Free() <Free_func Free at core/alloc.c:91>
                ERR()
                lane_recover_and_section_boot() <int lane_recover_and_section_boot (PMEMobjpool *pop) at libpmemobj/lane.c:353>:
                    COMPILE_ERROR_ON()
                    SIZEOF_ULOG()
                    lane_get_layout() <struct lane_layout *lane_get_layout (PMEMobjpool *pop, uint64_t lane_idx) at libpmemobj/lane.c:150>
                    ulog_recover() <void ulog_recover (struct ulog *ulog, ulog_check_offset_fn check, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:846>:
                        LOG()
                        ulog_recovery_needed() <int ulog_recovery_needed (struct ulog *ulog, int verify_checksum) at libpmemobj/ulog.c:828>:
                            MIN()
                            ulog_base_nbytes() <size_t ulog_base_nbytes (struct ulog *ulog) at libpmemobj/ulog.c:808>:
                                ulog_entry_valid() <int ulog_entry_valid (struct ulog *ulog, const struct ulog_entry_base *entry) at libpmemobj/ulog.c:103>:
                                    ulog_entry_type() <ulog_operation_type ulog_entry_type (const struct ulog_entry_base *entry) at libpmemobj/ulog.c:59>:
                                        ULOG_OPERATION_FROM_OFFSET()
                                    ulog_entry_size() <size_t ulog_entry_size (const struct ulog_entry_base *entry) at libpmemobj/ulog.c:77>:
                                        ulog_entry_type() <ulog_operation_type ulog_entry_type (const struct ulog_entry_base *entry) at libpmemobj/ulog.c:59>:
                                            ULOG_OPERATION_FROM_OFFSET()
                                        CACHELINE_ALIGN()
                                        ASSERT()
                                    util_checksum_compute() <uint64_t util_checksum_compute (void *addr, size_t len, uint64_t *csump, size_t skip_off) at core/util.c:134>:
                                        abort()
                                        le32toh()
                                    util_checksum_seq() <uint64_t util_checksum_seq (const void *addr, size_t len, uint64_t csum) at core/util.c:197>:
                                        abort()
                                        le32toh()
                                ulog_entry_size() <size_t ulog_entry_size (const struct ulog_entry_base *entry) at libpmemobj/ulog.c:77>:
                                    ulog_entry_type() <ulog_operation_type ulog_entry_type (const struct ulog_entry_base *entry) at libpmemobj/ulog.c:59>:
                                        ULOG_OPERATION_FROM_OFFSET()
                                    CACHELINE_ALIGN()
                                    ASSERT()
                            ulog_checksum() <int ulog_checksum (struct ulog *ulog, size_t ulog_base_bytes, int insert) at libpmemobj/ulog.c:275>:
                                util_checksum() <int util_checksum (void *addr, size_t len, uint64_t *csump, int insert, size_t skip_off) at core/util.c:178>:
                                    util_checksum_compute() <uint64_t util_checksum_compute (void *addr, size_t len, uint64_t *csump, size_t skip_off) at core/util.c:134>:
                                        abort()
                                        le32toh()
                                    htole64()
                                SIZEOF_ULOG()
                        ulog_process() <void ulog_process (struct ulog *ulog, ulog_check_offset_fn check, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:786>:
                            SUPPRESS_UNUSED()
                            LOG()
                            ulog_check() <int ulog_check (struct ulog *ulog, ulog_check_offset_fn check, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:881>:
                                LOG()
                                ulog_foreach_entry() <int ulog_foreach_entry (struct ulog *ulog, ulog_entry_cb cb, void *arg, const struct pmem_ops *ops) at libpmemobj/ulog.c:180>
                                ulog_check_entry() <int ulog_check_entry (struct ulog_entry_base *e, void *arg, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:862>:
                                    ulog_entry_offset() <uint64_t ulog_entry_offset (const struct ulog_entry_base *entry) at libpmemobj/ulog.c:68>:
                                    check()
                                    LOG()
                            ulog_foreach_entry() <int ulog_foreach_entry (struct ulog *ulog, ulog_entry_cb cb, void *arg, const struct pmem_ops *ops) at libpmemobj/ulog.c:180>
                            ulog_process_entry() <int ulog_process_entry (struct ulog_entry_base *e, void *arg, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:591>:
                                SUPPRESS_UNUSED()
                                ulog_entry_apply() <void ulog_entry_apply (const struct ulog_entry_base *e, int persist, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:526>:
                                    ulog_entry_type() <ulog_operation_type ulog_entry_type (const struct ulog_entry_base *entry) at libpmemobj/ulog.c:59>:
                                        ULOG_OPERATION_FROM_OFFSET()
                                    ulog_entry_offset() <uint64_t ulog_entry_offset (const struct ulog_entry_base *entry) at libpmemobj/ulog.c:68>:
                                    f()
                                    VALGRIND_ADD_TO_TX()
                                    pmemops_memset()
                                    pmemops_memcpy()
                                    ASSERT()
                                    VALGRIND_REMOVE_FROM_TX()
                            pmemops_drain()
                        ulog_clobber() <void ulog_clobber (struct ulog *dest, struct ulog_next *next, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:694>:
                            memset()
                            VEC_SIZE()
                            VEC_FRONT()
                            pmemops_memcpy()
                    pmalloc_boot() <int pmalloc_boot (PMEMobjpool *pop) at libpmemobj/pmalloc.c:180>:
                        palloc_boot() <int palloc_boot (struct palloc_heap *heap, void *heap_start, uint64_t heap_size, uint64_t *sizep, void *base, struct pmem_ops *p_ops, struct stats *stats, struct pool_set *set) at libpmemobj/palloc.c:1249>:
                            heap_boot() <int heap_boot (struct palloc_heap *heap, void *heap_start, uint64_t heap_size, uint64_t *sizep, void *base, struct pmem_ops *p_ops, struct stats *stats, struct pool_set *set) at libpmemobj/heap.c:1584>:
                                pmemops_persist()
                                ERR()
                                Malloc()
                                heap_max_zone() <unsigned heap_max_zone (size_t size) at libpmemobj/heap.c:516>:
                                Zalloc() <void *Zalloc (size_t sz) at core/alloc.c:98>:
                                    Malloc()
                                    memset()
                                arena_thread_assignment_init() <int arena_thread_assignment_init (struct arenas_thread_assignment *assignment, enum pobj_arenas_assignment_type type) at libpmemobj/heap.c:290>:
                                    os_tls_key_create() <int os_tls_key_create (os_tls_key_t *key, void (*destructor) (void *)) at core/os_thread_posix.c:34>:
                                        COMPILE_ERROR_ON()
                                        pthread_key_create()
                                    heap_thread_arena_destructor() <void heap_thread_arena_destructor (void *arg) at libpmemobj/heap.c:277>:
                                        os_mutex_lock() <int os_mutex_lock (os_mutex_t *__restrict mutex) at core/os_thread_posix.c:90>:
                                            pthread_mutex_lock()
                                        heap_arena_thread_detach() <void heap_arena_thread_detach (struct arena *a) at libpmemobj/heap.c:232>:
                                            util_fetch_and_sub64()
                                        os_mutex_unlock() <int os_mutex_unlock (os_mutex_t *__restrict mutex) at core/os_thread_posix.c:108>:
                                            pthread_mutex_unlock()
                                    ASSERT()
                                alloc_class_collection_new() <struct alloc_class_collection *alloc_class_collection_new () at libpmemobj/alloc_class.c:402>:
                                    LOG()
                                    Zalloc() <void *Zalloc (size_t sz) at core/alloc.c:98>:
                                        Malloc()
                                        memset()
                                    Malloc()
                                    critnib_new() <struct critnib *critnib_new (void) at libpmemobj/critnib.c:187>:
                                        Zalloc() <void *Zalloc (size_t sz) at core/alloc.c:98>:
                                            Malloc()
                                            memset()
                                        util_mutex_init()
                                        VALGRIND_HG_DRD_DISABLE_CHECKING()
                                    memset()
                                    alloc_class_new() <struct alloc_class *alloc_class_new (int id, struct alloc_class_collection *ac, enum alloc_class_type type, enum header_type htype, size_t unit_size, size_t alignment, uint32_t size_idx) at libpmemobj/alloc_class.c:179>:
                                        LOG()
                                        Malloc()
                                        memblock_run_bitmap() <void memblock_run_bitmap (uint32_t *size_idx, uint16_t flags, uint64_t unit_size, uint64_t alignment, void *content, struct run_bitmap *b) at libpmemobj/memblock.c:410>:
                                            ASSERTne()
                                            RUN_CONTENT_SIZE_BYTES()
                                            util_div_ceil()
                                            ALIGN_UP()
                                            memblock_run_default_nallocs() <unsigned memblock_run_default_nallocs (uint32_t *size_idx, uint16_t flags, uint64_t unit_size, uint64_t alignment) at libpmemobj/memblock.c:370>:
                                                SUPPRESS_UNUSED()
                                                RUN_DEFAULT_SIZE_BYTES()
                                                LOG()
                                        alloc_class_find_first_free_slot() <int alloc_class_find_first_free_slot (struct alloc_class_collection *ac, uint8_t *slot) at libpmemobj/alloc_class.c:134>:
                                            LOG()
                                        SIZE_TO_CLASS_MAP_INDEX()
                                        ASSERT()
                                        RUN_CLASS_KEY_PACK()
                                        critnib_insert() <int critnib_insert (struct critnib *c, uint64_t key, void *value) at libpmemobj/critnib.c:340>:
                                            util_mutex_lock()
                                            alloc_leaf() <struct critnib_leaf *alloc_leaf (struct critnib *__restrict c) at libpmemobj/critnib.c:311>:
                                                Malloc()
                                                ERR()
                                                VALGRIND_ANNOTATE_NEW_MEMORY()
                                            util_mutex_unlock()
                                            VALGRIND_HG_DRD_DISABLE_CHECKING()
                                            is_leaf() <inline bool is_leaf (struct critnib_node *n) at libpmemobj/critnib.c:150>:
                                            path_mask() <inline uint64_t path_mask (sh_t shift) at libpmemobj/critnib.c:169>:
                                            slice_index() <inline unsigned slice_index (uint64_t key, sh_t shift) at libpmemobj/critnib.c:178>:
                                            store() <void store (void *dst, void *src) at libpmemobj/critnib.c:140>:
                                                util_atomic_store_explicit64()
                                            to_leaf() <inline struct critnib_leaf *to_leaf (struct critnib_node *n) at libpmemobj/critnib.c:159>:
                                            ASSERT()
                                            free_leaf() <void free_leaf (struct critnib *__restrict c, struct critnib_leaf *__restrict k) at libpmemobj/critnib.c:298>
                                            util_mssb_index64()
                                            alloc_node() <struct critnib_node *alloc_node (struct critnib *__restrict c) at libpmemobj/critnib.c:274>:
                                                Malloc()
                                                ERR()
                                                VALGRIND_ANNOTATE_NEW_MEMORY()
                                        ERR()
                                        Free() <Free_func Free at core/alloc.c:91>
                                        alloc_class_reservation_clear() <void alloc_class_reservation_clear (struct alloc_class_collection *ac, int id) at libpmemobj/alloc_class.c:166>:
                                            LOG()
                                            util_bool_compare_and_swap64()
                                            ASSERT()
                                    ASSERTeq()
                                    alloc_class_by_run() <struct alloc_class *alloc_class_by_run (struct alloc_class_collection *ac, size_t unit_size, uint16_t flags, uint32_t size_idx) at libpmemobj/alloc_class.c:594>:
                                        SIZE_TO_CLASS_MAP_INDEX()
                                        ASSERT()
                                        critnib_get() <void *critnib_get (struct critnib *c, uint64_t key) at libpmemobj/critnib.c:515>:
                                            load() <void load (void *src, void *dst) at libpmemobj/critnib.c:130>:
                                                util_atomic_load_explicit64()
                                            is_leaf() <inline bool is_leaf (struct critnib_node *n) at libpmemobj/critnib.c:150>:
                                            slice_index() <inline unsigned slice_index (uint64_t key, sh_t shift) at libpmemobj/critnib.c:178>:
                                            to_leaf() <inline struct critnib_leaf *to_leaf (struct critnib_node *n) at libpmemobj/critnib.c:159>:
                                        RUN_CLASS_KEY_PACK()
                                    alloc_class_collection_delete() <void alloc_class_collection_delete (struct alloc_class_collection *ac) at libpmemobj/alloc_class.c:516>:
                                        LOG()
                                        alloc_class_delete() <void alloc_class_delete (struct alloc_class_collection *ac, struct alloc_class *c) at libpmemobj/alloc_class.c:254>:
                                            LOG()
                                            Free() <Free_func Free at core/alloc.c:91>
                                        critnib_delete() <void critnib_delete (struct critnib *c) at libpmemobj/critnib.c:224>:
                                            delete_node() <void delete_node (struct critnib_node *__restrict n) at libpmemobj/critnib.c:206>:
                                                is_leaf() <inline bool is_leaf (struct critnib_node *n) at libpmemobj/critnib.c:150>:
                                                Free() <Free_func Free at core/alloc.c:91>
                                                to_leaf() <inline struct critnib_leaf *to_leaf (struct critnib_node *n) at libpmemobj/critnib.c:159>:
                                            util_mutex_destroy()
                                            Free() <Free_func Free at core/alloc.c:91>
                                        Free() <Free_func Free at core/alloc.c:91>
                                heap_get_procs() <unsigned heap_get_procs (void) at libpmemobj/heap.c:1430>:
                                    sysconf()
                                    LOG()
                                heap_arenas_init() <int heap_arenas_init (struct arenas *arenas) at libpmemobj/heap.c:135>:
                                    util_mutex_init()
                                    VEC_INIT()
                                    VEC_RESERVE()
                                util_mutex_init()
                                VALGRIND_DO_CREATE_MEMPOOL()
                                VEC_PUSH_BACK()
                                heap_arena_new() <struct arena *heap_arena_new (struct palloc_heap *heap, int automatic) at libpmemobj/heap.c:181>:
                                    Zalloc() <void *Zalloc (size_t sz) at core/alloc.c:98>:
                                        Malloc()
                                        memset()
                                    ERR()
                                    COMPILE_ERROR_ON()
                                    alloc_class_by_id() <struct alloc_class *alloc_class_by_id (struct alloc_class_collection *ac, uint8_t id) at libpmemobj/alloc_class.c:612>
                                    bucket_locked_new() <struct bucket_locked *bucket_locked_new (struct block_container *c, struct alloc_class *aclass) at libpmemobj/bucket.c:81>:
                                        ASSERTne()
                                        Malloc()
                                        bucket_init() <int bucket_init (struct bucket *b, struct block_container *c, struct alloc_class *aclass) at libpmemobj/bucket.c:46>:
                                            Zalloc() <void *Zalloc (size_t sz) at core/alloc.c:98>:
                                                Malloc()
                                                memset()
                                        util_mutex_init()
                                        Free() <Free_func Free at core/alloc.c:91>
                                    container_new_seglists() <struct block_container *container_new_seglists (struct palloc_heap *heap) at libpmemobj/container_seglists.c:154>:
                                        Malloc()
                                        VECQ_INIT()
                                    heap_arena_delete() <void heap_arena_delete (struct arena *arena) at libpmemobj/heap.c:169>:
                                        bucket_locked_delete() <void bucket_locked_delete (struct bucket_locked *b) at libpmemobj/bucket.c:106>:
                                            bucket_fini() <void bucket_fini (struct bucket *b) at libpmemobj/bucket.c:70>:
                                                Free() <Free_func Free at core/alloc.c:91>
                                            util_mutex_destroy()
                                            Free() <Free_func Free at core/alloc.c:91>
                                        Free() <Free_func Free at core/alloc.c:91>
                                heap_zone_update_if_needed() <void heap_zone_update_if_needed (struct palloc_heap *heap) at libpmemobj/heap.c:1559>:
                                    ZID_TO_ZONE()
                                    zone_calc_size_idx() <uint32_t zone_calc_size_idx (uint32_t zone_id, unsigned max_zone, size_t heap_size) at libpmemobj/heap.c:533>:
                                        ASSERT()
                                    heap_zone_init() <void heap_zone_init (struct palloc_heap *heap, uint32_t zone_id, uint32_t first_chunk_id) at libpmemobj/heap.c:559>:
                                        ZID_TO_ZONE()
                                        zone_calc_size_idx() <uint32_t zone_calc_size_idx (uint32_t zone_id, unsigned max_zone, size_t heap_size) at libpmemobj/heap.c:533>:
                                            ASSERT()
                                        ASSERT()
                                        memblock_huge_init() <struct memory_block memblock_huge_init (struct palloc_heap *heap, uint32_t chunk_id, uint32_t zone_id, uint32_t size_idx) at libpmemobj/memblock.c:1329>:
                                            heap_get_chunk_hdr()
                                            VALGRIND_DO_MAKE_MEM_UNDEFINED()
                                            VALGRIND_ANNOTATE_NEW_MEMORY()
                                            chunk_get_chunk_hdr_value() <uint64_t chunk_get_chunk_hdr_value (uint16_t type, uint16_t flags, uint32_t size_idx) at libpmemobj/memblock.c:604>:
                                                COMPILE_ERROR_ON()
                                                memcpy()
                                            util_atomic_store_explicit64()
                                            pmemops_persist()
                                            huge_write_footer() <void huge_write_footer (struct chunk_header *hdr, uint32_t size_idx) at libpmemobj/memblock.c:1166>:
                                                VALGRIND_DO_MAKE_MEM_UNDEFINED()
                                                VALGRIND_SET_CLEAN()
                                            memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                                memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                                    heap_get_chunk_hdr()
                                                memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                                    heap_get_chunk_hdr()
                                                    FATAL()
                                        pmemops_persist()
                                heap_arenas_fini() <void heap_arenas_fini (struct arenas *arenas) at libpmemobj/heap.c:150>:
                                    util_mutex_destroy()
                                    VEC_DELETE()
                                alloc_class_collection_delete() <void alloc_class_collection_delete (struct alloc_class_collection *ac) at libpmemobj/alloc_class.c:516>:
                                    LOG()
                                    alloc_class_delete() <void alloc_class_delete (struct alloc_class_collection *ac, struct alloc_class *c) at libpmemobj/alloc_class.c:254>:
                                        LOG()
                                        Free() <Free_func Free at core/alloc.c:91>
                                    critnib_delete() <void critnib_delete (struct critnib *c) at libpmemobj/critnib.c:224>:
                                        delete_node() <void delete_node (struct critnib_node *__restrict n) at libpmemobj/critnib.c:206>:
                                            is_leaf() <inline bool is_leaf (struct critnib_node *n) at libpmemobj/critnib.c:150>:
                                            Free() <Free_func Free at core/alloc.c:91>
                                            to_leaf() <inline struct critnib_leaf *to_leaf (struct critnib_node *n) at libpmemobj/critnib.c:159>:
                                        util_mutex_destroy()
                                        Free() <Free_func Free at core/alloc.c:91>
                                    Free() <Free_func Free at core/alloc.c:91>
                                arena_thread_assignment_fini() <void arena_thread_assignment_fini (struct arenas_thread_assignment *assignment) at libpmemobj/heap.c:318>:
                                    os_tls_key_delete() <int os_tls_key_delete (os_tls_key_t key) at core/os_thread_posix.c:44>:
                                        pthread_key_delete()
                                    ASSERT()
                                Free() <Free_func Free at core/alloc.c:91>
                        palloc_heap_vg_open() <void palloc_heap_vg_open (struct palloc_heap *heap, int objects) at libpmemobj/palloc.c:1328>:
                            heap_vg_open() <void heap_vg_open (struct palloc_heap *heap, object_callback cb, void *arg, int objects) at libpmemobj/heap.c:1941>:
                                ASSERTne()
                                VALGRIND_DO_MAKE_MEM_UNDEFINED()
                                VALGRIND_DO_MAKE_MEM_DEFINED()
                                heap_max_zone() <unsigned heap_max_zone (size_t size) at libpmemobj/heap.c:516>:
                                ZID_TO_ZONE()
                                memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                    memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                        heap_get_chunk_hdr()
                                    memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                        heap_get_chunk_hdr()
                                        FATAL()
                                ASSERT()
                                VALGRIND_DO_MAKE_MEM_NOACCESS()
                            palloc_vg_register_alloc() <int palloc_vg_register_alloc (const struct memory_block *m, void *arg) at libpmemobj/palloc.c:1310>:
                                VALGRIND_DO_MEMPOOL_ALLOC()
                                VALGRIND_DO_MAKE_MEM_DEFINED()
                        palloc_buckets_init() <int palloc_buckets_init (struct palloc_heap *heap) at libpmemobj/palloc.c:1262>:
                            heap_buckets_init() <int heap_buckets_init (struct palloc_heap *heap) at libpmemobj/heap.c:1477>:
                                alloc_class_by_id() <struct alloc_class *alloc_class_by_id (struct alloc_class_collection *ac, uint8_t id) at libpmemobj/alloc_class.c:612>
                                heap_create_alloc_class_buckets() <int heap_create_alloc_class_buckets (struct palloc_heap *heap, struct alloc_class *c) at libpmemobj/heap.c:1448>:
                                    VEC_FOREACH_BY_POS()
                                    VEC_ARR()
                                    bucket_locked_new() <struct bucket_locked *bucket_locked_new (struct block_container *c, struct alloc_class *aclass) at libpmemobj/bucket.c:81>:
                                        ASSERTne()
                                        Malloc()
                                        bucket_init() <int bucket_init (struct bucket *b, struct block_container *c, struct alloc_class *aclass) at libpmemobj/bucket.c:46>:
                                            Zalloc() <void *Zalloc (size_t sz) at core/alloc.c:98>:
                                                Malloc()
                                                memset()
                                        util_mutex_init()
                                        Free() <Free_func Free at core/alloc.c:91>
                                    container_new_seglists() <struct block_container *container_new_seglists (struct palloc_heap *heap) at libpmemobj/container_seglists.c:154>:
                                        Malloc()
                                        VECQ_INIT()
                                    bucket_locked_delete() <void bucket_locked_delete (struct bucket_locked *b) at libpmemobj/bucket.c:106>:
                                        bucket_fini() <void bucket_fini (struct bucket *b) at libpmemobj/bucket.c:70>:
                                            Free() <Free_func Free at core/alloc.c:91>
                                        util_mutex_destroy()
                                        Free() <Free_func Free at core/alloc.c:91>
                                bucket_locked_new() <struct bucket_locked *bucket_locked_new (struct block_container *c, struct alloc_class *aclass) at libpmemobj/bucket.c:81>:
                                    ASSERTne()
                                    Malloc()
                                    bucket_init() <int bucket_init (struct bucket *b, struct block_container *c, struct alloc_class *aclass) at libpmemobj/bucket.c:46>:
                                        Zalloc() <void *Zalloc (size_t sz) at core/alloc.c:98>:
                                            Malloc()
                                            memset()
                                    util_mutex_init()
                                    Free() <Free_func Free at core/alloc.c:91>
                                container_new_ravl() <struct block_container *container_new_ravl (struct palloc_heap *heap) at libpmemobj/container_ravl.c:169>:
                                    Malloc()
                                    ravl_new() <struct ravl *ravl_new (ravl_compare *compare) at core/ravl.c:64>:
                                        ravl_new_sized() <struct ravl *ravl_new_sized (ravl_compare *compare, size_t data_size) at core/ravl.c:45>:
                                            Malloc()
                                            ERR()
                                    container_compare_memblocks() <int container_compare_memblocks (const void *lhs, const void *rhs) at libpmemobj/container_ravl.c:22>:
                                    Free() <Free_func Free at core/alloc.c:91>
                                VEC_FOREACH()
                                heap_arena_delete() <void heap_arena_delete (struct arena *arena) at libpmemobj/heap.c:169>:
                                    bucket_locked_delete() <void bucket_locked_delete (struct bucket_locked *b) at libpmemobj/bucket.c:106>:
                                        bucket_fini() <void bucket_fini (struct bucket *b) at libpmemobj/bucket.c:70>:
                                            Free() <Free_func Free at core/alloc.c:91>
                                        util_mutex_destroy()
                                        Free() <Free_func Free at core/alloc.c:91>
                                    Free() <Free_func Free at core/alloc.c:91>
                        palloc_heap_cleanup() <void palloc_heap_cleanup (struct palloc_heap *heap) at libpmemobj/palloc.c:1299>:
                            heap_cleanup() <void heap_cleanup (struct palloc_heap *heap) at libpmemobj/heap.c:1741>:
                                alloc_class_collection_delete() <void alloc_class_collection_delete (struct alloc_class_collection *ac) at libpmemobj/alloc_class.c:516>:
                                    LOG()
                                    alloc_class_delete() <void alloc_class_delete (struct alloc_class_collection *ac, struct alloc_class *c) at libpmemobj/alloc_class.c:254>:
                                        LOG()
                                        Free() <Free_func Free at core/alloc.c:91>
                                    critnib_delete() <void critnib_delete (struct critnib *c) at libpmemobj/critnib.c:224>:
                                        delete_node() <void delete_node (struct critnib_node *__restrict n) at libpmemobj/critnib.c:206>:
                                            is_leaf() <inline bool is_leaf (struct critnib_node *n) at libpmemobj/critnib.c:150>:
                                            Free() <Free_func Free at core/alloc.c:91>
                                            to_leaf() <inline struct critnib_leaf *to_leaf (struct critnib_node *n) at libpmemobj/critnib.c:159>:
                                        util_mutex_destroy()
                                        Free() <Free_func Free at core/alloc.c:91>
                                    Free() <Free_func Free at core/alloc.c:91>
                                arena_thread_assignment_fini() <void arena_thread_assignment_fini (struct arenas_thread_assignment *assignment) at libpmemobj/heap.c:318>:
                                    os_tls_key_delete() <int os_tls_key_delete (os_tls_key_t key) at core/os_thread_posix.c:44>:
                                        pthread_key_delete()
                                    ASSERT()
                                bucket_locked_delete() <void bucket_locked_delete (struct bucket_locked *b) at libpmemobj/bucket.c:106>:
                                    bucket_fini() <void bucket_fini (struct bucket *b) at libpmemobj/bucket.c:70>:
                                        Free() <Free_func Free at core/alloc.c:91>
                                    util_mutex_destroy()
                                    Free() <Free_func Free at core/alloc.c:91>
                                VEC_FOREACH()
                                heap_arena_delete() <void heap_arena_delete (struct arena *arena) at libpmemobj/heap.c:169>:
                                    bucket_locked_delete() <void bucket_locked_delete (struct bucket_locked *b) at libpmemobj/bucket.c:106>:
                                        bucket_fini() <void bucket_fini (struct bucket *b) at libpmemobj/bucket.c:70>:
                                            Free() <Free_func Free at core/alloc.c:91>
                                        util_mutex_destroy()
                                        Free() <Free_func Free at core/alloc.c:91>
                                    Free() <Free_func Free at core/alloc.c:91>
                                util_mutex_destroy()
                                heap_arenas_fini() <void heap_arenas_fini (struct arenas *arenas) at libpmemobj/heap.c:150>:
                                    util_mutex_destroy()
                                    VEC_DELETE()
                                VALGRIND_DO_DESTROY_MEMPOOL()
                                Free() <Free_func Free at core/alloc.c:91>
                    operation_resume() <void operation_resume (struct operation_context *ctx) at libpmemobj/memops.c:744>:
                        operation_start() <void operation_start (struct operation_context *ctx) at libpmemobj/memops.c:736>:
                            operation_init() <void operation_init (struct operation_context *ctx) at libpmemobj/memops.c:709>:
                                VALGRIND_ANNOTATE_NEW_MEMORY()
                                VECQ_REINIT()
                            ASSERTeq()
                        ulog_base_nbytes() <size_t ulog_base_nbytes (struct ulog *ulog) at libpmemobj/ulog.c:808>:
                            ulog_entry_valid() <int ulog_entry_valid (struct ulog *ulog, const struct ulog_entry_base *entry) at libpmemobj/ulog.c:103>:
                                ulog_entry_type() <ulog_operation_type ulog_entry_type (const struct ulog_entry_base *entry) at libpmemobj/ulog.c:59>:
                                    ULOG_OPERATION_FROM_OFFSET()
                                ulog_entry_size() <size_t ulog_entry_size (const struct ulog_entry_base *entry) at libpmemobj/ulog.c:77>:
                                    ulog_entry_type() <ulog_operation_type ulog_entry_type (const struct ulog_entry_base *entry) at libpmemobj/ulog.c:59>:
                                        ULOG_OPERATION_FROM_OFFSET()
                                    CACHELINE_ALIGN()
                                    ASSERT()
                                util_checksum_compute() <uint64_t util_checksum_compute (void *addr, size_t len, uint64_t *csump, size_t skip_off) at core/util.c:134>:
                                    abort()
                                    le32toh()
                                util_checksum_seq() <uint64_t util_checksum_seq (const void *addr, size_t len, uint64_t csum) at core/util.c:197>:
                                    abort()
                                    le32toh()
                            ulog_entry_size() <size_t ulog_entry_size (const struct ulog_entry_base *entry) at libpmemobj/ulog.c:77>:
                                ulog_entry_type() <ulog_operation_type ulog_entry_type (const struct ulog_entry_base *entry) at libpmemobj/ulog.c:59>:
                                    ULOG_OPERATION_FROM_OFFSET()
                                CACHELINE_ALIGN()
                                ASSERT()
                        ulog_next() <struct ulog *ulog_next (struct ulog *ulog, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:50>:
                            ulog_by_offset() <struct ulog *ulog_by_offset (size_t offset, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:36>:
                                CACHELINE_ALIGN()
                    operation_process() <void operation_process (struct operation_context *ctx) at libpmemobj/memops.c:776>:
                        ulog_entry_type() <ulog_operation_type ulog_entry_type (const struct ulog_entry_base *entry) at libpmemobj/ulog.c:59>:
                            ULOG_OPERATION_FROM_OFFSET()
                        ulog_entry_apply() <void ulog_entry_apply (const struct ulog_entry_base *e, int persist, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:526>:
                            ulog_entry_type() <ulog_operation_type ulog_entry_type (const struct ulog_entry_base *entry) at libpmemobj/ulog.c:59>:
                                ULOG_OPERATION_FROM_OFFSET()
                            ulog_entry_offset() <uint64_t ulog_entry_offset (const struct ulog_entry_base *entry) at libpmemobj/ulog.c:68>:
                            f()
                            VALGRIND_ADD_TO_TX()
                            pmemops_memset()
                            pmemops_memcpy()
                            ASSERT()
                            VALGRIND_REMOVE_FROM_TX()
                        operation_process_persistent_redo() <void operation_process_persistent_redo (struct operation_context *ctx) at libpmemobj/memops.c:654>:
                            ASSERTeq()
                            ulog_store() <void ulog_store (struct ulog *dest, struct ulog *src, size_t nbytes, size_t ulog_base_nbytes, size_t ulog_total_capacity, struct ulog_next *next, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:288>:
                                MIN()
                                CACHELINE_ALIGN()
                                ASSERT()
                                ulog_by_offset() <struct ulog *ulog_by_offset (size_t offset, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:36>:
                                    CACHELINE_ALIGN()
                                VEC_ARR()
                                ASSERTne()
                                IS_CACHELINE_ALIGNED()
                                VALGRIND_ADD_TO_TX()
                                pmemops_memcpy()
                                VALGRIND_REMOVE_FROM_TX()
                                pmemops_drain()
                                VEC_SIZE()
                                VEC_FRONT()
                                ulog_checksum() <int ulog_checksum (struct ulog *ulog, size_t ulog_base_bytes, int insert) at libpmemobj/ulog.c:275>:
                                    util_checksum() <int util_checksum (void *addr, size_t len, uint64_t *csump, int insert, size_t skip_off) at core/util.c:178>:
                                        util_checksum_compute() <uint64_t util_checksum_compute (void *addr, size_t len, uint64_t *csump, size_t skip_off) at core/util.c:134>:
                                            abort()
                                            le32toh()
                                        htole64()
                                    SIZEOF_ULOG()
                                SIZEOF_ULOG()
                            ulog_process() <void ulog_process (struct ulog *ulog, ulog_check_offset_fn check, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:786>:
                                SUPPRESS_UNUSED()
                                LOG()
                                ulog_check() <int ulog_check (struct ulog *ulog, ulog_check_offset_fn check, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:881>:
                                    LOG()
                                    ulog_foreach_entry() <int ulog_foreach_entry (struct ulog *ulog, ulog_entry_cb cb, void *arg, const struct pmem_ops *ops) at libpmemobj/ulog.c:180>
                                    ulog_check_entry() <int ulog_check_entry (struct ulog_entry_base *e, void *arg, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:862>:
                                        ulog_entry_offset() <uint64_t ulog_entry_offset (const struct ulog_entry_base *entry) at libpmemobj/ulog.c:68>:
                                        check()
                                        LOG()
                                ulog_foreach_entry() <int ulog_foreach_entry (struct ulog *ulog, ulog_entry_cb cb, void *arg, const struct pmem_ops *ops) at libpmemobj/ulog.c:180>
                                ulog_process_entry() <int ulog_process_entry (struct ulog_entry_base *e, void *arg, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:591>:
                                    SUPPRESS_UNUSED()
                                    ulog_entry_apply() <void ulog_entry_apply (const struct ulog_entry_base *e, int persist, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:526>:
                                        ulog_entry_type() <ulog_operation_type ulog_entry_type (const struct ulog_entry_base *entry) at libpmemobj/ulog.c:59>:
                                            ULOG_OPERATION_FROM_OFFSET()
                                        ulog_entry_offset() <uint64_t ulog_entry_offset (const struct ulog_entry_base *entry) at libpmemobj/ulog.c:68>:
                                        f()
                                        VALGRIND_ADD_TO_TX()
                                        pmemops_memset()
                                        pmemops_memcpy()
                                        ASSERT()
                                        VALGRIND_REMOVE_FROM_TX()
                                pmemops_drain()
                            ulog_clobber() <void ulog_clobber (struct ulog *dest, struct ulog_next *next, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:694>:
                                memset()
                                VEC_SIZE()
                                VEC_FRONT()
                                pmemops_memcpy()
                        operation_process_persistent_undo() <void operation_process_persistent_undo (struct operation_context *ctx) at libpmemobj/memops.c:673>:
                            ASSERTeq()
                            ulog_process() <void ulog_process (struct ulog *ulog, ulog_check_offset_fn check, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:786>:
                                SUPPRESS_UNUSED()
                                LOG()
                                ulog_check() <int ulog_check (struct ulog *ulog, ulog_check_offset_fn check, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:881>:
                                    LOG()
                                    ulog_foreach_entry() <int ulog_foreach_entry (struct ulog *ulog, ulog_entry_cb cb, void *arg, const struct pmem_ops *ops) at libpmemobj/ulog.c:180>
                                    ulog_check_entry() <int ulog_check_entry (struct ulog_entry_base *e, void *arg, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:862>:
                                        ulog_entry_offset() <uint64_t ulog_entry_offset (const struct ulog_entry_base *entry) at libpmemobj/ulog.c:68>:
                                        check()
                                        LOG()
                                ulog_foreach_entry() <int ulog_foreach_entry (struct ulog *ulog, ulog_entry_cb cb, void *arg, const struct pmem_ops *ops) at libpmemobj/ulog.c:180>
                                ulog_process_entry() <int ulog_process_entry (struct ulog_entry_base *e, void *arg, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:591>:
                                    SUPPRESS_UNUSED()
                                    ulog_entry_apply() <void ulog_entry_apply (const struct ulog_entry_base *e, int persist, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:526>:
                                        ulog_entry_type() <ulog_operation_type ulog_entry_type (const struct ulog_entry_base *entry) at libpmemobj/ulog.c:59>:
                                            ULOG_OPERATION_FROM_OFFSET()
                                        ulog_entry_offset() <uint64_t ulog_entry_offset (const struct ulog_entry_base *entry) at libpmemobj/ulog.c:68>:
                                        f()
                                        VALGRIND_ADD_TO_TX()
                                        pmemops_memset()
                                        pmemops_memcpy()
                                        ASSERT()
                                        VALGRIND_REMOVE_FROM_TX()
                                pmemops_drain()
                        ulog_process() <void ulog_process (struct ulog *ulog, ulog_check_offset_fn check, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:786>:
                            SUPPRESS_UNUSED()
                            LOG()
                            ulog_check() <int ulog_check (struct ulog *ulog, ulog_check_offset_fn check, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:881>:
                                LOG()
                                ulog_foreach_entry() <int ulog_foreach_entry (struct ulog *ulog, ulog_entry_cb cb, void *arg, const struct pmem_ops *ops) at libpmemobj/ulog.c:180>
                                ulog_check_entry() <int ulog_check_entry (struct ulog_entry_base *e, void *arg, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:862>:
                                    ulog_entry_offset() <uint64_t ulog_entry_offset (const struct ulog_entry_base *entry) at libpmemobj/ulog.c:68>:
                                    check()
                                    LOG()
                            ulog_foreach_entry() <int ulog_foreach_entry (struct ulog *ulog, ulog_entry_cb cb, void *arg, const struct pmem_ops *ops) at libpmemobj/ulog.c:180>
                            ulog_process_entry() <int ulog_process_entry (struct ulog_entry_base *e, void *arg, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:591>:
                                SUPPRESS_UNUSED()
                                ulog_entry_apply() <void ulog_entry_apply (const struct ulog_entry_base *e, int persist, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:526>:
                                    ulog_entry_type() <ulog_operation_type ulog_entry_type (const struct ulog_entry_base *entry) at libpmemobj/ulog.c:59>:
                                        ULOG_OPERATION_FROM_OFFSET()
                                    ulog_entry_offset() <uint64_t ulog_entry_offset (const struct ulog_entry_base *entry) at libpmemobj/ulog.c:68>:
                                    f()
                                    VALGRIND_ADD_TO_TX()
                                    pmemops_memset()
                                    pmemops_memcpy()
                                    ASSERT()
                                    VALGRIND_REMOVE_FROM_TX()
                            pmemops_drain()
                    operation_finish() <void operation_finish (struct operation_context *ctx, unsigned flags) at libpmemobj/memops.c:814>:
                        ASSERTne()
                        out() <void out (const char *fmt, ...) at core/out.c:480>:
                            va_start()
                            out_common() <} void out_common (const char *file, int line, const char *func, int level, const char *suffix, const char *fmt, va_list ap) at core/out.c:334>
                            va_end()
                        ulog_clobber_data() <int ulog_clobber_data (struct ulog *ulog_first, struct ulog_next *next, ulog_free_fn ulog_free, ulog_rm_user_buffer_fn user_buff_remove, const struct pmem_ops *p_ops, unsigned flags) at libpmemobj/ulog.c:713>:
                            ASSERTne()
                            ulog_inc_gen_num() <void ulog_inc_gen_num (struct ulog *ulog, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:605>:
                                VALGRIND_ADD_TO_TX()
                                pmemops_persist()
                                VALGRIND_SET_CLEAN()
                                VALGRIND_REMOVE_FROM_TX()
                            VEC_SIZE()
                            VEC_GET()
                            ulog_by_offset() <struct ulog *ulog_by_offset (size_t offset, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:36>:
                                CACHELINE_ALIGN()
                            ulog_free_next() <int ulog_free_next (struct ulog *u, const struct pmem_ops *p_ops, ulog_free_fn ulog_free, ulog_rm_user_buffer_fn user_buff_remove, uint64_t flags) at libpmemobj/ulog.c:625>:
                                VEC()
                                VEC_INIT()
                                ulog_by_offset() <struct ulog *ulog_by_offset (size_t offset, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:36>:
                                    CACHELINE_ALIGN()
                                pmemops_persist()
                                VEC_PUSH_BACK()
                                LOG()
                                out() <void out (const char *fmt, ...) at core/out.c:480>:
                                    va_start()
                                    out_common() <} void out_common (const char *file, int line, const char *func, int level, const char *suffix, const char *fmt, va_list ap) at core/out.c:334>
                                    va_end()
                                VEC_FOREACH_REVERSE()
                                VEC_DELETE()
                        operation_user_buffer_remove() <int operation_user_buffer_remove (void *base, void *addr) at libpmemobj/memops.c:242>:
                            util_mutex_lock()
                            ravl_find() <struct ravl_node *ravl_find (struct ravl *ravl, const void *data, enum ravl_predicate flags) at core/ravl.c:524>:
                                LOG()
                                ravl_data() <void *ravl_data (struct ravl_node *node) at core/ravl.c:571>:
                                    memcpy()
                                ravl_predicate_holds() <int ravl_predicate_holds (int result, struct ravl_node **ret, struct ravl_node *n, enum ravl_predicate flags) at core/ravl.c:489>:
                                    ravl_node_successor() <struct ravl_node *ravl_node_successor (struct ravl_node *n) at core/ravl.c:465>:
                                        ravl_node_cessor() <struct ravl_node *ravl_node_cessor (struct ravl_node *n, enum ravl_slot_type t) at core/ravl.c:443>:
                                            ravl_node_type_most() <struct ravl_node *ravl_node_type_most (struct ravl_node *n, enum ravl_slot_type t) at core/ravl.c:430>:
                                            ravl_slot_opposite() <enum ravl_slot_type ravl_slot_opposite (enum ravl_slot_type t) at core/ravl.c:184>:
                                                ASSERTne()
                                    ravl_node_predecessor() <struct ravl_node *ravl_node_predecessor (struct ravl_node *n) at core/ravl.c:476>:
                                        ravl_node_cessor() <struct ravl_node *ravl_node_cessor (struct ravl_node *n, enum ravl_slot_type t) at core/ravl.c:443>:
                                            ravl_node_type_most() <struct ravl_node *ravl_node_type_most (struct ravl_node *n, enum ravl_slot_type t) at core/ravl.c:430>:
                                            ravl_slot_opposite() <enum ravl_slot_type ravl_slot_opposite (enum ravl_slot_type t) at core/ravl.c:184>:
                                                ASSERTne()
                            ASSERTne()
                            ravl_remove() <void ravl_remove (struct ravl *ravl, struct ravl_node *n) at core/ravl.c:545> (R):
                                LOG()
                                ravl_node_successor() <struct ravl_node *ravl_node_successor (struct ravl_node *n) at core/ravl.c:465>:
                                    ravl_node_cessor() <struct ravl_node *ravl_node_cessor (struct ravl_node *n, enum ravl_slot_type t) at core/ravl.c:443>:
                                        ravl_node_type_most() <struct ravl_node *ravl_node_type_most (struct ravl_node *n, enum ravl_slot_type t) at core/ravl.c:430>:
                                        ravl_slot_opposite() <enum ravl_slot_type ravl_slot_opposite (enum ravl_slot_type t) at core/ravl.c:184>:
                                            ASSERTne()
                                memcpy()
                                ravl_remove() <void ravl_remove (struct ravl *ravl, struct ravl_node *n) at core/ravl.c:545> (recursive: see 12089)
                                ravl_node_ref() <struct ravl_node **ravl_node_ref (struct ravl *ravl, struct ravl_node *n) at core/ravl.c:223>:
                                    ravl_node_slot_type() <enum ravl_slot_type ravl_node_slot_type (struct ravl_node *n) at core/ravl.c:196>:
                                Free() <Free_func Free at core/alloc.c:91>
                            util_mutex_unlock()
                        ulog_free_next() <int ulog_free_next (struct ulog *u, const struct pmem_ops *p_ops, ulog_free_fn ulog_free, ulog_rm_user_buffer_fn user_buff_remove, uint64_t flags) at libpmemobj/ulog.c:625>:
                            VEC()
                            VEC_INIT()
                            ulog_by_offset() <struct ulog *ulog_by_offset (size_t offset, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:36>:
                                CACHELINE_ALIGN()
                            pmemops_persist()
                            VEC_PUSH_BACK()
                            LOG()
                            out() <void out (const char *fmt, ...) at core/out.c:480>:
                                va_start()
                                out_common() <} void out_common (const char *file, int line, const char *func, int level, const char *suffix, const char *fmt, va_list ap) at core/out.c:334>
                                va_end()
                            VEC_FOREACH_REVERSE()
                            VEC_DELETE()
                        ulog_capacity() <size_t ulog_capacity (struct ulog *ulog, size_t ulog_base_bytes, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:206>:
                            ulog_next() <struct ulog *ulog_next (struct ulog *ulog, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:50>:
                                ulog_by_offset() <struct ulog *ulog_by_offset (size_t offset, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:36>:
                                    CACHELINE_ALIGN()
                        VEC_CLEAR()
                        ulog_rebuild_next_vec() <void ulog_rebuild_next_vec (struct ulog *ulog, struct ulog_next *next, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:223>:
                            VEC_PUSH_BACK()
                            ulog_next() <struct ulog *ulog_next (struct ulog *ulog, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:50>:
                                ulog_by_offset() <struct ulog *ulog_by_offset (size_t offset, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:36>:
                                    CACHELINE_ALIGN()
                pmemops_persist()
            palloc_heap_end() <void *palloc_heap_end (struct palloc_heap *h) at libpmemobj/palloc.c:1281>:
                heap_end() <void *heap_end (struct palloc_heap *h) at libpmemobj/heap.c:1241>:
                    ASSERT()
                    ZID_TO_ZONE()
            VALGRIND_DO_MAKE_MEM_NOACCESS()
            obj_pool_init() <void obj_pool_init (void) at libpmemobj/obj.c:140>:
                LOG()
                critnib_new() <struct critnib *critnib_new (void) at libpmemobj/critnib.c:187>:
                    Zalloc() <void *Zalloc (size_t sz) at core/alloc.c:98>:
                        Malloc()
                        memset()
                    util_mutex_init()
                    VALGRIND_HG_DRD_DISABLE_CHECKING()
                FATAL()
                util_bool_compare_and_swap64()
                critnib_delete() <void critnib_delete (struct critnib *c) at libpmemobj/critnib.c:224>:
                    delete_node() <void delete_node (struct critnib_node *__restrict n) at libpmemobj/critnib.c:206>:
                        is_leaf() <inline bool is_leaf (struct critnib_node *n) at libpmemobj/critnib.c:150>:
                        Free() <Free_func Free at core/alloc.c:91>
                        to_leaf() <inline struct critnib_leaf *to_leaf (struct critnib_node *n) at libpmemobj/critnib.c:159>:
                    util_mutex_destroy()
                    Free() <Free_func Free at core/alloc.c:91>
            critnib_insert() <int critnib_insert (struct critnib *c, uint64_t key, void *value) at libpmemobj/critnib.c:340>:
                util_mutex_lock()
                alloc_leaf() <struct critnib_leaf *alloc_leaf (struct critnib *__restrict c) at libpmemobj/critnib.c:311>:
                    Malloc()
                    ERR()
                    VALGRIND_ANNOTATE_NEW_MEMORY()
                util_mutex_unlock()
                VALGRIND_HG_DRD_DISABLE_CHECKING()
                is_leaf() <inline bool is_leaf (struct critnib_node *n) at libpmemobj/critnib.c:150>:
                path_mask() <inline uint64_t path_mask (sh_t shift) at libpmemobj/critnib.c:169>:
                slice_index() <inline unsigned slice_index (uint64_t key, sh_t shift) at libpmemobj/critnib.c:178>:
                store() <void store (void *dst, void *src) at libpmemobj/critnib.c:140>:
                    util_atomic_store_explicit64()
                to_leaf() <inline struct critnib_leaf *to_leaf (struct critnib_node *n) at libpmemobj/critnib.c:159>:
                ASSERT()
                free_leaf() <void free_leaf (struct critnib *__restrict c, struct critnib_leaf *__restrict k) at libpmemobj/critnib.c:298>
                util_mssb_index64()
                alloc_node() <struct critnib_node *alloc_node (struct critnib *__restrict c) at libpmemobj/critnib.c:274>:
                    Malloc()
                    ERR()
                    VALGRIND_ANNOTATE_NEW_MEMORY()
            ERR()
            obj_ctl_init_and_load() <int obj_ctl_init_and_load (PMEMobjpool *pop) at libpmemobj/obj.c:85>:
                LOG()
                ctl_new() <struct ctl *ctl_new (void) at common/ctl.c:474>:
                    Zalloc() <void *Zalloc (size_t sz) at core/alloc.c:98>:
                        Malloc()
                        memset()
                    ERR()
                tx_ctl_register() <void tx_ctl_register (PMEMobjpool *pop) at libpmemobj/tx.c:2421>:
                    CTL_REGISTER_MODULE()
                pmalloc_ctl_register() <void pmalloc_ctl_register (PMEMobjpool *pop) at libpmemobj/pmalloc.c:848>:
                    CTL_REGISTER_MODULE()
                stats_ctl_register() <void stats_ctl_register (PMEMobjpool *pop) at libpmemobj/stats.c:154>:
                    CTL_REGISTER_MODULE()
                debug_ctl_register()
                os_getenv() <char *os_getenv (const char *name) at core/os_posix.c:279>:
                    secure_getenv()
                ctl_load_config_from_string() <int ctl_load_config_from_string (struct ctl *ctl, void *ctx, const char *cfg_string) at common/ctl.c:393>:
                    LOG()
                    Strdup() <Strdup_func Strdup at core/alloc.c:92>
                    ERR()
                    ctl_load_config() <int ctl_load_config (struct ctl *ctl, void *ctx, char *buf) at common/ctl.c:360>:
                        ASSERTne()
                        strtok_r()
                        ctl_parse_query() <int ctl_parse_query (char *qbuf, char **name, char **value) at common/ctl.c:334>:
                            strtok_r()
                        ERR()
                        ctl_query() <int ctl_query (struct ctl *ctl, void *ctx, enum ctl_query_source source, const char *name, enum ctl_query_type type, void *arg) at common/ctl.c:270>:
                            LOG()
                            ERR()
                            PMDK_SLIST_INIT()
                            ctl_find_node() <const struct ctl_node *ctl_find_node (const struct ctl_node *nodes, const char *name, struct ctl_indexes *indexes) at common/ctl.c:47>:
                                LOG()
                                Strdup() <Strdup_func Strdup at core/alloc.c:92>
                                strtok_r()
                                strtol()
                                Malloc()
                                PMDK_SLIST_INSERT_HEAD()
                                strcmp()
                                Free() <Free_func Free at core/alloc.c:91>
                            CTL_NODE():
                                CTL_LEAF_RW()
                                CTL_LEAF_WO()
                                CTL_INDEXED()
                                CTL_LEAF_RUNNABLE()
                                CTL_LEAF_RO()
                                CTL_CHILD()
                                STATS_CTL_LEAF()
                            ctl_delete_indexes() <void ctl_delete_indexes (struct ctl_indexes *indexes) at common/ctl.c:111>:
                                PMDK_SLIST_EMPTY()
                                PMDK_SLIST_FIRST()
                                PMDK_SLIST_REMOVE_HEAD()
                                Free() <Free_func Free at core/alloc.c:91>
                            out() <void out (const char *fmt, ...) at core/out.c:480>:
                                va_start()
                                out_common() <} void out_common (const char *file, int line, const char *func, int level, const char *suffix, const char *fmt, va_list ap) at core/out.c:334>
                                va_end()
                    Free() <Free_func Free at core/alloc.c:91>
                ctl_load_config_from_file() <int ctl_load_config_from_file (struct ctl *ctl, void *ctx, const char *cfg_file) at common/ctl.c:416>:
                    LOG()
                    os_fopen() <FILE *os_fopen (const char *pathname, const char *mode) at core/os_posix.c:106>:
                        fopen()
                    fseek()
                    ftell()
                    ERR()
                    Zalloc() <void *Zalloc (size_t sz) at core/alloc.c:98>:
                        Malloc()
                        memset()
                    fgetc()
                    isspace()
                    ctl_load_config() <int ctl_load_config (struct ctl *ctl, void *ctx, char *buf) at common/ctl.c:360>:
                        ASSERTne()
                        strtok_r()
                        ctl_parse_query() <int ctl_parse_query (char *qbuf, char **name, char **value) at common/ctl.c:334>:
                            strtok_r()
                        ERR()
                        ctl_query() <int ctl_query (struct ctl *ctl, void *ctx, enum ctl_query_source source, const char *name, enum ctl_query_type type, void *arg) at common/ctl.c:270>:
                            LOG()
                            ERR()
                            PMDK_SLIST_INIT()
                            ctl_find_node() <const struct ctl_node *ctl_find_node (const struct ctl_node *nodes, const char *name, struct ctl_indexes *indexes) at common/ctl.c:47>:
                                LOG()
                                Strdup() <Strdup_func Strdup at core/alloc.c:92>
                                strtok_r()
                                strtol()
                                Malloc()
                                PMDK_SLIST_INSERT_HEAD()
                                strcmp()
                                Free() <Free_func Free at core/alloc.c:91>
                            CTL_NODE():
                                CTL_LEAF_RW()
                                CTL_LEAF_WO()
                                CTL_INDEXED()
                                CTL_LEAF_RUNNABLE()
                                CTL_LEAF_RO()
                                CTL_CHILD()
                                STATS_CTL_LEAF()
                            ctl_delete_indexes() <void ctl_delete_indexes (struct ctl_indexes *indexes) at common/ctl.c:111>:
                                PMDK_SLIST_EMPTY()
                                PMDK_SLIST_FIRST()
                                PMDK_SLIST_REMOVE_HEAD()
                                Free() <Free_func Free at core/alloc.c:91>
                            out() <void out (const char *fmt, ...) at core/out.c:480>:
                                va_start()
                                out_common() <} void out_common (const char *file, int line, const char *func, int level, const char *suffix, const char *fmt, va_list ap) at core/out.c:334>
                                va_end()
                    Free() <Free_func Free at core/alloc.c:91>
                    fclose()
                ctl_delete() <void ctl_delete (struct ctl *c) at common/ctl.c:490>:
                    Free() <Free_func Free at core/alloc.c:91>
            util_mutex_init()
            ravl_new_sized() <struct ravl *ravl_new_sized (ravl_compare *compare, size_t data_size) at core/ravl.c:45>:
                Malloc()
                ERR()
            operation_user_buffer_range_cmp() <int operation_user_buffer_range_cmp (const void *lhs, const void *rhs) at libpmemobj/memops.c:496>:
            RANGE_NONE()
            util_mutex_destroy()
            ctl_delete() <void ctl_delete (struct ctl *c) at common/ctl.c:490>:
                Free() <Free_func Free at core/alloc.c:91>
            critnib_remove() <void *critnib_remove (struct critnib *c, uint64_t key) at libpmemobj/critnib.c:429>:
                util_mutex_lock()
                util_fetch_and_add64()
                free_node() <void free_node (struct critnib *__restrict c, struct critnib_node *__restrict n) at libpmemobj/critnib.c:260>:
                    ASSERT()
                    is_leaf() <inline bool is_leaf (struct critnib_node *n) at libpmemobj/critnib.c:150>:
                free_leaf() <void free_leaf (struct critnib *__restrict c, struct critnib_leaf *__restrict k) at libpmemobj/critnib.c:298>
                is_leaf() <inline bool is_leaf (struct critnib_node *n) at libpmemobj/critnib.c:150>:
                to_leaf() <inline struct critnib_leaf *to_leaf (struct critnib_node *n) at libpmemobj/critnib.c:159>:
                store() <void store (void *dst, void *src) at libpmemobj/critnib.c:140>:
                    util_atomic_store_explicit64()
                slice_index() <inline unsigned slice_index (uint64_t key, sh_t shift) at libpmemobj/critnib.c:178>:
                ASSERTne()
                util_mutex_unlock()
            ASSERTne()
            obj_runtime_cleanup_common() <void obj_runtime_cleanup_common (PMEMobjpool *pop) at libpmemobj/obj.c:685>:
                lane_section_cleanup() <int lane_section_cleanup (PMEMobjpool *pop) at libpmemobj/lane.c:398>:
                    pmalloc_cleanup() <int pmalloc_cleanup (PMEMobjpool *pop) at libpmemobj/pmalloc.c:205>:
                        palloc_heap_cleanup() <void palloc_heap_cleanup (struct palloc_heap *heap) at libpmemobj/palloc.c:1299>:
                            heap_cleanup() <void heap_cleanup (struct palloc_heap *heap) at libpmemobj/heap.c:1741>:
                                alloc_class_collection_delete() <void alloc_class_collection_delete (struct alloc_class_collection *ac) at libpmemobj/alloc_class.c:516>:
                                    LOG()
                                    alloc_class_delete() <void alloc_class_delete (struct alloc_class_collection *ac, struct alloc_class *c) at libpmemobj/alloc_class.c:254>:
                                        LOG()
                                        Free() <Free_func Free at core/alloc.c:91>
                                    critnib_delete() <void critnib_delete (struct critnib *c) at libpmemobj/critnib.c:224>:
                                        delete_node() <void delete_node (struct critnib_node *__restrict n) at libpmemobj/critnib.c:206>:
                                            is_leaf() <inline bool is_leaf (struct critnib_node *n) at libpmemobj/critnib.c:150>:
                                            Free() <Free_func Free at core/alloc.c:91>
                                            to_leaf() <inline struct critnib_leaf *to_leaf (struct critnib_node *n) at libpmemobj/critnib.c:159>:
                                        util_mutex_destroy()
                                        Free() <Free_func Free at core/alloc.c:91>
                                    Free() <Free_func Free at core/alloc.c:91>
                                arena_thread_assignment_fini() <void arena_thread_assignment_fini (struct arenas_thread_assignment *assignment) at libpmemobj/heap.c:318>:
                                    os_tls_key_delete() <int os_tls_key_delete (os_tls_key_t key) at core/os_thread_posix.c:44>:
                                        pthread_key_delete()
                                    ASSERT()
                                bucket_locked_delete() <void bucket_locked_delete (struct bucket_locked *b) at libpmemobj/bucket.c:106>:
                                    bucket_fini() <void bucket_fini (struct bucket *b) at libpmemobj/bucket.c:70>:
                                        Free() <Free_func Free at core/alloc.c:91>
                                    util_mutex_destroy()
                                    Free() <Free_func Free at core/alloc.c:91>
                                VEC_FOREACH()
                                heap_arena_delete() <void heap_arena_delete (struct arena *arena) at libpmemobj/heap.c:169>:
                                    bucket_locked_delete() <void bucket_locked_delete (struct bucket_locked *b) at libpmemobj/bucket.c:106>:
                                        bucket_fini() <void bucket_fini (struct bucket *b) at libpmemobj/bucket.c:70>:
                                            Free() <Free_func Free at core/alloc.c:91>
                                        util_mutex_destroy()
                                        Free() <Free_func Free at core/alloc.c:91>
                                    Free() <Free_func Free at core/alloc.c:91>
                                util_mutex_destroy()
                                heap_arenas_fini() <void heap_arenas_fini (struct arenas *arenas) at libpmemobj/heap.c:150>:
                                    util_mutex_destroy()
                                    VEC_DELETE()
                                VALGRIND_DO_DESTROY_MEMPOOL()
                                Free() <Free_func Free at core/alloc.c:91>
                lane_cleanup() <void lane_cleanup (PMEMobjpool *pop) at libpmemobj/lane.c:335>:
                    lane_destroy() <void lane_destroy (PMEMobjpool *pop, struct lane *lane) at libpmemobj/lane.c:246>:
                        SUPPRESS_UNUSED()
                        operation_delete() <void operation_delete (struct operation_context *ctx) at libpmemobj/memops.c:229>:
                            VECQ_DELETE()
                            VEC_DELETE()
                            Free() <Free_func Free at core/alloc.c:91>
                    Free() <Free_func Free at core/alloc.c:91>
                    lane_info_cleanup() <inline void lane_info_cleanup (PMEMobjpool *pop) at libpmemobj/lane.c:123>:
                        unlikely()
                        critnib_remove() <void *critnib_remove (struct critnib *c, uint64_t key) at libpmemobj/critnib.c:429>:
                            util_mutex_lock()
                            util_fetch_and_add64()
                            free_node() <void free_node (struct critnib *__restrict c, struct critnib_node *__restrict n) at libpmemobj/critnib.c:260>:
                                ASSERT()
                                is_leaf() <inline bool is_leaf (struct critnib_node *n) at libpmemobj/critnib.c:150>:
                            free_leaf() <void free_leaf (struct critnib *__restrict c, struct critnib_leaf *__restrict k) at libpmemobj/critnib.c:298>
                            is_leaf() <inline bool is_leaf (struct critnib_node *n) at libpmemobj/critnib.c:150>:
                            to_leaf() <inline struct critnib_leaf *to_leaf (struct critnib_node *n) at libpmemobj/critnib.c:159>:
                            store() <void store (void *dst, void *src) at libpmemobj/critnib.c:140>:
                                util_atomic_store_explicit64()
                            slice_index() <inline unsigned slice_index (uint64_t key, sh_t shift) at libpmemobj/critnib.c:178>:
                            ASSERTne()
                            util_mutex_unlock()
                        likely()
                        Free() <Free_func Free at core/alloc.c:91>
            stats_delete() <void stats_delete (PMEMobjpool *pop, struct stats *s) at libpmemobj/stats.c:142>:
                pmemops_persist()
                Free() <Free_func Free at core/alloc.c:91>
            tx_params_delete() <void tx_params_delete (struct tx_parameters *tx_params) at libpmemobj/tx.c:124>:
                Free() <Free_func Free at core/alloc.c:91>
        util_poolset_chmod() <int util_poolset_chmod (struct pool_set *set, mode_t mode) at common/set.c:404>:
            LOG()
            os_fstat()
            ERR()
            os_chmod() <int os_chmod (const char *pathname, mode_t mode) at core/os_posix.c:124>:
                chmod()
        util_poolset_fdclose() <void util_poolset_fdclose (struct pool_set *set) at common/set.c:457>:
            util_poolset_fdclose_always() <void util_poolset_fdclose_always (struct pool_set *set) at common/set.c:445>:
                LOG()
                util_replica_fdclose() <void util_replica_fdclose (struct pool_replica *rep) at common/set.c:3232>:
                    util_part_fdclose() <void util_part_fdclose (struct pool_set_part *part) at common/set.c:1517>:
                        LOG()
                        os_close()
        util_poolset_close() <void util_poolset_close (struct pool_set *set, enum del_parts_mode del) at common/set.c:383>:
            LOG()
            util_replica_close() <int util_replica_close (struct pool_set *set, unsigned repidx) at common/set.c:2136>:
                LOG()
                PART()
                RANGE_RW()
                util_replica_deep_drain() <int util_replica_deep_drain (const void *addr, size_t len, struct pool_set *set, unsigned replica_id) at common/set.c:3314>:
                    LOG()
                    util_replica_deep_common() <int util_replica_deep_common (const void *addr, size_t len, struct pool_set *set, unsigned replica_id, int flush) at common/set.c:3247>:
                        LOG()
                        ASSERT()
                        os_part_deep_common() <int os_part_deep_common (struct pool_replica *rep, unsigned partidx, void *addr, size_t len, int flush) at common/os_deep_linux.c:108>:
                            LOG()
                            pmem_msync()
                            pmem_deep_flush()
                            pmem_drain()
                            util_ddax_region_find() <int util_ddax_region_find (const char *path, unsigned *region_id) at common/file_posix.c:150>:
                                LOG()
                                os_stat() <int os_stat (const char *pathname, os_stat_t *buf) at core/os_posix.c:79>:
                                    stat()
                                ERR()
                                pmem2_get_type_from_stat() <int pmem2_get_type_from_stat (const os_stat_t *st, enum pmem2_file_type *type) at libpmem2/pmem2_utils_linux.c:23>:
                                    S_ISREG()
                                    S_ISDIR()
                                    S_ISCHR()
                                    ERR()
                                    util_snprintf() <int util_snprintf (char *str, size_t size, const char *format, ...) at core/util.c:434>:
                                        va_start()
                                        vsnprintf()
                                        va_end()
                                    os_major()
                                    os_minor()
                                    ASSERTinfo()
                                    LOG()
                                    realpath()
                                    strrchr()
                                    strcmp()
                                pmem2_err_to_errno() <int pmem2_err_to_errno (int err) at libpmem2/pmem2_utils.c:67>:
                                    FATAL()
                                pmem2_get_region_id() <int pmem2_get_region_id (const struct pmem2_source *src, unsigned *region_id) at libpmem2/region_namespace_ndctl.c:227>:
                                    LOG()
                                    ndctl_new()
                                    ERR()
                                    pmem2_region_namespace() <int pmem2_region_namespace (struct ndctl_ctx *ctx, const struct pmem2_source *src, struct ndctl_region **pregion, struct ndctl_namespace **pndns) at libpmem2/region_namespace_ndctl.c:131>:
                                        LOG()
                                        ERR()
                                        FOREACH_BUS_REGION_NAMESPACE()
                                        ndctl_namespace_get_dax()
                                        ASSERTeq()
                                        ndctl_dax_get_daxctl_region()
                                        daxctl_dev_foreach()
                                        daxctl_dev_get_devname()
                                        ndctl_match_devdax() <int ndctl_match_devdax (dev_t st_rdev, const char *devname) at libpmem2/region_namespace_ndctl.c:26>:
                                            LOG()
                                            stat()
                                            util_snprintf() <int util_snprintf (char *str, size_t size, const char *format, ...) at core/util.c:434>:
                                                va_start()
                                                vsnprintf()
                                                va_end()
                                            ERR()
                                            os_stat() <int os_stat (const char *pathname, os_stat_t *buf) at core/os_posix.c:79>:
                                                stat()
                                        ndctl_namespace_get_btt()
                                        ndctl_btt_get_block_device()
                                        ndctl_namespace_get_pfn()
                                        ndctl_pfn_get_block_device()
                                        ndctl_namespace_get_block_device()
                                        ndctl_match_fsdax() <int ndctl_match_fsdax (dev_t st_dev, const char *devname) at libpmem2/region_namespace_ndctl.c:64>:
                                            LOG()
                                            util_snprintf() <int util_snprintf (char *str, size_t size, const char *format, ...) at core/util.c:434>:
                                                va_start()
                                                vsnprintf()
                                                va_end()
                                            ERR()
                                            major()
                                            minor()
                                            os_open() <int os_open (const char *pathname, int flags, ...) at core/os_posix.c:29>:
                                                va_start()
                                                va_arg()
                                                va_end()
                                                open()
                                            read()
                                            os_close()
                                            strcmp()
                                    ndctl_region_get_id()
                                    ndctl_unref()
                            pmem2_deep_flush_write() <int pmem2_deep_flush_write (unsigned region_id) at libpmem2/deep_flush_linux.c:27>:
                                LOG()
                                util_snprintf() <int util_snprintf (char *str, size_t size, const char *format, ...) at core/util.c:434>:
                                    va_start()
                                    vsnprintf()
                                    va_end()
                                ERR()
                                os_open() <int os_open (const char *pathname, int flags, ...) at core/os_posix.c:29>:
                                    va_start()
                                    va_arg()
                                    va_end()
                                    open()
                                read()
                                os_close()
                            MIN()
                shutdown_state_clear_dirty() <void shutdown_state_clear_dirty (struct shutdown_state *sds, struct pool_replica *rep) at common/shutdown_state.c:143>:
                    LOG()
                    FLUSH_SDS()
                    shutdown_state_checksum() <void shutdown_state_checksum (struct shutdown_state *sds, struct pool_replica *rep) at common/shutdown_state.c:27>:
                        LOG()
                        util_checksum() <int util_checksum (void *addr, size_t len, uint64_t *csump, int insert, size_t skip_off) at core/util.c:178>:
                            util_checksum_compute() <uint64_t util_checksum_compute (void *addr, size_t len, uint64_t *csump, size_t skip_off) at core/util.c:134>:
                                abort()
                                le32toh()
                            htole64()
                        FLUSH_SDS()
                util_unmap_hdr() <void util_unmap_hdr (struct pool_set_part *part) at common/set.c:211>:
                    LOG()
                    VALGRIND_REMOVE_PMEM_MAPPING()
                    munmap()
                    FATAL()
                util_unmap_part() <int util_unmap_part (struct pool_set_part *part) at common/set.c:274>:
                    LOG()
                    VALGRIND_REMOVE_PMEM_MAPPING()
                    munmap()
                    ERR()
            util_replica_close_local() <int util_replica_close_local (struct pool_replica *rep, unsigned repn, enum del_parts_mode del) at common/set.c:356>:
                os_close()
                LOG()
                util_unlink() <int util_unlink (const char *path) at common/file.c:513>:
                    LOG()
                    util_file_get_type() <enum file_type util_file_get_type (const char *path) at common/file.c:106>:
                        LOG()
                        ERR()
                        util_file_exists() <int util_file_exists (const char *path) at common/file.c:32>:
                            LOG()
                            os_access() <int os_access (const char *pathname, int mode) at core/os_posix.c:97>:
                                access()
                            ERR()
                        os_stat() <int os_stat (const char *pathname, os_stat_t *buf) at core/os_posix.c:79>:
                            stat()
                        util_stat_get_type() <enum file_type util_stat_get_type (const os_stat_t *st) at common/file.c:62>:
                            pmem2_get_type_from_stat() <int pmem2_get_type_from_stat (const os_stat_t *st, enum pmem2_file_type *type) at libpmem2/pmem2_utils_linux.c:23>:
                                S_ISREG()
                                S_ISDIR()
                                S_ISCHR()
                                ERR()
                                util_snprintf() <int util_snprintf (char *str, size_t size, const char *format, ...) at core/util.c:434>:
                                    va_start()
                                    vsnprintf()
                                    va_end()
                                os_major()
                                os_minor()
                                ASSERTinfo()
                                LOG()
                                realpath()
                                strrchr()
                                strcmp()
                            pmem2_err_to_errno() <int pmem2_err_to_errno (int err) at libpmem2/pmem2_utils.c:67>:
                                FATAL()
                            ASSERTinfo()
                    util_file_zero() <int util_file_zero (const char *path, os_off_t off, size_t len) at common/file.c:234>:
                        LOG()
                        os_open() <int os_open (const char *pathname, int flags, ...) at core/os_posix.c:29>:
                            va_start()
                            va_arg()
                            va_end()
                            open()
                        ERR()
                        util_fd_get_size() <ssize_t util_fd_get_size (int fd) at common/file.c:157>:
                            LOG()
                            pmem2_source_from_fd() <int pmem2_source_from_fd (struct pmem2_source **src, int fd) at libpmem2/source_posix.c:19>:
                                PMEM2_ERR_CLR()
                                fcntl()
                                ERR()
                                os_fstat()
                                pmem2_get_type_from_stat() <int pmem2_get_type_from_stat (const os_stat_t *st, enum pmem2_file_type *type) at libpmem2/pmem2_utils_linux.c:23>:
                                    S_ISREG()
                                    S_ISDIR()
                                    S_ISCHR()
                                    ERR()
                                    util_snprintf() <int util_snprintf (char *str, size_t size, const char *format, ...) at core/util.c:434>:
                                        va_start()
                                        vsnprintf()
                                        va_end()
                                    os_major()
                                    os_minor()
                                    ASSERTinfo()
                                    LOG()
                                    realpath()
                                    strrchr()
                                    strcmp()
                                pmem2_malloc() <void *pmem2_malloc (size_t size, int *err) at libpmem2/pmem2_utils.c:19>:
                                    Malloc()
                                    ERR()
                                ASSERTne()
                            pmem2_err_to_errno() <int pmem2_err_to_errno (int err) at libpmem2/pmem2_utils.c:67>:
                                FATAL()
                            pmem2_source_size() <int pmem2_source_size (const struct pmem2_source *src, size_t *size) at libpmem2/source_posix.c:90>:
                                LOG()
                                PMEM2_ERR_CLR()
                                ASSERT()
                                os_fstat()
                                ERR()
                                pmem2_device_dax_size() <int pmem2_device_dax_size (const struct pmem2_source *src, size_t *size) at libpmem2/pmem2_utils_ndctl.c:58>:
                                    ndctl_new()
                                    ERR()
                                    pmem2_region_namespace() <int pmem2_region_namespace (struct ndctl_ctx *ctx, const struct pmem2_source *src, struct ndctl_region **pregion, struct ndctl_namespace **pndns) at libpmem2/region_namespace_ndctl.c:131>:
                                        LOG()
                                        ERR()
                                        FOREACH_BUS_REGION_NAMESPACE()
                                        ndctl_namespace_get_dax()
                                        ASSERTeq()
                                        ndctl_dax_get_daxctl_region()
                                        daxctl_dev_foreach()
                                        daxctl_dev_get_devname()
                                        ndctl_match_devdax() <int ndctl_match_devdax (dev_t st_rdev, const char *devname) at libpmem2/region_namespace_ndctl.c:26>:
                                            LOG()
                                            stat()
                                            util_snprintf() <int util_snprintf (char *str, size_t size, const char *format, ...) at core/util.c:434>:
                                                va_start()
                                                vsnprintf()
                                                va_end()
                                            ERR()
                                            os_stat() <int os_stat (const char *pathname, os_stat_t *buf) at core/os_posix.c:79>:
                                                stat()
                                        ndctl_namespace_get_btt()
                                        ndctl_btt_get_block_device()
                                        ndctl_namespace_get_pfn()
                                        ndctl_pfn_get_block_device()
                                        ndctl_namespace_get_block_device()
                                        ndctl_match_fsdax() <int ndctl_match_fsdax (dev_t st_dev, const char *devname) at libpmem2/region_namespace_ndctl.c:64>:
                                            LOG()
                                            util_snprintf() <int util_snprintf (char *str, size_t size, const char *format, ...) at core/util.c:434>:
                                                va_start()
                                                vsnprintf()
                                                va_end()
                                            ERR()
                                            major()
                                            minor()
                                            os_open() <int os_open (const char *pathname, int flags, ...) at core/os_posix.c:29>:
                                                va_start()
                                                va_arg()
                                                va_end()
                                                open()
                                            read()
                                            os_close()
                                            strcmp()
                                    LOG()
                                    ndctl_namespace_get_dax()
                                    ndctl_dax_get_size()
                                    ndctl_unref()
                                FATAL()
                            pmem2_source_delete() <int pmem2_source_delete (struct pmem2_source **src) at libpmem2/source.c:30>:
                                Free() <Free_func Free at core/alloc.c:91>
                            ERR()
                        out() <void out (const char *fmt, ...) at core/out.c:480>:
                            va_start()
                            out_common() <} void out_common (const char *file, int line, const char *func, int level, const char *suffix, const char *fmt, va_list ap) at core/out.c:334>
                            va_end()
                        util_map() <void *util_map (int fd, os_off_t off, size_t len, int flags, int rdonly, size_t req_align, int *map_sync) at common/mmap.c:85>:
                            LOG()
                            util_map_hint() <char *util_map_hint (size_t len, size_t req_align) at common/mmap_posix.c:118>:
                                LOG()
                                util_map_hint_align()
                                util_map_hint_unused() <char *util_map_hint_unused (void *minaddr, size_t len, size_t align) at common/mmap_posix.c:36>:
                                    LOG()
                                    ASSERT()
                                    os_fopen() <FILE *os_fopen (const char *pathname, const char *mode) at core/os_posix.c:106>:
                                        fopen()
                                    ERR()
                                    roundup()
                                    fgets()
                                    sscanf()
                                    fclose()
                                mmap()
                                ERR()
                                roundup()
                                munmap()
                            ASSERTeq()
                            util_map_sync() <void *util_map_sync (void *addr, size_t len, int proto, int flags, int fd, os_off_t offset, int *map_sync) at common/mmap_posix.c:159>:
                                LOG()
                                mmap()
                            ERR()
                        memset()
                        util_unmap() <int util_unmap (void *addr, size_t len) at common/mmap.c:120>:
                            LOG()
                            munmap()
                            ERR()
                        os_close()
                    os_unlink() <int os_unlink (const char *pathname) at core/os_posix.c:88>:
                        unlink()
                ERR()
            util_poolset_free() <void util_poolset_free (struct pool_set *set) at common/set.c:312>:
                LOG()
                Free() <Free_func Free at core/alloc.c:91>
                VEC_FOREACH_BY_PTR()
                VEC_DELETE()
    PMEMOBJ_API_END()
pmemobj_ctl_get() <int pmemobj_ctl_get (PMEMobjpool *pop, const char *name, void *arg) at libpmemobj/obj.c:2861>:
    pmemobj_ctl_getU() <inline int pmemobj_ctl_getU (PMEMobjpool *pop, const char *name, void *arg) at libpmemobj/obj.c:2826>:
        LOG()
        ctl_query() <int ctl_query (struct ctl *ctl, void *ctx, enum ctl_query_source source, const char *name, enum ctl_query_type type, void *arg) at common/ctl.c:270>:
            LOG()
            ERR()
            PMDK_SLIST_INIT()
            ctl_find_node() <const struct ctl_node *ctl_find_node (const struct ctl_node *nodes, const char *name, struct ctl_indexes *indexes) at common/ctl.c:47>:
                LOG()
                Strdup() <Strdup_func Strdup at core/alloc.c:92>
                strtok_r()
                strtol()
                Malloc()
                PMDK_SLIST_INSERT_HEAD()
                strcmp()
                Free() <Free_func Free at core/alloc.c:91>
            CTL_NODE():
                CTL_LEAF_RW()
                CTL_LEAF_WO()
                CTL_INDEXED()
                CTL_LEAF_RUNNABLE()
                CTL_LEAF_RO()
                CTL_CHILD()
                STATS_CTL_LEAF()
            ctl_delete_indexes() <void ctl_delete_indexes (struct ctl_indexes *indexes) at common/ctl.c:111>:
                PMDK_SLIST_EMPTY()
                PMDK_SLIST_FIRST()
                PMDK_SLIST_REMOVE_HEAD()
                Free() <Free_func Free at core/alloc.c:91>
            out() <void out (const char *fmt, ...) at core/out.c:480>:
                va_start()
                out_common() <} void out_common (const char *file, int line, const char *func, int level, const char *suffix, const char *fmt, va_list ap) at core/out.c:334>
                va_end()
pmemobj_ctl_set() <int pmemobj_ctl_set (PMEMobjpool *pop, const char *name, void *arg) at libpmemobj/obj.c:2870>:
    PMEMOBJ_API_START()
    pmemobj_ctl_setU() <inline int pmemobj_ctl_setU (PMEMobjpool *pop, const char *name, void *arg) at libpmemobj/obj.c:2838>:
        LOG()
        ctl_query() <int ctl_query (struct ctl *ctl, void *ctx, enum ctl_query_source source, const char *name, enum ctl_query_type type, void *arg) at common/ctl.c:270>:
            LOG()
            ERR()
            PMDK_SLIST_INIT()
            ctl_find_node() <const struct ctl_node *ctl_find_node (const struct ctl_node *nodes, const char *name, struct ctl_indexes *indexes) at common/ctl.c:47>:
                LOG()
                Strdup() <Strdup_func Strdup at core/alloc.c:92>
                strtok_r()
                strtol()
                Malloc()
                PMDK_SLIST_INSERT_HEAD()
                strcmp()
                Free() <Free_func Free at core/alloc.c:91>
            CTL_NODE():
                CTL_LEAF_RW()
                CTL_LEAF_WO()
                CTL_INDEXED()
                CTL_LEAF_RUNNABLE()
                CTL_LEAF_RO()
                CTL_CHILD()
                STATS_CTL_LEAF()
            ctl_delete_indexes() <void ctl_delete_indexes (struct ctl_indexes *indexes) at common/ctl.c:111>:
                PMDK_SLIST_EMPTY()
                PMDK_SLIST_FIRST()
                PMDK_SLIST_REMOVE_HEAD()
                Free() <Free_func Free at core/alloc.c:91>
            out() <void out (const char *fmt, ...) at core/out.c:480>:
                va_start()
                out_common() <} void out_common (const char *file, int line, const char *func, int level, const char *suffix, const char *fmt, va_list ap) at core/out.c:334>
                va_end()
    PMEMOBJ_API_END()
pmemobj_defer_free() <void pmemobj_defer_free (PMEMobjpool *pop, PMEMoid oid, struct pobj_action *act) at libpmemobj/obj.c:2598>:
    ASSERT()
    OID_IS_NULL()
    palloc_defer_free() <void palloc_defer_free (struct palloc_heap *heap, uint64_t off, struct pobj_action *act) at libpmemobj/palloc.c:635>:
        COMPILE_ERROR_ON()
        palloc_defer_free_create() <void palloc_defer_free_create (struct palloc_heap *heap, uint64_t off, struct pobj_action_internal *out) at libpmemobj/palloc.c:610>:
            COMPILE_ERROR_ON()
            memblock_from_offset() <struct memory_block memblock_from_offset (struct palloc_heap *heap, uint64_t off) at libpmemobj/memblock.c:1532>:
                memblock_from_offset_opt() <struct memory_block memblock_from_offset_opt (struct palloc_heap *heap, uint64_t off, int size) at libpmemobj/memblock.c:1476>:
                    HEAP_PTR_TO_OFF()
                    heap_get_chunk_hdr()
                    memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                        heap_get_chunk_hdr()
                    ASSERTeq()
                    memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                        heap_get_chunk_hdr()
                        FATAL()
                    run_get_data_offset() <size_t run_get_data_offset (const struct memory_block *m) at libpmemobj/memblock.c:572>:
                        heap_get_chunk_run()
                        run_get_data_start() <char *run_get_data_start (const struct memory_block *m) at libpmemobj/memblock.c:544>:
                            heap_get_chunk_hdr()
                            heap_get_chunk_run()
                            run_get_bitmap() <void run_get_bitmap (const struct memory_block *m, struct run_bitmap *b) at libpmemobj/memblock.c:488>:
                                heap_get_chunk_run()
                                heap_get_chunk_hdr()
                                memblock_run_bitmap() <void memblock_run_bitmap (uint32_t *size_idx, uint16_t flags, uint64_t unit_size, uint64_t alignment, void *content, struct run_bitmap *b) at libpmemobj/memblock.c:410>:
                                    ASSERTne()
                                    RUN_CONTENT_SIZE_BYTES()
                                    util_div_ceil()
                                    ALIGN_UP()
                                    memblock_run_default_nallocs() <unsigned memblock_run_default_nallocs (uint32_t *size_idx, uint16_t flags, uint64_t unit_size, uint64_t alignment) at libpmemobj/memblock.c:370>:
                                        SUPPRESS_UNUSED()
                                        RUN_DEFAULT_SIZE_BYTES()
                                        LOG()
                                ASSERTeq()
                            ALIGN_UP()
                    heap_alloc_classes() <struct alloc_class_collection *heap_alloc_classes (struct palloc_heap *heap) at libpmemobj/heap.c:160>:
                    alloc_class_by_run() <struct alloc_class *alloc_class_by_run (struct alloc_class_collection *ac, size_t unit_size, uint16_t flags, uint32_t size_idx) at libpmemobj/alloc_class.c:594>:
                        SIZE_TO_CLASS_MAP_INDEX()
                        ASSERT()
                        critnib_get() <void *critnib_get (struct critnib *c, uint64_t key) at libpmemobj/critnib.c:515>:
                            load() <void load (void *src, void *dst) at libpmemobj/critnib.c:130>:
                                util_atomic_load_explicit64()
                            is_leaf() <inline bool is_leaf (struct critnib_node *n) at libpmemobj/critnib.c:150>:
                            slice_index() <inline unsigned slice_index (uint64_t key, sh_t shift) at libpmemobj/critnib.c:178>:
                            to_leaf() <inline struct critnib_leaf *to_leaf (struct critnib_node *n) at libpmemobj/critnib.c:159>:
                        RUN_CLASS_KEY_PACK()
                    CALC_SIZE_IDX()
            heap_ensure_zone_reclaimed() <void heap_ensure_zone_reclaimed (struct palloc_heap *heap, uint32_t zone_id) at libpmemobj/heap.c:816>:
                util_atomic_load_explicit32()
                heap_bucket_acquire() <struct bucket *heap_bucket_acquire (struct palloc_heap *heap, uint8_t class_id, uint16_t arena_id) at libpmemobj/heap.c:470>:
                    out() <void out (const char *fmt, ...) at core/out.c:480>:
                        va_start()
                        out_common() <} void out_common (const char *file, int line, const char *func, int level, const char *suffix, const char *fmt, va_list ap) at core/out.c:334>
                        va_end()
                    heap_thread_arena() <struct arena *heap_thread_arena (struct palloc_heap *heap) at libpmemobj/heap.c:414>:
                        os_tls_get() <void *os_tls_get (os_tls_key_t key) at core/os_thread_posix.c:62>:
                            pthread_getspecific()
                        heap_thread_arena_assign() <struct arena *heap_thread_arena_assign (struct palloc_heap *heap) at libpmemobj/heap.c:381>:
                            util_mutex_lock()
                            ASSERTne()
                            VEC_SIZE()
                            VEC_FOREACH()
                            LOG()
                            heap_arena_thread_attach() <void heap_arena_thread_attach (struct palloc_heap *heap, struct arena *a) at libpmemobj/heap.c:249>:
                                ASSERTeq()
                                os_tls_get() <void *os_tls_get (os_tls_key_t key) at core/os_thread_posix.c:62>:
                                    pthread_getspecific()
                                heap_arena_thread_detach() <void heap_arena_thread_detach (struct arena *a) at libpmemobj/heap.c:232>:
                                    util_fetch_and_sub64()
                                ASSERTne()
                                util_fetch_and_add64()
                                os_tls_set() <int os_tls_set (os_tls_key_t key, const void *value) at core/os_thread_posix.c:53>:
                                    pthread_setspecific()
                            util_mutex_unlock()
                        heap_global_arena_assign() <struct arena *heap_global_arena_assign (struct palloc_heap *heap) at libpmemobj/heap.c:348>:
                            util_mutex_lock()
                            ASSERTne()
                            VEC_SIZE()
                            VEC_FOREACH()
                            LOG()
                            util_mutex_unlock()
                        ASSERT()
                        ASSERTne()
                    ASSERTne()
                    VEC_ARR()
                    bucket_acquire() <struct bucket *bucket_acquire (struct bucket_locked *b) at libpmemobj/bucket.c:117>:
                        util_mutex_lock()
                ZID_TO_ZONE()
                ASSERTeq()
                out() <void out (const char *fmt, ...) at core/out.c:480>:
                    va_start()
                    out_common() <} void out_common (const char *file, int line, const char *func, int level, const char *suffix, const char *fmt, va_list ap) at core/out.c:334>
                    va_end()
                util_atomic_store_explicit32()
                heap_reclaim_zone_garbage() <void heap_reclaim_zone_garbage (struct palloc_heap *heap, struct bucket *bucket, uint32_t zone_id) at libpmemobj/heap.c:775>:
                    ZID_TO_ZONE()
                    ASSERT()
                    memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                        memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                            heap_get_chunk_hdr()
                        memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                            heap_get_chunk_hdr()
                            FATAL()
                    heap_reclaim_run() <int heap_reclaim_run (struct palloc_heap *heap, struct memory_block *m, int startup) at libpmemobj/heap.c:733>:
                        heap_get_chunk_run()
                        heap_get_chunk_hdr()
                        alloc_class_by_run() <struct alloc_class *alloc_class_by_run (struct alloc_class_collection *ac, size_t unit_size, uint16_t flags, uint32_t size_idx) at libpmemobj/alloc_class.c:594>:
                            SIZE_TO_CLASS_MAP_INDEX()
                            ASSERT()
                            critnib_get() <void *critnib_get (struct critnib *c, uint64_t key) at libpmemobj/critnib.c:515>:
                                load() <void load (void *src, void *dst) at libpmemobj/critnib.c:130>:
                                    util_atomic_load_explicit64()
                                is_leaf() <inline bool is_leaf (struct critnib_node *n) at libpmemobj/critnib.c:150>:
                                slice_index() <inline unsigned slice_index (uint64_t key, sh_t shift) at libpmemobj/critnib.c:178>:
                                to_leaf() <inline struct critnib_leaf *to_leaf (struct critnib_node *n) at libpmemobj/critnib.c:159>:
                            RUN_CLASS_KEY_PACK()
                        recycler_element_new() <struct recycler_element recycler_element_new (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/recycler.c:122>:
                            SUPPRESS_UNUSED()
                            util_mutex_lock()
                            util_mutex_unlock()
                        ASSERTeq()
                        STATS_INC()
                        heap_get_recycler() <struct recycler *heap_get_recycler (struct palloc_heap *heap, size_t id, size_t nallocs) at libpmemobj/heap.c:106> (R):
                            util_atomic_load_explicit64()
                            recycler_new() <struct recycler *recycler_new (struct palloc_heap *heap, size_t nallocs, size_t *peak_arenas) at libpmemobj/recycler.c:74>:
                                Malloc()
                                ravl_new_sized() <struct ravl *ravl_new_sized (ravl_compare *compare, size_t data_size) at core/ravl.c:45>:
                                    Malloc()
                                    ERR()
                                recycler_element_cmp() <int recycler_element_cmp (const void *lhs, const void *rhs) at libpmemobj/recycler.c:23>:
                                memset()
                                VEC_INIT()
                                util_mutex_init()
                                Free() <Free_func Free at core/alloc.c:91>
                            util_bool_compare_and_swap64()
                            recycler_delete() <void recycler_delete (struct recycler *r) at libpmemobj/recycler.c:107>:
                                VEC_DELETE()
                                util_mutex_destroy()
                                ravl_delete() <void ravl_delete (struct ravl *ravl) at core/ravl.c:112>:
                                    ravl_delete_cb() <void ravl_delete_cb (struct ravl *ravl, ravl_cb cb, void *arg) at core/ravl.c:102>:
                                        ravl_foreach_node() <void ravl_foreach_node (struct ravl_node *n, ravl_cb cb, void *arg, int free_node) at core/ravl.c:74> (R):
                                            ravl_foreach_node() <void ravl_foreach_node (struct ravl_node *n, ravl_cb cb, void *arg, int free_node) at core/ravl.c:74> (recursive: see 12893)
                                            Free() <Free_func Free at core/alloc.c:91>
                                        Free() <Free_func Free at core/alloc.c:91>
                                Free() <Free_func Free at core/alloc.c:91>
                            heap_get_recycler() <struct recycler *heap_get_recycler (struct palloc_heap *heap, size_t id, size_t nallocs) at libpmemobj/heap.c:106> (recursive: see 12875)
                        recycler_put() <int recycler_put (struct recycler *r, struct recycler_element element) at libpmemobj/recycler.c:154>:
                            util_mutex_lock()
                            ravl_emplace_copy() <int ravl_emplace_copy (struct ravl *ravl, const void *data) at core/ravl.c:384>:
                                ravl_emplace() <int ravl_emplace (struct ravl *ravl, ravl_constr constr, const void *arg) at core/ravl.c:393>:
                                    LOG()
                                    ravl_new_node() <struct ravl_node *ravl_new_node (struct ravl *ravl, ravl_constr constr, const void *arg) at core/ravl.c:161>:
                                        Malloc()
                                        ERR()
                                        ravl_node_insert_constructor() <void ravl_node_insert_constructor (void *data, size_t data_size, const void *arg) at core/ravl.c:139>:
                                            SUPPRESS_UNUSED()
                                            memcpy()
                                    ravl_data() <void *ravl_data (struct ravl_node *node) at core/ravl.c:571>:
                                        memcpy()
                                    ravl_balance() <void ravl_balance (struct ravl *ravl, struct ravl_node *n) at core/ravl.c:337>:
                                        ravl_node_is() <int ravl_node_is (struct ravl_node *n, int i, int j) at core/ravl.c:306>:
                                            ravl_node_is_i_j() <int ravl_node_is_i_j (struct ravl_node *n, int i, int j) at core/ravl.c:296>:
                                                ravl_node_rank_difference_parent() <int ravl_node_rank_difference_parent (struct ravl_node *p, struct ravl_node *n) at core/ravl.c:275>:
                                                    ravl_node_rank() <int ravl_node_rank (struct ravl_node *n) at core/ravl.c:261>:
                                        ravl_node_promote() <void ravl_node_promote (struct ravl_node *n) at core/ravl.c:315>
                                        ravl_node_sibling() <struct ravl_node *ravl_node_sibling (struct ravl_node *n) at core/ravl.c:209>:
                                            ravl_node_slot_type() <enum ravl_slot_type ravl_node_slot_type (struct ravl_node *n) at core/ravl.c:196>:
                                        ravl_node_rank_difference() <int ravl_node_rank_difference (struct ravl_node *n) at core/ravl.c:287>:
                                            ravl_node_rank_difference_parent() <int ravl_node_rank_difference_parent (struct ravl_node *p, struct ravl_node *n) at core/ravl.c:275>:
                                                ravl_node_rank() <int ravl_node_rank (struct ravl_node *n) at core/ravl.c:261>:
                                        ravl_node_rank_difference_parent() <int ravl_node_rank_difference_parent (struct ravl_node *p, struct ravl_node *n) at core/ravl.c:275>:
                                            ravl_node_rank() <int ravl_node_rank (struct ravl_node *n) at core/ravl.c:261>:
                                        ravl_slot_opposite() <enum ravl_slot_type ravl_slot_opposite (enum ravl_slot_type t) at core/ravl.c:184>:
                                            ASSERTne()
                                        ravl_node_slot_type() <enum ravl_slot_type ravl_node_slot_type (struct ravl_node *n) at core/ravl.c:196>:
                                        ravl_rotate() <void ravl_rotate (struct ravl *ravl, struct ravl_node *n) at core/ravl.c:237>:
                                            ASSERTne()
                                            ravl_node_ref() <struct ravl_node **ravl_node_ref (struct ravl *ravl, struct ravl_node *n) at core/ravl.c:223>:
                                                ravl_node_slot_type() <enum ravl_slot_type ravl_node_slot_type (struct ravl_node *n) at core/ravl.c:196>:
                                            ravl_node_slot_type() <enum ravl_slot_type ravl_node_slot_type (struct ravl_node *n) at core/ravl.c:196>:
                                            ravl_slot_opposite() <enum ravl_slot_type ravl_slot_opposite (enum ravl_slot_type t) at core/ravl.c:184>:
                                                ASSERTne()
                                        ravl_node_demote() <void ravl_node_demote (struct ravl_node *n) at core/ravl.c:324>:
                                            ASSERT()
                                    Free() <Free_func Free at core/alloc.c:91>
                                ravl_node_copy_constructor() <void ravl_node_copy_constructor (void *data, size_t data_size, const void *arg) at core/ravl.c:152>:
                                    memcpy()
                            util_mutex_unlock()
                        ERR()
                    heap_run_into_free_chunk() <void heap_run_into_free_chunk (struct palloc_heap *heap, struct bucket *bucket, struct memory_block *m) at libpmemobj/heap.c:697>:
                        heap_get_chunk_hdr()
                        STATS_SUB()
                        util_mutex_lock()
                        memblock_huge_init() <struct memory_block memblock_huge_init (struct palloc_heap *heap, uint32_t chunk_id, uint32_t zone_id, uint32_t size_idx) at libpmemobj/memblock.c:1329>:
                            heap_get_chunk_hdr()
                            VALGRIND_DO_MAKE_MEM_UNDEFINED()
                            VALGRIND_ANNOTATE_NEW_MEMORY()
                            chunk_get_chunk_hdr_value() <uint64_t chunk_get_chunk_hdr_value (uint16_t type, uint16_t flags, uint32_t size_idx) at libpmemobj/memblock.c:604>:
                                COMPILE_ERROR_ON()
                                memcpy()
                            util_atomic_store_explicit64()
                            pmemops_persist()
                            huge_write_footer() <void huge_write_footer (struct chunk_header *hdr, uint32_t size_idx) at libpmemobj/memblock.c:1166>:
                                VALGRIND_DO_MAKE_MEM_UNDEFINED()
                                VALGRIND_SET_CLEAN()
                            memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                    heap_get_chunk_hdr()
                                memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                    heap_get_chunk_hdr()
                                    FATAL()
                        heap_free_chunk_reuse() <int heap_free_chunk_reuse (struct palloc_heap *heap, struct bucket *bucket, struct memory_block *m) at libpmemobj/heap.c:674>:
                            heap_coalesce_huge() <struct memory_block heap_coalesce_huge (struct palloc_heap *heap, struct bucket *b, const struct memory_block *m) at libpmemobj/heap.c:650>:
                                heap_get_adjacent_free_block() <int heap_get_adjacent_free_block (struct palloc_heap *heap, const struct memory_block *in, struct memory_block *out, int prev) at libpmemobj/heap.c:582>:
                                    ZID_TO_ZONE()
                                    memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                        memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                            heap_get_chunk_hdr()
                                        memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                            heap_get_chunk_hdr()
                                            FATAL()
                                bucket_remove_block() <int bucket_remove_block (struct bucket *b, const struct memory_block *m) at libpmemobj/bucket.c:178>
                                heap_coalesce() <struct memory_block heap_coalesce (struct palloc_heap *heap, const struct memory_block *blocks[], int n) at libpmemobj/heap.c:621>:
                                    ASSERTne()
                                    memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                        memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                            heap_get_chunk_hdr()
                                        memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                            heap_get_chunk_hdr()
                                            FATAL()
                            bucket_insert_block() <int bucket_insert_block (struct bucket *b, const struct memory_block *m) at libpmemobj/bucket.c:161>:
                                VALGRIND_DO_MAKE_MEM_NOACCESS()
                                VALGRIND_ANNOTATE_NEW_MEMORY()
                        util_mutex_unlock()
                    heap_free_chunk_reuse() <int heap_free_chunk_reuse (struct palloc_heap *heap, struct bucket *bucket, struct memory_block *m) at libpmemobj/heap.c:674>:
                        heap_coalesce_huge() <struct memory_block heap_coalesce_huge (struct palloc_heap *heap, struct bucket *b, const struct memory_block *m) at libpmemobj/heap.c:650>:
                            heap_get_adjacent_free_block() <int heap_get_adjacent_free_block (struct palloc_heap *heap, const struct memory_block *in, struct memory_block *out, int prev) at libpmemobj/heap.c:582>:
                                ZID_TO_ZONE()
                                memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                    memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                        heap_get_chunk_hdr()
                                    memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                        heap_get_chunk_hdr()
                                        FATAL()
                            bucket_remove_block() <int bucket_remove_block (struct bucket *b, const struct memory_block *m) at libpmemobj/bucket.c:178>
                            heap_coalesce() <struct memory_block heap_coalesce (struct palloc_heap *heap, const struct memory_block *blocks[], int n) at libpmemobj/heap.c:621>:
                                ASSERTne()
                                memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                    memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                        heap_get_chunk_hdr()
                                    memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                        heap_get_chunk_hdr()
                                        FATAL()
                        bucket_insert_block() <int bucket_insert_block (struct bucket *b, const struct memory_block *m) at libpmemobj/bucket.c:161>:
                            VALGRIND_DO_MAKE_MEM_NOACCESS()
                            VALGRIND_ANNOTATE_NEW_MEMORY()
                heap_bucket_release() <void heap_bucket_release (struct bucket *b) at libpmemobj/heap.c:498>:
                    bucket_release() <void bucket_release (struct bucket *b) at libpmemobj/bucket.c:127>:
                        util_mutex_unlock()
pmemobj_direct() <void *pmemobj_direct (PMEMoid oid) at libpmemobj/obj.c:75>:
    pmemobj_direct_inline()
pmemobj_errormsg() <const char *pmemobj_errormsg (void) at libpmemobj/libpmemobj.c:104>:
    pmemobj_errormsgU() <inline const char *pmemobj_errormsgU (void) at libpmemobj/libpmemobj.c:95>:
        out_get_errormsg() <const char *out_get_errormsg (void) at core/out.c:561>:
            Last_errormsg_get() <inline const struct errormsg *Last_errormsg_get (void) at core/out.c:120>:
                Last_errormsg_key_alloc() <inline void Last_errormsg_key_alloc (void) at core/out.c:110>:
                    os_once() <int os_once (os_once_t *o, void (*func) (void)) at core/os_thread_posix.c:24>:
                        COMPILE_ERROR_ON()
                        pthread_once()
                    VALGRIND_ANNOTATE_HAPPENS_AFTER()
                os_tls_get() <void *os_tls_get (os_tls_key_t key) at core/os_thread_posix.c:62>:
                    pthread_getspecific()
                malloc()
                os_tls_set() <int os_tls_set (os_tls_key_t key, const void *value) at core/os_thread_posix.c:53>:
                    pthread_setspecific()
                FATAL()
pmemobj_flush() <void pmemobj_flush (PMEMobjpool *pop, const void *addr, size_t len) at libpmemobj/obj.c:2277>:
    LOG()
    pmemops_flush()
pmemobj_free() <void pmemobj_free (PMEMoid *oidp) at libpmemobj/obj.c:2137>:
    ASSERTne()
    LOG()
    PMEMOBJ_API_START()
    pmemobj_pool_by_oid() <PMEMobjpool *pmemobj_pool_by_oid (PMEMoid oid) at libpmemobj/obj.c:1616>:
        LOG()
        critnib_get() <void *critnib_get (struct critnib *c, uint64_t key) at libpmemobj/critnib.c:515>:
            load() <void load (void *src, void *dst) at libpmemobj/critnib.c:130>:
                util_atomic_load_explicit64()
            is_leaf() <inline bool is_leaf (struct critnib_node *n) at libpmemobj/critnib.c:150>:
            slice_index() <inline unsigned slice_index (uint64_t key, sh_t shift) at libpmemobj/critnib.c:178>:
            to_leaf() <inline struct critnib_leaf *to_leaf (struct critnib_node *n) at libpmemobj/critnib.c:159>:
    ASSERT()
    OBJ_OID_IS_VALID()
    obj_free() <void obj_free (PMEMobjpool *pop, PMEMoid *oidp) at libpmemobj/obj.c:1857>:
        ASSERTne()
        pmalloc_operation_hold() <struct operation_context *pmalloc_operation_hold (PMEMobjpool *pop) at libpmemobj/pmalloc.c:74>:
            pmalloc_operation_hold_type() <struct operation_context *pmalloc_operation_hold_type (PMEMobjpool *pop, enum pmalloc_operation_type type, int start) at libpmemobj/pmalloc.c:45>:
                lane_hold() <unsigned lane_hold (PMEMobjpool *pop, struct lane **lanep) at libpmemobj/lane.c:510>:
                    get_lane_info_record() <inline struct lane_info *get_lane_info_record (PMEMobjpool *pop) at libpmemobj/lane.c:466>:
                        likely()
                        unlikely()
                        lane_info_ht_boot() <inline void lane_info_ht_boot (void) at libpmemobj/lane.c:74>:
                            lane_info_create() <inline void lane_info_create (void) at libpmemobj/lane.c:39>:
                                critnib_new() <struct critnib *critnib_new (void) at libpmemobj/critnib.c:187>:
                                    Zalloc() <void *Zalloc (size_t sz) at core/alloc.c:98>:
                                        Malloc()
                                        memset()
                                    util_mutex_init()
                                    VALGRIND_HG_DRD_DISABLE_CHECKING()
                                FATAL()
                            os_tls_set() <int os_tls_set (os_tls_key_t key, const void *value) at core/os_thread_posix.c:53>:
                                pthread_setspecific()
                            FATAL()
                        critnib_get() <void *critnib_get (struct critnib *c, uint64_t key) at libpmemobj/critnib.c:515>:
                            load() <void load (void *src, void *dst) at libpmemobj/critnib.c:130>:
                                util_atomic_load_explicit64()
                            is_leaf() <inline bool is_leaf (struct critnib_node *n) at libpmemobj/critnib.c:150>:
                            slice_index() <inline unsigned slice_index (uint64_t key, sh_t shift) at libpmemobj/critnib.c:178>:
                            to_leaf() <inline struct critnib_leaf *to_leaf (struct critnib_node *n) at libpmemobj/critnib.c:159>:
                        Malloc()
                        FATAL()
                        critnib_insert() <int critnib_insert (struct critnib *c, uint64_t key, void *value) at libpmemobj/critnib.c:340>:
                            util_mutex_lock()
                            alloc_leaf() <struct critnib_leaf *alloc_leaf (struct critnib *__restrict c) at libpmemobj/critnib.c:311>:
                                Malloc()
                                ERR()
                                VALGRIND_ANNOTATE_NEW_MEMORY()
                            util_mutex_unlock()
                            VALGRIND_HG_DRD_DISABLE_CHECKING()
                            is_leaf() <inline bool is_leaf (struct critnib_node *n) at libpmemobj/critnib.c:150>:
                            path_mask() <inline uint64_t path_mask (sh_t shift) at libpmemobj/critnib.c:169>:
                            slice_index() <inline unsigned slice_index (uint64_t key, sh_t shift) at libpmemobj/critnib.c:178>:
                            store() <void store (void *dst, void *src) at libpmemobj/critnib.c:140>:
                                util_atomic_store_explicit64()
                            to_leaf() <inline struct critnib_leaf *to_leaf (struct critnib_node *n) at libpmemobj/critnib.c:159>:
                            ASSERT()
                            free_leaf() <void free_leaf (struct critnib *__restrict c, struct critnib_leaf *__restrict k) at libpmemobj/critnib.c:298>
                            util_mssb_index64()
                            alloc_node() <struct critnib_node *alloc_node (struct critnib *__restrict c) at libpmemobj/critnib.c:274>:
                                Malloc()
                                ERR()
                                VALGRIND_ANNOTATE_NEW_MEMORY()
                    unlikely()
                    util_fetch_and_add32()
                    get_lane() <inline void get_lane (uint64_t *locks, struct lane_info *info, uint64_t nlocks) at libpmemobj/lane.c:430>:
                        likely()
                        util_bool_compare_and_swap64()
                        sched_yield()
                    VALGRIND_ANNOTATE_NEW_MEMORY()
                    operation_init() <void operation_init (struct operation_context *ctx) at libpmemobj/memops.c:709>:
                        VALGRIND_ANNOTATE_NEW_MEMORY()
                        VECQ_REINIT()
                operation_start() <void operation_start (struct operation_context *ctx) at libpmemobj/memops.c:736>:
                    operation_init() <void operation_init (struct operation_context *ctx) at libpmemobj/memops.c:709>:
                        VALGRIND_ANNOTATE_NEW_MEMORY()
                        VECQ_REINIT()
                    ASSERTeq()
        operation_add_entry() <int operation_add_entry (struct operation_context *ctx, void *ptr, uint64_t value, ulog_operation_type type) at libpmemobj/memops.c:411>:
            OBJ_OFF_IS_VALID()
            operation_add_typed_entry() <int operation_add_typed_entry (struct operation_context *ctx, void *ptr, uint64_t value, ulog_operation_type type, enum operation_log_type log_type) at libpmemobj/memops.c:362>:
                Realloc()
                SIZEOF_ULOG()
                VECQ_CLEAR()
                operation_try_merge_entry() <int operation_try_merge_entry (struct operation_context *ctx, void *ptr, uint64_t value, ulog_operation_type type) at libpmemobj/memops.c:318>:
                    OBJ_PTR_TO_OFF()
                    VECQ_FOREACH_REVERSE()
                    ulog_entry_offset() <uint64_t ulog_entry_offset (const struct ulog_entry_base *entry) at libpmemobj/ulog.c:68>:
                    ulog_entry_type() <ulog_operation_type ulog_entry_type (const struct ulog_entry_base *entry) at libpmemobj/ulog.c:59>:
                        ULOG_OPERATION_FROM_OFFSET()
                    operation_merge() <inline void operation_merge (struct ulog_entry_base *entry, uint64_t value, ulog_operation_type type) at libpmemobj/memops.c:288>:
                        ASSERT()
                ulog_entry_val_create() <struct ulog_entry_val *ulog_entry_val_create (struct ulog *ulog, size_t offset, uint64_t *dest, uint64_t value, ulog_operation_type type, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:372>:
                    COMPILE_ERROR_ON()
                    ULOG_OPERATION()
                    pmemops_memcpy()
                operation_merge_entry_add() <void operation_merge_entry_add (struct operation_context *ctx, struct ulog_entry_val *entry) at libpmemobj/memops.c:344>:
                    VECQ_SIZE()
                    VECQ_DEQUEUE()
                    VECQ_ENQUEUE()
                    LOG()
                ulog_entry_size() <size_t ulog_entry_size (const struct ulog_entry_base *entry) at libpmemobj/ulog.c:77>:
                    ulog_entry_type() <ulog_operation_type ulog_entry_type (const struct ulog_entry_base *entry) at libpmemobj/ulog.c:59>:
                        ULOG_OPERATION_FROM_OFFSET()
                    CACHELINE_ALIGN()
                    ASSERT()
        palloc_operation() <int palloc_operation (struct palloc_heap *heap, uint64_t off, uint64_t *dest_off, size_t size, palloc_constr constructor, void *arg, uint64_t extra_field, uint16_t object_flags, uint16_t class_id, uint16_t arena_id, struct operation_context *ctx) at libpmemobj/palloc.c:705>:
            palloc_defer_free_create() <void palloc_defer_free_create (struct palloc_heap *heap, uint64_t off, struct pobj_action_internal *out) at libpmemobj/palloc.c:610>:
                COMPILE_ERROR_ON()
                memblock_from_offset() <struct memory_block memblock_from_offset (struct palloc_heap *heap, uint64_t off) at libpmemobj/memblock.c:1532>:
                    memblock_from_offset_opt() <struct memory_block memblock_from_offset_opt (struct palloc_heap *heap, uint64_t off, int size) at libpmemobj/memblock.c:1476>:
                        HEAP_PTR_TO_OFF()
                        heap_get_chunk_hdr()
                        memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                            heap_get_chunk_hdr()
                        ASSERTeq()
                        memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                            heap_get_chunk_hdr()
                            FATAL()
                        run_get_data_offset() <size_t run_get_data_offset (const struct memory_block *m) at libpmemobj/memblock.c:572>:
                            heap_get_chunk_run()
                            run_get_data_start() <char *run_get_data_start (const struct memory_block *m) at libpmemobj/memblock.c:544>:
                                heap_get_chunk_hdr()
                                heap_get_chunk_run()
                                run_get_bitmap() <void run_get_bitmap (const struct memory_block *m, struct run_bitmap *b) at libpmemobj/memblock.c:488>:
                                    heap_get_chunk_run()
                                    heap_get_chunk_hdr()
                                    memblock_run_bitmap() <void memblock_run_bitmap (uint32_t *size_idx, uint16_t flags, uint64_t unit_size, uint64_t alignment, void *content, struct run_bitmap *b) at libpmemobj/memblock.c:410>:
                                        ASSERTne()
                                        RUN_CONTENT_SIZE_BYTES()
                                        util_div_ceil()
                                        ALIGN_UP()
                                        memblock_run_default_nallocs() <unsigned memblock_run_default_nallocs (uint32_t *size_idx, uint16_t flags, uint64_t unit_size, uint64_t alignment) at libpmemobj/memblock.c:370>:
                                            SUPPRESS_UNUSED()
                                            RUN_DEFAULT_SIZE_BYTES()
                                            LOG()
                                    ASSERTeq()
                                ALIGN_UP()
                        heap_alloc_classes() <struct alloc_class_collection *heap_alloc_classes (struct palloc_heap *heap) at libpmemobj/heap.c:160>:
                        alloc_class_by_run() <struct alloc_class *alloc_class_by_run (struct alloc_class_collection *ac, size_t unit_size, uint16_t flags, uint32_t size_idx) at libpmemobj/alloc_class.c:594>:
                            SIZE_TO_CLASS_MAP_INDEX()
                            ASSERT()
                            critnib_get() <void *critnib_get (struct critnib *c, uint64_t key) at libpmemobj/critnib.c:515>:
                                load() <void load (void *src, void *dst) at libpmemobj/critnib.c:130>:
                                    util_atomic_load_explicit64()
                                is_leaf() <inline bool is_leaf (struct critnib_node *n) at libpmemobj/critnib.c:150>:
                                slice_index() <inline unsigned slice_index (uint64_t key, sh_t shift) at libpmemobj/critnib.c:178>:
                                to_leaf() <inline struct critnib_leaf *to_leaf (struct critnib_node *n) at libpmemobj/critnib.c:159>:
                            RUN_CLASS_KEY_PACK()
                        CALC_SIZE_IDX()
                heap_ensure_zone_reclaimed() <void heap_ensure_zone_reclaimed (struct palloc_heap *heap, uint32_t zone_id) at libpmemobj/heap.c:816>:
                    util_atomic_load_explicit32()
                    heap_bucket_acquire() <struct bucket *heap_bucket_acquire (struct palloc_heap *heap, uint8_t class_id, uint16_t arena_id) at libpmemobj/heap.c:470>:
                        out() <void out (const char *fmt, ...) at core/out.c:480>:
                            va_start()
                            out_common() <} void out_common (const char *file, int line, const char *func, int level, const char *suffix, const char *fmt, va_list ap) at core/out.c:334>
                            va_end()
                        heap_thread_arena() <struct arena *heap_thread_arena (struct palloc_heap *heap) at libpmemobj/heap.c:414>:
                            os_tls_get() <void *os_tls_get (os_tls_key_t key) at core/os_thread_posix.c:62>:
                                pthread_getspecific()
                            heap_thread_arena_assign() <struct arena *heap_thread_arena_assign (struct palloc_heap *heap) at libpmemobj/heap.c:381>:
                                util_mutex_lock()
                                ASSERTne()
                                VEC_SIZE()
                                VEC_FOREACH()
                                LOG()
                                heap_arena_thread_attach() <void heap_arena_thread_attach (struct palloc_heap *heap, struct arena *a) at libpmemobj/heap.c:249>:
                                    ASSERTeq()
                                    os_tls_get() <void *os_tls_get (os_tls_key_t key) at core/os_thread_posix.c:62>:
                                        pthread_getspecific()
                                    heap_arena_thread_detach() <void heap_arena_thread_detach (struct arena *a) at libpmemobj/heap.c:232>:
                                        util_fetch_and_sub64()
                                    ASSERTne()
                                    util_fetch_and_add64()
                                    os_tls_set() <int os_tls_set (os_tls_key_t key, const void *value) at core/os_thread_posix.c:53>:
                                        pthread_setspecific()
                                util_mutex_unlock()
                            heap_global_arena_assign() <struct arena *heap_global_arena_assign (struct palloc_heap *heap) at libpmemobj/heap.c:348>:
                                util_mutex_lock()
                                ASSERTne()
                                VEC_SIZE()
                                VEC_FOREACH()
                                LOG()
                                util_mutex_unlock()
                            ASSERT()
                            ASSERTne()
                        ASSERTne()
                        VEC_ARR()
                        bucket_acquire() <struct bucket *bucket_acquire (struct bucket_locked *b) at libpmemobj/bucket.c:117>:
                            util_mutex_lock()
                    ZID_TO_ZONE()
                    ASSERTeq()
                    out() <void out (const char *fmt, ...) at core/out.c:480>:
                        va_start()
                        out_common() <} void out_common (const char *file, int line, const char *func, int level, const char *suffix, const char *fmt, va_list ap) at core/out.c:334>
                        va_end()
                    util_atomic_store_explicit32()
                    heap_reclaim_zone_garbage() <void heap_reclaim_zone_garbage (struct palloc_heap *heap, struct bucket *bucket, uint32_t zone_id) at libpmemobj/heap.c:775>:
                        ZID_TO_ZONE()
                        ASSERT()
                        memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                            memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                heap_get_chunk_hdr()
                            memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                heap_get_chunk_hdr()
                                FATAL()
                        heap_reclaim_run() <int heap_reclaim_run (struct palloc_heap *heap, struct memory_block *m, int startup) at libpmemobj/heap.c:733>:
                            heap_get_chunk_run()
                            heap_get_chunk_hdr()
                            alloc_class_by_run() <struct alloc_class *alloc_class_by_run (struct alloc_class_collection *ac, size_t unit_size, uint16_t flags, uint32_t size_idx) at libpmemobj/alloc_class.c:594>:
                                SIZE_TO_CLASS_MAP_INDEX()
                                ASSERT()
                                critnib_get() <void *critnib_get (struct critnib *c, uint64_t key) at libpmemobj/critnib.c:515>:
                                    load() <void load (void *src, void *dst) at libpmemobj/critnib.c:130>:
                                        util_atomic_load_explicit64()
                                    is_leaf() <inline bool is_leaf (struct critnib_node *n) at libpmemobj/critnib.c:150>:
                                    slice_index() <inline unsigned slice_index (uint64_t key, sh_t shift) at libpmemobj/critnib.c:178>:
                                    to_leaf() <inline struct critnib_leaf *to_leaf (struct critnib_node *n) at libpmemobj/critnib.c:159>:
                                RUN_CLASS_KEY_PACK()
                            recycler_element_new() <struct recycler_element recycler_element_new (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/recycler.c:122>:
                                SUPPRESS_UNUSED()
                                util_mutex_lock()
                                util_mutex_unlock()
                            ASSERTeq()
                            STATS_INC()
                            heap_get_recycler() <struct recycler *heap_get_recycler (struct palloc_heap *heap, size_t id, size_t nallocs) at libpmemobj/heap.c:106> (R):
                                util_atomic_load_explicit64()
                                recycler_new() <struct recycler *recycler_new (struct palloc_heap *heap, size_t nallocs, size_t *peak_arenas) at libpmemobj/recycler.c:74>:
                                    Malloc()
                                    ravl_new_sized() <struct ravl *ravl_new_sized (ravl_compare *compare, size_t data_size) at core/ravl.c:45>:
                                        Malloc()
                                        ERR()
                                    recycler_element_cmp() <int recycler_element_cmp (const void *lhs, const void *rhs) at libpmemobj/recycler.c:23>:
                                    memset()
                                    VEC_INIT()
                                    util_mutex_init()
                                    Free() <Free_func Free at core/alloc.c:91>
                                util_bool_compare_and_swap64()
                                recycler_delete() <void recycler_delete (struct recycler *r) at libpmemobj/recycler.c:107>:
                                    VEC_DELETE()
                                    util_mutex_destroy()
                                    ravl_delete() <void ravl_delete (struct ravl *ravl) at core/ravl.c:112>:
                                        ravl_delete_cb() <void ravl_delete_cb (struct ravl *ravl, ravl_cb cb, void *arg) at core/ravl.c:102>:
                                            ravl_foreach_node() <void ravl_foreach_node (struct ravl_node *n, ravl_cb cb, void *arg, int free_node) at core/ravl.c:74> (R):
                                                ravl_foreach_node() <void ravl_foreach_node (struct ravl_node *n, ravl_cb cb, void *arg, int free_node) at core/ravl.c:74> (recursive: see 13275)
                                                Free() <Free_func Free at core/alloc.c:91>
                                            Free() <Free_func Free at core/alloc.c:91>
                                    Free() <Free_func Free at core/alloc.c:91>
                                heap_get_recycler() <struct recycler *heap_get_recycler (struct palloc_heap *heap, size_t id, size_t nallocs) at libpmemobj/heap.c:106> (recursive: see 13257)
                            recycler_put() <int recycler_put (struct recycler *r, struct recycler_element element) at libpmemobj/recycler.c:154>:
                                util_mutex_lock()
                                ravl_emplace_copy() <int ravl_emplace_copy (struct ravl *ravl, const void *data) at core/ravl.c:384>:
                                    ravl_emplace() <int ravl_emplace (struct ravl *ravl, ravl_constr constr, const void *arg) at core/ravl.c:393>:
                                        LOG()
                                        ravl_new_node() <struct ravl_node *ravl_new_node (struct ravl *ravl, ravl_constr constr, const void *arg) at core/ravl.c:161>:
                                            Malloc()
                                            ERR()
                                            ravl_node_insert_constructor() <void ravl_node_insert_constructor (void *data, size_t data_size, const void *arg) at core/ravl.c:139>:
                                                SUPPRESS_UNUSED()
                                                memcpy()
                                        ravl_data() <void *ravl_data (struct ravl_node *node) at core/ravl.c:571>:
                                            memcpy()
                                        ravl_balance() <void ravl_balance (struct ravl *ravl, struct ravl_node *n) at core/ravl.c:337>:
                                            ravl_node_is() <int ravl_node_is (struct ravl_node *n, int i, int j) at core/ravl.c:306>:
                                                ravl_node_is_i_j() <int ravl_node_is_i_j (struct ravl_node *n, int i, int j) at core/ravl.c:296>:
                                                    ravl_node_rank_difference_parent() <int ravl_node_rank_difference_parent (struct ravl_node *p, struct ravl_node *n) at core/ravl.c:275>:
                                                        ravl_node_rank() <int ravl_node_rank (struct ravl_node *n) at core/ravl.c:261>:
                                            ravl_node_promote() <void ravl_node_promote (struct ravl_node *n) at core/ravl.c:315>
                                            ravl_node_sibling() <struct ravl_node *ravl_node_sibling (struct ravl_node *n) at core/ravl.c:209>:
                                                ravl_node_slot_type() <enum ravl_slot_type ravl_node_slot_type (struct ravl_node *n) at core/ravl.c:196>:
                                            ravl_node_rank_difference() <int ravl_node_rank_difference (struct ravl_node *n) at core/ravl.c:287>:
                                                ravl_node_rank_difference_parent() <int ravl_node_rank_difference_parent (struct ravl_node *p, struct ravl_node *n) at core/ravl.c:275>:
                                                    ravl_node_rank() <int ravl_node_rank (struct ravl_node *n) at core/ravl.c:261>:
                                            ravl_node_rank_difference_parent() <int ravl_node_rank_difference_parent (struct ravl_node *p, struct ravl_node *n) at core/ravl.c:275>:
                                                ravl_node_rank() <int ravl_node_rank (struct ravl_node *n) at core/ravl.c:261>:
                                            ravl_slot_opposite() <enum ravl_slot_type ravl_slot_opposite (enum ravl_slot_type t) at core/ravl.c:184>:
                                                ASSERTne()
                                            ravl_node_slot_type() <enum ravl_slot_type ravl_node_slot_type (struct ravl_node *n) at core/ravl.c:196>:
                                            ravl_rotate() <void ravl_rotate (struct ravl *ravl, struct ravl_node *n) at core/ravl.c:237>:
                                                ASSERTne()
                                                ravl_node_ref() <struct ravl_node **ravl_node_ref (struct ravl *ravl, struct ravl_node *n) at core/ravl.c:223>:
                                                    ravl_node_slot_type() <enum ravl_slot_type ravl_node_slot_type (struct ravl_node *n) at core/ravl.c:196>:
                                                ravl_node_slot_type() <enum ravl_slot_type ravl_node_slot_type (struct ravl_node *n) at core/ravl.c:196>:
                                                ravl_slot_opposite() <enum ravl_slot_type ravl_slot_opposite (enum ravl_slot_type t) at core/ravl.c:184>:
                                                    ASSERTne()
                                            ravl_node_demote() <void ravl_node_demote (struct ravl_node *n) at core/ravl.c:324>:
                                                ASSERT()
                                        Free() <Free_func Free at core/alloc.c:91>
                                    ravl_node_copy_constructor() <void ravl_node_copy_constructor (void *data, size_t data_size, const void *arg) at core/ravl.c:152>:
                                        memcpy()
                                util_mutex_unlock()
                            ERR()
                        heap_run_into_free_chunk() <void heap_run_into_free_chunk (struct palloc_heap *heap, struct bucket *bucket, struct memory_block *m) at libpmemobj/heap.c:697>:
                            heap_get_chunk_hdr()
                            STATS_SUB()
                            util_mutex_lock()
                            memblock_huge_init() <struct memory_block memblock_huge_init (struct palloc_heap *heap, uint32_t chunk_id, uint32_t zone_id, uint32_t size_idx) at libpmemobj/memblock.c:1329>:
                                heap_get_chunk_hdr()
                                VALGRIND_DO_MAKE_MEM_UNDEFINED()
                                VALGRIND_ANNOTATE_NEW_MEMORY()
                                chunk_get_chunk_hdr_value() <uint64_t chunk_get_chunk_hdr_value (uint16_t type, uint16_t flags, uint32_t size_idx) at libpmemobj/memblock.c:604>:
                                    COMPILE_ERROR_ON()
                                    memcpy()
                                util_atomic_store_explicit64()
                                pmemops_persist()
                                huge_write_footer() <void huge_write_footer (struct chunk_header *hdr, uint32_t size_idx) at libpmemobj/memblock.c:1166>:
                                    VALGRIND_DO_MAKE_MEM_UNDEFINED()
                                    VALGRIND_SET_CLEAN()
                                memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                    memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                        heap_get_chunk_hdr()
                                    memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                        heap_get_chunk_hdr()
                                        FATAL()
                            heap_free_chunk_reuse() <int heap_free_chunk_reuse (struct palloc_heap *heap, struct bucket *bucket, struct memory_block *m) at libpmemobj/heap.c:674>:
                                heap_coalesce_huge() <struct memory_block heap_coalesce_huge (struct palloc_heap *heap, struct bucket *b, const struct memory_block *m) at libpmemobj/heap.c:650>:
                                    heap_get_adjacent_free_block() <int heap_get_adjacent_free_block (struct palloc_heap *heap, const struct memory_block *in, struct memory_block *out, int prev) at libpmemobj/heap.c:582>:
                                        ZID_TO_ZONE()
                                        memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                            memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                                heap_get_chunk_hdr()
                                            memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                                heap_get_chunk_hdr()
                                                FATAL()
                                    bucket_remove_block() <int bucket_remove_block (struct bucket *b, const struct memory_block *m) at libpmemobj/bucket.c:178>
                                    heap_coalesce() <struct memory_block heap_coalesce (struct palloc_heap *heap, const struct memory_block *blocks[], int n) at libpmemobj/heap.c:621>:
                                        ASSERTne()
                                        memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                            memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                                heap_get_chunk_hdr()
                                            memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                                heap_get_chunk_hdr()
                                                FATAL()
                                bucket_insert_block() <int bucket_insert_block (struct bucket *b, const struct memory_block *m) at libpmemobj/bucket.c:161>:
                                    VALGRIND_DO_MAKE_MEM_NOACCESS()
                                    VALGRIND_ANNOTATE_NEW_MEMORY()
                            util_mutex_unlock()
                        heap_free_chunk_reuse() <int heap_free_chunk_reuse (struct palloc_heap *heap, struct bucket *bucket, struct memory_block *m) at libpmemobj/heap.c:674>:
                            heap_coalesce_huge() <struct memory_block heap_coalesce_huge (struct palloc_heap *heap, struct bucket *b, const struct memory_block *m) at libpmemobj/heap.c:650>:
                                heap_get_adjacent_free_block() <int heap_get_adjacent_free_block (struct palloc_heap *heap, const struct memory_block *in, struct memory_block *out, int prev) at libpmemobj/heap.c:582>:
                                    ZID_TO_ZONE()
                                    memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                        memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                            heap_get_chunk_hdr()
                                        memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                            heap_get_chunk_hdr()
                                            FATAL()
                                bucket_remove_block() <int bucket_remove_block (struct bucket *b, const struct memory_block *m) at libpmemobj/bucket.c:178>
                                heap_coalesce() <struct memory_block heap_coalesce (struct palloc_heap *heap, const struct memory_block *blocks[], int n) at libpmemobj/heap.c:621>:
                                    ASSERTne()
                                    memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                        memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                            heap_get_chunk_hdr()
                                        memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                            heap_get_chunk_hdr()
                                            FATAL()
                            bucket_insert_block() <int bucket_insert_block (struct bucket *b, const struct memory_block *m) at libpmemobj/bucket.c:161>:
                                VALGRIND_DO_MAKE_MEM_NOACCESS()
                                VALGRIND_ANNOTATE_NEW_MEMORY()
                    heap_bucket_release() <void heap_bucket_release (struct bucket *b) at libpmemobj/heap.c:498>:
                        bucket_release() <void bucket_release (struct bucket *b) at libpmemobj/bucket.c:127>:
                            util_mutex_unlock()
            operation_cancel() <void operation_cancel (struct operation_context *ctx) at libpmemobj/memops.c:761>:
                ASSERTeq()
            palloc_reservation_create() <int palloc_reservation_create (struct palloc_heap *heap, size_t size, palloc_constr constructor, void *arg, uint64_t extra_field, uint16_t object_flags, uint16_t class_id, uint16_t arena_id, struct pobj_action_internal *out) at libpmemobj/palloc.c:178>:
                ASSERT()
                heap_get_best_class() <struct alloc_class *heap_get_best_class (struct palloc_heap *heap, size_t size) at libpmemobj/heap.c:221>:
                    alloc_class_by_alloc_size() <struct alloc_class *alloc_class_by_alloc_size (struct alloc_class_collection *ac, size_t size) at libpmemobj/alloc_class.c:568>:
                        SIZE_TO_CLASS_MAP_INDEX()
                        alloc_class_assign_by_size() <struct alloc_class *alloc_class_assign_by_size (struct alloc_class_collection *ac, size_t size) at libpmemobj/alloc_class.c:538>:
                            LOG()
                            SIZE_TO_CLASS_MAP_INDEX()
                            alloc_class_find_min_frag() <struct alloc_class *alloc_class_find_min_frag (struct alloc_class_collection *ac, size_t n) at libpmemobj/alloc_class.c:340>:
                                LOG()
                                ASSERTne()
                            ASSERTne()
                            util_bool_compare_and_swap64()
                alloc_class_by_id() <struct alloc_class *alloc_class_by_id (struct alloc_class_collection *ac, uint8_t id) at libpmemobj/alloc_class.c:612>
                heap_alloc_classes() <struct alloc_class_collection *heap_alloc_classes (struct palloc_heap *heap) at libpmemobj/heap.c:160>:
                ERR()
                alloc_class_calc_size_idx() <ssize_t alloc_class_calc_size_idx (struct alloc_class *c, size_t size) at libpmemobj/alloc_class.c:621>:
                    CALC_SIZE_IDX()
                heap_bucket_acquire() <struct bucket *heap_bucket_acquire (struct palloc_heap *heap, uint8_t class_id, uint16_t arena_id) at libpmemobj/heap.c:470>:
                    out() <void out (const char *fmt, ...) at core/out.c:480>:
                        va_start()
                        out_common() <} void out_common (const char *file, int line, const char *func, int level, const char *suffix, const char *fmt, va_list ap) at core/out.c:334>
                        va_end()
                    heap_thread_arena() <struct arena *heap_thread_arena (struct palloc_heap *heap) at libpmemobj/heap.c:414>:
                        os_tls_get() <void *os_tls_get (os_tls_key_t key) at core/os_thread_posix.c:62>:
                            pthread_getspecific()
                        heap_thread_arena_assign() <struct arena *heap_thread_arena_assign (struct palloc_heap *heap) at libpmemobj/heap.c:381>:
                            util_mutex_lock()
                            ASSERTne()
                            VEC_SIZE()
                            VEC_FOREACH()
                            LOG()
                            heap_arena_thread_attach() <void heap_arena_thread_attach (struct palloc_heap *heap, struct arena *a) at libpmemobj/heap.c:249>:
                                ASSERTeq()
                                os_tls_get() <void *os_tls_get (os_tls_key_t key) at core/os_thread_posix.c:62>:
                                    pthread_getspecific()
                                heap_arena_thread_detach() <void heap_arena_thread_detach (struct arena *a) at libpmemobj/heap.c:232>:
                                    util_fetch_and_sub64()
                                ASSERTne()
                                util_fetch_and_add64()
                                os_tls_set() <int os_tls_set (os_tls_key_t key, const void *value) at core/os_thread_posix.c:53>:
                                    pthread_setspecific()
                            util_mutex_unlock()
                        heap_global_arena_assign() <struct arena *heap_global_arena_assign (struct palloc_heap *heap) at libpmemobj/heap.c:348>:
                            util_mutex_lock()
                            ASSERTne()
                            VEC_SIZE()
                            VEC_FOREACH()
                            LOG()
                            util_mutex_unlock()
                        ASSERT()
                        ASSERTne()
                    ASSERTne()
                    VEC_ARR()
                    bucket_acquire() <struct bucket *bucket_acquire (struct bucket_locked *b) at libpmemobj/bucket.c:117>:
                        util_mutex_lock()
                heap_get_bestfit_block() <int heap_get_bestfit_block (struct palloc_heap *heap, struct bucket *b, struct memory_block *m) at libpmemobj/heap.c:1210> (R):
                    bucket_alloc_class() <struct alloc_class *bucket_alloc_class (struct bucket *b) at libpmemobj/bucket.c:152>
                    bucket_alloc_block() <int bucket_alloc_block (struct bucket *b, struct memory_block *m_out) at libpmemobj/bucket.c:187>
                    heap_ensure_huge_bucket_filled() <int heap_ensure_huge_bucket_filled (struct palloc_heap *heap, struct bucket *bucket) at libpmemobj/heap.c:943>:
                        heap_reclaim_garbage() <int heap_reclaim_garbage (struct palloc_heap *heap, struct bucket *bucket) at libpmemobj/heap.c:923>:
                            heap_recycle_unused() <int heap_recycle_unused (struct palloc_heap *heap, struct recycler *recycler, struct bucket *defb, int force) at libpmemobj/heap.c:894>:
                                recycler_recalc() <struct empty_runs recycler_recalc (struct recycler *r, int force) at libpmemobj/recycler.c:207>:
                                    VEC_INIT()
                                    util_atomic_load64()
                                    util_mutex_trylock()
                                    ravl_find() <struct ravl_node *ravl_find (struct ravl *ravl, const void *data, enum ravl_predicate flags) at core/ravl.c:524>:
                                        LOG()
                                        ravl_data() <void *ravl_data (struct ravl_node *node) at core/ravl.c:571>:
                                            memcpy()
                                        ravl_predicate_holds() <int ravl_predicate_holds (int result, struct ravl_node **ret, struct ravl_node *n, enum ravl_predicate flags) at core/ravl.c:489>:
                                            ravl_node_successor() <struct ravl_node *ravl_node_successor (struct ravl_node *n) at core/ravl.c:465>:
                                                ravl_node_cessor() <struct ravl_node *ravl_node_cessor (struct ravl_node *n, enum ravl_slot_type t) at core/ravl.c:443>:
                                                    ravl_node_type_most() <struct ravl_node *ravl_node_type_most (struct ravl_node *n, enum ravl_slot_type t) at core/ravl.c:430>:
                                                    ravl_slot_opposite() <enum ravl_slot_type ravl_slot_opposite (enum ravl_slot_type t) at core/ravl.c:184>:
                                                        ASSERTne()
                                            ravl_node_predecessor() <struct ravl_node *ravl_node_predecessor (struct ravl_node *n) at core/ravl.c:476>:
                                                ravl_node_cessor() <struct ravl_node *ravl_node_cessor (struct ravl_node *n, enum ravl_slot_type t) at core/ravl.c:443>:
                                                    ravl_node_type_most() <struct ravl_node *ravl_node_type_most (struct ravl_node *n, enum ravl_slot_type t) at core/ravl.c:430>:
                                                    ravl_slot_opposite() <enum ravl_slot_type ravl_slot_opposite (enum ravl_slot_type t) at core/ravl.c:184>:
                                                        ASSERTne()
                                    ravl_data() <void *ravl_data (struct ravl_node *node) at core/ravl.c:571>:
                                        memcpy()
                                    memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                        memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                            heap_get_chunk_hdr()
                                        memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                            heap_get_chunk_hdr()
                                            FATAL()
                                    recycler_element_new() <struct recycler_element recycler_element_new (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/recycler.c:122>:
                                        SUPPRESS_UNUSED()
                                        util_mutex_lock()
                                        util_mutex_unlock()
                                    ASSERT()
                                    util_fetch_and_sub64()
                                    MIN()
                                    ravl_remove() <void ravl_remove (struct ravl *ravl, struct ravl_node *n) at core/ravl.c:545> (R):
                                        LOG()
                                        ravl_node_successor() <struct ravl_node *ravl_node_successor (struct ravl_node *n) at core/ravl.c:465>:
                                            ravl_node_cessor() <struct ravl_node *ravl_node_cessor (struct ravl_node *n, enum ravl_slot_type t) at core/ravl.c:443>:
                                                ravl_node_type_most() <struct ravl_node *ravl_node_type_most (struct ravl_node *n, enum ravl_slot_type t) at core/ravl.c:430>:
                                                ravl_slot_opposite() <enum ravl_slot_type ravl_slot_opposite (enum ravl_slot_type t) at core/ravl.c:184>:
                                                    ASSERTne()
                                        memcpy()
                                        ravl_remove() <void ravl_remove (struct ravl *ravl, struct ravl_node *n) at core/ravl.c:545> (recursive: see 13492)
                                        ravl_node_ref() <struct ravl_node **ravl_node_ref (struct ravl *ravl, struct ravl_node *n) at core/ravl.c:223>:
                                            ravl_node_slot_type() <enum ravl_slot_type ravl_node_slot_type (struct ravl_node *n) at core/ravl.c:196>:
                                        Free() <Free_func Free at core/alloc.c:91>
                                    VEC_PUSH_BACK()
                                    VEC_FOREACH_BY_PTR()
                                    ravl_emplace_copy() <int ravl_emplace_copy (struct ravl *ravl, const void *data) at core/ravl.c:384>:
                                        ravl_emplace() <int ravl_emplace (struct ravl *ravl, ravl_constr constr, const void *arg) at core/ravl.c:393>:
                                            LOG()
                                            ravl_new_node() <struct ravl_node *ravl_new_node (struct ravl *ravl, ravl_constr constr, const void *arg) at core/ravl.c:161>:
                                                Malloc()
                                                ERR()
                                                ravl_node_insert_constructor() <void ravl_node_insert_constructor (void *data, size_t data_size, const void *arg) at core/ravl.c:139>:
                                                    SUPPRESS_UNUSED()
                                                    memcpy()
                                            ravl_data() <void *ravl_data (struct ravl_node *node) at core/ravl.c:571>:
                                                memcpy()
                                            ravl_balance() <void ravl_balance (struct ravl *ravl, struct ravl_node *n) at core/ravl.c:337>:
                                                ravl_node_is() <int ravl_node_is (struct ravl_node *n, int i, int j) at core/ravl.c:306>:
                                                    ravl_node_is_i_j() <int ravl_node_is_i_j (struct ravl_node *n, int i, int j) at core/ravl.c:296>:
                                                        ravl_node_rank_difference_parent() <int ravl_node_rank_difference_parent (struct ravl_node *p, struct ravl_node *n) at core/ravl.c:275>:
                                                            ravl_node_rank() <int ravl_node_rank (struct ravl_node *n) at core/ravl.c:261>:
                                                ravl_node_promote() <void ravl_node_promote (struct ravl_node *n) at core/ravl.c:315>
                                                ravl_node_sibling() <struct ravl_node *ravl_node_sibling (struct ravl_node *n) at core/ravl.c:209>:
                                                    ravl_node_slot_type() <enum ravl_slot_type ravl_node_slot_type (struct ravl_node *n) at core/ravl.c:196>:
                                                ravl_node_rank_difference() <int ravl_node_rank_difference (struct ravl_node *n) at core/ravl.c:287>:
                                                    ravl_node_rank_difference_parent() <int ravl_node_rank_difference_parent (struct ravl_node *p, struct ravl_node *n) at core/ravl.c:275>:
                                                        ravl_node_rank() <int ravl_node_rank (struct ravl_node *n) at core/ravl.c:261>:
                                                ravl_node_rank_difference_parent() <int ravl_node_rank_difference_parent (struct ravl_node *p, struct ravl_node *n) at core/ravl.c:275>:
                                                    ravl_node_rank() <int ravl_node_rank (struct ravl_node *n) at core/ravl.c:261>:
                                                ravl_slot_opposite() <enum ravl_slot_type ravl_slot_opposite (enum ravl_slot_type t) at core/ravl.c:184>:
                                                    ASSERTne()
                                                ravl_node_slot_type() <enum ravl_slot_type ravl_node_slot_type (struct ravl_node *n) at core/ravl.c:196>:
                                                ravl_rotate() <void ravl_rotate (struct ravl *ravl, struct ravl_node *n) at core/ravl.c:237>:
                                                    ASSERTne()
                                                    ravl_node_ref() <struct ravl_node **ravl_node_ref (struct ravl *ravl, struct ravl_node *n) at core/ravl.c:223>:
                                                        ravl_node_slot_type() <enum ravl_slot_type ravl_node_slot_type (struct ravl_node *n) at core/ravl.c:196>:
                                                    ravl_node_slot_type() <enum ravl_slot_type ravl_node_slot_type (struct ravl_node *n) at core/ravl.c:196>:
                                                    ravl_slot_opposite() <enum ravl_slot_type ravl_slot_opposite (enum ravl_slot_type t) at core/ravl.c:184>:
                                                        ASSERTne()
                                                ravl_node_demote() <void ravl_node_demote (struct ravl_node *n) at core/ravl.c:324>:
                                                    ASSERT()
                                            Free() <Free_func Free at core/alloc.c:91>
                                        ravl_node_copy_constructor() <void ravl_node_copy_constructor (void *data, size_t data_size, const void *arg) at core/ravl.c:152>:
                                            memcpy()
                                    VEC_CLEAR()
                                    util_mutex_unlock()
                                VEC_SIZE()
                                heap_bucket_acquire() <struct bucket *heap_bucket_acquire (struct palloc_heap *heap, uint8_t class_id, uint16_t arena_id) at libpmemobj/heap.c:470>:
                                    out() <void out (const char *fmt, ...) at core/out.c:480>:
                                        va_start()
                                        out_common() <} void out_common (const char *file, int line, const char *func, int level, const char *suffix, const char *fmt, va_list ap) at core/out.c:334>
                                        va_end()
                                    heap_thread_arena() <struct arena *heap_thread_arena (struct palloc_heap *heap) at libpmemobj/heap.c:414>:
                                        os_tls_get() <void *os_tls_get (os_tls_key_t key) at core/os_thread_posix.c:62>:
                                            pthread_getspecific()
                                        heap_thread_arena_assign() <struct arena *heap_thread_arena_assign (struct palloc_heap *heap) at libpmemobj/heap.c:381>:
                                            util_mutex_lock()
                                            ASSERTne()
                                            VEC_SIZE()
                                            VEC_FOREACH()
                                            LOG()
                                            heap_arena_thread_attach() <void heap_arena_thread_attach (struct palloc_heap *heap, struct arena *a) at libpmemobj/heap.c:249>:
                                                ASSERTeq()
                                                os_tls_get() <void *os_tls_get (os_tls_key_t key) at core/os_thread_posix.c:62>:
                                                    pthread_getspecific()
                                                heap_arena_thread_detach() <void heap_arena_thread_detach (struct arena *a) at libpmemobj/heap.c:232>:
                                                    util_fetch_and_sub64()
                                                ASSERTne()
                                                util_fetch_and_add64()
                                                os_tls_set() <int os_tls_set (os_tls_key_t key, const void *value) at core/os_thread_posix.c:53>:
                                                    pthread_setspecific()
                                            util_mutex_unlock()
                                        heap_global_arena_assign() <struct arena *heap_global_arena_assign (struct palloc_heap *heap) at libpmemobj/heap.c:348>:
                                            util_mutex_lock()
                                            ASSERTne()
                                            VEC_SIZE()
                                            VEC_FOREACH()
                                            LOG()
                                            util_mutex_unlock()
                                        ASSERT()
                                        ASSERTne()
                                    ASSERTne()
                                    VEC_ARR()
                                    bucket_acquire() <struct bucket *bucket_acquire (struct bucket_locked *b) at libpmemobj/bucket.c:117>:
                                        util_mutex_lock()
                                ASSERT()
                                VEC_FOREACH_BY_PTR()
                                heap_run_into_free_chunk() <void heap_run_into_free_chunk (struct palloc_heap *heap, struct bucket *bucket, struct memory_block *m) at libpmemobj/heap.c:697>:
                                    heap_get_chunk_hdr()
                                    STATS_SUB()
                                    util_mutex_lock()
                                    memblock_huge_init() <struct memory_block memblock_huge_init (struct palloc_heap *heap, uint32_t chunk_id, uint32_t zone_id, uint32_t size_idx) at libpmemobj/memblock.c:1329>:
                                        heap_get_chunk_hdr()
                                        VALGRIND_DO_MAKE_MEM_UNDEFINED()
                                        VALGRIND_ANNOTATE_NEW_MEMORY()
                                        chunk_get_chunk_hdr_value() <uint64_t chunk_get_chunk_hdr_value (uint16_t type, uint16_t flags, uint32_t size_idx) at libpmemobj/memblock.c:604>:
                                            COMPILE_ERROR_ON()
                                            memcpy()
                                        util_atomic_store_explicit64()
                                        pmemops_persist()
                                        huge_write_footer() <void huge_write_footer (struct chunk_header *hdr, uint32_t size_idx) at libpmemobj/memblock.c:1166>:
                                            VALGRIND_DO_MAKE_MEM_UNDEFINED()
                                            VALGRIND_SET_CLEAN()
                                        memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                            memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                                heap_get_chunk_hdr()
                                            memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                                heap_get_chunk_hdr()
                                                FATAL()
                                    heap_free_chunk_reuse() <int heap_free_chunk_reuse (struct palloc_heap *heap, struct bucket *bucket, struct memory_block *m) at libpmemobj/heap.c:674>:
                                        heap_coalesce_huge() <struct memory_block heap_coalesce_huge (struct palloc_heap *heap, struct bucket *b, const struct memory_block *m) at libpmemobj/heap.c:650>:
                                            heap_get_adjacent_free_block() <int heap_get_adjacent_free_block (struct palloc_heap *heap, const struct memory_block *in, struct memory_block *out, int prev) at libpmemobj/heap.c:582>:
                                                ZID_TO_ZONE()
                                                memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                                    memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                                        heap_get_chunk_hdr()
                                                    memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                                        heap_get_chunk_hdr()
                                                        FATAL()
                                            bucket_remove_block() <int bucket_remove_block (struct bucket *b, const struct memory_block *m) at libpmemobj/bucket.c:178>
                                            heap_coalesce() <struct memory_block heap_coalesce (struct palloc_heap *heap, const struct memory_block *blocks[], int n) at libpmemobj/heap.c:621>:
                                                ASSERTne()
                                                memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                                    memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                                        heap_get_chunk_hdr()
                                                    memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                                        heap_get_chunk_hdr()
                                                        FATAL()
                                        bucket_insert_block() <int bucket_insert_block (struct bucket *b, const struct memory_block *m) at libpmemobj/bucket.c:161>:
                                            VALGRIND_DO_MAKE_MEM_NOACCESS()
                                            VALGRIND_ANNOTATE_NEW_MEMORY()
                                    util_mutex_unlock()
                                heap_bucket_release() <void heap_bucket_release (struct bucket *b) at libpmemobj/heap.c:498>:
                                    bucket_release() <void bucket_release (struct bucket *b) at libpmemobj/bucket.c:127>:
                                        util_mutex_unlock()
                                VEC_DELETE()
                        heap_populate_bucket() <int heap_populate_bucket (struct palloc_heap *heap, struct bucket *bucket) at libpmemobj/heap.c:850>:
                            util_atomic_store_explicit32()
                            ZID_TO_ZONE()
                            VALGRIND_ADD_TO_GLOBAL_TX_IGNORE()
                            heap_zone_init() <void heap_zone_init (struct palloc_heap *heap, uint32_t zone_id, uint32_t first_chunk_id) at libpmemobj/heap.c:559>:
                                ZID_TO_ZONE()
                                zone_calc_size_idx() <uint32_t zone_calc_size_idx (uint32_t zone_id, unsigned max_zone, size_t heap_size) at libpmemobj/heap.c:533>:
                                    ASSERT()
                                ASSERT()
                                memblock_huge_init() <struct memory_block memblock_huge_init (struct palloc_heap *heap, uint32_t chunk_id, uint32_t zone_id, uint32_t size_idx) at libpmemobj/memblock.c:1329>:
                                    heap_get_chunk_hdr()
                                    VALGRIND_DO_MAKE_MEM_UNDEFINED()
                                    VALGRIND_ANNOTATE_NEW_MEMORY()
                                    chunk_get_chunk_hdr_value() <uint64_t chunk_get_chunk_hdr_value (uint16_t type, uint16_t flags, uint32_t size_idx) at libpmemobj/memblock.c:604>:
                                        COMPILE_ERROR_ON()
                                        memcpy()
                                    util_atomic_store_explicit64()
                                    pmemops_persist()
                                    huge_write_footer() <void huge_write_footer (struct chunk_header *hdr, uint32_t size_idx) at libpmemobj/memblock.c:1166>:
                                        VALGRIND_DO_MAKE_MEM_UNDEFINED()
                                        VALGRIND_SET_CLEAN()
                                    memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                        memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                            heap_get_chunk_hdr()
                                        memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                            heap_get_chunk_hdr()
                                            FATAL()
                                pmemops_persist()
                            heap_reclaim_zone_garbage() <void heap_reclaim_zone_garbage (struct palloc_heap *heap, struct bucket *bucket, uint32_t zone_id) at libpmemobj/heap.c:775>:
                                ZID_TO_ZONE()
                                ASSERT()
                                memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                    memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                        heap_get_chunk_hdr()
                                    memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                        heap_get_chunk_hdr()
                                        FATAL()
                                heap_reclaim_run() <int heap_reclaim_run (struct palloc_heap *heap, struct memory_block *m, int startup) at libpmemobj/heap.c:733>:
                                    heap_get_chunk_run()
                                    heap_get_chunk_hdr()
                                    alloc_class_by_run() <struct alloc_class *alloc_class_by_run (struct alloc_class_collection *ac, size_t unit_size, uint16_t flags, uint32_t size_idx) at libpmemobj/alloc_class.c:594>:
                                        SIZE_TO_CLASS_MAP_INDEX()
                                        ASSERT()
                                        critnib_get() <void *critnib_get (struct critnib *c, uint64_t key) at libpmemobj/critnib.c:515>:
                                            load() <void load (void *src, void *dst) at libpmemobj/critnib.c:130>:
                                                util_atomic_load_explicit64()
                                            is_leaf() <inline bool is_leaf (struct critnib_node *n) at libpmemobj/critnib.c:150>:
                                            slice_index() <inline unsigned slice_index (uint64_t key, sh_t shift) at libpmemobj/critnib.c:178>:
                                            to_leaf() <inline struct critnib_leaf *to_leaf (struct critnib_node *n) at libpmemobj/critnib.c:159>:
                                        RUN_CLASS_KEY_PACK()
                                    recycler_element_new() <struct recycler_element recycler_element_new (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/recycler.c:122>:
                                        SUPPRESS_UNUSED()
                                        util_mutex_lock()
                                        util_mutex_unlock()
                                    ASSERTeq()
                                    STATS_INC()
                                    heap_get_recycler() <struct recycler *heap_get_recycler (struct palloc_heap *heap, size_t id, size_t nallocs) at libpmemobj/heap.c:106> (R):
                                        util_atomic_load_explicit64()
                                        recycler_new() <struct recycler *recycler_new (struct palloc_heap *heap, size_t nallocs, size_t *peak_arenas) at libpmemobj/recycler.c:74>:
                                            Malloc()
                                            ravl_new_sized() <struct ravl *ravl_new_sized (ravl_compare *compare, size_t data_size) at core/ravl.c:45>:
                                                Malloc()
                                                ERR()
                                            recycler_element_cmp() <int recycler_element_cmp (const void *lhs, const void *rhs) at libpmemobj/recycler.c:23>:
                                            memset()
                                            VEC_INIT()
                                            util_mutex_init()
                                            Free() <Free_func Free at core/alloc.c:91>
                                        util_bool_compare_and_swap64()
                                        recycler_delete() <void recycler_delete (struct recycler *r) at libpmemobj/recycler.c:107>:
                                            VEC_DELETE()
                                            util_mutex_destroy()
                                            ravl_delete() <void ravl_delete (struct ravl *ravl) at core/ravl.c:112>:
                                                ravl_delete_cb() <void ravl_delete_cb (struct ravl *ravl, ravl_cb cb, void *arg) at core/ravl.c:102>:
                                                    ravl_foreach_node() <void ravl_foreach_node (struct ravl_node *n, ravl_cb cb, void *arg, int free_node) at core/ravl.c:74> (R):
                                                        ravl_foreach_node() <void ravl_foreach_node (struct ravl_node *n, ravl_cb cb, void *arg, int free_node) at core/ravl.c:74> (recursive: see 13711)
                                                        Free() <Free_func Free at core/alloc.c:91>
                                                    Free() <Free_func Free at core/alloc.c:91>
                                            Free() <Free_func Free at core/alloc.c:91>
                                        heap_get_recycler() <struct recycler *heap_get_recycler (struct palloc_heap *heap, size_t id, size_t nallocs) at libpmemobj/heap.c:106> (recursive: see 13693)
                                    recycler_put() <int recycler_put (struct recycler *r, struct recycler_element element) at libpmemobj/recycler.c:154>:
                                        util_mutex_lock()
                                        ravl_emplace_copy() <int ravl_emplace_copy (struct ravl *ravl, const void *data) at core/ravl.c:384>:
                                            ravl_emplace() <int ravl_emplace (struct ravl *ravl, ravl_constr constr, const void *arg) at core/ravl.c:393>:
                                                LOG()
                                                ravl_new_node() <struct ravl_node *ravl_new_node (struct ravl *ravl, ravl_constr constr, const void *arg) at core/ravl.c:161>:
                                                    Malloc()
                                                    ERR()
                                                    ravl_node_insert_constructor() <void ravl_node_insert_constructor (void *data, size_t data_size, const void *arg) at core/ravl.c:139>:
                                                        SUPPRESS_UNUSED()
                                                        memcpy()
                                                ravl_data() <void *ravl_data (struct ravl_node *node) at core/ravl.c:571>:
                                                    memcpy()
                                                ravl_balance() <void ravl_balance (struct ravl *ravl, struct ravl_node *n) at core/ravl.c:337>:
                                                    ravl_node_is() <int ravl_node_is (struct ravl_node *n, int i, int j) at core/ravl.c:306>:
                                                        ravl_node_is_i_j() <int ravl_node_is_i_j (struct ravl_node *n, int i, int j) at core/ravl.c:296>:
                                                            ravl_node_rank_difference_parent() <int ravl_node_rank_difference_parent (struct ravl_node *p, struct ravl_node *n) at core/ravl.c:275>:
                                                                ravl_node_rank() <int ravl_node_rank (struct ravl_node *n) at core/ravl.c:261>:
                                                    ravl_node_promote() <void ravl_node_promote (struct ravl_node *n) at core/ravl.c:315>
                                                    ravl_node_sibling() <struct ravl_node *ravl_node_sibling (struct ravl_node *n) at core/ravl.c:209>:
                                                        ravl_node_slot_type() <enum ravl_slot_type ravl_node_slot_type (struct ravl_node *n) at core/ravl.c:196>:
                                                    ravl_node_rank_difference() <int ravl_node_rank_difference (struct ravl_node *n) at core/ravl.c:287>:
                                                        ravl_node_rank_difference_parent() <int ravl_node_rank_difference_parent (struct ravl_node *p, struct ravl_node *n) at core/ravl.c:275>:
                                                            ravl_node_rank() <int ravl_node_rank (struct ravl_node *n) at core/ravl.c:261>:
                                                    ravl_node_rank_difference_parent() <int ravl_node_rank_difference_parent (struct ravl_node *p, struct ravl_node *n) at core/ravl.c:275>:
                                                        ravl_node_rank() <int ravl_node_rank (struct ravl_node *n) at core/ravl.c:261>:
                                                    ravl_slot_opposite() <enum ravl_slot_type ravl_slot_opposite (enum ravl_slot_type t) at core/ravl.c:184>:
                                                        ASSERTne()
                                                    ravl_node_slot_type() <enum ravl_slot_type ravl_node_slot_type (struct ravl_node *n) at core/ravl.c:196>:
                                                    ravl_rotate() <void ravl_rotate (struct ravl *ravl, struct ravl_node *n) at core/ravl.c:237>:
                                                        ASSERTne()
                                                        ravl_node_ref() <struct ravl_node **ravl_node_ref (struct ravl *ravl, struct ravl_node *n) at core/ravl.c:223>:
                                                            ravl_node_slot_type() <enum ravl_slot_type ravl_node_slot_type (struct ravl_node *n) at core/ravl.c:196>:
                                                        ravl_node_slot_type() <enum ravl_slot_type ravl_node_slot_type (struct ravl_node *n) at core/ravl.c:196>:
                                                        ravl_slot_opposite() <enum ravl_slot_type ravl_slot_opposite (enum ravl_slot_type t) at core/ravl.c:184>:
                                                            ASSERTne()
                                                    ravl_node_demote() <void ravl_node_demote (struct ravl_node *n) at core/ravl.c:324>:
                                                        ASSERT()
                                                Free() <Free_func Free at core/alloc.c:91>
                                            ravl_node_copy_constructor() <void ravl_node_copy_constructor (void *data, size_t data_size, const void *arg) at core/ravl.c:152>:
                                                memcpy()
                                        util_mutex_unlock()
                                    ERR()
                                heap_run_into_free_chunk() <void heap_run_into_free_chunk (struct palloc_heap *heap, struct bucket *bucket, struct memory_block *m) at libpmemobj/heap.c:697>:
                                    heap_get_chunk_hdr()
                                    STATS_SUB()
                                    util_mutex_lock()
                                    memblock_huge_init() <struct memory_block memblock_huge_init (struct palloc_heap *heap, uint32_t chunk_id, uint32_t zone_id, uint32_t size_idx) at libpmemobj/memblock.c:1329>:
                                        heap_get_chunk_hdr()
                                        VALGRIND_DO_MAKE_MEM_UNDEFINED()
                                        VALGRIND_ANNOTATE_NEW_MEMORY()
                                        chunk_get_chunk_hdr_value() <uint64_t chunk_get_chunk_hdr_value (uint16_t type, uint16_t flags, uint32_t size_idx) at libpmemobj/memblock.c:604>:
                                            COMPILE_ERROR_ON()
                                            memcpy()
                                        util_atomic_store_explicit64()
                                        pmemops_persist()
                                        huge_write_footer() <void huge_write_footer (struct chunk_header *hdr, uint32_t size_idx) at libpmemobj/memblock.c:1166>:
                                            VALGRIND_DO_MAKE_MEM_UNDEFINED()
                                            VALGRIND_SET_CLEAN()
                                        memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                            memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                                heap_get_chunk_hdr()
                                            memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                                heap_get_chunk_hdr()
                                                FATAL()
                                    heap_free_chunk_reuse() <int heap_free_chunk_reuse (struct palloc_heap *heap, struct bucket *bucket, struct memory_block *m) at libpmemobj/heap.c:674>:
                                        heap_coalesce_huge() <struct memory_block heap_coalesce_huge (struct palloc_heap *heap, struct bucket *b, const struct memory_block *m) at libpmemobj/heap.c:650>:
                                            heap_get_adjacent_free_block() <int heap_get_adjacent_free_block (struct palloc_heap *heap, const struct memory_block *in, struct memory_block *out, int prev) at libpmemobj/heap.c:582>:
                                                ZID_TO_ZONE()
                                                memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                                    memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                                        heap_get_chunk_hdr()
                                                    memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                                        heap_get_chunk_hdr()
                                                        FATAL()
                                            bucket_remove_block() <int bucket_remove_block (struct bucket *b, const struct memory_block *m) at libpmemobj/bucket.c:178>
                                            heap_coalesce() <struct memory_block heap_coalesce (struct palloc_heap *heap, const struct memory_block *blocks[], int n) at libpmemobj/heap.c:621>:
                                                ASSERTne()
                                                memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                                    memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                                        heap_get_chunk_hdr()
                                                    memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                                        heap_get_chunk_hdr()
                                                        FATAL()
                                        bucket_insert_block() <int bucket_insert_block (struct bucket *b, const struct memory_block *m) at libpmemobj/bucket.c:161>:
                                            VALGRIND_DO_MAKE_MEM_NOACCESS()
                                            VALGRIND_ANNOTATE_NEW_MEMORY()
                                    util_mutex_unlock()
                                heap_free_chunk_reuse() <int heap_free_chunk_reuse (struct palloc_heap *heap, struct bucket *bucket, struct memory_block *m) at libpmemobj/heap.c:674>:
                                    heap_coalesce_huge() <struct memory_block heap_coalesce_huge (struct palloc_heap *heap, struct bucket *b, const struct memory_block *m) at libpmemobj/heap.c:650>:
                                        heap_get_adjacent_free_block() <int heap_get_adjacent_free_block (struct palloc_heap *heap, const struct memory_block *in, struct memory_block *out, int prev) at libpmemobj/heap.c:582>:
                                            ZID_TO_ZONE()
                                            memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                                memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                                    heap_get_chunk_hdr()
                                                memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                                    heap_get_chunk_hdr()
                                                    FATAL()
                                        bucket_remove_block() <int bucket_remove_block (struct bucket *b, const struct memory_block *m) at libpmemobj/bucket.c:178>
                                        heap_coalesce() <struct memory_block heap_coalesce (struct palloc_heap *heap, const struct memory_block *blocks[], int n) at libpmemobj/heap.c:621>:
                                            ASSERTne()
                                            memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                                memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                                    heap_get_chunk_hdr()
                                                memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                                    heap_get_chunk_hdr()
                                                    FATAL()
                                    bucket_insert_block() <int bucket_insert_block (struct bucket *b, const struct memory_block *m) at libpmemobj/bucket.c:161>:
                                        VALGRIND_DO_MAKE_MEM_NOACCESS()
                                        VALGRIND_ANNOTATE_NEW_MEMORY()
                        heap_extend() <int heap_extend (struct palloc_heap *heap, struct bucket *b, size_t size) at libpmemobj/heap.c:1515>:
                            util_pool_extend() <void *util_pool_extend (struct pool_set *set, size_t *size, size_t minpartsize) at common/set.c:2231>:
                                LOG()
                                ERR()
                                util_poolset_append_new_part() <int util_poolset_append_new_part (struct pool_set *set, size_t size) at common/set.c:2174>:
                                    LOG()
                                    VEC_SIZE()
                                    VEC_GET()
                                    strlen()
                                    Malloc()
                                    ERR()
                                    snprintf()
                                    util_replica_add_part() <int util_replica_add_part (struct pool_replica **repp, const char *path, size_t filesize) at common/set.c:708>:
                                        LOG()
                                        util_replica_add_part_by_idx() <int util_replica_add_part_by_idx (struct pool_replica **repp, const char *path, size_t filesize, unsigned p) at common/set.c:662>:
                                            LOG()
                                            util_replica_reserve() <int util_replica_reserve (struct pool_replica **repp, unsigned n) at common/set.c:633>:
                                                LOG()
                                                Realloc()
                                                ERR()
                                                memset()
                                            ASSERTne()
                                            util_file_get_type() <enum file_type util_file_get_type (const char *path) at common/file.c:106>:
                                                LOG()
                                                ERR()
                                                util_file_exists() <int util_file_exists (const char *path) at common/file.c:32>:
                                                    LOG()
                                                    os_access() <int os_access (const char *pathname, int mode) at core/os_posix.c:97>:
                                                        access()
                                                    ERR()
                                                os_stat() <int os_stat (const char *pathname, os_stat_t *buf) at core/os_posix.c:79>:
                                                    stat()
                                                util_stat_get_type() <enum file_type util_stat_get_type (const os_stat_t *st) at common/file.c:62>:
                                                    pmem2_get_type_from_stat() <int pmem2_get_type_from_stat (const os_stat_t *st, enum pmem2_file_type *type) at libpmem2/pmem2_utils_linux.c:23>:
                                                        S_ISREG()
                                                        S_ISDIR()
                                                        S_ISCHR()
                                                        ERR()
                                                        util_snprintf() <int util_snprintf (char *str, size_t size, const char *format, ...) at core/util.c:434>:
                                                            va_start()
                                                            vsnprintf()
                                                            va_end()
                                                        os_major()
                                                        os_minor()
                                                        ASSERTinfo()
                                                        LOG()
                                                        realpath()
                                                        strrchr()
                                                        strcmp()
                                                    pmem2_err_to_errno() <int pmem2_err_to_errno (int err) at libpmem2/pmem2_utils.c:67>:
                                                        FATAL()
                                                    ASSERTinfo()
                                            util_file_device_dax_alignment() <size_t util_file_device_dax_alignment (const char *path) at common/file_posix.c:139>:
                                                LOG()
                                                device_dax_alignment() <size_t device_dax_alignment (const char *path) at common/file_posix.c:105>:
                                                    LOG()
                                                    os_open() <int os_open (const char *pathname, int flags, ...) at core/os_posix.c:29>:
                                                        va_start()
                                                        va_arg()
                                                        va_end()
                                                        open()
                                                    pmem2_source_from_fd() <int pmem2_source_from_fd (struct pmem2_source **src, int fd) at libpmem2/source_posix.c:19>:
                                                        PMEM2_ERR_CLR()
                                                        fcntl()
                                                        ERR()
                                                        os_fstat()
                                                        pmem2_get_type_from_stat() <int pmem2_get_type_from_stat (const os_stat_t *st, enum pmem2_file_type *type) at libpmem2/pmem2_utils_linux.c:23>:
                                                            S_ISREG()
                                                            S_ISDIR()
                                                            S_ISCHR()
                                                            ERR()
                                                            util_snprintf() <int util_snprintf (char *str, size_t size, const char *format, ...) at core/util.c:434>:
                                                                va_start()
                                                                vsnprintf()
                                                                va_end()
                                                            os_major()
                                                            os_minor()
                                                            ASSERTinfo()
                                                            LOG()
                                                            realpath()
                                                            strrchr()
                                                            strcmp()
                                                        pmem2_malloc() <void *pmem2_malloc (size_t size, int *err) at libpmem2/pmem2_utils.c:19>:
                                                            Malloc()
                                                            ERR()
                                                        ASSERTne()
                                                    pmem2_device_dax_alignment() <int pmem2_device_dax_alignment (const struct pmem2_source *src, size_t *alignment) at libpmem2/pmem2_utils_ndctl.c:18>:
                                                        ndctl_new()
                                                        ERR()
                                                        pmem2_region_namespace() <int pmem2_region_namespace (struct ndctl_ctx *ctx, const struct pmem2_source *src, struct ndctl_region **pregion, struct ndctl_namespace **pndns) at libpmem2/region_namespace_ndctl.c:131>:
                                                            LOG()
                                                            ERR()
                                                            FOREACH_BUS_REGION_NAMESPACE()
                                                            ndctl_namespace_get_dax()
                                                            ASSERTeq()
                                                            ndctl_dax_get_daxctl_region()
                                                            daxctl_dev_foreach()
                                                            daxctl_dev_get_devname()
                                                            ndctl_match_devdax() <int ndctl_match_devdax (dev_t st_rdev, const char *devname) at libpmem2/region_namespace_ndctl.c:26>:
                                                                LOG()
                                                                stat()
                                                                util_snprintf() <int util_snprintf (char *str, size_t size, const char *format, ...) at core/util.c:434>:
                                                                    va_start()
                                                                    vsnprintf()
                                                                    va_end()
                                                                ERR()
                                                                os_stat() <int os_stat (const char *pathname, os_stat_t *buf) at core/os_posix.c:79>:
                                                                    stat()
                                                            ndctl_namespace_get_btt()
                                                            ndctl_btt_get_block_device()
                                                            ndctl_namespace_get_pfn()
                                                            ndctl_pfn_get_block_device()
                                                            ndctl_namespace_get_block_device()
                                                            ndctl_match_fsdax() <int ndctl_match_fsdax (dev_t st_dev, const char *devname) at libpmem2/region_namespace_ndctl.c:64>:
                                                                LOG()
                                                                util_snprintf() <int util_snprintf (char *str, size_t size, const char *format, ...) at core/util.c:434>:
                                                                    va_start()
                                                                    vsnprintf()
                                                                    va_end()
                                                                ERR()
                                                                major()
                                                                minor()
                                                                os_open() <int os_open (const char *pathname, int flags, ...) at core/os_posix.c:29>:
                                                                    va_start()
                                                                    va_arg()
                                                                    va_end()
                                                                    open()
                                                                read()
                                                                os_close()
                                                                strcmp()
                                                        LOG()
                                                        ndctl_namespace_get_dax()
                                                        ndctl_dax_get_align()
                                                        ndctl_unref()
                                                    pmem2_source_delete() <int pmem2_source_delete (struct pmem2_source **src) at libpmem2/source.c:30>:
                                                        Free() <Free_func Free at core/alloc.c:91>
                                                    os_close()
                                    FATAL()
                                    util_poolset_set_size() <void util_poolset_set_size (struct pool_set *set) at common/set.c:949>:
                                        LOG()
                                    Free() <Free_func Free at core/alloc.c:91>
                                util_part_open() <int util_part_open (struct pool_set_part *part, size_t minsize, int create_part) at common/set.c:1459>:
                                    LOG()
                                    util_file_exists() <int util_file_exists (const char *path) at common/file.c:32>:
                                        LOG()
                                        os_access() <int os_access (const char *pathname, int mode) at core/os_posix.c:97>:
                                            access()
                                        ERR()
                                    util_file_create() <int util_file_create (const char *path, size_t size, size_t minsize) at common/file.c:398>:
                                        LOG()
                                        ASSERTne()
                                        ERR()
                                        os_open() <int os_open (const char *pathname, int flags, ...) at core/os_posix.c:29>:
                                            va_start()
                                            va_arg()
                                            va_end()
                                            open()
                                        os_posix_fallocate() <int os_posix_fallocate (int fd, os_off_t offset, off_t len) at core/os_posix.c:142>:
                                            posix_fallocate()
                                        os_flock() <int os_flock (int fd, int operation) at core/os_posix.c:215>:
                                            flock()
                                        os_close()
                                        os_unlink() <int os_unlink (const char *pathname) at core/os_posix.c:88>:
                                            unlink()
                                    util_file_open() <int util_file_open (const char *path, size_t *size, size_t minsize, int flags) at common/file.c:456>:
                                        LOG()
                                        os_open() <int os_open (const char *pathname, int flags, ...) at core/os_posix.c:29>:
                                            va_start()
                                            va_arg()
                                            va_end()
                                            open()
                                        ERR()
                                        os_flock() <int os_flock (int fd, int operation) at core/os_posix.c:215>:
                                            flock()
                                        os_close()
                                        ASSERTeq()
                                        util_fd_get_size() <ssize_t util_fd_get_size (int fd) at common/file.c:157>:
                                            LOG()
                                            pmem2_source_from_fd() <int pmem2_source_from_fd (struct pmem2_source **src, int fd) at libpmem2/source_posix.c:19>:
                                                PMEM2_ERR_CLR()
                                                fcntl()
                                                ERR()
                                                os_fstat()
                                                pmem2_get_type_from_stat() <int pmem2_get_type_from_stat (const os_stat_t *st, enum pmem2_file_type *type) at libpmem2/pmem2_utils_linux.c:23>:
                                                    S_ISREG()
                                                    S_ISDIR()
                                                    S_ISCHR()
                                                    ERR()
                                                    util_snprintf() <int util_snprintf (char *str, size_t size, const char *format, ...) at core/util.c:434>:
                                                        va_start()
                                                        vsnprintf()
                                                        va_end()
                                                    os_major()
                                                    os_minor()
                                                    ASSERTinfo()
                                                    LOG()
                                                    realpath()
                                                    strrchr()
                                                    strcmp()
                                                pmem2_malloc() <void *pmem2_malloc (size_t size, int *err) at libpmem2/pmem2_utils.c:19>:
                                                    Malloc()
                                                    ERR()
                                                ASSERTne()
                                            pmem2_err_to_errno() <int pmem2_err_to_errno (int err) at libpmem2/pmem2_utils.c:67>:
                                                FATAL()
                                            pmem2_source_size() <int pmem2_source_size (const struct pmem2_source *src, size_t *size) at libpmem2/source_posix.c:90>:
                                                LOG()
                                                PMEM2_ERR_CLR()
                                                ASSERT()
                                                os_fstat()
                                                ERR()
                                                pmem2_device_dax_size() <int pmem2_device_dax_size (const struct pmem2_source *src, size_t *size) at libpmem2/pmem2_utils_ndctl.c:58>:
                                                    ndctl_new()
                                                    ERR()
                                                    pmem2_region_namespace() <int pmem2_region_namespace (struct ndctl_ctx *ctx, const struct pmem2_source *src, struct ndctl_region **pregion, struct ndctl_namespace **pndns) at libpmem2/region_namespace_ndctl.c:131>:
                                                        LOG()
                                                        ERR()
                                                        FOREACH_BUS_REGION_NAMESPACE()
                                                        ndctl_namespace_get_dax()
                                                        ASSERTeq()
                                                        ndctl_dax_get_daxctl_region()
                                                        daxctl_dev_foreach()
                                                        daxctl_dev_get_devname()
                                                        ndctl_match_devdax() <int ndctl_match_devdax (dev_t st_rdev, const char *devname) at libpmem2/region_namespace_ndctl.c:26>:
                                                            LOG()
                                                            stat()
                                                            util_snprintf() <int util_snprintf (char *str, size_t size, const char *format, ...) at core/util.c:434>:
                                                                va_start()
                                                                vsnprintf()
                                                                va_end()
                                                            ERR()
                                                            os_stat() <int os_stat (const char *pathname, os_stat_t *buf) at core/os_posix.c:79>:
                                                                stat()
                                                        ndctl_namespace_get_btt()
                                                        ndctl_btt_get_block_device()
                                                        ndctl_namespace_get_pfn()
                                                        ndctl_pfn_get_block_device()
                                                        ndctl_namespace_get_block_device()
                                                        ndctl_match_fsdax() <int ndctl_match_fsdax (dev_t st_dev, const char *devname) at libpmem2/region_namespace_ndctl.c:64>:
                                                            LOG()
                                                            util_snprintf() <int util_snprintf (char *str, size_t size, const char *format, ...) at core/util.c:434>:
                                                                va_start()
                                                                vsnprintf()
                                                                va_end()
                                                            ERR()
                                                            major()
                                                            minor()
                                                            os_open() <int os_open (const char *pathname, int flags, ...) at core/os_posix.c:29>:
                                                                va_start()
                                                                va_arg()
                                                                va_end()
                                                                open()
                                                            read()
                                                            os_close()
                                                            strcmp()
                                                    LOG()
                                                    ndctl_namespace_get_dax()
                                                    ndctl_dax_get_size()
                                                    ndctl_unref()
                                                FATAL()
                                            pmem2_source_delete() <int pmem2_source_delete (struct pmem2_source **src) at libpmem2/source.c:30>:
                                                Free() <Free_func Free at core/alloc.c:91>
                                            ERR()
                                    os_posix_fallocate() <int os_posix_fallocate (int fd, os_off_t offset, off_t len) at core/os_posix.c:142>:
                                        posix_fallocate()
                                    ERR()
                                util_map_part() <int util_map_part (struct pool_set_part *part, void *addr, size_t size, size_t offset, int flags, int rdonly) at common/set.c:229>:
                                    LOG()
                                    ASSERTeq()
                                    ASSERT()
                                    roundup()
                                    util_map_sync() <void *util_map_sync (void *addr, size_t len, int proto, int flags, int fd, os_off_t offset, int *map_sync) at common/mmap_posix.c:159>:
                                        LOG()
                                        mmap()
                                    ERR()
                                    munmap()
                                    VALGRIND_REGISTER_PMEM_MAPPING()
                                    VALGRIND_REGISTER_PMEM_FILE()
                                util_poolset_chmod() <int util_poolset_chmod (struct pool_set *set, mode_t mode) at common/set.c:404>:
                                    LOG()
                                    os_fstat()
                                    ERR()
                                    os_chmod() <int os_chmod (const char *pathname, mode_t mode) at core/os_posix.c:124>:
                                        chmod()
                                util_poolset_fdclose() <void util_poolset_fdclose (struct pool_set *set) at common/set.c:457>:
                                    util_poolset_fdclose_always() <void util_poolset_fdclose_always (struct pool_set *set) at common/set.c:445>:
                                        LOG()
                                        util_replica_fdclose() <void util_replica_fdclose (struct pool_replica *rep) at common/set.c:3232>:
                                            util_part_fdclose() <void util_part_fdclose (struct pool_set_part *part) at common/set.c:1517>:
                                                LOG()
                                                os_close()
                                os_close()
                                os_unlink() <int os_unlink (const char *pathname) at core/os_posix.c:88>:
                                    unlink()
                                Free() <Free_func Free at core/alloc.c:91>
                                util_poolset_set_size() <void util_poolset_set_size (struct pool_set *set) at common/set.c:949>:
                                    LOG()
                            pmemops_persist()
                            heap_max_zone() <unsigned heap_max_zone (size_t size) at libpmemobj/heap.c:516>:
                            ZID_TO_ZONE()
                            heap_zone_init() <void heap_zone_init (struct palloc_heap *heap, uint32_t zone_id, uint32_t first_chunk_id) at libpmemobj/heap.c:559>:
                                ZID_TO_ZONE()
                                zone_calc_size_idx() <uint32_t zone_calc_size_idx (uint32_t zone_id, unsigned max_zone, size_t heap_size) at libpmemobj/heap.c:533>:
                                    ASSERT()
                                ASSERT()
                                memblock_huge_init() <struct memory_block memblock_huge_init (struct palloc_heap *heap, uint32_t chunk_id, uint32_t zone_id, uint32_t size_idx) at libpmemobj/memblock.c:1329>:
                                    heap_get_chunk_hdr()
                                    VALGRIND_DO_MAKE_MEM_UNDEFINED()
                                    VALGRIND_ANNOTATE_NEW_MEMORY()
                                    chunk_get_chunk_hdr_value() <uint64_t chunk_get_chunk_hdr_value (uint16_t type, uint16_t flags, uint32_t size_idx) at libpmemobj/memblock.c:604>:
                                        COMPILE_ERROR_ON()
                                        memcpy()
                                    util_atomic_store_explicit64()
                                    pmemops_persist()
                                    huge_write_footer() <void huge_write_footer (struct chunk_header *hdr, uint32_t size_idx) at libpmemobj/memblock.c:1166>:
                                        VALGRIND_DO_MAKE_MEM_UNDEFINED()
                                        VALGRIND_SET_CLEAN()
                                    memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                        memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                            heap_get_chunk_hdr()
                                        memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                            heap_get_chunk_hdr()
                                            FATAL()
                                pmemops_persist()
                            memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                    heap_get_chunk_hdr()
                                memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                    heap_get_chunk_hdr()
                                    FATAL()
                            heap_free_chunk_reuse() <int heap_free_chunk_reuse (struct palloc_heap *heap, struct bucket *bucket, struct memory_block *m) at libpmemobj/heap.c:674>:
                                heap_coalesce_huge() <struct memory_block heap_coalesce_huge (struct palloc_heap *heap, struct bucket *b, const struct memory_block *m) at libpmemobj/heap.c:650>:
                                    heap_get_adjacent_free_block() <int heap_get_adjacent_free_block (struct palloc_heap *heap, const struct memory_block *in, struct memory_block *out, int prev) at libpmemobj/heap.c:582>:
                                        ZID_TO_ZONE()
                                        memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                            memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                                heap_get_chunk_hdr()
                                            memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                                heap_get_chunk_hdr()
                                                FATAL()
                                    bucket_remove_block() <int bucket_remove_block (struct bucket *b, const struct memory_block *m) at libpmemobj/bucket.c:178>
                                    heap_coalesce() <struct memory_block heap_coalesce (struct palloc_heap *heap, const struct memory_block *blocks[], int n) at libpmemobj/heap.c:621>:
                                        ASSERTne()
                                        memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                            memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                                heap_get_chunk_hdr()
                                            memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                                heap_get_chunk_hdr()
                                                FATAL()
                                bucket_insert_block() <int bucket_insert_block (struct bucket *b, const struct memory_block *m) at libpmemobj/bucket.c:161>:
                                    VALGRIND_DO_MAKE_MEM_NOACCESS()
                                    VALGRIND_ANNOTATE_NEW_MEMORY()
                    heap_ensure_run_bucket_filled() <int heap_ensure_run_bucket_filled (struct palloc_heap *heap, struct bucket *b, uint32_t units) at libpmemobj/heap.c:1083> (R):
                        bucket_alloc_class() <struct alloc_class *bucket_alloc_class (struct bucket *b) at libpmemobj/bucket.c:152>
                        ASSERTeq()
                        heap_detach_and_try_discard_run() <int heap_detach_and_try_discard_run (struct palloc_heap *heap, struct bucket *b) at libpmemobj/heap.c:992>:
                            bucket_detach_run() <int bucket_detach_run (struct bucket *b, struct memory_block *m_out, int *empty) at libpmemobj/bucket.c:231>:
                                util_fetch_and_sub64()
                                VALGRIND_ANNOTATE_HAPPENS_AFTER()
                                VALGRIND_ANNOTATE_HAPPENS_BEFORE()
                                Zalloc() <void *Zalloc (size_t sz) at core/alloc.c:98>:
                                    Malloc()
                                    memset()
                            heap_discard_run() <void heap_discard_run (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/heap.c:974>:
                                heap_reclaim_run() <int heap_reclaim_run (struct palloc_heap *heap, struct memory_block *m, int startup) at libpmemobj/heap.c:733>:
                                    heap_get_chunk_run()
                                    heap_get_chunk_hdr()
                                    alloc_class_by_run() <struct alloc_class *alloc_class_by_run (struct alloc_class_collection *ac, size_t unit_size, uint16_t flags, uint32_t size_idx) at libpmemobj/alloc_class.c:594>:
                                        SIZE_TO_CLASS_MAP_INDEX()
                                        ASSERT()
                                        critnib_get() <void *critnib_get (struct critnib *c, uint64_t key) at libpmemobj/critnib.c:515>:
                                            load() <void load (void *src, void *dst) at libpmemobj/critnib.c:130>:
                                                util_atomic_load_explicit64()
                                            is_leaf() <inline bool is_leaf (struct critnib_node *n) at libpmemobj/critnib.c:150>:
                                            slice_index() <inline unsigned slice_index (uint64_t key, sh_t shift) at libpmemobj/critnib.c:178>:
                                            to_leaf() <inline struct critnib_leaf *to_leaf (struct critnib_node *n) at libpmemobj/critnib.c:159>:
                                        RUN_CLASS_KEY_PACK()
                                    recycler_element_new() <struct recycler_element recycler_element_new (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/recycler.c:122>:
                                        SUPPRESS_UNUSED()
                                        util_mutex_lock()
                                        util_mutex_unlock()
                                    ASSERTeq()
                                    STATS_INC()
                                    heap_get_recycler() <struct recycler *heap_get_recycler (struct palloc_heap *heap, size_t id, size_t nallocs) at libpmemobj/heap.c:106> (R):
                                        util_atomic_load_explicit64()
                                        recycler_new() <struct recycler *recycler_new (struct palloc_heap *heap, size_t nallocs, size_t *peak_arenas) at libpmemobj/recycler.c:74>:
                                            Malloc()
                                            ravl_new_sized() <struct ravl *ravl_new_sized (ravl_compare *compare, size_t data_size) at core/ravl.c:45>:
                                                Malloc()
                                                ERR()
                                            recycler_element_cmp() <int recycler_element_cmp (const void *lhs, const void *rhs) at libpmemobj/recycler.c:23>:
                                            memset()
                                            VEC_INIT()
                                            util_mutex_init()
                                            Free() <Free_func Free at core/alloc.c:91>
                                        util_bool_compare_and_swap64()
                                        recycler_delete() <void recycler_delete (struct recycler *r) at libpmemobj/recycler.c:107>:
                                            VEC_DELETE()
                                            util_mutex_destroy()
                                            ravl_delete() <void ravl_delete (struct ravl *ravl) at core/ravl.c:112>:
                                                ravl_delete_cb() <void ravl_delete_cb (struct ravl *ravl, ravl_cb cb, void *arg) at core/ravl.c:102>:
                                                    ravl_foreach_node() <void ravl_foreach_node (struct ravl_node *n, ravl_cb cb, void *arg, int free_node) at core/ravl.c:74> (R):
                                                        ravl_foreach_node() <void ravl_foreach_node (struct ravl_node *n, ravl_cb cb, void *arg, int free_node) at core/ravl.c:74> (recursive: see 14228)
                                                        Free() <Free_func Free at core/alloc.c:91>
                                                    Free() <Free_func Free at core/alloc.c:91>
                                            Free() <Free_func Free at core/alloc.c:91>
                                        heap_get_recycler() <struct recycler *heap_get_recycler (struct palloc_heap *heap, size_t id, size_t nallocs) at libpmemobj/heap.c:106> (recursive: see 14210)
                                    recycler_put() <int recycler_put (struct recycler *r, struct recycler_element element) at libpmemobj/recycler.c:154>:
                                        util_mutex_lock()
                                        ravl_emplace_copy() <int ravl_emplace_copy (struct ravl *ravl, const void *data) at core/ravl.c:384>:
                                            ravl_emplace() <int ravl_emplace (struct ravl *ravl, ravl_constr constr, const void *arg) at core/ravl.c:393>:
                                                LOG()
                                                ravl_new_node() <struct ravl_node *ravl_new_node (struct ravl *ravl, ravl_constr constr, const void *arg) at core/ravl.c:161>:
                                                    Malloc()
                                                    ERR()
                                                    ravl_node_insert_constructor() <void ravl_node_insert_constructor (void *data, size_t data_size, const void *arg) at core/ravl.c:139>:
                                                        SUPPRESS_UNUSED()
                                                        memcpy()
                                                ravl_data() <void *ravl_data (struct ravl_node *node) at core/ravl.c:571>:
                                                    memcpy()
                                                ravl_balance() <void ravl_balance (struct ravl *ravl, struct ravl_node *n) at core/ravl.c:337>:
                                                    ravl_node_is() <int ravl_node_is (struct ravl_node *n, int i, int j) at core/ravl.c:306>:
                                                        ravl_node_is_i_j() <int ravl_node_is_i_j (struct ravl_node *n, int i, int j) at core/ravl.c:296>:
                                                            ravl_node_rank_difference_parent() <int ravl_node_rank_difference_parent (struct ravl_node *p, struct ravl_node *n) at core/ravl.c:275>:
                                                                ravl_node_rank() <int ravl_node_rank (struct ravl_node *n) at core/ravl.c:261>:
                                                    ravl_node_promote() <void ravl_node_promote (struct ravl_node *n) at core/ravl.c:315>
                                                    ravl_node_sibling() <struct ravl_node *ravl_node_sibling (struct ravl_node *n) at core/ravl.c:209>:
                                                        ravl_node_slot_type() <enum ravl_slot_type ravl_node_slot_type (struct ravl_node *n) at core/ravl.c:196>:
                                                    ravl_node_rank_difference() <int ravl_node_rank_difference (struct ravl_node *n) at core/ravl.c:287>:
                                                        ravl_node_rank_difference_parent() <int ravl_node_rank_difference_parent (struct ravl_node *p, struct ravl_node *n) at core/ravl.c:275>:
                                                            ravl_node_rank() <int ravl_node_rank (struct ravl_node *n) at core/ravl.c:261>:
                                                    ravl_node_rank_difference_parent() <int ravl_node_rank_difference_parent (struct ravl_node *p, struct ravl_node *n) at core/ravl.c:275>:
                                                        ravl_node_rank() <int ravl_node_rank (struct ravl_node *n) at core/ravl.c:261>:
                                                    ravl_slot_opposite() <enum ravl_slot_type ravl_slot_opposite (enum ravl_slot_type t) at core/ravl.c:184>:
                                                        ASSERTne()
                                                    ravl_node_slot_type() <enum ravl_slot_type ravl_node_slot_type (struct ravl_node *n) at core/ravl.c:196>:
                                                    ravl_rotate() <void ravl_rotate (struct ravl *ravl, struct ravl_node *n) at core/ravl.c:237>:
                                                        ASSERTne()
                                                        ravl_node_ref() <struct ravl_node **ravl_node_ref (struct ravl *ravl, struct ravl_node *n) at core/ravl.c:223>:
                                                            ravl_node_slot_type() <enum ravl_slot_type ravl_node_slot_type (struct ravl_node *n) at core/ravl.c:196>:
                                                        ravl_node_slot_type() <enum ravl_slot_type ravl_node_slot_type (struct ravl_node *n) at core/ravl.c:196>:
                                                        ravl_slot_opposite() <enum ravl_slot_type ravl_slot_opposite (enum ravl_slot_type t) at core/ravl.c:184>:
                                                            ASSERTne()
                                                    ravl_node_demote() <void ravl_node_demote (struct ravl_node *n) at core/ravl.c:324>:
                                                        ASSERT()
                                                Free() <Free_func Free at core/alloc.c:91>
                                            ravl_node_copy_constructor() <void ravl_node_copy_constructor (void *data, size_t data_size, const void *arg) at core/ravl.c:152>:
                                                memcpy()
                                        util_mutex_unlock()
                                    ERR()
                                heap_bucket_acquire() <struct bucket *heap_bucket_acquire (struct palloc_heap *heap, uint8_t class_id, uint16_t arena_id) at libpmemobj/heap.c:470>:
                                    out() <void out (const char *fmt, ...) at core/out.c:480>:
                                        va_start()
                                        out_common() <} void out_common (const char *file, int line, const char *func, int level, const char *suffix, const char *fmt, va_list ap) at core/out.c:334>
                                        va_end()
                                    heap_thread_arena() <struct arena *heap_thread_arena (struct palloc_heap *heap) at libpmemobj/heap.c:414>:
                                        os_tls_get() <void *os_tls_get (os_tls_key_t key) at core/os_thread_posix.c:62>:
                                            pthread_getspecific()
                                        heap_thread_arena_assign() <struct arena *heap_thread_arena_assign (struct palloc_heap *heap) at libpmemobj/heap.c:381>:
                                            util_mutex_lock()
                                            ASSERTne()
                                            VEC_SIZE()
                                            VEC_FOREACH()
                                            LOG()
                                            heap_arena_thread_attach() <void heap_arena_thread_attach (struct palloc_heap *heap, struct arena *a) at libpmemobj/heap.c:249>:
                                                ASSERTeq()
                                                os_tls_get() <void *os_tls_get (os_tls_key_t key) at core/os_thread_posix.c:62>:
                                                    pthread_getspecific()
                                                heap_arena_thread_detach() <void heap_arena_thread_detach (struct arena *a) at libpmemobj/heap.c:232>:
                                                    util_fetch_and_sub64()
                                                ASSERTne()
                                                util_fetch_and_add64()
                                                os_tls_set() <int os_tls_set (os_tls_key_t key, const void *value) at core/os_thread_posix.c:53>:
                                                    pthread_setspecific()
                                            util_mutex_unlock()
                                        heap_global_arena_assign() <struct arena *heap_global_arena_assign (struct palloc_heap *heap) at libpmemobj/heap.c:348>:
                                            util_mutex_lock()
                                            ASSERTne()
                                            VEC_SIZE()
                                            VEC_FOREACH()
                                            LOG()
                                            util_mutex_unlock()
                                        ASSERT()
                                        ASSERTne()
                                    ASSERTne()
                                    VEC_ARR()
                                    bucket_acquire() <struct bucket *bucket_acquire (struct bucket_locked *b) at libpmemobj/bucket.c:117>:
                                        util_mutex_lock()
                                heap_run_into_free_chunk() <void heap_run_into_free_chunk (struct palloc_heap *heap, struct bucket *bucket, struct memory_block *m) at libpmemobj/heap.c:697>:
                                    heap_get_chunk_hdr()
                                    STATS_SUB()
                                    util_mutex_lock()
                                    memblock_huge_init() <struct memory_block memblock_huge_init (struct palloc_heap *heap, uint32_t chunk_id, uint32_t zone_id, uint32_t size_idx) at libpmemobj/memblock.c:1329>:
                                        heap_get_chunk_hdr()
                                        VALGRIND_DO_MAKE_MEM_UNDEFINED()
                                        VALGRIND_ANNOTATE_NEW_MEMORY()
                                        chunk_get_chunk_hdr_value() <uint64_t chunk_get_chunk_hdr_value (uint16_t type, uint16_t flags, uint32_t size_idx) at libpmemobj/memblock.c:604>:
                                            COMPILE_ERROR_ON()
                                            memcpy()
                                        util_atomic_store_explicit64()
                                        pmemops_persist()
                                        huge_write_footer() <void huge_write_footer (struct chunk_header *hdr, uint32_t size_idx) at libpmemobj/memblock.c:1166>:
                                            VALGRIND_DO_MAKE_MEM_UNDEFINED()
                                            VALGRIND_SET_CLEAN()
                                        memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                            memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                                heap_get_chunk_hdr()
                                            memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                                heap_get_chunk_hdr()
                                                FATAL()
                                    heap_free_chunk_reuse() <int heap_free_chunk_reuse (struct palloc_heap *heap, struct bucket *bucket, struct memory_block *m) at libpmemobj/heap.c:674>:
                                        heap_coalesce_huge() <struct memory_block heap_coalesce_huge (struct palloc_heap *heap, struct bucket *b, const struct memory_block *m) at libpmemobj/heap.c:650>:
                                            heap_get_adjacent_free_block() <int heap_get_adjacent_free_block (struct palloc_heap *heap, const struct memory_block *in, struct memory_block *out, int prev) at libpmemobj/heap.c:582>:
                                                ZID_TO_ZONE()
                                                memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                                    memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                                        heap_get_chunk_hdr()
                                                    memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                                        heap_get_chunk_hdr()
                                                        FATAL()
                                            bucket_remove_block() <int bucket_remove_block (struct bucket *b, const struct memory_block *m) at libpmemobj/bucket.c:178>
                                            heap_coalesce() <struct memory_block heap_coalesce (struct palloc_heap *heap, const struct memory_block *blocks[], int n) at libpmemobj/heap.c:621>:
                                                ASSERTne()
                                                memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                                    memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                                        heap_get_chunk_hdr()
                                                    memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                                        heap_get_chunk_hdr()
                                                        FATAL()
                                        bucket_insert_block() <int bucket_insert_block (struct bucket *b, const struct memory_block *m) at libpmemobj/bucket.c:161>:
                                            VALGRIND_DO_MAKE_MEM_NOACCESS()
                                            VALGRIND_ANNOTATE_NEW_MEMORY()
                                    util_mutex_unlock()
                                heap_bucket_release() <void heap_bucket_release (struct bucket *b) at libpmemobj/heap.c:498>:
                                    bucket_release() <void bucket_release (struct bucket *b) at libpmemobj/bucket.c:127>:
                                        util_mutex_unlock()
                        heap_reuse_from_recycler() <int heap_reuse_from_recycler (struct palloc_heap *heap, struct bucket *b, uint32_t units, int force) at libpmemobj/heap.c:1034>:
                            bucket_alloc_class() <struct alloc_class *bucket_alloc_class (struct bucket *b) at libpmemobj/bucket.c:152>
                            heap_get_recycler() <struct recycler *heap_get_recycler (struct palloc_heap *heap, size_t id, size_t nallocs) at libpmemobj/heap.c:106> (R):
                                util_atomic_load_explicit64()
                                recycler_new() <struct recycler *recycler_new (struct palloc_heap *heap, size_t nallocs, size_t *peak_arenas) at libpmemobj/recycler.c:74>:
                                    Malloc()
                                    ravl_new_sized() <struct ravl *ravl_new_sized (ravl_compare *compare, size_t data_size) at core/ravl.c:45>:
                                        Malloc()
                                        ERR()
                                    recycler_element_cmp() <int recycler_element_cmp (const void *lhs, const void *rhs) at libpmemobj/recycler.c:23>:
                                    memset()
                                    VEC_INIT()
                                    util_mutex_init()
                                    Free() <Free_func Free at core/alloc.c:91>
                                util_bool_compare_and_swap64()
                                recycler_delete() <void recycler_delete (struct recycler *r) at libpmemobj/recycler.c:107>:
                                    VEC_DELETE()
                                    util_mutex_destroy()
                                    ravl_delete() <void ravl_delete (struct ravl *ravl) at core/ravl.c:112>:
                                        ravl_delete_cb() <void ravl_delete_cb (struct ravl *ravl, ravl_cb cb, void *arg) at core/ravl.c:102>:
                                            ravl_foreach_node() <void ravl_foreach_node (struct ravl_node *n, ravl_cb cb, void *arg, int free_node) at core/ravl.c:74> (R):
                                                ravl_foreach_node() <void ravl_foreach_node (struct ravl_node *n, ravl_cb cb, void *arg, int free_node) at core/ravl.c:74> (recursive: see 14383)
                                                Free() <Free_func Free at core/alloc.c:91>
                                            Free() <Free_func Free at core/alloc.c:91>
                                    Free() <Free_func Free at core/alloc.c:91>
                                heap_get_recycler() <struct recycler *heap_get_recycler (struct palloc_heap *heap, size_t id, size_t nallocs) at libpmemobj/heap.c:106> (recursive: see 14365)
                            ERR()
                            recycler_get() <int recycler_get (struct recycler *r, struct memory_block *m) at libpmemobj/recycler.c:171>:
                                util_mutex_lock()
                                ravl_find() <struct ravl_node *ravl_find (struct ravl *ravl, const void *data, enum ravl_predicate flags) at core/ravl.c:524>:
                                    LOG()
                                    ravl_data() <void *ravl_data (struct ravl_node *node) at core/ravl.c:571>:
                                        memcpy()
                                    ravl_predicate_holds() <int ravl_predicate_holds (int result, struct ravl_node **ret, struct ravl_node *n, enum ravl_predicate flags) at core/ravl.c:489>:
                                        ravl_node_successor() <struct ravl_node *ravl_node_successor (struct ravl_node *n) at core/ravl.c:465>:
                                            ravl_node_cessor() <struct ravl_node *ravl_node_cessor (struct ravl_node *n, enum ravl_slot_type t) at core/ravl.c:443>:
                                                ravl_node_type_most() <struct ravl_node *ravl_node_type_most (struct ravl_node *n, enum ravl_slot_type t) at core/ravl.c:430>:
                                                ravl_slot_opposite() <enum ravl_slot_type ravl_slot_opposite (enum ravl_slot_type t) at core/ravl.c:184>:
                                                    ASSERTne()
                                        ravl_node_predecessor() <struct ravl_node *ravl_node_predecessor (struct ravl_node *n) at core/ravl.c:476>:
                                            ravl_node_cessor() <struct ravl_node *ravl_node_cessor (struct ravl_node *n, enum ravl_slot_type t) at core/ravl.c:443>:
                                                ravl_node_type_most() <struct ravl_node *ravl_node_type_most (struct ravl_node *n, enum ravl_slot_type t) at core/ravl.c:430>:
                                                ravl_slot_opposite() <enum ravl_slot_type ravl_slot_opposite (enum ravl_slot_type t) at core/ravl.c:184>:
                                                    ASSERTne()
                                out() <void out (const char *fmt, ...) at core/out.c:480>:
                                    va_start()
                                    out_common() <} void out_common (const char *file, int line, const char *func, int level, const char *suffix, const char *fmt, va_list ap) at core/out.c:334>
                                    va_end()
                                ravl_data() <void *ravl_data (struct ravl_node *node) at core/ravl.c:571>:
                                    memcpy()
                                ravl_remove() <void ravl_remove (struct ravl *ravl, struct ravl_node *n) at core/ravl.c:545> (R):
                                    LOG()
                                    ravl_node_successor() <struct ravl_node *ravl_node_successor (struct ravl_node *n) at core/ravl.c:465>:
                                        ravl_node_cessor() <struct ravl_node *ravl_node_cessor (struct ravl_node *n, enum ravl_slot_type t) at core/ravl.c:443>:
                                            ravl_node_type_most() <struct ravl_node *ravl_node_type_most (struct ravl_node *n, enum ravl_slot_type t) at core/ravl.c:430>:
                                            ravl_slot_opposite() <enum ravl_slot_type ravl_slot_opposite (enum ravl_slot_type t) at core/ravl.c:184>:
                                                ASSERTne()
                                    memcpy()
                                    ravl_remove() <void ravl_remove (struct ravl *ravl, struct ravl_node *n) at core/ravl.c:545> (recursive: see 14413)
                                    ravl_node_ref() <struct ravl_node **ravl_node_ref (struct ravl *ravl, struct ravl_node *n) at core/ravl.c:223>:
                                        ravl_node_slot_type() <enum ravl_slot_type ravl_node_slot_type (struct ravl_node *n) at core/ravl.c:196>:
                                    Free() <Free_func Free at core/alloc.c:91>
                                heap_get_chunk_hdr()
                                memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                    memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                        heap_get_chunk_hdr()
                                    memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                        heap_get_chunk_hdr()
                                        FATAL()
                                util_mutex_unlock()
                            bucket_attach_run() <int bucket_attach_run (struct bucket *b, const struct memory_block *m) at libpmemobj/bucket.c:206>:
                                util_mutex_lock()
                                bucket_memblock_insert_block() <int bucket_memblock_insert_block (const struct memory_block *m, void *b) at libpmemobj/bucket.c:197>:
                                    bucket_insert_block() <int bucket_insert_block (struct bucket *b, const struct memory_block *m) at libpmemobj/bucket.c:161>:
                                        VALGRIND_DO_MAKE_MEM_NOACCESS()
                                        VALGRIND_ANNOTATE_NEW_MEMORY()
                                util_mutex_unlock()
                                util_fetch_and_add64()
                            heap_recycle_unused() <int heap_recycle_unused (struct palloc_heap *heap, struct recycler *recycler, struct bucket *defb, int force) at libpmemobj/heap.c:894>:
                                recycler_recalc() <struct empty_runs recycler_recalc (struct recycler *r, int force) at libpmemobj/recycler.c:207>:
                                    VEC_INIT()
                                    util_atomic_load64()
                                    util_mutex_trylock()
                                    ravl_find() <struct ravl_node *ravl_find (struct ravl *ravl, const void *data, enum ravl_predicate flags) at core/ravl.c:524>:
                                        LOG()
                                        ravl_data() <void *ravl_data (struct ravl_node *node) at core/ravl.c:571>:
                                            memcpy()
                                        ravl_predicate_holds() <int ravl_predicate_holds (int result, struct ravl_node **ret, struct ravl_node *n, enum ravl_predicate flags) at core/ravl.c:489>:
                                            ravl_node_successor() <struct ravl_node *ravl_node_successor (struct ravl_node *n) at core/ravl.c:465>:
                                                ravl_node_cessor() <struct ravl_node *ravl_node_cessor (struct ravl_node *n, enum ravl_slot_type t) at core/ravl.c:443>:
                                                    ravl_node_type_most() <struct ravl_node *ravl_node_type_most (struct ravl_node *n, enum ravl_slot_type t) at core/ravl.c:430>:
                                                    ravl_slot_opposite() <enum ravl_slot_type ravl_slot_opposite (enum ravl_slot_type t) at core/ravl.c:184>:
                                                        ASSERTne()
                                            ravl_node_predecessor() <struct ravl_node *ravl_node_predecessor (struct ravl_node *n) at core/ravl.c:476>:
                                                ravl_node_cessor() <struct ravl_node *ravl_node_cessor (struct ravl_node *n, enum ravl_slot_type t) at core/ravl.c:443>:
                                                    ravl_node_type_most() <struct ravl_node *ravl_node_type_most (struct ravl_node *n, enum ravl_slot_type t) at core/ravl.c:430>:
                                                    ravl_slot_opposite() <enum ravl_slot_type ravl_slot_opposite (enum ravl_slot_type t) at core/ravl.c:184>:
                                                        ASSERTne()
                                    ravl_data() <void *ravl_data (struct ravl_node *node) at core/ravl.c:571>:
                                        memcpy()
                                    memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                        memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                            heap_get_chunk_hdr()
                                        memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                            heap_get_chunk_hdr()
                                            FATAL()
                                    recycler_element_new() <struct recycler_element recycler_element_new (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/recycler.c:122>:
                                        SUPPRESS_UNUSED()
                                        util_mutex_lock()
                                        util_mutex_unlock()
                                    ASSERT()
                                    util_fetch_and_sub64()
                                    MIN()
                                    ravl_remove() <void ravl_remove (struct ravl *ravl, struct ravl_node *n) at core/ravl.c:545> (R):
                                        LOG()
                                        ravl_node_successor() <struct ravl_node *ravl_node_successor (struct ravl_node *n) at core/ravl.c:465>:
                                            ravl_node_cessor() <struct ravl_node *ravl_node_cessor (struct ravl_node *n, enum ravl_slot_type t) at core/ravl.c:443>:
                                                ravl_node_type_most() <struct ravl_node *ravl_node_type_most (struct ravl_node *n, enum ravl_slot_type t) at core/ravl.c:430>:
                                                ravl_slot_opposite() <enum ravl_slot_type ravl_slot_opposite (enum ravl_slot_type t) at core/ravl.c:184>:
                                                    ASSERTne()
                                        memcpy()
                                        ravl_remove() <void ravl_remove (struct ravl *ravl, struct ravl_node *n) at core/ravl.c:545> (recursive: see 14476)
                                        ravl_node_ref() <struct ravl_node **ravl_node_ref (struct ravl *ravl, struct ravl_node *n) at core/ravl.c:223>:
                                            ravl_node_slot_type() <enum ravl_slot_type ravl_node_slot_type (struct ravl_node *n) at core/ravl.c:196>:
                                        Free() <Free_func Free at core/alloc.c:91>
                                    VEC_PUSH_BACK()
                                    VEC_FOREACH_BY_PTR()
                                    ravl_emplace_copy() <int ravl_emplace_copy (struct ravl *ravl, const void *data) at core/ravl.c:384>:
                                        ravl_emplace() <int ravl_emplace (struct ravl *ravl, ravl_constr constr, const void *arg) at core/ravl.c:393>:
                                            LOG()
                                            ravl_new_node() <struct ravl_node *ravl_new_node (struct ravl *ravl, ravl_constr constr, const void *arg) at core/ravl.c:161>:
                                                Malloc()
                                                ERR()
                                                ravl_node_insert_constructor() <void ravl_node_insert_constructor (void *data, size_t data_size, const void *arg) at core/ravl.c:139>:
                                                    SUPPRESS_UNUSED()
                                                    memcpy()
                                            ravl_data() <void *ravl_data (struct ravl_node *node) at core/ravl.c:571>:
                                                memcpy()
                                            ravl_balance() <void ravl_balance (struct ravl *ravl, struct ravl_node *n) at core/ravl.c:337>:
                                                ravl_node_is() <int ravl_node_is (struct ravl_node *n, int i, int j) at core/ravl.c:306>:
                                                    ravl_node_is_i_j() <int ravl_node_is_i_j (struct ravl_node *n, int i, int j) at core/ravl.c:296>:
                                                        ravl_node_rank_difference_parent() <int ravl_node_rank_difference_parent (struct ravl_node *p, struct ravl_node *n) at core/ravl.c:275>:
                                                            ravl_node_rank() <int ravl_node_rank (struct ravl_node *n) at core/ravl.c:261>:
                                                ravl_node_promote() <void ravl_node_promote (struct ravl_node *n) at core/ravl.c:315>
                                                ravl_node_sibling() <struct ravl_node *ravl_node_sibling (struct ravl_node *n) at core/ravl.c:209>:
                                                    ravl_node_slot_type() <enum ravl_slot_type ravl_node_slot_type (struct ravl_node *n) at core/ravl.c:196>:
                                                ravl_node_rank_difference() <int ravl_node_rank_difference (struct ravl_node *n) at core/ravl.c:287>:
                                                    ravl_node_rank_difference_parent() <int ravl_node_rank_difference_parent (struct ravl_node *p, struct ravl_node *n) at core/ravl.c:275>:
                                                        ravl_node_rank() <int ravl_node_rank (struct ravl_node *n) at core/ravl.c:261>:
                                                ravl_node_rank_difference_parent() <int ravl_node_rank_difference_parent (struct ravl_node *p, struct ravl_node *n) at core/ravl.c:275>:
                                                    ravl_node_rank() <int ravl_node_rank (struct ravl_node *n) at core/ravl.c:261>:
                                                ravl_slot_opposite() <enum ravl_slot_type ravl_slot_opposite (enum ravl_slot_type t) at core/ravl.c:184>:
                                                    ASSERTne()
                                                ravl_node_slot_type() <enum ravl_slot_type ravl_node_slot_type (struct ravl_node *n) at core/ravl.c:196>:
                                                ravl_rotate() <void ravl_rotate (struct ravl *ravl, struct ravl_node *n) at core/ravl.c:237>:
                                                    ASSERTne()
                                                    ravl_node_ref() <struct ravl_node **ravl_node_ref (struct ravl *ravl, struct ravl_node *n) at core/ravl.c:223>:
                                                        ravl_node_slot_type() <enum ravl_slot_type ravl_node_slot_type (struct ravl_node *n) at core/ravl.c:196>:
                                                    ravl_node_slot_type() <enum ravl_slot_type ravl_node_slot_type (struct ravl_node *n) at core/ravl.c:196>:
                                                    ravl_slot_opposite() <enum ravl_slot_type ravl_slot_opposite (enum ravl_slot_type t) at core/ravl.c:184>:
                                                        ASSERTne()
                                                ravl_node_demote() <void ravl_node_demote (struct ravl_node *n) at core/ravl.c:324>:
                                                    ASSERT()
                                            Free() <Free_func Free at core/alloc.c:91>
                                        ravl_node_copy_constructor() <void ravl_node_copy_constructor (void *data, size_t data_size, const void *arg) at core/ravl.c:152>:
                                            memcpy()
                                    VEC_CLEAR()
                                    util_mutex_unlock()
                                VEC_SIZE()
                                heap_bucket_acquire() <struct bucket *heap_bucket_acquire (struct palloc_heap *heap, uint8_t class_id, uint16_t arena_id) at libpmemobj/heap.c:470>:
                                    out() <void out (const char *fmt, ...) at core/out.c:480>:
                                        va_start()
                                        out_common() <} void out_common (const char *file, int line, const char *func, int level, const char *suffix, const char *fmt, va_list ap) at core/out.c:334>
                                        va_end()
                                    heap_thread_arena() <struct arena *heap_thread_arena (struct palloc_heap *heap) at libpmemobj/heap.c:414>:
                                        os_tls_get() <void *os_tls_get (os_tls_key_t key) at core/os_thread_posix.c:62>:
                                            pthread_getspecific()
                                        heap_thread_arena_assign() <struct arena *heap_thread_arena_assign (struct palloc_heap *heap) at libpmemobj/heap.c:381>:
                                            util_mutex_lock()
                                            ASSERTne()
                                            VEC_SIZE()
                                            VEC_FOREACH()
                                            LOG()
                                            heap_arena_thread_attach() <void heap_arena_thread_attach (struct palloc_heap *heap, struct arena *a) at libpmemobj/heap.c:249>:
                                                ASSERTeq()
                                                os_tls_get() <void *os_tls_get (os_tls_key_t key) at core/os_thread_posix.c:62>:
                                                    pthread_getspecific()
                                                heap_arena_thread_detach() <void heap_arena_thread_detach (struct arena *a) at libpmemobj/heap.c:232>:
                                                    util_fetch_and_sub64()
                                                ASSERTne()
                                                util_fetch_and_add64()
                                                os_tls_set() <int os_tls_set (os_tls_key_t key, const void *value) at core/os_thread_posix.c:53>:
                                                    pthread_setspecific()
                                            util_mutex_unlock()
                                        heap_global_arena_assign() <struct arena *heap_global_arena_assign (struct palloc_heap *heap) at libpmemobj/heap.c:348>:
                                            util_mutex_lock()
                                            ASSERTne()
                                            VEC_SIZE()
                                            VEC_FOREACH()
                                            LOG()
                                            util_mutex_unlock()
                                        ASSERT()
                                        ASSERTne()
                                    ASSERTne()
                                    VEC_ARR()
                                    bucket_acquire() <struct bucket *bucket_acquire (struct bucket_locked *b) at libpmemobj/bucket.c:117>:
                                        util_mutex_lock()
                                ASSERT()
                                VEC_FOREACH_BY_PTR()
                                heap_run_into_free_chunk() <void heap_run_into_free_chunk (struct palloc_heap *heap, struct bucket *bucket, struct memory_block *m) at libpmemobj/heap.c:697>:
                                    heap_get_chunk_hdr()
                                    STATS_SUB()
                                    util_mutex_lock()
                                    memblock_huge_init() <struct memory_block memblock_huge_init (struct palloc_heap *heap, uint32_t chunk_id, uint32_t zone_id, uint32_t size_idx) at libpmemobj/memblock.c:1329>:
                                        heap_get_chunk_hdr()
                                        VALGRIND_DO_MAKE_MEM_UNDEFINED()
                                        VALGRIND_ANNOTATE_NEW_MEMORY()
                                        chunk_get_chunk_hdr_value() <uint64_t chunk_get_chunk_hdr_value (uint16_t type, uint16_t flags, uint32_t size_idx) at libpmemobj/memblock.c:604>:
                                            COMPILE_ERROR_ON()
                                            memcpy()
                                        util_atomic_store_explicit64()
                                        pmemops_persist()
                                        huge_write_footer() <void huge_write_footer (struct chunk_header *hdr, uint32_t size_idx) at libpmemobj/memblock.c:1166>:
                                            VALGRIND_DO_MAKE_MEM_UNDEFINED()
                                            VALGRIND_SET_CLEAN()
                                        memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                            memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                                heap_get_chunk_hdr()
                                            memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                                heap_get_chunk_hdr()
                                                FATAL()
                                    heap_free_chunk_reuse() <int heap_free_chunk_reuse (struct palloc_heap *heap, struct bucket *bucket, struct memory_block *m) at libpmemobj/heap.c:674>:
                                        heap_coalesce_huge() <struct memory_block heap_coalesce_huge (struct palloc_heap *heap, struct bucket *b, const struct memory_block *m) at libpmemobj/heap.c:650>:
                                            heap_get_adjacent_free_block() <int heap_get_adjacent_free_block (struct palloc_heap *heap, const struct memory_block *in, struct memory_block *out, int prev) at libpmemobj/heap.c:582>:
                                                ZID_TO_ZONE()
                                                memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                                    memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                                        heap_get_chunk_hdr()
                                                    memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                                        heap_get_chunk_hdr()
                                                        FATAL()
                                            bucket_remove_block() <int bucket_remove_block (struct bucket *b, const struct memory_block *m) at libpmemobj/bucket.c:178>
                                            heap_coalesce() <struct memory_block heap_coalesce (struct palloc_heap *heap, const struct memory_block *blocks[], int n) at libpmemobj/heap.c:621>:
                                                ASSERTne()
                                                memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                                    memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                                        heap_get_chunk_hdr()
                                                    memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                                        heap_get_chunk_hdr()
                                                        FATAL()
                                        bucket_insert_block() <int bucket_insert_block (struct bucket *b, const struct memory_block *m) at libpmemobj/bucket.c:161>:
                                            VALGRIND_DO_MAKE_MEM_NOACCESS()
                                            VALGRIND_ANNOTATE_NEW_MEMORY()
                                    util_mutex_unlock()
                                heap_bucket_release() <void heap_bucket_release (struct bucket *b) at libpmemobj/heap.c:498>:
                                    bucket_release() <void bucket_release (struct bucket *b) at libpmemobj/bucket.c:127>:
                                        util_mutex_unlock()
                                VEC_DELETE()
                        out() <void out (const char *fmt, ...) at core/out.c:480>:
                            va_start()
                            out_common() <} void out_common (const char *file, int line, const char *func, int level, const char *suffix, const char *fmt, va_list ap) at core/out.c:334>
                            va_end()
                        heap_bucket_acquire() <struct bucket *heap_bucket_acquire (struct palloc_heap *heap, uint8_t class_id, uint16_t arena_id) at libpmemobj/heap.c:470>:
                            out() <void out (const char *fmt, ...) at core/out.c:480>:
                                va_start()
                                out_common() <} void out_common (const char *file, int line, const char *func, int level, const char *suffix, const char *fmt, va_list ap) at core/out.c:334>
                                va_end()
                            heap_thread_arena() <struct arena *heap_thread_arena (struct palloc_heap *heap) at libpmemobj/heap.c:414>:
                                os_tls_get() <void *os_tls_get (os_tls_key_t key) at core/os_thread_posix.c:62>:
                                    pthread_getspecific()
                                heap_thread_arena_assign() <struct arena *heap_thread_arena_assign (struct palloc_heap *heap) at libpmemobj/heap.c:381>:
                                    util_mutex_lock()
                                    ASSERTne()
                                    VEC_SIZE()
                                    VEC_FOREACH()
                                    LOG()
                                    heap_arena_thread_attach() <void heap_arena_thread_attach (struct palloc_heap *heap, struct arena *a) at libpmemobj/heap.c:249>:
                                        ASSERTeq()
                                        os_tls_get() <void *os_tls_get (os_tls_key_t key) at core/os_thread_posix.c:62>:
                                            pthread_getspecific()
                                        heap_arena_thread_detach() <void heap_arena_thread_detach (struct arena *a) at libpmemobj/heap.c:232>:
                                            util_fetch_and_sub64()
                                        ASSERTne()
                                        util_fetch_and_add64()
                                        os_tls_set() <int os_tls_set (os_tls_key_t key, const void *value) at core/os_thread_posix.c:53>:
                                            pthread_setspecific()
                                    util_mutex_unlock()
                                heap_global_arena_assign() <struct arena *heap_global_arena_assign (struct palloc_heap *heap) at libpmemobj/heap.c:348>:
                                    util_mutex_lock()
                                    ASSERTne()
                                    VEC_SIZE()
                                    VEC_FOREACH()
                                    LOG()
                                    util_mutex_unlock()
                                ASSERT()
                                ASSERTne()
                            ASSERTne()
                            VEC_ARR()
                            bucket_acquire() <struct bucket *bucket_acquire (struct bucket_locked *b) at libpmemobj/bucket.c:117>:
                                util_mutex_lock()
                        heap_populate_bucket() <int heap_populate_bucket (struct palloc_heap *heap, struct bucket *bucket) at libpmemobj/heap.c:850>:
                            util_atomic_store_explicit32()
                            ZID_TO_ZONE()
                            VALGRIND_ADD_TO_GLOBAL_TX_IGNORE()
                            heap_zone_init() <void heap_zone_init (struct palloc_heap *heap, uint32_t zone_id, uint32_t first_chunk_id) at libpmemobj/heap.c:559>:
                                ZID_TO_ZONE()
                                zone_calc_size_idx() <uint32_t zone_calc_size_idx (uint32_t zone_id, unsigned max_zone, size_t heap_size) at libpmemobj/heap.c:533>:
                                    ASSERT()
                                ASSERT()
                                memblock_huge_init() <struct memory_block memblock_huge_init (struct palloc_heap *heap, uint32_t chunk_id, uint32_t zone_id, uint32_t size_idx) at libpmemobj/memblock.c:1329>:
                                    heap_get_chunk_hdr()
                                    VALGRIND_DO_MAKE_MEM_UNDEFINED()
                                    VALGRIND_ANNOTATE_NEW_MEMORY()
                                    chunk_get_chunk_hdr_value() <uint64_t chunk_get_chunk_hdr_value (uint16_t type, uint16_t flags, uint32_t size_idx) at libpmemobj/memblock.c:604>:
                                        COMPILE_ERROR_ON()
                                        memcpy()
                                    util_atomic_store_explicit64()
                                    pmemops_persist()
                                    huge_write_footer() <void huge_write_footer (struct chunk_header *hdr, uint32_t size_idx) at libpmemobj/memblock.c:1166>:
                                        VALGRIND_DO_MAKE_MEM_UNDEFINED()
                                        VALGRIND_SET_CLEAN()
                                    memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                        memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                            heap_get_chunk_hdr()
                                        memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                            heap_get_chunk_hdr()
                                            FATAL()
                                pmemops_persist()
                            heap_reclaim_zone_garbage() <void heap_reclaim_zone_garbage (struct palloc_heap *heap, struct bucket *bucket, uint32_t zone_id) at libpmemobj/heap.c:775>:
                                ZID_TO_ZONE()
                                ASSERT()
                                memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                    memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                        heap_get_chunk_hdr()
                                    memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                        heap_get_chunk_hdr()
                                        FATAL()
                                heap_reclaim_run() <int heap_reclaim_run (struct palloc_heap *heap, struct memory_block *m, int startup) at libpmemobj/heap.c:733>:
                                    heap_get_chunk_run()
                                    heap_get_chunk_hdr()
                                    alloc_class_by_run() <struct alloc_class *alloc_class_by_run (struct alloc_class_collection *ac, size_t unit_size, uint16_t flags, uint32_t size_idx) at libpmemobj/alloc_class.c:594>:
                                        SIZE_TO_CLASS_MAP_INDEX()
                                        ASSERT()
                                        critnib_get() <void *critnib_get (struct critnib *c, uint64_t key) at libpmemobj/critnib.c:515>:
                                            load() <void load (void *src, void *dst) at libpmemobj/critnib.c:130>:
                                                util_atomic_load_explicit64()
                                            is_leaf() <inline bool is_leaf (struct critnib_node *n) at libpmemobj/critnib.c:150>:
                                            slice_index() <inline unsigned slice_index (uint64_t key, sh_t shift) at libpmemobj/critnib.c:178>:
                                            to_leaf() <inline struct critnib_leaf *to_leaf (struct critnib_node *n) at libpmemobj/critnib.c:159>:
                                        RUN_CLASS_KEY_PACK()
                                    recycler_element_new() <struct recycler_element recycler_element_new (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/recycler.c:122>:
                                        SUPPRESS_UNUSED()
                                        util_mutex_lock()
                                        util_mutex_unlock()
                                    ASSERTeq()
                                    STATS_INC()
                                    heap_get_recycler() <struct recycler *heap_get_recycler (struct palloc_heap *heap, size_t id, size_t nallocs) at libpmemobj/heap.c:106> (R):
                                        util_atomic_load_explicit64()
                                        recycler_new() <struct recycler *recycler_new (struct palloc_heap *heap, size_t nallocs, size_t *peak_arenas) at libpmemobj/recycler.c:74>:
                                            Malloc()
                                            ravl_new_sized() <struct ravl *ravl_new_sized (ravl_compare *compare, size_t data_size) at core/ravl.c:45>:
                                                Malloc()
                                                ERR()
                                            recycler_element_cmp() <int recycler_element_cmp (const void *lhs, const void *rhs) at libpmemobj/recycler.c:23>:
                                            memset()
                                            VEC_INIT()
                                            util_mutex_init()
                                            Free() <Free_func Free at core/alloc.c:91>
                                        util_bool_compare_and_swap64()
                                        recycler_delete() <void recycler_delete (struct recycler *r) at libpmemobj/recycler.c:107>:
                                            VEC_DELETE()
                                            util_mutex_destroy()
                                            ravl_delete() <void ravl_delete (struct ravl *ravl) at core/ravl.c:112>:
                                                ravl_delete_cb() <void ravl_delete_cb (struct ravl *ravl, ravl_cb cb, void *arg) at core/ravl.c:102>:
                                                    ravl_foreach_node() <void ravl_foreach_node (struct ravl_node *n, ravl_cb cb, void *arg, int free_node) at core/ravl.c:74> (R):
                                                        ravl_foreach_node() <void ravl_foreach_node (struct ravl_node *n, ravl_cb cb, void *arg, int free_node) at core/ravl.c:74> (recursive: see 14737)
                                                        Free() <Free_func Free at core/alloc.c:91>
                                                    Free() <Free_func Free at core/alloc.c:91>
                                            Free() <Free_func Free at core/alloc.c:91>
                                        heap_get_recycler() <struct recycler *heap_get_recycler (struct palloc_heap *heap, size_t id, size_t nallocs) at libpmemobj/heap.c:106> (recursive: see 14719)
                                    recycler_put() <int recycler_put (struct recycler *r, struct recycler_element element) at libpmemobj/recycler.c:154>:
                                        util_mutex_lock()
                                        ravl_emplace_copy() <int ravl_emplace_copy (struct ravl *ravl, const void *data) at core/ravl.c:384>:
                                            ravl_emplace() <int ravl_emplace (struct ravl *ravl, ravl_constr constr, const void *arg) at core/ravl.c:393>:
                                                LOG()
                                                ravl_new_node() <struct ravl_node *ravl_new_node (struct ravl *ravl, ravl_constr constr, const void *arg) at core/ravl.c:161>:
                                                    Malloc()
                                                    ERR()
                                                    ravl_node_insert_constructor() <void ravl_node_insert_constructor (void *data, size_t data_size, const void *arg) at core/ravl.c:139>:
                                                        SUPPRESS_UNUSED()
                                                        memcpy()
                                                ravl_data() <void *ravl_data (struct ravl_node *node) at core/ravl.c:571>:
                                                    memcpy()
                                                ravl_balance() <void ravl_balance (struct ravl *ravl, struct ravl_node *n) at core/ravl.c:337>:
                                                    ravl_node_is() <int ravl_node_is (struct ravl_node *n, int i, int j) at core/ravl.c:306>:
                                                        ravl_node_is_i_j() <int ravl_node_is_i_j (struct ravl_node *n, int i, int j) at core/ravl.c:296>:
                                                            ravl_node_rank_difference_parent() <int ravl_node_rank_difference_parent (struct ravl_node *p, struct ravl_node *n) at core/ravl.c:275>:
                                                                ravl_node_rank() <int ravl_node_rank (struct ravl_node *n) at core/ravl.c:261>:
                                                    ravl_node_promote() <void ravl_node_promote (struct ravl_node *n) at core/ravl.c:315>
                                                    ravl_node_sibling() <struct ravl_node *ravl_node_sibling (struct ravl_node *n) at core/ravl.c:209>:
                                                        ravl_node_slot_type() <enum ravl_slot_type ravl_node_slot_type (struct ravl_node *n) at core/ravl.c:196>:
                                                    ravl_node_rank_difference() <int ravl_node_rank_difference (struct ravl_node *n) at core/ravl.c:287>:
                                                        ravl_node_rank_difference_parent() <int ravl_node_rank_difference_parent (struct ravl_node *p, struct ravl_node *n) at core/ravl.c:275>:
                                                            ravl_node_rank() <int ravl_node_rank (struct ravl_node *n) at core/ravl.c:261>:
                                                    ravl_node_rank_difference_parent() <int ravl_node_rank_difference_parent (struct ravl_node *p, struct ravl_node *n) at core/ravl.c:275>:
                                                        ravl_node_rank() <int ravl_node_rank (struct ravl_node *n) at core/ravl.c:261>:
                                                    ravl_slot_opposite() <enum ravl_slot_type ravl_slot_opposite (enum ravl_slot_type t) at core/ravl.c:184>:
                                                        ASSERTne()
                                                    ravl_node_slot_type() <enum ravl_slot_type ravl_node_slot_type (struct ravl_node *n) at core/ravl.c:196>:
                                                    ravl_rotate() <void ravl_rotate (struct ravl *ravl, struct ravl_node *n) at core/ravl.c:237>:
                                                        ASSERTne()
                                                        ravl_node_ref() <struct ravl_node **ravl_node_ref (struct ravl *ravl, struct ravl_node *n) at core/ravl.c:223>:
                                                            ravl_node_slot_type() <enum ravl_slot_type ravl_node_slot_type (struct ravl_node *n) at core/ravl.c:196>:
                                                        ravl_node_slot_type() <enum ravl_slot_type ravl_node_slot_type (struct ravl_node *n) at core/ravl.c:196>:
                                                        ravl_slot_opposite() <enum ravl_slot_type ravl_slot_opposite (enum ravl_slot_type t) at core/ravl.c:184>:
                                                            ASSERTne()
                                                    ravl_node_demote() <void ravl_node_demote (struct ravl_node *n) at core/ravl.c:324>:
                                                        ASSERT()
                                                Free() <Free_func Free at core/alloc.c:91>
                                            ravl_node_copy_constructor() <void ravl_node_copy_constructor (void *data, size_t data_size, const void *arg) at core/ravl.c:152>:
                                                memcpy()
                                        util_mutex_unlock()
                                    ERR()
                                heap_run_into_free_chunk() <void heap_run_into_free_chunk (struct palloc_heap *heap, struct bucket *bucket, struct memory_block *m) at libpmemobj/heap.c:697>:
                                    heap_get_chunk_hdr()
                                    STATS_SUB()
                                    util_mutex_lock()
                                    memblock_huge_init() <struct memory_block memblock_huge_init (struct palloc_heap *heap, uint32_t chunk_id, uint32_t zone_id, uint32_t size_idx) at libpmemobj/memblock.c:1329>:
                                        heap_get_chunk_hdr()
                                        VALGRIND_DO_MAKE_MEM_UNDEFINED()
                                        VALGRIND_ANNOTATE_NEW_MEMORY()
                                        chunk_get_chunk_hdr_value() <uint64_t chunk_get_chunk_hdr_value (uint16_t type, uint16_t flags, uint32_t size_idx) at libpmemobj/memblock.c:604>:
                                            COMPILE_ERROR_ON()
                                            memcpy()
                                        util_atomic_store_explicit64()
                                        pmemops_persist()
                                        huge_write_footer() <void huge_write_footer (struct chunk_header *hdr, uint32_t size_idx) at libpmemobj/memblock.c:1166>:
                                            VALGRIND_DO_MAKE_MEM_UNDEFINED()
                                            VALGRIND_SET_CLEAN()
                                        memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                            memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                                heap_get_chunk_hdr()
                                            memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                                heap_get_chunk_hdr()
                                                FATAL()
                                    heap_free_chunk_reuse() <int heap_free_chunk_reuse (struct palloc_heap *heap, struct bucket *bucket, struct memory_block *m) at libpmemobj/heap.c:674>:
                                        heap_coalesce_huge() <struct memory_block heap_coalesce_huge (struct palloc_heap *heap, struct bucket *b, const struct memory_block *m) at libpmemobj/heap.c:650>:
                                            heap_get_adjacent_free_block() <int heap_get_adjacent_free_block (struct palloc_heap *heap, const struct memory_block *in, struct memory_block *out, int prev) at libpmemobj/heap.c:582>:
                                                ZID_TO_ZONE()
                                                memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                                    memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                                        heap_get_chunk_hdr()
                                                    memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                                        heap_get_chunk_hdr()
                                                        FATAL()
                                            bucket_remove_block() <int bucket_remove_block (struct bucket *b, const struct memory_block *m) at libpmemobj/bucket.c:178>
                                            heap_coalesce() <struct memory_block heap_coalesce (struct palloc_heap *heap, const struct memory_block *blocks[], int n) at libpmemobj/heap.c:621>:
                                                ASSERTne()
                                                memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                                    memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                                        heap_get_chunk_hdr()
                                                    memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                                        heap_get_chunk_hdr()
                                                        FATAL()
                                        bucket_insert_block() <int bucket_insert_block (struct bucket *b, const struct memory_block *m) at libpmemobj/bucket.c:161>:
                                            VALGRIND_DO_MAKE_MEM_NOACCESS()
                                            VALGRIND_ANNOTATE_NEW_MEMORY()
                                    util_mutex_unlock()
                                heap_free_chunk_reuse() <int heap_free_chunk_reuse (struct palloc_heap *heap, struct bucket *bucket, struct memory_block *m) at libpmemobj/heap.c:674>:
                                    heap_coalesce_huge() <struct memory_block heap_coalesce_huge (struct palloc_heap *heap, struct bucket *b, const struct memory_block *m) at libpmemobj/heap.c:650>:
                                        heap_get_adjacent_free_block() <int heap_get_adjacent_free_block (struct palloc_heap *heap, const struct memory_block *in, struct memory_block *out, int prev) at libpmemobj/heap.c:582>:
                                            ZID_TO_ZONE()
                                            memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                                memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                                    heap_get_chunk_hdr()
                                                memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                                    heap_get_chunk_hdr()
                                                    FATAL()
                                        bucket_remove_block() <int bucket_remove_block (struct bucket *b, const struct memory_block *m) at libpmemobj/bucket.c:178>
                                        heap_coalesce() <struct memory_block heap_coalesce (struct palloc_heap *heap, const struct memory_block *blocks[], int n) at libpmemobj/heap.c:621>:
                                            ASSERTne()
                                            memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                                memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                                    heap_get_chunk_hdr()
                                                memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                                    heap_get_chunk_hdr()
                                                    FATAL()
                                    bucket_insert_block() <int bucket_insert_block (struct bucket *b, const struct memory_block *m) at libpmemobj/bucket.c:161>:
                                        VALGRIND_DO_MAKE_MEM_NOACCESS()
                                        VALGRIND_ANNOTATE_NEW_MEMORY()
                        heap_bucket_release() <void heap_bucket_release (struct bucket *b) at libpmemobj/heap.c:498>:
                            bucket_release() <void bucket_release (struct bucket *b) at libpmemobj/bucket.c:127>:
                                util_mutex_unlock()
                        heap_get_bestfit_block() <int heap_get_bestfit_block (struct palloc_heap *heap, struct bucket *b, struct memory_block *m) at libpmemobj/heap.c:1210> (recursive: see 13452)
                        heap_run_create() <int heap_run_create (struct palloc_heap *heap, struct bucket *b, struct memory_block *m) at libpmemobj/heap.c:1065>:
                            bucket_alloc_class() <struct alloc_class *bucket_alloc_class (struct bucket *b) at libpmemobj/bucket.c:152>
                            memblock_run_init() <struct memory_block memblock_run_init (struct palloc_heap *heap, uint32_t chunk_id, uint32_t zone_id, struct run_descriptor *rdsc) at libpmemobj/memblock.c:1361>:
                                ASSERTne()
                                ZID_TO_ZONE()
                                heap_get_chunk_run()
                                SIZEOF_RUN()
                                VALGRIND_DO_MAKE_MEM_UNDEFINED()
                                VALGRIND_ADD_TO_TX()
                                memset()
                                VALGRIND_REMOVE_FROM_TX()
                                pmemops_flush()
                                VALGRIND_ANNOTATE_NEW_MEMORY()
                                pmemops_persist()
                                ASSERT()
                                chunk_get_chunk_hdr_value() <uint64_t chunk_get_chunk_hdr_value (uint16_t type, uint16_t flags, uint32_t size_idx) at libpmemobj/memblock.c:604>:
                                    COMPILE_ERROR_ON()
                                    memcpy()
                                util_atomic_store_explicit64()
                                memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                    memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                        heap_get_chunk_hdr()
                                    memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                        heap_get_chunk_hdr()
                                        FATAL()
                            bucket_attach_run() <int bucket_attach_run (struct bucket *b, const struct memory_block *m) at libpmemobj/bucket.c:206>:
                                util_mutex_lock()
                                bucket_memblock_insert_block() <int bucket_memblock_insert_block (const struct memory_block *m, void *b) at libpmemobj/bucket.c:197>:
                                    bucket_insert_block() <int bucket_insert_block (struct bucket *b, const struct memory_block *m) at libpmemobj/bucket.c:161>:
                                        VALGRIND_DO_MAKE_MEM_NOACCESS()
                                        VALGRIND_ANNOTATE_NEW_MEMORY()
                                util_mutex_unlock()
                                util_fetch_and_add64()
                            STATS_INC()
                    ASSERT()
                    heap_split_block() <void heap_split_block (struct palloc_heap *heap, struct bucket *b, struct memory_block *m, uint32_t units) at libpmemobj/heap.c:1172>:
                        bucket_alloc_class() <struct alloc_class *bucket_alloc_class (struct bucket *b) at libpmemobj/bucket.c:152>
                        ASSERT()
                        memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                            memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                heap_get_chunk_hdr()
                            memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                heap_get_chunk_hdr()
                                FATAL()
                        bucket_insert_block() <int bucket_insert_block (struct bucket *b, const struct memory_block *m) at libpmemobj/bucket.c:161>:
                            VALGRIND_DO_MAKE_MEM_NOACCESS()
                            VALGRIND_ANNOTATE_NEW_MEMORY()
                        LOG()
                        memblock_huge_init() <struct memory_block memblock_huge_init (struct palloc_heap *heap, uint32_t chunk_id, uint32_t zone_id, uint32_t size_idx) at libpmemobj/memblock.c:1329>:
                            heap_get_chunk_hdr()
                            VALGRIND_DO_MAKE_MEM_UNDEFINED()
                            VALGRIND_ANNOTATE_NEW_MEMORY()
                            chunk_get_chunk_hdr_value() <uint64_t chunk_get_chunk_hdr_value (uint16_t type, uint16_t flags, uint32_t size_idx) at libpmemobj/memblock.c:604>:
                                COMPILE_ERROR_ON()
                                memcpy()
                            util_atomic_store_explicit64()
                            pmemops_persist()
                            huge_write_footer() <void huge_write_footer (struct chunk_header *hdr, uint32_t size_idx) at libpmemobj/memblock.c:1166>:
                                VALGRIND_DO_MAKE_MEM_UNDEFINED()
                                VALGRIND_SET_CLEAN()
                            memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                    heap_get_chunk_hdr()
                                memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                    heap_get_chunk_hdr()
                                    FATAL()
                alloc_prep_block() <int alloc_prep_block (struct palloc_heap *heap, const struct memory_block *m, palloc_constr constructor, void *arg, uint64_t extra_field, uint16_t object_flags, struct pobj_action_internal *out) at libpmemobj/palloc.c:112>:
                    VALGRIND_DO_MEMPOOL_ALLOC()
                    VALGRIND_DO_MAKE_MEM_UNDEFINED()
                    VALGRIND_ANNOTATE_NEW_MEMORY()
                    unlikely()
                    pmemops_memset()
                    VALGRIND_DO_MEMPOOL_FREE()
                    HEAP_PTR_TO_OFF()
                bucket_insert_block() <int bucket_insert_block (struct bucket *b, const struct memory_block *m) at libpmemobj/bucket.c:161>:
                    VALGRIND_DO_MAKE_MEM_NOACCESS()
                    VALGRIND_ANNOTATE_NEW_MEMORY()
                bucket_active_block() <struct memory_block_reserved *bucket_active_block (struct bucket *b) at libpmemobj/bucket.c:265>:
                util_fetch_and_add64()
                heap_bucket_release() <void heap_bucket_release (struct bucket *b) at libpmemobj/heap.c:498>:
                    bucket_release() <void bucket_release (struct bucket *b) at libpmemobj/bucket.c:127>:
                        util_mutex_unlock()
            VALGRIND_ADD_TO_TX()
            HEAP_OFF_TO_PTR()
            pmemops_memcpy()
            VALGRIND_REMOVE_FROM_TX()
            operation_add_entry() <int operation_add_entry (struct operation_context *ctx, void *ptr, uint64_t value, ulog_operation_type type) at libpmemobj/memops.c:411>:
                OBJ_OFF_IS_VALID()
                operation_add_typed_entry() <int operation_add_typed_entry (struct operation_context *ctx, void *ptr, uint64_t value, ulog_operation_type type, enum operation_log_type log_type) at libpmemobj/memops.c:362>:
                    Realloc()
                    SIZEOF_ULOG()
                    VECQ_CLEAR()
                    operation_try_merge_entry() <int operation_try_merge_entry (struct operation_context *ctx, void *ptr, uint64_t value, ulog_operation_type type) at libpmemobj/memops.c:318>:
                        OBJ_PTR_TO_OFF()
                        VECQ_FOREACH_REVERSE()
                        ulog_entry_offset() <uint64_t ulog_entry_offset (const struct ulog_entry_base *entry) at libpmemobj/ulog.c:68>:
                        ulog_entry_type() <ulog_operation_type ulog_entry_type (const struct ulog_entry_base *entry) at libpmemobj/ulog.c:59>:
                            ULOG_OPERATION_FROM_OFFSET()
                        operation_merge() <inline void operation_merge (struct ulog_entry_base *entry, uint64_t value, ulog_operation_type type) at libpmemobj/memops.c:288>:
                            ASSERT()
                    ulog_entry_val_create() <struct ulog_entry_val *ulog_entry_val_create (struct ulog *ulog, size_t offset, uint64_t *dest, uint64_t value, ulog_operation_type type, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:372>:
                        COMPILE_ERROR_ON()
                        ULOG_OPERATION()
                        pmemops_memcpy()
                    operation_merge_entry_add() <void operation_merge_entry_add (struct operation_context *ctx, struct ulog_entry_val *entry) at libpmemobj/memops.c:344>:
                        VECQ_SIZE()
                        VECQ_DEQUEUE()
                        VECQ_ENQUEUE()
                        LOG()
                    ulog_entry_size() <size_t ulog_entry_size (const struct ulog_entry_base *entry) at libpmemobj/ulog.c:77>:
                        ulog_entry_type() <ulog_operation_type ulog_entry_type (const struct ulog_entry_base *entry) at libpmemobj/ulog.c:59>:
                            ULOG_OPERATION_FROM_OFFSET()
                        CACHELINE_ALIGN()
                        ASSERT()
            palloc_exec_actions() <void palloc_exec_actions (struct palloc_heap *heap, struct operation_context *ctx, struct pobj_action_internal *actv, size_t actvcnt) at libpmemobj/palloc.c:526>:
                qsort()
                palloc_action_compare() <int palloc_action_compare (const void *lhs, const void *rhs) at libpmemobj/palloc.c:507>:
                ASSERTeq()
                util_mutex_lock()
                pmemops_drain()
                operation_process() <void operation_process (struct operation_context *ctx) at libpmemobj/memops.c:776>:
                    ulog_entry_type() <ulog_operation_type ulog_entry_type (const struct ulog_entry_base *entry) at libpmemobj/ulog.c:59>:
                        ULOG_OPERATION_FROM_OFFSET()
                    ulog_entry_apply() <void ulog_entry_apply (const struct ulog_entry_base *e, int persist, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:526>:
                        ulog_entry_type() <ulog_operation_type ulog_entry_type (const struct ulog_entry_base *entry) at libpmemobj/ulog.c:59>:
                            ULOG_OPERATION_FROM_OFFSET()
                        ulog_entry_offset() <uint64_t ulog_entry_offset (const struct ulog_entry_base *entry) at libpmemobj/ulog.c:68>:
                        f()
                        VALGRIND_ADD_TO_TX()
                        pmemops_memset()
                        pmemops_memcpy()
                        ASSERT()
                        VALGRIND_REMOVE_FROM_TX()
                    operation_process_persistent_redo() <void operation_process_persistent_redo (struct operation_context *ctx) at libpmemobj/memops.c:654>:
                        ASSERTeq()
                        ulog_store() <void ulog_store (struct ulog *dest, struct ulog *src, size_t nbytes, size_t ulog_base_nbytes, size_t ulog_total_capacity, struct ulog_next *next, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:288>:
                            MIN()
                            CACHELINE_ALIGN()
                            ASSERT()
                            ulog_by_offset() <struct ulog *ulog_by_offset (size_t offset, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:36>:
                                CACHELINE_ALIGN()
                            VEC_ARR()
                            ASSERTne()
                            IS_CACHELINE_ALIGNED()
                            VALGRIND_ADD_TO_TX()
                            pmemops_memcpy()
                            VALGRIND_REMOVE_FROM_TX()
                            pmemops_drain()
                            VEC_SIZE()
                            VEC_FRONT()
                            ulog_checksum() <int ulog_checksum (struct ulog *ulog, size_t ulog_base_bytes, int insert) at libpmemobj/ulog.c:275>:
                                util_checksum() <int util_checksum (void *addr, size_t len, uint64_t *csump, int insert, size_t skip_off) at core/util.c:178>:
                                    util_checksum_compute() <uint64_t util_checksum_compute (void *addr, size_t len, uint64_t *csump, size_t skip_off) at core/util.c:134>:
                                        abort()
                                        le32toh()
                                    htole64()
                                SIZEOF_ULOG()
                            SIZEOF_ULOG()
                        ulog_process() <void ulog_process (struct ulog *ulog, ulog_check_offset_fn check, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:786>:
                            SUPPRESS_UNUSED()
                            LOG()
                            ulog_check() <int ulog_check (struct ulog *ulog, ulog_check_offset_fn check, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:881>:
                                LOG()
                                ulog_foreach_entry() <int ulog_foreach_entry (struct ulog *ulog, ulog_entry_cb cb, void *arg, const struct pmem_ops *ops) at libpmemobj/ulog.c:180>
                                ulog_check_entry() <int ulog_check_entry (struct ulog_entry_base *e, void *arg, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:862>:
                                    ulog_entry_offset() <uint64_t ulog_entry_offset (const struct ulog_entry_base *entry) at libpmemobj/ulog.c:68>:
                                    check()
                                    LOG()
                            ulog_foreach_entry() <int ulog_foreach_entry (struct ulog *ulog, ulog_entry_cb cb, void *arg, const struct pmem_ops *ops) at libpmemobj/ulog.c:180>
                            ulog_process_entry() <int ulog_process_entry (struct ulog_entry_base *e, void *arg, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:591>:
                                SUPPRESS_UNUSED()
                                ulog_entry_apply() <void ulog_entry_apply (const struct ulog_entry_base *e, int persist, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:526>:
                                    ulog_entry_type() <ulog_operation_type ulog_entry_type (const struct ulog_entry_base *entry) at libpmemobj/ulog.c:59>:
                                        ULOG_OPERATION_FROM_OFFSET()
                                    ulog_entry_offset() <uint64_t ulog_entry_offset (const struct ulog_entry_base *entry) at libpmemobj/ulog.c:68>:
                                    f()
                                    VALGRIND_ADD_TO_TX()
                                    pmemops_memset()
                                    pmemops_memcpy()
                                    ASSERT()
                                    VALGRIND_REMOVE_FROM_TX()
                            pmemops_drain()
                        ulog_clobber() <void ulog_clobber (struct ulog *dest, struct ulog_next *next, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:694>:
                            memset()
                            VEC_SIZE()
                            VEC_FRONT()
                            pmemops_memcpy()
                    operation_process_persistent_undo() <void operation_process_persistent_undo (struct operation_context *ctx) at libpmemobj/memops.c:673>:
                        ASSERTeq()
                        ulog_process() <void ulog_process (struct ulog *ulog, ulog_check_offset_fn check, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:786>:
                            SUPPRESS_UNUSED()
                            LOG()
                            ulog_check() <int ulog_check (struct ulog *ulog, ulog_check_offset_fn check, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:881>:
                                LOG()
                                ulog_foreach_entry() <int ulog_foreach_entry (struct ulog *ulog, ulog_entry_cb cb, void *arg, const struct pmem_ops *ops) at libpmemobj/ulog.c:180>
                                ulog_check_entry() <int ulog_check_entry (struct ulog_entry_base *e, void *arg, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:862>:
                                    ulog_entry_offset() <uint64_t ulog_entry_offset (const struct ulog_entry_base *entry) at libpmemobj/ulog.c:68>:
                                    check()
                                    LOG()
                            ulog_foreach_entry() <int ulog_foreach_entry (struct ulog *ulog, ulog_entry_cb cb, void *arg, const struct pmem_ops *ops) at libpmemobj/ulog.c:180>
                            ulog_process_entry() <int ulog_process_entry (struct ulog_entry_base *e, void *arg, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:591>:
                                SUPPRESS_UNUSED()
                                ulog_entry_apply() <void ulog_entry_apply (const struct ulog_entry_base *e, int persist, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:526>:
                                    ulog_entry_type() <ulog_operation_type ulog_entry_type (const struct ulog_entry_base *entry) at libpmemobj/ulog.c:59>:
                                        ULOG_OPERATION_FROM_OFFSET()
                                    ulog_entry_offset() <uint64_t ulog_entry_offset (const struct ulog_entry_base *entry) at libpmemobj/ulog.c:68>:
                                    f()
                                    VALGRIND_ADD_TO_TX()
                                    pmemops_memset()
                                    pmemops_memcpy()
                                    ASSERT()
                                    VALGRIND_REMOVE_FROM_TX()
                            pmemops_drain()
                    ulog_process() <void ulog_process (struct ulog *ulog, ulog_check_offset_fn check, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:786>:
                        SUPPRESS_UNUSED()
                        LOG()
                        ulog_check() <int ulog_check (struct ulog *ulog, ulog_check_offset_fn check, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:881>:
                            LOG()
                            ulog_foreach_entry() <int ulog_foreach_entry (struct ulog *ulog, ulog_entry_cb cb, void *arg, const struct pmem_ops *ops) at libpmemobj/ulog.c:180>
                            ulog_check_entry() <int ulog_check_entry (struct ulog_entry_base *e, void *arg, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:862>:
                                ulog_entry_offset() <uint64_t ulog_entry_offset (const struct ulog_entry_base *entry) at libpmemobj/ulog.c:68>:
                                check()
                                LOG()
                        ulog_foreach_entry() <int ulog_foreach_entry (struct ulog *ulog, ulog_entry_cb cb, void *arg, const struct pmem_ops *ops) at libpmemobj/ulog.c:180>
                        ulog_process_entry() <int ulog_process_entry (struct ulog_entry_base *e, void *arg, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:591>:
                            SUPPRESS_UNUSED()
                            ulog_entry_apply() <void ulog_entry_apply (const struct ulog_entry_base *e, int persist, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:526>:
                                ulog_entry_type() <ulog_operation_type ulog_entry_type (const struct ulog_entry_base *entry) at libpmemobj/ulog.c:59>:
                                    ULOG_OPERATION_FROM_OFFSET()
                                ulog_entry_offset() <uint64_t ulog_entry_offset (const struct ulog_entry_base *entry) at libpmemobj/ulog.c:68>:
                                f()
                                VALGRIND_ADD_TO_TX()
                                pmemops_memset()
                                pmemops_memcpy()
                                ASSERT()
                                VALGRIND_REMOVE_FROM_TX()
                        pmemops_drain()
                util_mutex_unlock()
                operation_finish() <void operation_finish (struct operation_context *ctx, unsigned flags) at libpmemobj/memops.c:814>:
                    ASSERTne()
                    out() <void out (const char *fmt, ...) at core/out.c:480>:
                        va_start()
                        out_common() <} void out_common (const char *file, int line, const char *func, int level, const char *suffix, const char *fmt, va_list ap) at core/out.c:334>
                        va_end()
                    ulog_clobber_data() <int ulog_clobber_data (struct ulog *ulog_first, struct ulog_next *next, ulog_free_fn ulog_free, ulog_rm_user_buffer_fn user_buff_remove, const struct pmem_ops *p_ops, unsigned flags) at libpmemobj/ulog.c:713>:
                        ASSERTne()
                        ulog_inc_gen_num() <void ulog_inc_gen_num (struct ulog *ulog, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:605>:
                            VALGRIND_ADD_TO_TX()
                            pmemops_persist()
                            VALGRIND_SET_CLEAN()
                            VALGRIND_REMOVE_FROM_TX()
                        VEC_SIZE()
                        VEC_GET()
                        ulog_by_offset() <struct ulog *ulog_by_offset (size_t offset, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:36>:
                            CACHELINE_ALIGN()
                        ulog_free_next() <int ulog_free_next (struct ulog *u, const struct pmem_ops *p_ops, ulog_free_fn ulog_free, ulog_rm_user_buffer_fn user_buff_remove, uint64_t flags) at libpmemobj/ulog.c:625>:
                            VEC()
                            VEC_INIT()
                            ulog_by_offset() <struct ulog *ulog_by_offset (size_t offset, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:36>:
                                CACHELINE_ALIGN()
                            pmemops_persist()
                            VEC_PUSH_BACK()
                            LOG()
                            out() <void out (const char *fmt, ...) at core/out.c:480>:
                                va_start()
                                out_common() <} void out_common (const char *file, int line, const char *func, int level, const char *suffix, const char *fmt, va_list ap) at core/out.c:334>
                                va_end()
                            VEC_FOREACH_REVERSE()
                            VEC_DELETE()
                    operation_user_buffer_remove() <int operation_user_buffer_remove (void *base, void *addr) at libpmemobj/memops.c:242>:
                        util_mutex_lock()
                        ravl_find() <struct ravl_node *ravl_find (struct ravl *ravl, const void *data, enum ravl_predicate flags) at core/ravl.c:524>:
                            LOG()
                            ravl_data() <void *ravl_data (struct ravl_node *node) at core/ravl.c:571>:
                                memcpy()
                            ravl_predicate_holds() <int ravl_predicate_holds (int result, struct ravl_node **ret, struct ravl_node *n, enum ravl_predicate flags) at core/ravl.c:489>:
                                ravl_node_successor() <struct ravl_node *ravl_node_successor (struct ravl_node *n) at core/ravl.c:465>:
                                    ravl_node_cessor() <struct ravl_node *ravl_node_cessor (struct ravl_node *n, enum ravl_slot_type t) at core/ravl.c:443>:
                                        ravl_node_type_most() <struct ravl_node *ravl_node_type_most (struct ravl_node *n, enum ravl_slot_type t) at core/ravl.c:430>:
                                        ravl_slot_opposite() <enum ravl_slot_type ravl_slot_opposite (enum ravl_slot_type t) at core/ravl.c:184>:
                                            ASSERTne()
                                ravl_node_predecessor() <struct ravl_node *ravl_node_predecessor (struct ravl_node *n) at core/ravl.c:476>:
                                    ravl_node_cessor() <struct ravl_node *ravl_node_cessor (struct ravl_node *n, enum ravl_slot_type t) at core/ravl.c:443>:
                                        ravl_node_type_most() <struct ravl_node *ravl_node_type_most (struct ravl_node *n, enum ravl_slot_type t) at core/ravl.c:430>:
                                        ravl_slot_opposite() <enum ravl_slot_type ravl_slot_opposite (enum ravl_slot_type t) at core/ravl.c:184>:
                                            ASSERTne()
                        ASSERTne()
                        ravl_remove() <void ravl_remove (struct ravl *ravl, struct ravl_node *n) at core/ravl.c:545> (R):
                            LOG()
                            ravl_node_successor() <struct ravl_node *ravl_node_successor (struct ravl_node *n) at core/ravl.c:465>:
                                ravl_node_cessor() <struct ravl_node *ravl_node_cessor (struct ravl_node *n, enum ravl_slot_type t) at core/ravl.c:443>:
                                    ravl_node_type_most() <struct ravl_node *ravl_node_type_most (struct ravl_node *n, enum ravl_slot_type t) at core/ravl.c:430>:
                                    ravl_slot_opposite() <enum ravl_slot_type ravl_slot_opposite (enum ravl_slot_type t) at core/ravl.c:184>:
                                        ASSERTne()
                            memcpy()
                            ravl_remove() <void ravl_remove (struct ravl *ravl, struct ravl_node *n) at core/ravl.c:545> (recursive: see 15144)
                            ravl_node_ref() <struct ravl_node **ravl_node_ref (struct ravl *ravl, struct ravl_node *n) at core/ravl.c:223>:
                                ravl_node_slot_type() <enum ravl_slot_type ravl_node_slot_type (struct ravl_node *n) at core/ravl.c:196>:
                            Free() <Free_func Free at core/alloc.c:91>
                        util_mutex_unlock()
                    ulog_free_next() <int ulog_free_next (struct ulog *u, const struct pmem_ops *p_ops, ulog_free_fn ulog_free, ulog_rm_user_buffer_fn user_buff_remove, uint64_t flags) at libpmemobj/ulog.c:625>:
                        VEC()
                        VEC_INIT()
                        ulog_by_offset() <struct ulog *ulog_by_offset (size_t offset, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:36>:
                            CACHELINE_ALIGN()
                        pmemops_persist()
                        VEC_PUSH_BACK()
                        LOG()
                        out() <void out (const char *fmt, ...) at core/out.c:480>:
                            va_start()
                            out_common() <} void out_common (const char *file, int line, const char *func, int level, const char *suffix, const char *fmt, va_list ap) at core/out.c:334>
                            va_end()
                        VEC_FOREACH_REVERSE()
                        VEC_DELETE()
                    ulog_capacity() <size_t ulog_capacity (struct ulog *ulog, size_t ulog_base_bytes, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:206>:
                        ulog_next() <struct ulog *ulog_next (struct ulog *ulog, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:50>:
                            ulog_by_offset() <struct ulog *ulog_by_offset (size_t offset, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:36>:
                                CACHELINE_ALIGN()
                    VEC_CLEAR()
                    ulog_rebuild_next_vec() <void ulog_rebuild_next_vec (struct ulog *ulog, struct ulog_next *next, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:223>:
                        VEC_PUSH_BACK()
                        ulog_next() <struct ulog *ulog_next (struct ulog *ulog, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:50>:
                            ulog_by_offset() <struct ulog *ulog_by_offset (size_t offset, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:36>:
                                CACHELINE_ALIGN()
        pmalloc_operation_release() <void pmalloc_operation_release (PMEMobjpool *pop) at libpmemobj/pmalloc.c:83>:
            lane_release() <void lane_release (PMEMobjpool *pop) at libpmemobj/lane.c:546>:
                get_lane_info_record() <inline struct lane_info *get_lane_info_record (PMEMobjpool *pop) at libpmemobj/lane.c:466>:
                    likely()
                    unlikely()
                    lane_info_ht_boot() <inline void lane_info_ht_boot (void) at libpmemobj/lane.c:74>:
                        lane_info_create() <inline void lane_info_create (void) at libpmemobj/lane.c:39>:
                            critnib_new() <struct critnib *critnib_new (void) at libpmemobj/critnib.c:187>:
                                Zalloc() <void *Zalloc (size_t sz) at core/alloc.c:98>:
                                    Malloc()
                                    memset()
                                util_mutex_init()
                                VALGRIND_HG_DRD_DISABLE_CHECKING()
                            FATAL()
                        os_tls_set() <int os_tls_set (os_tls_key_t key, const void *value) at core/os_thread_posix.c:53>:
                            pthread_setspecific()
                        FATAL()
                    critnib_get() <void *critnib_get (struct critnib *c, uint64_t key) at libpmemobj/critnib.c:515>:
                        load() <void load (void *src, void *dst) at libpmemobj/critnib.c:130>:
                            util_atomic_load_explicit64()
                        is_leaf() <inline bool is_leaf (struct critnib_node *n) at libpmemobj/critnib.c:150>:
                        slice_index() <inline unsigned slice_index (uint64_t key, sh_t shift) at libpmemobj/critnib.c:178>:
                        to_leaf() <inline struct critnib_leaf *to_leaf (struct critnib_node *n) at libpmemobj/critnib.c:159>:
                    Malloc()
                    FATAL()
                    critnib_insert() <int critnib_insert (struct critnib *c, uint64_t key, void *value) at libpmemobj/critnib.c:340>:
                        util_mutex_lock()
                        alloc_leaf() <struct critnib_leaf *alloc_leaf (struct critnib *__restrict c) at libpmemobj/critnib.c:311>:
                            Malloc()
                            ERR()
                            VALGRIND_ANNOTATE_NEW_MEMORY()
                        util_mutex_unlock()
                        VALGRIND_HG_DRD_DISABLE_CHECKING()
                        is_leaf() <inline bool is_leaf (struct critnib_node *n) at libpmemobj/critnib.c:150>:
                        path_mask() <inline uint64_t path_mask (sh_t shift) at libpmemobj/critnib.c:169>:
                        slice_index() <inline unsigned slice_index (uint64_t key, sh_t shift) at libpmemobj/critnib.c:178>:
                        store() <void store (void *dst, void *src) at libpmemobj/critnib.c:140>:
                            util_atomic_store_explicit64()
                        to_leaf() <inline struct critnib_leaf *to_leaf (struct critnib_node *n) at libpmemobj/critnib.c:159>:
                        ASSERT()
                        free_leaf() <void free_leaf (struct critnib *__restrict c, struct critnib_leaf *__restrict k) at libpmemobj/critnib.c:298>
                        util_mssb_index64()
                        alloc_node() <struct critnib_node *alloc_node (struct critnib *__restrict c) at libpmemobj/critnib.c:274>:
                            Malloc()
                            ERR()
                            VALGRIND_ANNOTATE_NEW_MEMORY()
                ASSERTne()
                unlikely()
                FATAL()
                util_bool_compare_and_swap64()
    PMEMOBJ_API_END()
pmemobj_memcpy_persist() <void *pmemobj_memcpy_persist (PMEMobjpool *pop, void *dest, const void *src, size_t len) at libpmemobj/obj.c:2182>:
    LOG()
    PMEMOBJ_API_START()
    pmemops_memcpy()
    PMEMOBJ_API_END()
pmemobj_open() <PMEMobjpool *pmemobj_open (const char *path, const char *layout) at libpmemobj/obj.c:1446>:
    PMEMOBJ_API_START()
    pmemobj_openU() <inline PMEMobjpool *pmemobj_openU (const char *path, const char *layout) at libpmemobj/obj.c:1434>:
        LOG()
        obj_open_common() <PMEMobjpool *obj_open_common (const char *path, const char *layout, unsigned flags, int boot) at libpmemobj/obj.c:1342>:
            LOG()
            os_mutex_lock() <int os_mutex_lock (os_mutex_t *__restrict mutex) at core/os_thread_posix.c:90>:
                pthread_mutex_lock()
            obj_get_nlanes() <unsigned obj_get_nlanes (void) at libpmemobj/obj.c:1026>:
                LOG()
                os_getenv() <char *os_getenv (const char *name) at core/os_posix.c:279>:
                    secure_getenv()
                atoi()
                ERR()
            obj_pool_open() <int obj_pool_open (struct pool_set **set, const char *path, unsigned flags, unsigned *nlanes) at libpmemobj/obj.c:1231>:
                util_pool_open() <int util_pool_open (struct pool_set **setp, const char *path, size_t minpartsize, const struct pool_attr *attr, unsigned *nlanes, void *addr, unsigned flags) at common/set.c:2961>:
                    LOG()
                    util_poolset_create_set() <int util_poolset_create_set (struct pool_set **setp, const char *path, size_t poolsize, size_t minsize, int ignore_sds) at common/set.c:1583>:
                        LOG()
                        util_file_get_type() <enum file_type util_file_get_type (const char *path) at common/file.c:106>:
                            LOG()
                            ERR()
                            util_file_exists() <int util_file_exists (const char *path) at common/file.c:32>:
                                LOG()
                                os_access() <int os_access (const char *pathname, int mode) at core/os_posix.c:97>:
                                    access()
                                ERR()
                            os_stat() <int os_stat (const char *pathname, os_stat_t *buf) at core/os_posix.c:79>:
                                stat()
                            util_stat_get_type() <enum file_type util_stat_get_type (const os_stat_t *st) at common/file.c:62>:
                                pmem2_get_type_from_stat() <int pmem2_get_type_from_stat (const os_stat_t *st, enum pmem2_file_type *type) at libpmem2/pmem2_utils_linux.c:23>:
                                    S_ISREG()
                                    S_ISDIR()
                                    S_ISCHR()
                                    ERR()
                                    util_snprintf() <int util_snprintf (char *str, size_t size, const char *format, ...) at core/util.c:434>:
                                        va_start()
                                        vsnprintf()
                                        va_end()
                                    os_major()
                                    os_minor()
                                    ASSERTinfo()
                                    LOG()
                                    realpath()
                                    strrchr()
                                    strcmp()
                                pmem2_err_to_errno() <int pmem2_err_to_errno (int err) at libpmem2/pmem2_utils.c:67>:
                                    FATAL()
                                ASSERTinfo()
                        ERR()
                        util_poolset_single() <struct pool_set *util_poolset_single (const char *path, size_t filesize, int create, int ignore_sds) at common/set.c:1383>:
                            LOG()
                            util_file_get_type() <enum file_type util_file_get_type (const char *path) at common/file.c:106>:
                                LOG()
                                ERR()
                                util_file_exists() <int util_file_exists (const char *path) at common/file.c:32>:
                                    LOG()
                                    os_access() <int os_access (const char *pathname, int mode) at core/os_posix.c:97>:
                                        access()
                                    ERR()
                                os_stat() <int os_stat (const char *pathname, os_stat_t *buf) at core/os_posix.c:79>:
                                    stat()
                                util_stat_get_type() <enum file_type util_stat_get_type (const os_stat_t *st) at common/file.c:62>:
                                    pmem2_get_type_from_stat() <int pmem2_get_type_from_stat (const os_stat_t *st, enum pmem2_file_type *type) at libpmem2/pmem2_utils_linux.c:23>:
                                        S_ISREG()
                                        S_ISDIR()
                                        S_ISCHR()
                                        ERR()
                                        util_snprintf() <int util_snprintf (char *str, size_t size, const char *format, ...) at core/util.c:434>:
                                            va_start()
                                            vsnprintf()
                                            va_end()
                                        os_major()
                                        os_minor()
                                        ASSERTinfo()
                                        LOG()
                                        realpath()
                                        strrchr()
                                        strcmp()
                                    pmem2_err_to_errno() <int pmem2_err_to_errno (int err) at libpmem2/pmem2_utils.c:67>:
                                        FATAL()
                                    ASSERTinfo()
                            Zalloc() <void *Zalloc (size_t sz) at core/alloc.c:98>:
                                Malloc()
                                memset()
                            ERR()
                            Strdup() <Strdup_func Strdup at core/alloc.c:92>
                            Free() <Free_func Free at core/alloc.c:91>
                            VEC_INIT()
                            util_file_device_dax_alignment() <size_t util_file_device_dax_alignment (const char *path) at common/file_posix.c:139>:
                                LOG()
                                device_dax_alignment() <size_t device_dax_alignment (const char *path) at common/file_posix.c:105>:
                                    LOG()
                                    os_open() <int os_open (const char *pathname, int flags, ...) at core/os_posix.c:29>:
                                        va_start()
                                        va_arg()
                                        va_end()
                                        open()
                                    pmem2_source_from_fd() <int pmem2_source_from_fd (struct pmem2_source **src, int fd) at libpmem2/source_posix.c:19>:
                                        PMEM2_ERR_CLR()
                                        fcntl()
                                        ERR()
                                        os_fstat()
                                        pmem2_get_type_from_stat() <int pmem2_get_type_from_stat (const os_stat_t *st, enum pmem2_file_type *type) at libpmem2/pmem2_utils_linux.c:23>:
                                            S_ISREG()
                                            S_ISDIR()
                                            S_ISCHR()
                                            ERR()
                                            util_snprintf() <int util_snprintf (char *str, size_t size, const char *format, ...) at core/util.c:434>:
                                                va_start()
                                                vsnprintf()
                                                va_end()
                                            os_major()
                                            os_minor()
                                            ASSERTinfo()
                                            LOG()
                                            realpath()
                                            strrchr()
                                            strcmp()
                                        pmem2_malloc() <void *pmem2_malloc (size_t size, int *err) at libpmem2/pmem2_utils.c:19>:
                                            Malloc()
                                            ERR()
                                        ASSERTne()
                                    pmem2_device_dax_alignment() <int pmem2_device_dax_alignment (const struct pmem2_source *src, size_t *alignment) at libpmem2/pmem2_utils_ndctl.c:18>:
                                        ndctl_new()
                                        ERR()
                                        pmem2_region_namespace() <int pmem2_region_namespace (struct ndctl_ctx *ctx, const struct pmem2_source *src, struct ndctl_region **pregion, struct ndctl_namespace **pndns) at libpmem2/region_namespace_ndctl.c:131>:
                                            LOG()
                                            ERR()
                                            FOREACH_BUS_REGION_NAMESPACE()
                                            ndctl_namespace_get_dax()
                                            ASSERTeq()
                                            ndctl_dax_get_daxctl_region()
                                            daxctl_dev_foreach()
                                            daxctl_dev_get_devname()
                                            ndctl_match_devdax() <int ndctl_match_devdax (dev_t st_rdev, const char *devname) at libpmem2/region_namespace_ndctl.c:26>:
                                                LOG()
                                                stat()
                                                util_snprintf() <int util_snprintf (char *str, size_t size, const char *format, ...) at core/util.c:434>:
                                                    va_start()
                                                    vsnprintf()
                                                    va_end()
                                                ERR()
                                                os_stat() <int os_stat (const char *pathname, os_stat_t *buf) at core/os_posix.c:79>:
                                                    stat()
                                            ndctl_namespace_get_btt()
                                            ndctl_btt_get_block_device()
                                            ndctl_namespace_get_pfn()
                                            ndctl_pfn_get_block_device()
                                            ndctl_namespace_get_block_device()
                                            ndctl_match_fsdax() <int ndctl_match_fsdax (dev_t st_dev, const char *devname) at libpmem2/region_namespace_ndctl.c:64>:
                                                LOG()
                                                util_snprintf() <int util_snprintf (char *str, size_t size, const char *format, ...) at core/util.c:434>:
                                                    va_start()
                                                    vsnprintf()
                                                    va_end()
                                                ERR()
                                                major()
                                                minor()
                                                os_open() <int os_open (const char *pathname, int flags, ...) at core/os_posix.c:29>:
                                                    va_start()
                                                    va_arg()
                                                    va_end()
                                                    open()
                                                read()
                                                os_close()
                                                strcmp()
                                        LOG()
                                        ndctl_namespace_get_dax()
                                        ndctl_dax_get_align()
                                        ndctl_unref()
                                    pmem2_source_delete() <int pmem2_source_delete (struct pmem2_source **src) at libpmem2/source.c:30>:
                                        Free() <Free_func Free at core/alloc.c:91>
                                    os_close()
                            ASSERTne()
                        util_file_open() <int util_file_open (const char *path, size_t *size, size_t minsize, int flags) at common/file.c:456>:
                            LOG()
                            os_open() <int os_open (const char *pathname, int flags, ...) at core/os_posix.c:29>:
                                va_start()
                                va_arg()
                                va_end()
                                open()
                            ERR()
                            os_flock() <int os_flock (int fd, int operation) at core/os_posix.c:215>:
                                flock()
                            os_close()
                            ASSERTeq()
                            util_fd_get_size() <ssize_t util_fd_get_size (int fd) at common/file.c:157>:
                                LOG()
                                pmem2_source_from_fd() <int pmem2_source_from_fd (struct pmem2_source **src, int fd) at libpmem2/source_posix.c:19>:
                                    PMEM2_ERR_CLR()
                                    fcntl()
                                    ERR()
                                    os_fstat()
                                    pmem2_get_type_from_stat() <int pmem2_get_type_from_stat (const os_stat_t *st, enum pmem2_file_type *type) at libpmem2/pmem2_utils_linux.c:23>:
                                        S_ISREG()
                                        S_ISDIR()
                                        S_ISCHR()
                                        ERR()
                                        util_snprintf() <int util_snprintf (char *str, size_t size, const char *format, ...) at core/util.c:434>:
                                            va_start()
                                            vsnprintf()
                                            va_end()
                                        os_major()
                                        os_minor()
                                        ASSERTinfo()
                                        LOG()
                                        realpath()
                                        strrchr()
                                        strcmp()
                                    pmem2_malloc() <void *pmem2_malloc (size_t size, int *err) at libpmem2/pmem2_utils.c:19>:
                                        Malloc()
                                        ERR()
                                    ASSERTne()
                                pmem2_err_to_errno() <int pmem2_err_to_errno (int err) at libpmem2/pmem2_utils.c:67>:
                                    FATAL()
                                pmem2_source_size() <int pmem2_source_size (const struct pmem2_source *src, size_t *size) at libpmem2/source_posix.c:90>:
                                    LOG()
                                    PMEM2_ERR_CLR()
                                    ASSERT()
                                    os_fstat()
                                    ERR()
                                    pmem2_device_dax_size() <int pmem2_device_dax_size (const struct pmem2_source *src, size_t *size) at libpmem2/pmem2_utils_ndctl.c:58>:
                                        ndctl_new()
                                        ERR()
                                        pmem2_region_namespace() <int pmem2_region_namespace (struct ndctl_ctx *ctx, const struct pmem2_source *src, struct ndctl_region **pregion, struct ndctl_namespace **pndns) at libpmem2/region_namespace_ndctl.c:131>:
                                            LOG()
                                            ERR()
                                            FOREACH_BUS_REGION_NAMESPACE()
                                            ndctl_namespace_get_dax()
                                            ASSERTeq()
                                            ndctl_dax_get_daxctl_region()
                                            daxctl_dev_foreach()
                                            daxctl_dev_get_devname()
                                            ndctl_match_devdax() <int ndctl_match_devdax (dev_t st_rdev, const char *devname) at libpmem2/region_namespace_ndctl.c:26>:
                                                LOG()
                                                stat()
                                                util_snprintf() <int util_snprintf (char *str, size_t size, const char *format, ...) at core/util.c:434>:
                                                    va_start()
                                                    vsnprintf()
                                                    va_end()
                                                ERR()
                                                os_stat() <int os_stat (const char *pathname, os_stat_t *buf) at core/os_posix.c:79>:
                                                    stat()
                                            ndctl_namespace_get_btt()
                                            ndctl_btt_get_block_device()
                                            ndctl_namespace_get_pfn()
                                            ndctl_pfn_get_block_device()
                                            ndctl_namespace_get_block_device()
                                            ndctl_match_fsdax() <int ndctl_match_fsdax (dev_t st_dev, const char *devname) at libpmem2/region_namespace_ndctl.c:64>:
                                                LOG()
                                                util_snprintf() <int util_snprintf (char *str, size_t size, const char *format, ...) at core/util.c:434>:
                                                    va_start()
                                                    vsnprintf()
                                                    va_end()
                                                ERR()
                                                major()
                                                minor()
                                                os_open() <int os_open (const char *pathname, int flags, ...) at core/os_posix.c:29>:
                                                    va_start()
                                                    va_arg()
                                                    va_end()
                                                    open()
                                                read()
                                                os_close()
                                                strcmp()
                                        LOG()
                                        ndctl_namespace_get_dax()
                                        ndctl_dax_get_size()
                                        ndctl_unref()
                                    FATAL()
                                pmem2_source_delete() <int pmem2_source_delete (struct pmem2_source **src) at libpmem2/source.c:30>:
                                    Free() <Free_func Free at core/alloc.c:91>
                                ERR()
                        read()
                        strncmp()
                        os_close()
                        util_poolset_parse() <int util_poolset_parse (struct pool_set **setp, const char *path, int fd) at common/set.c:1172>:
                            LOG()
                            os_lseek()
                            ERR()
                            dup()
                            os_fdopen() <FILE *os_fdopen (int fd, const char *mode) at core/os_posix.c:115>:
                                fdopen()
                            os_close()
                            util_readline() <char *util_readline (FILE *fh) at core/util.c:459>:
                                Realloc()
                                Free() <Free_func Free at core/alloc.c:91>
                                util_fgets() <char *util_fgets (char *buffer, int max, FILE *stream) at core/util.c:217>:
                                    fgets()
                                    strlen()
                                strlen()
                                feof()
                            Zalloc() <void *Zalloc (size_t sz) at core/alloc.c:98>:
                                Malloc()
                                memset()
                            Strdup() <Strdup_func Strdup at core/alloc.c:92>
                            strncmp()
                            util_parse_add_replica() <int util_parse_add_replica (struct pool_set **setp) at common/set.c:823>:
                                LOG()
                                ASSERTne()
                                Realloc()
                                ERR()
                                Zalloc() <void *Zalloc (size_t sz) at core/alloc.c:98>:
                                    Malloc()
                                    memset()
                                VEC_INIT()
                            Free() <Free_func Free at core/alloc.c:91>
                            strchr()
                            parser_read_options() <enum parser_codes parser_read_options (char *line, unsigned *options) at common/set.c:550>:
                                LOG()
                                strtok_r()
                                strcmp()
                            isblank()
                            parser_read_replica() <enum parser_codes parser_read_replica (char *line, char **node_addr, char **pool_desc) at common/set.c:590>:
                                strtok_r()
                                LOG()
                                util_is_absolute_path() <int util_is_absolute_path (const char *path) at common/file_posix.c:32>:
                                    LOG()
                                Strdup() <Strdup_func Strdup at core/alloc.c:92>
                                ERR()
                                Free() <Free_func Free at core/alloc.c:91>
                            parser_read_line() <enum parser_codes parser_read_line (char *line, size_t *size, char **path) at common/set.c:485>:
                                strtok_r()
                                LOG()
                                util_is_absolute_path() <int util_is_absolute_path (const char *path) at common/file_posix.c:32>:
                                    LOG()
                                Strdup() <Strdup_func Strdup at core/alloc.c:92>
                                ERR()
                                strcmp()
                                util_autodetect_size() <ssize_t util_autodetect_size (const char *path) at common/set.c:466>:
                                    util_file_get_type() <enum file_type util_file_get_type (const char *path) at common/file.c:106>:
                                        LOG()
                                        ERR()
                                        util_file_exists() <int util_file_exists (const char *path) at common/file.c:32>:
                                            LOG()
                                            os_access() <int os_access (const char *pathname, int mode) at core/os_posix.c:97>:
                                                access()
                                            ERR()
                                        os_stat() <int os_stat (const char *pathname, os_stat_t *buf) at core/os_posix.c:79>:
                                            stat()
                                        util_stat_get_type() <enum file_type util_stat_get_type (const os_stat_t *st) at common/file.c:62>:
                                            pmem2_get_type_from_stat() <int pmem2_get_type_from_stat (const os_stat_t *st, enum pmem2_file_type *type) at libpmem2/pmem2_utils_linux.c:23>:
                                                S_ISREG()
                                                S_ISDIR()
                                                S_ISCHR()
                                                ERR()
                                                util_snprintf() <int util_snprintf (char *str, size_t size, const char *format, ...) at core/util.c:434>:
                                                    va_start()
                                                    vsnprintf()
                                                    va_end()
                                                os_major()
                                                os_minor()
                                                ASSERTinfo()
                                                LOG()
                                                realpath()
                                                strrchr()
                                                strcmp()
                                            pmem2_err_to_errno() <int pmem2_err_to_errno (int err) at libpmem2/pmem2_utils.c:67>:
                                                FATAL()
                                            ASSERTinfo()
                                    ERR()
                                    util_file_get_size() <ssize_t util_file_get_size (const char *path) at common/file.c:137>:
                                        LOG()
                                        os_open() <int os_open (const char *pathname, int flags, ...) at core/os_posix.c:29>:
                                            va_start()
                                            va_arg()
                                            va_end()
                                            open()
                                        ERR()
                                        util_fd_get_size() <ssize_t util_fd_get_size (int fd) at common/file.c:157>:
                                            LOG()
                                            pmem2_source_from_fd() <int pmem2_source_from_fd (struct pmem2_source **src, int fd) at libpmem2/source_posix.c:19>:
                                                PMEM2_ERR_CLR()
                                                fcntl()
                                                ERR()
                                                os_fstat()
                                                pmem2_get_type_from_stat() <int pmem2_get_type_from_stat (const os_stat_t *st, enum pmem2_file_type *type) at libpmem2/pmem2_utils_linux.c:23>:
                                                    S_ISREG()
                                                    S_ISDIR()
                                                    S_ISCHR()
                                                    ERR()
                                                    util_snprintf() <int util_snprintf (char *str, size_t size, const char *format, ...) at core/util.c:434>:
                                                        va_start()
                                                        vsnprintf()
                                                        va_end()
                                                    os_major()
                                                    os_minor()
                                                    ASSERTinfo()
                                                    LOG()
                                                    realpath()
                                                    strrchr()
                                                    strcmp()
                                                pmem2_malloc() <void *pmem2_malloc (size_t size, int *err) at libpmem2/pmem2_utils.c:19>:
                                                    Malloc()
                                                    ERR()
                                                ASSERTne()
                                            pmem2_err_to_errno() <int pmem2_err_to_errno (int err) at libpmem2/pmem2_utils.c:67>:
                                                FATAL()
                                            pmem2_source_size() <int pmem2_source_size (const struct pmem2_source *src, size_t *size) at libpmem2/source_posix.c:90>:
                                                LOG()
                                                PMEM2_ERR_CLR()
                                                ASSERT()
                                                os_fstat()
                                                ERR()
                                                pmem2_device_dax_size() <int pmem2_device_dax_size (const struct pmem2_source *src, size_t *size) at libpmem2/pmem2_utils_ndctl.c:58>:
                                                    ndctl_new()
                                                    ERR()
                                                    pmem2_region_namespace() <int pmem2_region_namespace (struct ndctl_ctx *ctx, const struct pmem2_source *src, struct ndctl_region **pregion, struct ndctl_namespace **pndns) at libpmem2/region_namespace_ndctl.c:131>:
                                                        LOG()
                                                        ERR()
                                                        FOREACH_BUS_REGION_NAMESPACE()
                                                        ndctl_namespace_get_dax()
                                                        ASSERTeq()
                                                        ndctl_dax_get_daxctl_region()
                                                        daxctl_dev_foreach()
                                                        daxctl_dev_get_devname()
                                                        ndctl_match_devdax() <int ndctl_match_devdax (dev_t st_rdev, const char *devname) at libpmem2/region_namespace_ndctl.c:26>:
                                                            LOG()
                                                            stat()
                                                            util_snprintf() <int util_snprintf (char *str, size_t size, const char *format, ...) at core/util.c:434>:
                                                                va_start()
                                                                vsnprintf()
                                                                va_end()
                                                            ERR()
                                                            os_stat() <int os_stat (const char *pathname, os_stat_t *buf) at core/os_posix.c:79>:
                                                                stat()
                                                        ndctl_namespace_get_btt()
                                                        ndctl_btt_get_block_device()
                                                        ndctl_namespace_get_pfn()
                                                        ndctl_pfn_get_block_device()
                                                        ndctl_namespace_get_block_device()
                                                        ndctl_match_fsdax() <int ndctl_match_fsdax (dev_t st_dev, const char *devname) at libpmem2/region_namespace_ndctl.c:64>:
                                                            LOG()
                                                            util_snprintf() <int util_snprintf (char *str, size_t size, const char *format, ...) at core/util.c:434>:
                                                                va_start()
                                                                vsnprintf()
                                                                va_end()
                                                            ERR()
                                                            major()
                                                            minor()
                                                            os_open() <int os_open (const char *pathname, int flags, ...) at core/os_posix.c:29>:
                                                                va_start()
                                                                va_arg()
                                                                va_end()
                                                                open()
                                                            read()
                                                            os_close()
                                                            strcmp()
                                                    LOG()
                                                    ndctl_namespace_get_dax()
                                                    ndctl_dax_get_size()
                                                    ndctl_unref()
                                                FATAL()
                                            pmem2_source_delete() <int pmem2_source_delete (struct pmem2_source **src) at libpmem2/source.c:30>:
                                                Free() <Free_func Free at core/alloc.c:91>
                                            ERR()
                                        close()
                                Free() <Free_func Free at core/alloc.c:91>
                                util_parse_size() <int util_parse_size (const char *str, size_t *sizep) at core/util.c:243>:
                                    sscanf()
                                    ARRAY_SIZE()
                                    strcmp()
                            util_parse_add_element() <int util_parse_add_element (struct pool_set *set, const char *path, size_t filesize) at common/set.c:803>:
                                LOG()
                                stat()
                                os_stat() <int os_stat (const char *pathname, os_stat_t *buf) at core/os_posix.c:79>:
                                    stat()
                                S_ISDIR()
                                util_parse_add_directory() <int util_parse_add_directory (struct pool_set *set, const char *path, size_t filesize) at common/set.c:742>:
                                    LOG()
                                    ASSERTne()
                                    ERR()
                                    util_part_realpath() <char *util_part_realpath (const char *path) at core/util_posix.c:44>:
                                        realpath()
                                    VEC_FOREACH_BY_PTR()
                                    strcmp()
                                    free()
                                    VEC_PUSH_BACK()
                                util_parse_add_part() <int util_parse_add_part (struct pool_set *set, const char *path, size_t filesize) at common/set.c:721>:
                                    LOG()
                                    ASSERTne()
                                    ERR()
                                    util_replica_add_part() <int util_replica_add_part (struct pool_replica **repp, const char *path, size_t filesize) at common/set.c:708>:
                                        LOG()
                                        util_replica_add_part_by_idx() <int util_replica_add_part_by_idx (struct pool_replica **repp, const char *path, size_t filesize, unsigned p) at common/set.c:662>:
                                            LOG()
                                            util_replica_reserve() <int util_replica_reserve (struct pool_replica **repp, unsigned n) at common/set.c:633>:
                                                LOG()
                                                Realloc()
                                                ERR()
                                                memset()
                                            ASSERTne()
                                            util_file_get_type() <enum file_type util_file_get_type (const char *path) at common/file.c:106>:
                                                LOG()
                                                ERR()
                                                util_file_exists() <int util_file_exists (const char *path) at common/file.c:32>:
                                                    LOG()
                                                    os_access() <int os_access (const char *pathname, int mode) at core/os_posix.c:97>:
                                                        access()
                                                    ERR()
                                                os_stat() <int os_stat (const char *pathname, os_stat_t *buf) at core/os_posix.c:79>:
                                                    stat()
                                                util_stat_get_type() <enum file_type util_stat_get_type (const os_stat_t *st) at common/file.c:62>:
                                                    pmem2_get_type_from_stat() <int pmem2_get_type_from_stat (const os_stat_t *st, enum pmem2_file_type *type) at libpmem2/pmem2_utils_linux.c:23>:
                                                        S_ISREG()
                                                        S_ISDIR()
                                                        S_ISCHR()
                                                        ERR()
                                                        util_snprintf() <int util_snprintf (char *str, size_t size, const char *format, ...) at core/util.c:434>:
                                                            va_start()
                                                            vsnprintf()
                                                            va_end()
                                                        os_major()
                                                        os_minor()
                                                        ASSERTinfo()
                                                        LOG()
                                                        realpath()
                                                        strrchr()
                                                        strcmp()
                                                    pmem2_err_to_errno() <int pmem2_err_to_errno (int err) at libpmem2/pmem2_utils.c:67>:
                                                        FATAL()
                                                    ASSERTinfo()
                                            util_file_device_dax_alignment() <size_t util_file_device_dax_alignment (const char *path) at common/file_posix.c:139>:
                                                LOG()
                                                device_dax_alignment() <size_t device_dax_alignment (const char *path) at common/file_posix.c:105>:
                                                    LOG()
                                                    os_open() <int os_open (const char *pathname, int flags, ...) at core/os_posix.c:29>:
                                                        va_start()
                                                        va_arg()
                                                        va_end()
                                                        open()
                                                    pmem2_source_from_fd() <int pmem2_source_from_fd (struct pmem2_source **src, int fd) at libpmem2/source_posix.c:19>:
                                                        PMEM2_ERR_CLR()
                                                        fcntl()
                                                        ERR()
                                                        os_fstat()
                                                        pmem2_get_type_from_stat() <int pmem2_get_type_from_stat (const os_stat_t *st, enum pmem2_file_type *type) at libpmem2/pmem2_utils_linux.c:23>:
                                                            S_ISREG()
                                                            S_ISDIR()
                                                            S_ISCHR()
                                                            ERR()
                                                            util_snprintf() <int util_snprintf (char *str, size_t size, const char *format, ...) at core/util.c:434>:
                                                                va_start()
                                                                vsnprintf()
                                                                va_end()
                                                            os_major()
                                                            os_minor()
                                                            ASSERTinfo()
                                                            LOG()
                                                            realpath()
                                                            strrchr()
                                                            strcmp()
                                                        pmem2_malloc() <void *pmem2_malloc (size_t size, int *err) at libpmem2/pmem2_utils.c:19>:
                                                            Malloc()
                                                            ERR()
                                                        ASSERTne()
                                                    pmem2_device_dax_alignment() <int pmem2_device_dax_alignment (const struct pmem2_source *src, size_t *alignment) at libpmem2/pmem2_utils_ndctl.c:18>:
                                                        ndctl_new()
                                                        ERR()
                                                        pmem2_region_namespace() <int pmem2_region_namespace (struct ndctl_ctx *ctx, const struct pmem2_source *src, struct ndctl_region **pregion, struct ndctl_namespace **pndns) at libpmem2/region_namespace_ndctl.c:131>:
                                                            LOG()
                                                            ERR()
                                                            FOREACH_BUS_REGION_NAMESPACE()
                                                            ndctl_namespace_get_dax()
                                                            ASSERTeq()
                                                            ndctl_dax_get_daxctl_region()
                                                            daxctl_dev_foreach()
                                                            daxctl_dev_get_devname()
                                                            ndctl_match_devdax() <int ndctl_match_devdax (dev_t st_rdev, const char *devname) at libpmem2/region_namespace_ndctl.c:26>:
                                                                LOG()
                                                                stat()
                                                                util_snprintf() <int util_snprintf (char *str, size_t size, const char *format, ...) at core/util.c:434>:
                                                                    va_start()
                                                                    vsnprintf()
                                                                    va_end()
                                                                ERR()
                                                                os_stat() <int os_stat (const char *pathname, os_stat_t *buf) at core/os_posix.c:79>:
                                                                    stat()
                                                            ndctl_namespace_get_btt()
                                                            ndctl_btt_get_block_device()
                                                            ndctl_namespace_get_pfn()
                                                            ndctl_pfn_get_block_device()
                                                            ndctl_namespace_get_block_device()
                                                            ndctl_match_fsdax() <int ndctl_match_fsdax (dev_t st_dev, const char *devname) at libpmem2/region_namespace_ndctl.c:64>:
                                                                LOG()
                                                                util_snprintf() <int util_snprintf (char *str, size_t size, const char *format, ...) at core/util.c:434>:
                                                                    va_start()
                                                                    vsnprintf()
                                                                    va_end()
                                                                ERR()
                                                                major()
                                                                minor()
                                                                os_open() <int os_open (const char *pathname, int flags, ...) at core/os_posix.c:29>:
                                                                    va_start()
                                                                    va_arg()
                                                                    va_end()
                                                                    open()
                                                                read()
                                                                os_close()
                                                                strcmp()
                                                        LOG()
                                                        ndctl_namespace_get_dax()
                                                        ndctl_dax_get_align()
                                                        ndctl_unref()
                                                    pmem2_source_delete() <int pmem2_source_delete (struct pmem2_source **src) at libpmem2/source.c:30>:
                                                        Free() <Free_func Free at core/alloc.c:91>
                                                    os_close()
                            util_poolset_check_devdax() <int util_poolset_check_devdax (struct pool_set *set) at common/set.c:896>:
                                LOG()
                                ERR()
                                util_file_device_dax_alignment() <size_t util_file_device_dax_alignment (const char *path) at common/file_posix.c:139>:
                                    LOG()
                                    device_dax_alignment() <size_t device_dax_alignment (const char *path) at common/file_posix.c:105>:
                                        LOG()
                                        os_open() <int os_open (const char *pathname, int flags, ...) at core/os_posix.c:29>:
                                            va_start()
                                            va_arg()
                                            va_end()
                                            open()
                                        pmem2_source_from_fd() <int pmem2_source_from_fd (struct pmem2_source **src, int fd) at libpmem2/source_posix.c:19>:
                                            PMEM2_ERR_CLR()
                                            fcntl()
                                            ERR()
                                            os_fstat()
                                            pmem2_get_type_from_stat() <int pmem2_get_type_from_stat (const os_stat_t *st, enum pmem2_file_type *type) at libpmem2/pmem2_utils_linux.c:23>:
                                                S_ISREG()
                                                S_ISDIR()
                                                S_ISCHR()
                                                ERR()
                                                util_snprintf() <int util_snprintf (char *str, size_t size, const char *format, ...) at core/util.c:434>:
                                                    va_start()
                                                    vsnprintf()
                                                    va_end()
                                                os_major()
                                                os_minor()
                                                ASSERTinfo()
                                                LOG()
                                                realpath()
                                                strrchr()
                                                strcmp()
                                            pmem2_malloc() <void *pmem2_malloc (size_t size, int *err) at libpmem2/pmem2_utils.c:19>:
                                                Malloc()
                                                ERR()
                                            ASSERTne()
                                        pmem2_device_dax_alignment() <int pmem2_device_dax_alignment (const struct pmem2_source *src, size_t *alignment) at libpmem2/pmem2_utils_ndctl.c:18>:
                                            ndctl_new()
                                            ERR()
                                            pmem2_region_namespace() <int pmem2_region_namespace (struct ndctl_ctx *ctx, const struct pmem2_source *src, struct ndctl_region **pregion, struct ndctl_namespace **pndns) at libpmem2/region_namespace_ndctl.c:131>:
                                                LOG()
                                                ERR()
                                                FOREACH_BUS_REGION_NAMESPACE()
                                                ndctl_namespace_get_dax()
                                                ASSERTeq()
                                                ndctl_dax_get_daxctl_region()
                                                daxctl_dev_foreach()
                                                daxctl_dev_get_devname()
                                                ndctl_match_devdax() <int ndctl_match_devdax (dev_t st_rdev, const char *devname) at libpmem2/region_namespace_ndctl.c:26>:
                                                    LOG()
                                                    stat()
                                                    util_snprintf() <int util_snprintf (char *str, size_t size, const char *format, ...) at core/util.c:434>:
                                                        va_start()
                                                        vsnprintf()
                                                        va_end()
                                                    ERR()
                                                    os_stat() <int os_stat (const char *pathname, os_stat_t *buf) at core/os_posix.c:79>:
                                                        stat()
                                                ndctl_namespace_get_btt()
                                                ndctl_btt_get_block_device()
                                                ndctl_namespace_get_pfn()
                                                ndctl_pfn_get_block_device()
                                                ndctl_namespace_get_block_device()
                                                ndctl_match_fsdax() <int ndctl_match_fsdax (dev_t st_dev, const char *devname) at libpmem2/region_namespace_ndctl.c:64>:
                                                    LOG()
                                                    util_snprintf() <int util_snprintf (char *str, size_t size, const char *format, ...) at core/util.c:434>:
                                                        va_start()
                                                        vsnprintf()
                                                        va_end()
                                                    ERR()
                                                    major()
                                                    minor()
                                                    os_open() <int os_open (const char *pathname, int flags, ...) at core/os_posix.c:29>:
                                                        va_start()
                                                        va_arg()
                                                        va_end()
                                                        open()
                                                    read()
                                                    os_close()
                                                    strcmp()
                                            LOG()
                                            ndctl_namespace_get_dax()
                                            ndctl_dax_get_align()
                                            ndctl_unref()
                                        pmem2_source_delete() <int pmem2_source_delete (struct pmem2_source **src) at libpmem2/source.c:30>:
                                            Free() <Free_func Free at core/alloc.c:91>
                                        os_close()
                            util_poolset_directories_load() <int util_poolset_directories_load (struct pool_set *set) at common/set.c:1078>:
                                LOG()
                                VEC_FOREACH_BY_PTR()
                                util_poolset_directory_load() <int util_poolset_directory_load (struct pool_replica **repp, const char *directory) at common/set.c:1014>:
                                    LOG()
                                    fs_new() <struct fs *fs_new (const char *path) at core/fs_posix.c:23>:
                                        Zalloc() <void *Zalloc (size_t sz) at core/alloc.c:98>:
                                            Malloc()
                                            memset()
                                        fts_open()
                                        Free() <Free_func Free at core/alloc.c:91>
                                    ERR()
                                    fs_read() <struct fs_entry *fs_read (struct fs *f) at core/fs_posix.c:46>:
                                        fts_read()
                                    strcmp()
                                    util_part_idx_by_file_name() <long util_part_idx_by_file_name (const char *filename) at common/set.c:994>:
                                        LOG()
                                        strtol()
                                    util_file_get_size() <ssize_t util_file_get_size (const char *path) at common/file.c:137>:
                                        LOG()
                                        os_open() <int os_open (const char *pathname, int flags, ...) at core/os_posix.c:29>:
                                            va_start()
                                            va_arg()
                                            va_end()
                                            open()
                                        ERR()
                                        util_fd_get_size() <ssize_t util_fd_get_size (int fd) at common/file.c:157>:
                                            LOG()
                                            pmem2_source_from_fd() <int pmem2_source_from_fd (struct pmem2_source **src, int fd) at libpmem2/source_posix.c:19>:
                                                PMEM2_ERR_CLR()
                                                fcntl()
                                                ERR()
                                                os_fstat()
                                                pmem2_get_type_from_stat() <int pmem2_get_type_from_stat (const os_stat_t *st, enum pmem2_file_type *type) at libpmem2/pmem2_utils_linux.c:23>:
                                                    S_ISREG()
                                                    S_ISDIR()
                                                    S_ISCHR()
                                                    ERR()
                                                    util_snprintf() <int util_snprintf (char *str, size_t size, const char *format, ...) at core/util.c:434>:
                                                        va_start()
                                                        vsnprintf()
                                                        va_end()
                                                    os_major()
                                                    os_minor()
                                                    ASSERTinfo()
                                                    LOG()
                                                    realpath()
                                                    strrchr()
                                                    strcmp()
                                                pmem2_malloc() <void *pmem2_malloc (size_t size, int *err) at libpmem2/pmem2_utils.c:19>:
                                                    Malloc()
                                                    ERR()
                                                ASSERTne()
                                            pmem2_err_to_errno() <int pmem2_err_to_errno (int err) at libpmem2/pmem2_utils.c:67>:
                                                FATAL()
                                            pmem2_source_size() <int pmem2_source_size (const struct pmem2_source *src, size_t *size) at libpmem2/source_posix.c:90>:
                                                LOG()
                                                PMEM2_ERR_CLR()
                                                ASSERT()
                                                os_fstat()
                                                ERR()
                                                pmem2_device_dax_size() <int pmem2_device_dax_size (const struct pmem2_source *src, size_t *size) at libpmem2/pmem2_utils_ndctl.c:58>:
                                                    ndctl_new()
                                                    ERR()
                                                    pmem2_region_namespace() <int pmem2_region_namespace (struct ndctl_ctx *ctx, const struct pmem2_source *src, struct ndctl_region **pregion, struct ndctl_namespace **pndns) at libpmem2/region_namespace_ndctl.c:131>:
                                                        LOG()
                                                        ERR()
                                                        FOREACH_BUS_REGION_NAMESPACE()
                                                        ndctl_namespace_get_dax()
                                                        ASSERTeq()
                                                        ndctl_dax_get_daxctl_region()
                                                        daxctl_dev_foreach()
                                                        daxctl_dev_get_devname()
                                                        ndctl_match_devdax() <int ndctl_match_devdax (dev_t st_rdev, const char *devname) at libpmem2/region_namespace_ndctl.c:26>:
                                                            LOG()
                                                            stat()
                                                            util_snprintf() <int util_snprintf (char *str, size_t size, const char *format, ...) at core/util.c:434>:
                                                                va_start()
                                                                vsnprintf()
                                                                va_end()
                                                            ERR()
                                                            os_stat() <int os_stat (const char *pathname, os_stat_t *buf) at core/os_posix.c:79>:
                                                                stat()
                                                        ndctl_namespace_get_btt()
                                                        ndctl_btt_get_block_device()
                                                        ndctl_namespace_get_pfn()
                                                        ndctl_pfn_get_block_device()
                                                        ndctl_namespace_get_block_device()
                                                        ndctl_match_fsdax() <int ndctl_match_fsdax (dev_t st_dev, const char *devname) at libpmem2/region_namespace_ndctl.c:64>:
                                                            LOG()
                                                            util_snprintf() <int util_snprintf (char *str, size_t size, const char *format, ...) at core/util.c:434>:
                                                                va_start()
                                                                vsnprintf()
                                                                va_end()
                                                            ERR()
                                                            major()
                                                            minor()
                                                            os_open() <int os_open (const char *pathname, int flags, ...) at core/os_posix.c:29>:
                                                                va_start()
                                                                va_arg()
                                                                va_end()
                                                                open()
                                                            read()
                                                            os_close()
                                                            strcmp()
                                                    LOG()
                                                    ndctl_namespace_get_dax()
                                                    ndctl_dax_get_size()
                                                    ndctl_unref()
                                                FATAL()
                                            pmem2_source_delete() <int pmem2_source_delete (struct pmem2_source **src) at libpmem2/source.c:30>:
                                                Free() <Free_func Free at core/alloc.c:91>
                                            ERR()
                                        close()
                                    Strdup() <Strdup_func Strdup at core/alloc.c:92>
                                    util_replica_add_part_by_idx() <int util_replica_add_part_by_idx (struct pool_replica **repp, const char *path, size_t filesize, unsigned p) at common/set.c:662>:
                                        LOG()
                                        util_replica_reserve() <int util_replica_reserve (struct pool_replica **repp, unsigned n) at common/set.c:633>:
                                            LOG()
                                            Realloc()
                                            ERR()
                                            memset()
                                        ASSERTne()
                                        util_file_get_type() <enum file_type util_file_get_type (const char *path) at common/file.c:106>:
                                            LOG()
                                            ERR()
                                            util_file_exists() <int util_file_exists (const char *path) at common/file.c:32>:
                                                LOG()
                                                os_access() <int os_access (const char *pathname, int mode) at core/os_posix.c:97>:
                                                    access()
                                                ERR()
                                            os_stat() <int os_stat (const char *pathname, os_stat_t *buf) at core/os_posix.c:79>:
                                                stat()
                                            util_stat_get_type() <enum file_type util_stat_get_type (const os_stat_t *st) at common/file.c:62>:
                                                pmem2_get_type_from_stat() <int pmem2_get_type_from_stat (const os_stat_t *st, enum pmem2_file_type *type) at libpmem2/pmem2_utils_linux.c:23>:
                                                    S_ISREG()
                                                    S_ISDIR()
                                                    S_ISCHR()
                                                    ERR()
                                                    util_snprintf() <int util_snprintf (char *str, size_t size, const char *format, ...) at core/util.c:434>:
                                                        va_start()
                                                        vsnprintf()
                                                        va_end()
                                                    os_major()
                                                    os_minor()
                                                    ASSERTinfo()
                                                    LOG()
                                                    realpath()
                                                    strrchr()
                                                    strcmp()
                                                pmem2_err_to_errno() <int pmem2_err_to_errno (int err) at libpmem2/pmem2_utils.c:67>:
                                                    FATAL()
                                                ASSERTinfo()
                                        util_file_device_dax_alignment() <size_t util_file_device_dax_alignment (const char *path) at common/file_posix.c:139>:
                                            LOG()
                                            device_dax_alignment() <size_t device_dax_alignment (const char *path) at common/file_posix.c:105>:
                                                LOG()
                                                os_open() <int os_open (const char *pathname, int flags, ...) at core/os_posix.c:29>:
                                                    va_start()
                                                    va_arg()
                                                    va_end()
                                                    open()
                                                pmem2_source_from_fd() <int pmem2_source_from_fd (struct pmem2_source **src, int fd) at libpmem2/source_posix.c:19>:
                                                    PMEM2_ERR_CLR()
                                                    fcntl()
                                                    ERR()
                                                    os_fstat()
                                                    pmem2_get_type_from_stat() <int pmem2_get_type_from_stat (const os_stat_t *st, enum pmem2_file_type *type) at libpmem2/pmem2_utils_linux.c:23>:
                                                        S_ISREG()
                                                        S_ISDIR()
                                                        S_ISCHR()
                                                        ERR()
                                                        util_snprintf() <int util_snprintf (char *str, size_t size, const char *format, ...) at core/util.c:434>:
                                                            va_start()
                                                            vsnprintf()
                                                            va_end()
                                                        os_major()
                                                        os_minor()
                                                        ASSERTinfo()
                                                        LOG()
                                                        realpath()
                                                        strrchr()
                                                        strcmp()
                                                    pmem2_malloc() <void *pmem2_malloc (size_t size, int *err) at libpmem2/pmem2_utils.c:19>:
                                                        Malloc()
                                                        ERR()
                                                    ASSERTne()
                                                pmem2_device_dax_alignment() <int pmem2_device_dax_alignment (const struct pmem2_source *src, size_t *alignment) at libpmem2/pmem2_utils_ndctl.c:18>:
                                                    ndctl_new()
                                                    ERR()
                                                    pmem2_region_namespace() <int pmem2_region_namespace (struct ndctl_ctx *ctx, const struct pmem2_source *src, struct ndctl_region **pregion, struct ndctl_namespace **pndns) at libpmem2/region_namespace_ndctl.c:131>:
                                                        LOG()
                                                        ERR()
                                                        FOREACH_BUS_REGION_NAMESPACE()
                                                        ndctl_namespace_get_dax()
                                                        ASSERTeq()
                                                        ndctl_dax_get_daxctl_region()
                                                        daxctl_dev_foreach()
                                                        daxctl_dev_get_devname()
                                                        ndctl_match_devdax() <int ndctl_match_devdax (dev_t st_rdev, const char *devname) at libpmem2/region_namespace_ndctl.c:26>:
                                                            LOG()
                                                            stat()
                                                            util_snprintf() <int util_snprintf (char *str, size_t size, const char *format, ...) at core/util.c:434>:
                                                                va_start()
                                                                vsnprintf()
                                                                va_end()
                                                            ERR()
                                                            os_stat() <int os_stat (const char *pathname, os_stat_t *buf) at core/os_posix.c:79>:
                                                                stat()
                                                        ndctl_namespace_get_btt()
                                                        ndctl_btt_get_block_device()
                                                        ndctl_namespace_get_pfn()
                                                        ndctl_pfn_get_block_device()
                                                        ndctl_namespace_get_block_device()
                                                        ndctl_match_fsdax() <int ndctl_match_fsdax (dev_t st_dev, const char *devname) at libpmem2/region_namespace_ndctl.c:64>:
                                                            LOG()
                                                            util_snprintf() <int util_snprintf (char *str, size_t size, const char *format, ...) at core/util.c:434>:
                                                                va_start()
                                                                vsnprintf()
                                                                va_end()
                                                            ERR()
                                                            major()
                                                            minor()
                                                            os_open() <int os_open (const char *pathname, int flags, ...) at core/os_posix.c:29>:
                                                                va_start()
                                                                va_arg()
                                                                va_end()
                                                                open()
                                                            read()
                                                            os_close()
                                                            strcmp()
                                                    LOG()
                                                    ndctl_namespace_get_dax()
                                                    ndctl_dax_get_align()
                                                    ndctl_unref()
                                                pmem2_source_delete() <int pmem2_source_delete (struct pmem2_source **src) at libpmem2/source.c:30>:
                                                    Free() <Free_func Free at core/alloc.c:91>
                                                os_close()
                                    fs_delete() <void fs_delete (struct fs *f) at core/fs_posix.c:80>:
                                        fts_close()
                                        Free() <Free_func Free at core/alloc.c:91>
                                ERR()
                                VEC_SIZE()
                                util_replica_reserve() <int util_replica_reserve (struct pool_replica **repp, unsigned n) at common/set.c:633>:
                                    LOG()
                                    Realloc()
                                    ERR()
                                    memset()
                                VEC_GET()
                                strlen()
                                Malloc()
                                snprintf()
                            os_fclose()
                            util_poolset_check_options() <int util_poolset_check_options (struct pool_set *set) at common/set.c:933>:
                                LOG()
                                ERR()
                            util_poolset_set_size() <void util_poolset_set_size (struct pool_set *set) at common/set.c:949>:
                                LOG()
                            util_poolset_free() <void util_poolset_free (struct pool_set *set) at common/set.c:312>:
                                LOG()
                                Free() <Free_func Free at core/alloc.c:91>
                                VEC_FOREACH_BY_PTR()
                                VEC_DELETE()
                    ERR()
                    ASSERT()
                    util_read_compat_features() <int util_read_compat_features (struct pool_set *set, uint32_t *compat_features) at common/set.c:2914>:
                        LOG()
                        util_part_open() <int util_part_open (struct pool_set_part *part, size_t minsize, int create_part) at common/set.c:1459>:
                            LOG()
                            util_file_exists() <int util_file_exists (const char *path) at common/file.c:32>:
                                LOG()
                                os_access() <int os_access (const char *pathname, int mode) at core/os_posix.c:97>:
                                    access()
                                ERR()
                            util_file_create() <int util_file_create (const char *path, size_t size, size_t minsize) at common/file.c:398>:
                                LOG()
                                ASSERTne()
                                ERR()
                                os_open() <int os_open (const char *pathname, int flags, ...) at core/os_posix.c:29>:
                                    va_start()
                                    va_arg()
                                    va_end()
                                    open()
                                os_posix_fallocate() <int os_posix_fallocate (int fd, os_off_t offset, off_t len) at core/os_posix.c:142>:
                                    posix_fallocate()
                                os_flock() <int os_flock (int fd, int operation) at core/os_posix.c:215>:
                                    flock()
                                os_close()
                                os_unlink() <int os_unlink (const char *pathname) at core/os_posix.c:88>:
                                    unlink()
                            util_file_open() <int util_file_open (const char *path, size_t *size, size_t minsize, int flags) at common/file.c:456>:
                                LOG()
                                os_open() <int os_open (const char *pathname, int flags, ...) at core/os_posix.c:29>:
                                    va_start()
                                    va_arg()
                                    va_end()
                                    open()
                                ERR()
                                os_flock() <int os_flock (int fd, int operation) at core/os_posix.c:215>:
                                    flock()
                                os_close()
                                ASSERTeq()
                                util_fd_get_size() <ssize_t util_fd_get_size (int fd) at common/file.c:157>:
                                    LOG()
                                    pmem2_source_from_fd() <int pmem2_source_from_fd (struct pmem2_source **src, int fd) at libpmem2/source_posix.c:19>:
                                        PMEM2_ERR_CLR()
                                        fcntl()
                                        ERR()
                                        os_fstat()
                                        pmem2_get_type_from_stat() <int pmem2_get_type_from_stat (const os_stat_t *st, enum pmem2_file_type *type) at libpmem2/pmem2_utils_linux.c:23>:
                                            S_ISREG()
                                            S_ISDIR()
                                            S_ISCHR()
                                            ERR()
                                            util_snprintf() <int util_snprintf (char *str, size_t size, const char *format, ...) at core/util.c:434>:
                                                va_start()
                                                vsnprintf()
                                                va_end()
                                            os_major()
                                            os_minor()
                                            ASSERTinfo()
                                            LOG()
                                            realpath()
                                            strrchr()
                                            strcmp()
                                        pmem2_malloc() <void *pmem2_malloc (size_t size, int *err) at libpmem2/pmem2_utils.c:19>:
                                            Malloc()
                                            ERR()
                                        ASSERTne()
                                    pmem2_err_to_errno() <int pmem2_err_to_errno (int err) at libpmem2/pmem2_utils.c:67>:
                                        FATAL()
                                    pmem2_source_size() <int pmem2_source_size (const struct pmem2_source *src, size_t *size) at libpmem2/source_posix.c:90>:
                                        LOG()
                                        PMEM2_ERR_CLR()
                                        ASSERT()
                                        os_fstat()
                                        ERR()
                                        pmem2_device_dax_size() <int pmem2_device_dax_size (const struct pmem2_source *src, size_t *size) at libpmem2/pmem2_utils_ndctl.c:58>:
                                            ndctl_new()
                                            ERR()
                                            pmem2_region_namespace() <int pmem2_region_namespace (struct ndctl_ctx *ctx, const struct pmem2_source *src, struct ndctl_region **pregion, struct ndctl_namespace **pndns) at libpmem2/region_namespace_ndctl.c:131>:
                                                LOG()
                                                ERR()
                                                FOREACH_BUS_REGION_NAMESPACE()
                                                ndctl_namespace_get_dax()
                                                ASSERTeq()
                                                ndctl_dax_get_daxctl_region()
                                                daxctl_dev_foreach()
                                                daxctl_dev_get_devname()
                                                ndctl_match_devdax() <int ndctl_match_devdax (dev_t st_rdev, const char *devname) at libpmem2/region_namespace_ndctl.c:26>:
                                                    LOG()
                                                    stat()
                                                    util_snprintf() <int util_snprintf (char *str, size_t size, const char *format, ...) at core/util.c:434>:
                                                        va_start()
                                                        vsnprintf()
                                                        va_end()
                                                    ERR()
                                                    os_stat() <int os_stat (const char *pathname, os_stat_t *buf) at core/os_posix.c:79>:
                                                        stat()
                                                ndctl_namespace_get_btt()
                                                ndctl_btt_get_block_device()
                                                ndctl_namespace_get_pfn()
                                                ndctl_pfn_get_block_device()
                                                ndctl_namespace_get_block_device()
                                                ndctl_match_fsdax() <int ndctl_match_fsdax (dev_t st_dev, const char *devname) at libpmem2/region_namespace_ndctl.c:64>:
                                                    LOG()
                                                    util_snprintf() <int util_snprintf (char *str, size_t size, const char *format, ...) at core/util.c:434>:
                                                        va_start()
                                                        vsnprintf()
                                                        va_end()
                                                    ERR()
                                                    major()
                                                    minor()
                                                    os_open() <int os_open (const char *pathname, int flags, ...) at core/os_posix.c:29>:
                                                        va_start()
                                                        va_arg()
                                                        va_end()
                                                        open()
                                                    read()
                                                    os_close()
                                                    strcmp()
                                            LOG()
                                            ndctl_namespace_get_dax()
                                            ndctl_dax_get_size()
                                            ndctl_unref()
                                        FATAL()
                                    pmem2_source_delete() <int pmem2_source_delete (struct pmem2_source **src) at libpmem2/source.c:30>:
                                        Free() <Free_func Free at core/alloc.c:91>
                                    ERR()
                            os_posix_fallocate() <int os_posix_fallocate (int fd, os_off_t offset, off_t len) at core/os_posix.c:142>:
                                posix_fallocate()
                            ERR()
                        util_map_hdr() <int util_map_hdr (struct pool_set_part *part, int flags, int rdonly) at common/set.c:155>:
                            LOG()
                            COMPILE_ERROR_ON()
                            ASSERTeq()
                            util_map_hint() <char *util_map_hint (size_t len, size_t req_align) at common/mmap_posix.c:118>:
                                LOG()
                                util_map_hint_align()
                                util_map_hint_unused() <char *util_map_hint_unused (void *minaddr, size_t len, size_t align) at common/mmap_posix.c:36>:
                                    LOG()
                                    ASSERT()
                                    os_fopen() <FILE *os_fopen (const char *pathname, const char *mode) at core/os_posix.c:106>:
                                        fopen()
                                    ERR()
                                    roundup()
                                    fgets()
                                    sscanf()
                                    fclose()
                                mmap()
                                ERR()
                                roundup()
                                munmap()
                            util_map_sync() <void *util_map_sync (void *addr, size_t len, int proto, int flags, int fd, os_off_t offset, int *map_sync) at common/mmap_posix.c:159>:
                                LOG()
                                mmap()
                            ERR()
                            VALGRIND_REGISTER_PMEM_MAPPING()
                            VALGRIND_REGISTER_PMEM_FILE()
                        util_part_fdclose() <void util_part_fdclose (struct pool_set_part *part) at common/set.c:1517>:
                            LOG()
                            os_close()
                        util_unmap_hdr() <void util_unmap_hdr (struct pool_set_part *part) at common/set.c:211>:
                            LOG()
                            VALGRIND_REMOVE_PMEM_MAPPING()
                            munmap()
                            FATAL()
                    badblocks_recovery_file_exists() <int badblocks_recovery_file_exists (struct pool_set *set) at common/set_badblocks.c:185>:
                        LOG()
                        PART()
                        util_file_exists() <int util_file_exists (const char *path) at common/file.c:32>:
                            LOG()
                            os_access() <int os_access (const char *pathname, int mode) at core/os_posix.c:97>:
                                access()
                            ERR()
                        badblocks_recovery_file_alloc() <char *badblocks_recovery_file_alloc (const char *file, unsigned rep, unsigned part) at common/set_badblocks.c:152>:
                            LOG()
                            sprintf()
                            strlen()
                            Malloc()
                            ERR()
                            strcpy()
                            strcat()
                        Free() <Free_func Free at core/alloc.c:91>
                    badblocks_check_poolset() <int badblocks_check_poolset (struct pool_set *set, int create) at common/set_badblocks.c:69>:
                        LOG()
                        util_poolset_foreach_part_struct() <int util_poolset_foreach_part_struct (struct pool_set *set, int (*callback) (struct part_file *pf, void *arg), void *arg) at common/set.c:3136>:
                            LOG()
                            ASSERTne()
                        badblocks_check_file_cb() <int badblocks_check_file_cb (struct part_file *pf, void *arg) at common/set_badblocks.c:30>:
                            LOG()
                            util_file_exists() <int util_file_exists (const char *path) at common/file.c:32>:
                                LOG()
                                os_access() <int os_access (const char *pathname, int mode) at core/os_posix.c:97>:
                                    access()
                                ERR()
                            badblocks_check_file() <int badblocks_check_file (const char *file) at common/bad_blocks.c:248>:
                                LOG()
                                badblocks_count() <long badblocks_count (const char *file) at common/bad_blocks.c:22>:
                                    LOG()
                                    badblocks_new() <struct badblocks *badblocks_new (void) at libpmem2/badblocks.c:16>:
                                        LOG()
                                        Zalloc() <void *Zalloc (size_t sz) at core/alloc.c:98>:
                                            Malloc()
                                            memset()
                                        ERR()
                                    badblocks_get() <int badblocks_get (const char *file, struct badblocks *bbs) at common/bad_blocks.c:45>:
                                        LOG()
                                        ASSERTne()
                                        VEC()
                                        memset()
                                        os_open() <int os_open (const char *pathname, int flags, ...) at core/os_posix.c:29>:
                                            va_start()
                                            va_arg()
                                            va_end()
                                            open()
                                        ERR()
                                        pmem2_source_from_fd() <int pmem2_source_from_fd (struct pmem2_source **src, int fd) at libpmem2/source_posix.c:19>:
                                            PMEM2_ERR_CLR()
                                            fcntl()
                                            ERR()
                                            os_fstat()
                                            pmem2_get_type_from_stat() <int pmem2_get_type_from_stat (const os_stat_t *st, enum pmem2_file_type *type) at libpmem2/pmem2_utils_linux.c:23>:
                                                S_ISREG()
                                                S_ISDIR()
                                                S_ISCHR()
                                                ERR()
                                                util_snprintf() <int util_snprintf (char *str, size_t size, const char *format, ...) at core/util.c:434>:
                                                    va_start()
                                                    vsnprintf()
                                                    va_end()
                                                os_major()
                                                os_minor()
                                                ASSERTinfo()
                                                LOG()
                                                realpath()
                                                strrchr()
                                                strcmp()
                                            pmem2_malloc() <void *pmem2_malloc (size_t size, int *err) at libpmem2/pmem2_utils.c:19>:
                                                Malloc()
                                                ERR()
                                            ASSERTne()
                                        pmem2_badblock_context_new() <int pmem2_badblock_context_new (struct pmem2_badblock_context **bbctx, const struct pmem2_source *src) at libpmem2/badblocks_ndctl.c:250>:
                                            LOG()
                                            PMEM2_ERR_CLR()
                                            ASSERTne()
                                            ERR()
                                            ASSERTeq()
                                            ndctl_new()
                                            pmem2_region_namespace() <int pmem2_region_namespace (struct ndctl_ctx *ctx, const struct pmem2_source *src, struct ndctl_region **pregion, struct ndctl_namespace **pndns) at libpmem2/region_namespace_ndctl.c:131>:
                                                LOG()
                                                ERR()
                                                FOREACH_BUS_REGION_NAMESPACE()
                                                ndctl_namespace_get_dax()
                                                ASSERTeq()
                                                ndctl_dax_get_daxctl_region()
                                                daxctl_dev_foreach()
                                                daxctl_dev_get_devname()
                                                ndctl_match_devdax() <int ndctl_match_devdax (dev_t st_rdev, const char *devname) at libpmem2/region_namespace_ndctl.c:26>:
                                                    LOG()
                                                    stat()
                                                    util_snprintf() <int util_snprintf (char *str, size_t size, const char *format, ...) at core/util.c:434>:
                                                        va_start()
                                                        vsnprintf()
                                                        va_end()
                                                    ERR()
                                                    os_stat() <int os_stat (const char *pathname, os_stat_t *buf) at core/os_posix.c:79>:
                                                        stat()
                                                ndctl_namespace_get_btt()
                                                ndctl_btt_get_block_device()
                                                ndctl_namespace_get_pfn()
                                                ndctl_pfn_get_block_device()
                                                ndctl_namespace_get_block_device()
                                                ndctl_match_fsdax() <int ndctl_match_fsdax (dev_t st_dev, const char *devname) at libpmem2/region_namespace_ndctl.c:64>:
                                                    LOG()
                                                    util_snprintf() <int util_snprintf (char *str, size_t size, const char *format, ...) at core/util.c:434>:
                                                        va_start()
                                                        vsnprintf()
                                                        va_end()
                                                    ERR()
                                                    major()
                                                    minor()
                                                    os_open() <int os_open (const char *pathname, int flags, ...) at core/os_posix.c:29>:
                                                        va_start()
                                                        va_arg()
                                                        va_end()
                                                        open()
                                                    read()
                                                    os_close()
                                                    strcmp()
                                            pmem2_zalloc() <void *pmem2_zalloc (size_t size, int *err) at libpmem2/pmem2_utils.c:36>:
                                                Zalloc() <void *Zalloc (size_t sz) at core/alloc.c:98>:
                                                    Malloc()
                                                    memset()
                                                ERR()
                                            ndctl_namespace_get_mode()
                                            pmem2_badblock_next_namespace() <int pmem2_badblock_next_namespace (struct pmem2_badblock_context *bbctx, struct pmem2_badblock *bb) at libpmem2/badblocks_ndctl.c:441>:
                                                LOG()
                                                ASSERTne()
                                                SEC2B()
                                            pmem2_namespace_get_first_badblock() <void *pmem2_namespace_get_first_badblock (struct pmem2_badblock_context *bbctx) at libpmem2/badblocks_ndctl.c:399>:
                                                LOG()
                                                pmem2_namespace_get_next_badblock() <void *pmem2_namespace_get_next_badblock (struct pmem2_badblock_context *bbctx) at libpmem2/badblocks_ndctl.c:387>:
                                                    LOG()
                                                    ndctl_namespace_get_next_badblock()
                                                ndctl_namespace_get_first_badblock()
                                            badblocks_get_namespace_bounds() <int badblocks_get_namespace_bounds (struct ndctl_region *region, struct ndctl_namespace *ndns, unsigned long long *ns_offset, unsigned long long *ns_size) at libpmem2/badblocks_ndctl.c:101>:
                                                LOG()
                                                ndctl_namespace_get_pfn()
                                                ndctl_namespace_get_dax()
                                                ASSERTne()
                                                ndctl_pfn_get_resource()
                                                ERR()
                                                ndctl_pfn_get_size()
                                                ndctl_dax_get_resource()
                                                ndctl_dax_get_size()
                                                ndctl_namespace_get_resource()
                                                ndctl_namespace_get_size()
                                                ndctl_region_get_resource()
                                            B2SEC()
                                            ndctl_region_get_bus()
                                            ndctl_region_get_resource()
                                            pmem2_badblock_next_region() <int pmem2_badblock_next_region (struct pmem2_badblock_context *bbctx, struct pmem2_badblock *bb) at libpmem2/badblocks_ndctl.c:474>:
                                                LOG()
                                                ASSERTne()
                                                SEC2B()
                                                B2SEC()
                                            pmem2_region_get_first_badblock() <void *pmem2_region_get_first_badblock (struct pmem2_badblock_context *bbctx) at libpmem2/badblocks_ndctl.c:424>:
                                                LOG()
                                                pmem2_region_get_next_badblock() <void *pmem2_region_get_next_badblock (struct pmem2_badblock_context *bbctx) at libpmem2/badblocks_ndctl.c:412>:
                                                    LOG()
                                                    ndctl_region_get_next_badblock()
                                                ndctl_region_get_first_badblock()
                                            pmem2_extents_create_get() <int pmem2_extents_create_get (int fd, struct extents **exts) at libpmem2/extent_linux.c:27>:
                                                LOG()
                                                ASSERT()
                                                ASSERTne()
                                                os_fstat()
                                                ERR()
                                                pmem2_get_type_from_stat() <int pmem2_get_type_from_stat (const os_stat_t *st, enum pmem2_file_type *type) at libpmem2/pmem2_utils_linux.c:23>:
                                                    S_ISREG()
                                                    S_ISDIR()
                                                    S_ISCHR()
                                                    ERR()
                                                    util_snprintf() <int util_snprintf (char *str, size_t size, const char *format, ...) at core/util.c:434>:
                                                        va_start()
                                                        vsnprintf()
                                                        va_end()
                                                    os_major()
                                                    os_minor()
                                                    ASSERTinfo()
                                                    LOG()
                                                    realpath()
                                                    strrchr()
                                                    strcmp()
                                                pmem2_zalloc() <void *pmem2_zalloc (size_t size, int *err) at libpmem2/pmem2_utils.c:36>:
                                                    Zalloc() <void *Zalloc (size_t sz) at core/alloc.c:98>:
                                                        Malloc()
                                                        memset()
                                                    ERR()
                                                ASSERTeq()
                                                ioctl()
                                                pmem2_realloc() <void *pmem2_realloc (void *ptr, size_t size, int *err) at libpmem2/pmem2_utils.c:53>:
                                                    Realloc()
                                                    ERR()
                                                memset()
                                                pmem2_malloc() <void *pmem2_malloc (size_t size, int *err) at libpmem2/pmem2_utils.c:19>:
                                                    Malloc()
                                                    ERR()
                                                Free() <Free_func Free at core/alloc.c:91>
                                            pmem2_extents_destroy() <void pmem2_extents_destroy (struct extents **exts) at libpmem2/extent_linux.c:153>:
                                                LOG()
                                                ASSERTne()
                                                Free() <Free_func Free at core/alloc.c:91>
                                            Free() <Free_func Free at core/alloc.c:91>
                                            ndctl_unref()
                                        pmem2_badblock_next() <int pmem2_badblock_next (struct pmem2_badblock_context *bbctx, struct pmem2_badblock *bb) at libpmem2/badblocks_ndctl.c:530>:
                                            LOG()
                                            PMEM2_ERR_CLR()
                                            ASSERTne()
                                            ERR()
                                            ASSERTeq()
                                            ALIGN_UP()
                                        VEC_PUSH_BACK()
                                        VEC_DELETE()
                                        Free() <Free_func Free at core/alloc.c:91>
                                        VEC_ARR()
                                        VEC_SIZE()
                                        ASSERTeq()
                                        pmem2_badblock_context_delete() <void pmem2_badblock_context_delete (struct pmem2_badblock_context **bbctx) at libpmem2/badblocks_ndctl.c:363>:
                                            LOG()
                                            PMEM2_ERR_CLR()
                                            ASSERTne()
                                            pmem2_extents_destroy() <void pmem2_extents_destroy (struct extents **exts) at libpmem2/extent_linux.c:153>:
                                                LOG()
                                                ASSERTne()
                                                Free() <Free_func Free at core/alloc.c:91>
                                            ndctl_unref()
                                            Free() <Free_func Free at core/alloc.c:91>
                                        pmem2_source_delete() <int pmem2_source_delete (struct pmem2_source **src) at libpmem2/source.c:30>:
                                            Free() <Free_func Free at core/alloc.c:91>
                                        os_close()
                                        pmem2_err_to_errno() <int pmem2_err_to_errno (int err) at libpmem2/pmem2_utils.c:67>:
                                            FATAL()
                                    badblocks_delete() <void badblocks_delete (struct badblocks *bbs) at libpmem2/badblocks.c:32>:
                                        LOG()
                                        Free() <Free_func Free at core/alloc.c:91>
                            ERR()
                    util_poolset_files_local() <int util_poolset_files_local (struct pool_set *set, size_t minpartsize, int create) at common/set.c:1532>:
                        LOG()
                        util_part_open() <int util_part_open (struct pool_set_part *part, size_t minsize, int create_part) at common/set.c:1459>:
                            LOG()
                            util_file_exists() <int util_file_exists (const char *path) at common/file.c:32>:
                                LOG()
                                os_access() <int os_access (const char *pathname, int mode) at core/os_posix.c:97>:
                                    access()
                                ERR()
                            util_file_create() <int util_file_create (const char *path, size_t size, size_t minsize) at common/file.c:398>:
                                LOG()
                                ASSERTne()
                                ERR()
                                os_open() <int os_open (const char *pathname, int flags, ...) at core/os_posix.c:29>:
                                    va_start()
                                    va_arg()
                                    va_end()
                                    open()
                                os_posix_fallocate() <int os_posix_fallocate (int fd, os_off_t offset, off_t len) at core/os_posix.c:142>:
                                    posix_fallocate()
                                os_flock() <int os_flock (int fd, int operation) at core/os_posix.c:215>:
                                    flock()
                                os_close()
                                os_unlink() <int os_unlink (const char *pathname) at core/os_posix.c:88>:
                                    unlink()
                            util_file_open() <int util_file_open (const char *path, size_t *size, size_t minsize, int flags) at common/file.c:456>:
                                LOG()
                                os_open() <int os_open (const char *pathname, int flags, ...) at core/os_posix.c:29>:
                                    va_start()
                                    va_arg()
                                    va_end()
                                    open()
                                ERR()
                                os_flock() <int os_flock (int fd, int operation) at core/os_posix.c:215>:
                                    flock()
                                os_close()
                                ASSERTeq()
                                util_fd_get_size() <ssize_t util_fd_get_size (int fd) at common/file.c:157>:
                                    LOG()
                                    pmem2_source_from_fd() <int pmem2_source_from_fd (struct pmem2_source **src, int fd) at libpmem2/source_posix.c:19>:
                                        PMEM2_ERR_CLR()
                                        fcntl()
                                        ERR()
                                        os_fstat()
                                        pmem2_get_type_from_stat() <int pmem2_get_type_from_stat (const os_stat_t *st, enum pmem2_file_type *type) at libpmem2/pmem2_utils_linux.c:23>:
                                            S_ISREG()
                                            S_ISDIR()
                                            S_ISCHR()
                                            ERR()
                                            util_snprintf() <int util_snprintf (char *str, size_t size, const char *format, ...) at core/util.c:434>:
                                                va_start()
                                                vsnprintf()
                                                va_end()
                                            os_major()
                                            os_minor()
                                            ASSERTinfo()
                                            LOG()
                                            realpath()
                                            strrchr()
                                            strcmp()
                                        pmem2_malloc() <void *pmem2_malloc (size_t size, int *err) at libpmem2/pmem2_utils.c:19>:
                                            Malloc()
                                            ERR()
                                        ASSERTne()
                                    pmem2_err_to_errno() <int pmem2_err_to_errno (int err) at libpmem2/pmem2_utils.c:67>:
                                        FATAL()
                                    pmem2_source_size() <int pmem2_source_size (const struct pmem2_source *src, size_t *size) at libpmem2/source_posix.c:90>:
                                        LOG()
                                        PMEM2_ERR_CLR()
                                        ASSERT()
                                        os_fstat()
                                        ERR()
                                        pmem2_device_dax_size() <int pmem2_device_dax_size (const struct pmem2_source *src, size_t *size) at libpmem2/pmem2_utils_ndctl.c:58>:
                                            ndctl_new()
                                            ERR()
                                            pmem2_region_namespace() <int pmem2_region_namespace (struct ndctl_ctx *ctx, const struct pmem2_source *src, struct ndctl_region **pregion, struct ndctl_namespace **pndns) at libpmem2/region_namespace_ndctl.c:131>:
                                                LOG()
                                                ERR()
                                                FOREACH_BUS_REGION_NAMESPACE()
                                                ndctl_namespace_get_dax()
                                                ASSERTeq()
                                                ndctl_dax_get_daxctl_region()
                                                daxctl_dev_foreach()
                                                daxctl_dev_get_devname()
                                                ndctl_match_devdax() <int ndctl_match_devdax (dev_t st_rdev, const char *devname) at libpmem2/region_namespace_ndctl.c:26>:
                                                    LOG()
                                                    stat()
                                                    util_snprintf() <int util_snprintf (char *str, size_t size, const char *format, ...) at core/util.c:434>:
                                                        va_start()
                                                        vsnprintf()
                                                        va_end()
                                                    ERR()
                                                    os_stat() <int os_stat (const char *pathname, os_stat_t *buf) at core/os_posix.c:79>:
                                                        stat()
                                                ndctl_namespace_get_btt()
                                                ndctl_btt_get_block_device()
                                                ndctl_namespace_get_pfn()
                                                ndctl_pfn_get_block_device()
                                                ndctl_namespace_get_block_device()
                                                ndctl_match_fsdax() <int ndctl_match_fsdax (dev_t st_dev, const char *devname) at libpmem2/region_namespace_ndctl.c:64>:
                                                    LOG()
                                                    util_snprintf() <int util_snprintf (char *str, size_t size, const char *format, ...) at core/util.c:434>:
                                                        va_start()
                                                        vsnprintf()
                                                        va_end()
                                                    ERR()
                                                    major()
                                                    minor()
                                                    os_open() <int os_open (const char *pathname, int flags, ...) at core/os_posix.c:29>:
                                                        va_start()
                                                        va_arg()
                                                        va_end()
                                                        open()
                                                    read()
                                                    os_close()
                                                    strcmp()
                                            LOG()
                                            ndctl_namespace_get_dax()
                                            ndctl_dax_get_size()
                                            ndctl_unref()
                                        FATAL()
                                    pmem2_source_delete() <int pmem2_source_delete (struct pmem2_source **src) at libpmem2/source.c:30>:
                                        Free() <Free_func Free at core/alloc.c:91>
                                    ERR()
                            os_posix_fallocate() <int os_posix_fallocate (int fd, os_off_t offset, off_t len) at core/os_posix.c:142>:
                                posix_fallocate()
                            ERR()
                    util_replica_open() <int util_replica_open (struct pool_set *set, unsigned repidx, int flags) at common/set.c:2697>:
                        LOG()
                        util_replica_open_local() <int util_replica_open_local (struct pool_set *set, unsigned repidx, int flags) at common/set.c:2551>:
                            LOG()
                            util_map_hint() <char *util_map_hint (size_t len, size_t req_align) at common/mmap_posix.c:118>:
                                LOG()
                                util_map_hint_align()
                                util_map_hint_unused() <char *util_map_hint_unused (void *minaddr, size_t len, size_t align) at common/mmap_posix.c:36>:
                                    LOG()
                                    ASSERT()
                                    os_fopen() <FILE *os_fopen (const char *pathname, const char *mode) at core/os_posix.c:106>:
                                        fopen()
                                    ERR()
                                    roundup()
                                    fgets()
                                    sscanf()
                                    fclose()
                                mmap()
                                ERR()
                                roundup()
                                munmap()
                            util_map_part() <int util_map_part (struct pool_set_part *part, void *addr, size_t size, size_t offset, int flags, int rdonly) at common/set.c:229>:
                                LOG()
                                ASSERTeq()
                                ASSERT()
                                roundup()
                                util_map_sync() <void *util_map_sync (void *addr, size_t len, int proto, int flags, int fd, os_off_t offset, int *map_sync) at common/mmap_posix.c:159>:
                                    LOG()
                                    mmap()
                                ERR()
                                munmap()
                                VALGRIND_REGISTER_PMEM_MAPPING()
                                VALGRIND_REGISTER_PMEM_FILE()
                            VALGRIND_REGISTER_PMEM_MAPPING()
                            VALGRIND_REGISTER_PMEM_FILE()
                            util_map_hdr() <int util_map_hdr (struct pool_set_part *part, int flags, int rdonly) at common/set.c:155>:
                                LOG()
                                COMPILE_ERROR_ON()
                                ASSERTeq()
                                util_map_hint() <char *util_map_hint (size_t len, size_t req_align) at common/mmap_posix.c:118>:
                                    LOG()
                                    util_map_hint_align()
                                    util_map_hint_unused() <char *util_map_hint_unused (void *minaddr, size_t len, size_t align) at common/mmap_posix.c:36>:
                                        LOG()
                                        ASSERT()
                                        os_fopen() <FILE *os_fopen (const char *pathname, const char *mode) at core/os_posix.c:106>:
                                            fopen()
                                        ERR()
                                        roundup()
                                        fgets()
                                        sscanf()
                                        fclose()
                                    mmap()
                                    ERR()
                                    roundup()
                                    munmap()
                                util_map_sync() <void *util_map_sync (void *addr, size_t len, int proto, int flags, int fd, os_off_t offset, int *map_sync) at common/mmap_posix.c:159>:
                                    LOG()
                                    mmap()
                                ERR()
                                VALGRIND_REGISTER_PMEM_MAPPING()
                                VALGRIND_REGISTER_PMEM_FILE()
                            ALIGN_DOWN()
                            ERR()
                            util_unmap_parts() <int util_unmap_parts (struct pool_replica *rep, unsigned start_index, unsigned end_index) at common/set.c:296>:
                                LOG()
                                util_unmap_part() <int util_unmap_part (struct pool_set_part *part) at common/set.c:274>:
                                    LOG()
                                    VALGRIND_REMOVE_PMEM_MAPPING()
                                    munmap()
                                    ERR()
                            munmap()
                            util_replica_check_map_sync() <int util_replica_check_map_sync (struct pool_set *set, unsigned repidx, int check_hdr) at common/set.c:860>:
                                LOG()
                                ERR()
                            util_replica_set_is_pmem() <inline void util_replica_set_is_pmem (struct pool_replica *rep) at common/set.c:1914>:
                                pmem_is_pmem()
                            util_replica_force_page_allocation() <void util_replica_force_page_allocation (struct pool_replica *rep) at common/set.c:141>:
                                VALGRIND_SET_CLEAN()
                            ASSERTeq()
                            ASSERTne()
                            util_unmap_hdr() <void util_unmap_hdr (struct pool_set_part *part) at common/set.c:211>:
                                LOG()
                                VALGRIND_REMOVE_PMEM_MAPPING()
                                munmap()
                                FATAL()
                            util_unmap_part() <int util_unmap_part (struct pool_set_part *part) at common/set.c:274>:
                                LOG()
                                VALGRIND_REMOVE_PMEM_MAPPING()
                                munmap()
                                ERR()
                    util_replica_check() <int util_replica_check (struct pool_set *set, const struct pool_attr *attr) at common/set.c:2756>:
                        LOG()
                        IGNORE_SDS()
                        HDR()
                        REP()
                        util_header_check() <int util_header_check (struct pool_set *set, unsigned repidx, unsigned partidx, const struct pool_attr *attr) at common/set.c:1786>:
                            LOG()
                            ASSERTne()
                            memcpy()
                            util_convert2h_hdr_nocheck() <void util_convert2h_hdr_nocheck (struct pool_hdr *hdrp) at common/pool_hdr.c:89>:
                                le32toh()
                                le64toh()
                                le16toh()
                            ERR()
                            memcmp()
                            util_feature_check() <int util_feature_check (struct pool_hdr *hdrp, features_t known) at common/pool_hdr.c:162>:
                                LOG()
                                util_get_unknown_features() <features_t util_get_unknown_features (features_t features, features_t known) at common/pool_hdr.c:146>:
                                    util_get_not_masked_bits()
                                ERR()
                            util_checksum() <int util_checksum (void *addr, size_t len, uint64_t *csump, int insert, size_t skip_off) at core/util.c:178>:
                                util_checksum_compute() <uint64_t util_checksum_compute (void *addr, size_t len, uint64_t *csump, size_t skip_off) at core/util.c:134>:
                                    abort()
                                    le32toh()
                                htole64()
                            POOL_HDR_CSUM_END_OFF()
                            util_check_arch_flags() <int util_check_arch_flags (const struct arch_flags *arch_flags) at common/pool_hdr.c:106>:
                                util_get_arch_flags() <void util_get_arch_flags (struct arch_flags *arch_flags) at common/pool_hdr.c:59>:
                                    memset()
                                    arch_data() <uint8_t arch_data (void) at common/pool_hdr.c:49>:
                                    alignment_desc()
                                util_is_zeroed() <int util_is_zeroed (const void *addr, size_t len) at core/util.c:113>:
                                    memcmp()
                                ERR()
                            HDR()
                            REP()
                            HDRP()
                            HDRN()
                            util_poolset_check_header_options() <int util_poolset_check_header_options (struct pool_set *set, uint32_t incompat) at common/set.c:1664>:
                                LOG()
                                ERR()
                        memcmp()
                        REPP()
                        REPN()
                        ERR()
                        shutdown_state_init() <int shutdown_state_init (struct shutdown_state *sds, struct pool_replica *rep) at common/shutdown_state.c:39>:
                            COMPILE_ERROR_ON()
                            LOG()
                            memset()
                            shutdown_state_checksum() <void shutdown_state_checksum (struct shutdown_state *sds, struct pool_replica *rep) at common/shutdown_state.c:27>:
                                LOG()
                                util_checksum() <int util_checksum (void *addr, size_t len, uint64_t *csump, int insert, size_t skip_off) at core/util.c:178>:
                                    util_checksum_compute() <uint64_t util_checksum_compute (void *addr, size_t len, uint64_t *csump, size_t skip_off) at core/util.c:134>:
                                        abort()
                                        le32toh()
                                    htole64()
                                FLUSH_SDS()
                        shutdown_state_add_part() <int shutdown_state_add_part (struct shutdown_state *sds, int fd, struct pool_replica *rep) at common/shutdown_state.c:58>:
                            LOG()
                            pmem2_source_from_fd() <int pmem2_source_from_fd (struct pmem2_source **src, int fd) at libpmem2/source_posix.c:19>:
                                PMEM2_ERR_CLR()
                                fcntl()
                                ERR()
                                os_fstat()
                                pmem2_get_type_from_stat() <int pmem2_get_type_from_stat (const os_stat_t *st, enum pmem2_file_type *type) at libpmem2/pmem2_utils_linux.c:23>:
                                    S_ISREG()
                                    S_ISDIR()
                                    S_ISCHR()
                                    ERR()
                                    util_snprintf() <int util_snprintf (char *str, size_t size, const char *format, ...) at core/util.c:434>:
                                        va_start()
                                        vsnprintf()
                                        va_end()
                                    os_major()
                                    os_minor()
                                    ASSERTinfo()
                                    LOG()
                                    realpath()
                                    strrchr()
                                    strcmp()
                                pmem2_malloc() <void *pmem2_malloc (size_t size, int *err) at libpmem2/pmem2_utils.c:19>:
                                    Malloc()
                                    ERR()
                                ASSERTne()
                            pmem2_source_device_usc() <int pmem2_source_device_usc (const struct pmem2_source *src, uint64_t *usc) at libpmem2/usc_ndctl.c:23>:
                                LOG()
                                PMEM2_ERR_CLR()
                                ERR()
                                ASSERTeq()
                                ndctl_new()
                                pmem2_region_namespace() <int pmem2_region_namespace (struct ndctl_ctx *ctx, const struct pmem2_source *src, struct ndctl_region **pregion, struct ndctl_namespace **pndns) at libpmem2/region_namespace_ndctl.c:131>:
                                    LOG()
                                    ERR()
                                    FOREACH_BUS_REGION_NAMESPACE()
                                    ndctl_namespace_get_dax()
                                    ASSERTeq()
                                    ndctl_dax_get_daxctl_region()
                                    daxctl_dev_foreach()
                                    daxctl_dev_get_devname()
                                    ndctl_match_devdax() <int ndctl_match_devdax (dev_t st_rdev, const char *devname) at libpmem2/region_namespace_ndctl.c:26>:
                                        LOG()
                                        stat()
                                        util_snprintf() <int util_snprintf (char *str, size_t size, const char *format, ...) at core/util.c:434>:
                                            va_start()
                                            vsnprintf()
                                            va_end()
                                        ERR()
                                        os_stat() <int os_stat (const char *pathname, os_stat_t *buf) at core/os_posix.c:79>:
                                            stat()
                                    ndctl_namespace_get_btt()
                                    ndctl_btt_get_block_device()
                                    ndctl_namespace_get_pfn()
                                    ndctl_pfn_get_block_device()
                                    ndctl_namespace_get_block_device()
                                    ndctl_match_fsdax() <int ndctl_match_fsdax (dev_t st_dev, const char *devname) at libpmem2/region_namespace_ndctl.c:64>:
                                        LOG()
                                        util_snprintf() <int util_snprintf (char *str, size_t size, const char *format, ...) at core/util.c:434>:
                                            va_start()
                                            vsnprintf()
                                            va_end()
                                        ERR()
                                        major()
                                        minor()
                                        os_open() <int os_open (const char *pathname, int flags, ...) at core/os_posix.c:29>:
                                            va_start()
                                            va_arg()
                                            va_end()
                                            open()
                                        read()
                                        os_close()
                                        strcmp()
                                ndctl_dimm_foreach_in_region()
                                ndctl_dimm_get_dirty_shutdown()
                                ndctl_unref()
                            ERR()
                            pmem2_source_device_id() <int pmem2_source_device_id (const struct pmem2_source *src, char *id, size_t *len) at libpmem2/usc_ndctl.c:80>:
                                PMEM2_ERR_CLR()
                                ERR()
                                ASSERTeq()
                                ndctl_new()
                                pmem2_region_namespace() <int pmem2_region_namespace (struct ndctl_ctx *ctx, const struct pmem2_source *src, struct ndctl_region **pregion, struct ndctl_namespace **pndns) at libpmem2/region_namespace_ndctl.c:131>:
                                    LOG()
                                    ERR()
                                    FOREACH_BUS_REGION_NAMESPACE()
                                    ndctl_namespace_get_dax()
                                    ASSERTeq()
                                    ndctl_dax_get_daxctl_region()
                                    daxctl_dev_foreach()
                                    daxctl_dev_get_devname()
                                    ndctl_match_devdax() <int ndctl_match_devdax (dev_t st_rdev, const char *devname) at libpmem2/region_namespace_ndctl.c:26>:
                                        LOG()
                                        stat()
                                        util_snprintf() <int util_snprintf (char *str, size_t size, const char *format, ...) at core/util.c:434>:
                                            va_start()
                                            vsnprintf()
                                            va_end()
                                        ERR()
                                        os_stat() <int os_stat (const char *pathname, os_stat_t *buf) at core/os_posix.c:79>:
                                            stat()
                                    ndctl_namespace_get_btt()
                                    ndctl_btt_get_block_device()
                                    ndctl_namespace_get_pfn()
                                    ndctl_pfn_get_block_device()
                                    ndctl_namespace_get_block_device()
                                    ndctl_match_fsdax() <int ndctl_match_fsdax (dev_t st_dev, const char *devname) at libpmem2/region_namespace_ndctl.c:64>:
                                        LOG()
                                        util_snprintf() <int util_snprintf (char *str, size_t size, const char *format, ...) at core/util.c:434>:
                                            va_start()
                                            vsnprintf()
                                            va_end()
                                        ERR()
                                        major()
                                        minor()
                                        os_open() <int os_open (const char *pathname, int flags, ...) at core/os_posix.c:29>:
                                            va_start()
                                            va_arg()
                                            va_end()
                                            open()
                                        read()
                                        os_close()
                                        strcmp()
                                ndctl_dimm_foreach_in_region()
                                ndctl_dimm_get_unique_id()
                                strlen()
                                strncat()
                                ndctl_unref()
                            Zalloc() <void *Zalloc (size_t sz) at core/alloc.c:98>:
                                Malloc()
                                memset()
                            Free() <Free_func Free at core/alloc.c:91>
                            htole64()
                            le64toh()
                            util_checksum() <int util_checksum (void *addr, size_t len, uint64_t *csump, int insert, size_t skip_off) at core/util.c:178>:
                                util_checksum_compute() <uint64_t util_checksum_compute (void *addr, size_t len, uint64_t *csump, size_t skip_off) at core/util.c:134>:
                                    abort()
                                    le32toh()
                                htole64()
                            FLUSH_SDS()
                            pmem2_source_delete() <int pmem2_source_delete (struct pmem2_source **src) at libpmem2/source.c:30>:
                                Free() <Free_func Free at core/alloc.c:91>
                            shutdown_state_checksum() <void shutdown_state_checksum (struct shutdown_state *sds, struct pool_replica *rep) at common/shutdown_state.c:27>:
                                LOG()
                                util_checksum() <int util_checksum (void *addr, size_t len, uint64_t *csump, int insert, size_t skip_off) at core/util.c:178>:
                                    util_checksum_compute() <uint64_t util_checksum_compute (void *addr, size_t len, uint64_t *csump, size_t skip_off) at core/util.c:134>:
                                        abort()
                                        le32toh()
                                    htole64()
                                FLUSH_SDS()
                        PART()
                        ASSERTne()
                        shutdown_state_check() <int shutdown_state_check (struct shutdown_state *curr_sds, struct shutdown_state *pool_sds, struct pool_replica *rep) at common/shutdown_state.c:185>:
                            LOG()
                            util_is_zeroed() <int util_is_zeroed (const void *addr, size_t len) at core/util.c:113>:
                                memcmp()
                            shutdown_state_reinit() <void shutdown_state_reinit (struct shutdown_state *curr_sds, struct shutdown_state *pool_sds, struct pool_replica *rep) at common/shutdown_state.c:167>:
                                LOG()
                                shutdown_state_init() <int shutdown_state_init (struct shutdown_state *sds, struct pool_replica *rep) at common/shutdown_state.c:39>:
                                    COMPILE_ERROR_ON()
                                    LOG()
                                    memset()
                                    shutdown_state_checksum() <void shutdown_state_checksum (struct shutdown_state *sds, struct pool_replica *rep) at common/shutdown_state.c:27>:
                                        LOG()
                                        util_checksum() <int util_checksum (void *addr, size_t len, uint64_t *csump, int insert, size_t skip_off) at core/util.c:178>:
                                            util_checksum_compute() <uint64_t util_checksum_compute (void *addr, size_t len, uint64_t *csump, size_t skip_off) at core/util.c:134>:
                                                abort()
                                                le32toh()
                                            htole64()
                                        FLUSH_SDS()
                                htole64()
                                FLUSH_SDS()
                                shutdown_state_checksum() <void shutdown_state_checksum (struct shutdown_state *sds, struct pool_replica *rep) at common/shutdown_state.c:27>:
                                    LOG()
                                    util_checksum() <int util_checksum (void *addr, size_t len, uint64_t *csump, int insert, size_t skip_off) at core/util.c:178>:
                                        util_checksum_compute() <uint64_t util_checksum_compute (void *addr, size_t len, uint64_t *csump, size_t skip_off) at core/util.c:134>:
                                            abort()
                                            le32toh()
                                        htole64()
                                    FLUSH_SDS()
                            le64toh()
                            util_checksum() <int util_checksum (void *addr, size_t len, uint64_t *csump, int insert, size_t skip_off) at core/util.c:178>:
                                util_checksum_compute() <uint64_t util_checksum_compute (void *addr, size_t len, uint64_t *csump, size_t skip_off) at core/util.c:134>:
                                    abort()
                                    le32toh()
                                htole64()
                            ERR()
                        shutdown_state_set_dirty() <void shutdown_state_set_dirty (struct shutdown_state *sds, struct pool_replica *rep) at common/shutdown_state.c:127>:
                            LOG()
                            FLUSH_SDS()
                            shutdown_state_checksum() <void shutdown_state_checksum (struct shutdown_state *sds, struct pool_replica *rep) at common/shutdown_state.c:27>:
                                LOG()
                                util_checksum() <int util_checksum (void *addr, size_t len, uint64_t *csump, int insert, size_t skip_off) at core/util.c:178>:
                                    util_checksum_compute() <uint64_t util_checksum_compute (void *addr, size_t len, uint64_t *csump, size_t skip_off) at core/util.c:134>:
                                        abort()
                                        le32toh()
                                    htole64()
                                FLUSH_SDS()
                    util_unmap_all_hdrs() <void util_unmap_all_hdrs (struct pool_set *set) at common/set.c:2741>:
                        LOG()
                        util_unmap_hdr() <void util_unmap_hdr (struct pool_set_part *part) at common/set.c:211>:
                            LOG()
                            VALGRIND_REMOVE_PMEM_MAPPING()
                            munmap()
                            FATAL()
                    util_replica_close() <int util_replica_close (struct pool_set *set, unsigned repidx) at common/set.c:2136>:
                        LOG()
                        PART()
                        RANGE_RW()
                        util_replica_deep_drain() <int util_replica_deep_drain (const void *addr, size_t len, struct pool_set *set, unsigned replica_id) at common/set.c:3314>:
                            LOG()
                            util_replica_deep_common() <int util_replica_deep_common (const void *addr, size_t len, struct pool_set *set, unsigned replica_id, int flush) at common/set.c:3247>:
                                LOG()
                                ASSERT()
                                os_part_deep_common() <int os_part_deep_common (struct pool_replica *rep, unsigned partidx, void *addr, size_t len, int flush) at common/os_deep_linux.c:108>:
                                    LOG()
                                    pmem_msync()
                                    pmem_deep_flush()
                                    pmem_drain()
                                    util_ddax_region_find() <int util_ddax_region_find (const char *path, unsigned *region_id) at common/file_posix.c:150>:
                                        LOG()
                                        os_stat() <int os_stat (const char *pathname, os_stat_t *buf) at core/os_posix.c:79>:
                                            stat()
                                        ERR()
                                        pmem2_get_type_from_stat() <int pmem2_get_type_from_stat (const os_stat_t *st, enum pmem2_file_type *type) at libpmem2/pmem2_utils_linux.c:23>:
                                            S_ISREG()
                                            S_ISDIR()
                                            S_ISCHR()
                                            ERR()
                                            util_snprintf() <int util_snprintf (char *str, size_t size, const char *format, ...) at core/util.c:434>:
                                                va_start()
                                                vsnprintf()
                                                va_end()
                                            os_major()
                                            os_minor()
                                            ASSERTinfo()
                                            LOG()
                                            realpath()
                                            strrchr()
                                            strcmp()
                                        pmem2_err_to_errno() <int pmem2_err_to_errno (int err) at libpmem2/pmem2_utils.c:67>:
                                            FATAL()
                                        pmem2_get_region_id() <int pmem2_get_region_id (const struct pmem2_source *src, unsigned *region_id) at libpmem2/region_namespace_ndctl.c:227>:
                                            LOG()
                                            ndctl_new()
                                            ERR()
                                            pmem2_region_namespace() <int pmem2_region_namespace (struct ndctl_ctx *ctx, const struct pmem2_source *src, struct ndctl_region **pregion, struct ndctl_namespace **pndns) at libpmem2/region_namespace_ndctl.c:131>:
                                                LOG()
                                                ERR()
                                                FOREACH_BUS_REGION_NAMESPACE()
                                                ndctl_namespace_get_dax()
                                                ASSERTeq()
                                                ndctl_dax_get_daxctl_region()
                                                daxctl_dev_foreach()
                                                daxctl_dev_get_devname()
                                                ndctl_match_devdax() <int ndctl_match_devdax (dev_t st_rdev, const char *devname) at libpmem2/region_namespace_ndctl.c:26>:
                                                    LOG()
                                                    stat()
                                                    util_snprintf() <int util_snprintf (char *str, size_t size, const char *format, ...) at core/util.c:434>:
                                                        va_start()
                                                        vsnprintf()
                                                        va_end()
                                                    ERR()
                                                    os_stat() <int os_stat (const char *pathname, os_stat_t *buf) at core/os_posix.c:79>:
                                                        stat()
                                                ndctl_namespace_get_btt()
                                                ndctl_btt_get_block_device()
                                                ndctl_namespace_get_pfn()
                                                ndctl_pfn_get_block_device()
                                                ndctl_namespace_get_block_device()
                                                ndctl_match_fsdax() <int ndctl_match_fsdax (dev_t st_dev, const char *devname) at libpmem2/region_namespace_ndctl.c:64>:
                                                    LOG()
                                                    util_snprintf() <int util_snprintf (char *str, size_t size, const char *format, ...) at core/util.c:434>:
                                                        va_start()
                                                        vsnprintf()
                                                        va_end()
                                                    ERR()
                                                    major()
                                                    minor()
                                                    os_open() <int os_open (const char *pathname, int flags, ...) at core/os_posix.c:29>:
                                                        va_start()
                                                        va_arg()
                                                        va_end()
                                                        open()
                                                    read()
                                                    os_close()
                                                    strcmp()
                                            ndctl_region_get_id()
                                            ndctl_unref()
                                    pmem2_deep_flush_write() <int pmem2_deep_flush_write (unsigned region_id) at libpmem2/deep_flush_linux.c:27>:
                                        LOG()
                                        util_snprintf() <int util_snprintf (char *str, size_t size, const char *format, ...) at core/util.c:434>:
                                            va_start()
                                            vsnprintf()
                                            va_end()
                                        ERR()
                                        os_open() <int os_open (const char *pathname, int flags, ...) at core/os_posix.c:29>:
                                            va_start()
                                            va_arg()
                                            va_end()
                                            open()
                                        read()
                                        os_close()
                                    MIN()
                        shutdown_state_clear_dirty() <void shutdown_state_clear_dirty (struct shutdown_state *sds, struct pool_replica *rep) at common/shutdown_state.c:143>:
                            LOG()
                            FLUSH_SDS()
                            shutdown_state_checksum() <void shutdown_state_checksum (struct shutdown_state *sds, struct pool_replica *rep) at common/shutdown_state.c:27>:
                                LOG()
                                util_checksum() <int util_checksum (void *addr, size_t len, uint64_t *csump, int insert, size_t skip_off) at core/util.c:178>:
                                    util_checksum_compute() <uint64_t util_checksum_compute (void *addr, size_t len, uint64_t *csump, size_t skip_off) at core/util.c:134>:
                                        abort()
                                        le32toh()
                                    htole64()
                                FLUSH_SDS()
                        util_unmap_hdr() <void util_unmap_hdr (struct pool_set_part *part) at common/set.c:211>:
                            LOG()
                            VALGRIND_REMOVE_PMEM_MAPPING()
                            munmap()
                            FATAL()
                        util_unmap_part() <int util_unmap_part (struct pool_set_part *part) at common/set.c:274>:
                            LOG()
                            VALGRIND_REMOVE_PMEM_MAPPING()
                            munmap()
                            ERR()
                    util_poolset_close() <void util_poolset_close (struct pool_set *set, enum del_parts_mode del) at common/set.c:383>:
                        LOG()
                        util_replica_close() <int util_replica_close (struct pool_set *set, unsigned repidx) at common/set.c:2136>:
                            LOG()
                            PART()
                            RANGE_RW()
                            util_replica_deep_drain() <int util_replica_deep_drain (const void *addr, size_t len, struct pool_set *set, unsigned replica_id) at common/set.c:3314>:
                                LOG()
                                util_replica_deep_common() <int util_replica_deep_common (const void *addr, size_t len, struct pool_set *set, unsigned replica_id, int flush) at common/set.c:3247>:
                                    LOG()
                                    ASSERT()
                                    os_part_deep_common() <int os_part_deep_common (struct pool_replica *rep, unsigned partidx, void *addr, size_t len, int flush) at common/os_deep_linux.c:108>:
                                        LOG()
                                        pmem_msync()
                                        pmem_deep_flush()
                                        pmem_drain()
                                        util_ddax_region_find() <int util_ddax_region_find (const char *path, unsigned *region_id) at common/file_posix.c:150>:
                                            LOG()
                                            os_stat() <int os_stat (const char *pathname, os_stat_t *buf) at core/os_posix.c:79>:
                                                stat()
                                            ERR()
                                            pmem2_get_type_from_stat() <int pmem2_get_type_from_stat (const os_stat_t *st, enum pmem2_file_type *type) at libpmem2/pmem2_utils_linux.c:23>:
                                                S_ISREG()
                                                S_ISDIR()
                                                S_ISCHR()
                                                ERR()
                                                util_snprintf() <int util_snprintf (char *str, size_t size, const char *format, ...) at core/util.c:434>:
                                                    va_start()
                                                    vsnprintf()
                                                    va_end()
                                                os_major()
                                                os_minor()
                                                ASSERTinfo()
                                                LOG()
                                                realpath()
                                                strrchr()
                                                strcmp()
                                            pmem2_err_to_errno() <int pmem2_err_to_errno (int err) at libpmem2/pmem2_utils.c:67>:
                                                FATAL()
                                            pmem2_get_region_id() <int pmem2_get_region_id (const struct pmem2_source *src, unsigned *region_id) at libpmem2/region_namespace_ndctl.c:227>:
                                                LOG()
                                                ndctl_new()
                                                ERR()
                                                pmem2_region_namespace() <int pmem2_region_namespace (struct ndctl_ctx *ctx, const struct pmem2_source *src, struct ndctl_region **pregion, struct ndctl_namespace **pndns) at libpmem2/region_namespace_ndctl.c:131>:
                                                    LOG()
                                                    ERR()
                                                    FOREACH_BUS_REGION_NAMESPACE()
                                                    ndctl_namespace_get_dax()
                                                    ASSERTeq()
                                                    ndctl_dax_get_daxctl_region()
                                                    daxctl_dev_foreach()
                                                    daxctl_dev_get_devname()
                                                    ndctl_match_devdax() <int ndctl_match_devdax (dev_t st_rdev, const char *devname) at libpmem2/region_namespace_ndctl.c:26>:
                                                        LOG()
                                                        stat()
                                                        util_snprintf() <int util_snprintf (char *str, size_t size, const char *format, ...) at core/util.c:434>:
                                                            va_start()
                                                            vsnprintf()
                                                            va_end()
                                                        ERR()
                                                        os_stat() <int os_stat (const char *pathname, os_stat_t *buf) at core/os_posix.c:79>:
                                                            stat()
                                                    ndctl_namespace_get_btt()
                                                    ndctl_btt_get_block_device()
                                                    ndctl_namespace_get_pfn()
                                                    ndctl_pfn_get_block_device()
                                                    ndctl_namespace_get_block_device()
                                                    ndctl_match_fsdax() <int ndctl_match_fsdax (dev_t st_dev, const char *devname) at libpmem2/region_namespace_ndctl.c:64>:
                                                        LOG()
                                                        util_snprintf() <int util_snprintf (char *str, size_t size, const char *format, ...) at core/util.c:434>:
                                                            va_start()
                                                            vsnprintf()
                                                            va_end()
                                                        ERR()
                                                        major()
                                                        minor()
                                                        os_open() <int os_open (const char *pathname, int flags, ...) at core/os_posix.c:29>:
                                                            va_start()
                                                            va_arg()
                                                            va_end()
                                                            open()
                                                        read()
                                                        os_close()
                                                        strcmp()
                                                ndctl_region_get_id()
                                                ndctl_unref()
                                        pmem2_deep_flush_write() <int pmem2_deep_flush_write (unsigned region_id) at libpmem2/deep_flush_linux.c:27>:
                                            LOG()
                                            util_snprintf() <int util_snprintf (char *str, size_t size, const char *format, ...) at core/util.c:434>:
                                                va_start()
                                                vsnprintf()
                                                va_end()
                                            ERR()
                                            os_open() <int os_open (const char *pathname, int flags, ...) at core/os_posix.c:29>:
                                                va_start()
                                                va_arg()
                                                va_end()
                                                open()
                                            read()
                                            os_close()
                                        MIN()
                            shutdown_state_clear_dirty() <void shutdown_state_clear_dirty (struct shutdown_state *sds, struct pool_replica *rep) at common/shutdown_state.c:143>:
                                LOG()
                                FLUSH_SDS()
                                shutdown_state_checksum() <void shutdown_state_checksum (struct shutdown_state *sds, struct pool_replica *rep) at common/shutdown_state.c:27>:
                                    LOG()
                                    util_checksum() <int util_checksum (void *addr, size_t len, uint64_t *csump, int insert, size_t skip_off) at core/util.c:178>:
                                        util_checksum_compute() <uint64_t util_checksum_compute (void *addr, size_t len, uint64_t *csump, size_t skip_off) at core/util.c:134>:
                                            abort()
                                            le32toh()
                                        htole64()
                                    FLUSH_SDS()
                            util_unmap_hdr() <void util_unmap_hdr (struct pool_set_part *part) at common/set.c:211>:
                                LOG()
                                VALGRIND_REMOVE_PMEM_MAPPING()
                                munmap()
                                FATAL()
                            util_unmap_part() <int util_unmap_part (struct pool_set_part *part) at common/set.c:274>:
                                LOG()
                                VALGRIND_REMOVE_PMEM_MAPPING()
                                munmap()
                                ERR()
                        util_replica_close_local() <int util_replica_close_local (struct pool_replica *rep, unsigned repn, enum del_parts_mode del) at common/set.c:356>:
                            os_close()
                            LOG()
                            util_unlink() <int util_unlink (const char *path) at common/file.c:513>:
                                LOG()
                                util_file_get_type() <enum file_type util_file_get_type (const char *path) at common/file.c:106>:
                                    LOG()
                                    ERR()
                                    util_file_exists() <int util_file_exists (const char *path) at common/file.c:32>:
                                        LOG()
                                        os_access() <int os_access (const char *pathname, int mode) at core/os_posix.c:97>:
                                            access()
                                        ERR()
                                    os_stat() <int os_stat (const char *pathname, os_stat_t *buf) at core/os_posix.c:79>:
                                        stat()
                                    util_stat_get_type() <enum file_type util_stat_get_type (const os_stat_t *st) at common/file.c:62>:
                                        pmem2_get_type_from_stat() <int pmem2_get_type_from_stat (const os_stat_t *st, enum pmem2_file_type *type) at libpmem2/pmem2_utils_linux.c:23>:
                                            S_ISREG()
                                            S_ISDIR()
                                            S_ISCHR()
                                            ERR()
                                            util_snprintf() <int util_snprintf (char *str, size_t size, const char *format, ...) at core/util.c:434>:
                                                va_start()
                                                vsnprintf()
                                                va_end()
                                            os_major()
                                            os_minor()
                                            ASSERTinfo()
                                            LOG()
                                            realpath()
                                            strrchr()
                                            strcmp()
                                        pmem2_err_to_errno() <int pmem2_err_to_errno (int err) at libpmem2/pmem2_utils.c:67>:
                                            FATAL()
                                        ASSERTinfo()
                                util_file_zero() <int util_file_zero (const char *path, os_off_t off, size_t len) at common/file.c:234>:
                                    LOG()
                                    os_open() <int os_open (const char *pathname, int flags, ...) at core/os_posix.c:29>:
                                        va_start()
                                        va_arg()
                                        va_end()
                                        open()
                                    ERR()
                                    util_fd_get_size() <ssize_t util_fd_get_size (int fd) at common/file.c:157>:
                                        LOG()
                                        pmem2_source_from_fd() <int pmem2_source_from_fd (struct pmem2_source **src, int fd) at libpmem2/source_posix.c:19>:
                                            PMEM2_ERR_CLR()
                                            fcntl()
                                            ERR()
                                            os_fstat()
                                            pmem2_get_type_from_stat() <int pmem2_get_type_from_stat (const os_stat_t *st, enum pmem2_file_type *type) at libpmem2/pmem2_utils_linux.c:23>:
                                                S_ISREG()
                                                S_ISDIR()
                                                S_ISCHR()
                                                ERR()
                                                util_snprintf() <int util_snprintf (char *str, size_t size, const char *format, ...) at core/util.c:434>:
                                                    va_start()
                                                    vsnprintf()
                                                    va_end()
                                                os_major()
                                                os_minor()
                                                ASSERTinfo()
                                                LOG()
                                                realpath()
                                                strrchr()
                                                strcmp()
                                            pmem2_malloc() <void *pmem2_malloc (size_t size, int *err) at libpmem2/pmem2_utils.c:19>:
                                                Malloc()
                                                ERR()
                                            ASSERTne()
                                        pmem2_err_to_errno() <int pmem2_err_to_errno (int err) at libpmem2/pmem2_utils.c:67>:
                                            FATAL()
                                        pmem2_source_size() <int pmem2_source_size (const struct pmem2_source *src, size_t *size) at libpmem2/source_posix.c:90>:
                                            LOG()
                                            PMEM2_ERR_CLR()
                                            ASSERT()
                                            os_fstat()
                                            ERR()
                                            pmem2_device_dax_size() <int pmem2_device_dax_size (const struct pmem2_source *src, size_t *size) at libpmem2/pmem2_utils_ndctl.c:58>:
                                                ndctl_new()
                                                ERR()
                                                pmem2_region_namespace() <int pmem2_region_namespace (struct ndctl_ctx *ctx, const struct pmem2_source *src, struct ndctl_region **pregion, struct ndctl_namespace **pndns) at libpmem2/region_namespace_ndctl.c:131>:
                                                    LOG()
                                                    ERR()
                                                    FOREACH_BUS_REGION_NAMESPACE()
                                                    ndctl_namespace_get_dax()
                                                    ASSERTeq()
                                                    ndctl_dax_get_daxctl_region()
                                                    daxctl_dev_foreach()
                                                    daxctl_dev_get_devname()
                                                    ndctl_match_devdax() <int ndctl_match_devdax (dev_t st_rdev, const char *devname) at libpmem2/region_namespace_ndctl.c:26>:
                                                        LOG()
                                                        stat()
                                                        util_snprintf() <int util_snprintf (char *str, size_t size, const char *format, ...) at core/util.c:434>:
                                                            va_start()
                                                            vsnprintf()
                                                            va_end()
                                                        ERR()
                                                        os_stat() <int os_stat (const char *pathname, os_stat_t *buf) at core/os_posix.c:79>:
                                                            stat()
                                                    ndctl_namespace_get_btt()
                                                    ndctl_btt_get_block_device()
                                                    ndctl_namespace_get_pfn()
                                                    ndctl_pfn_get_block_device()
                                                    ndctl_namespace_get_block_device()
                                                    ndctl_match_fsdax() <int ndctl_match_fsdax (dev_t st_dev, const char *devname) at libpmem2/region_namespace_ndctl.c:64>:
                                                        LOG()
                                                        util_snprintf() <int util_snprintf (char *str, size_t size, const char *format, ...) at core/util.c:434>:
                                                            va_start()
                                                            vsnprintf()
                                                            va_end()
                                                        ERR()
                                                        major()
                                                        minor()
                                                        os_open() <int os_open (const char *pathname, int flags, ...) at core/os_posix.c:29>:
                                                            va_start()
                                                            va_arg()
                                                            va_end()
                                                            open()
                                                        read()
                                                        os_close()
                                                        strcmp()
                                                LOG()
                                                ndctl_namespace_get_dax()
                                                ndctl_dax_get_size()
                                                ndctl_unref()
                                            FATAL()
                                        pmem2_source_delete() <int pmem2_source_delete (struct pmem2_source **src) at libpmem2/source.c:30>:
                                            Free() <Free_func Free at core/alloc.c:91>
                                        ERR()
                                    out() <void out (const char *fmt, ...) at core/out.c:480>:
                                        va_start()
                                        out_common() <} void out_common (const char *file, int line, const char *func, int level, const char *suffix, const char *fmt, va_list ap) at core/out.c:334>
                                        va_end()
                                    util_map() <void *util_map (int fd, os_off_t off, size_t len, int flags, int rdonly, size_t req_align, int *map_sync) at common/mmap.c:85>:
                                        LOG()
                                        util_map_hint() <char *util_map_hint (size_t len, size_t req_align) at common/mmap_posix.c:118>:
                                            LOG()
                                            util_map_hint_align()
                                            util_map_hint_unused() <char *util_map_hint_unused (void *minaddr, size_t len, size_t align) at common/mmap_posix.c:36>:
                                                LOG()
                                                ASSERT()
                                                os_fopen() <FILE *os_fopen (const char *pathname, const char *mode) at core/os_posix.c:106>:
                                                    fopen()
                                                ERR()
                                                roundup()
                                                fgets()
                                                sscanf()
                                                fclose()
                                            mmap()
                                            ERR()
                                            roundup()
                                            munmap()
                                        ASSERTeq()
                                        util_map_sync() <void *util_map_sync (void *addr, size_t len, int proto, int flags, int fd, os_off_t offset, int *map_sync) at common/mmap_posix.c:159>:
                                            LOG()
                                            mmap()
                                        ERR()
                                    memset()
                                    util_unmap() <int util_unmap (void *addr, size_t len) at common/mmap.c:120>:
                                        LOG()
                                        munmap()
                                        ERR()
                                    os_close()
                                os_unlink() <int os_unlink (const char *pathname) at core/os_posix.c:88>:
                                    unlink()
                            ERR()
                        util_poolset_free() <void util_poolset_free (struct pool_set *set) at common/set.c:312>:
                            LOG()
                            Free() <Free_func Free at core/alloc.c:91>
                            VEC_FOREACH_BY_PTR()
                            VEC_DELETE()
                    util_poolset_free() <void util_poolset_free (struct pool_set *set) at common/set.c:312>:
                        LOG()
                        Free() <Free_func Free at core/alloc.c:91>
                        VEC_FOREACH_BY_PTR()
                        VEC_DELETE()
                LOG()
                ASSERT()
                ERR()
                obj_pool_close() <void obj_pool_close (struct pool_set *set) at libpmemobj/obj.c:1220>:
                    util_poolset_close() <void util_poolset_close (struct pool_set *set, enum del_parts_mode del) at common/set.c:383>:
                        LOG()
                        util_replica_close() <int util_replica_close (struct pool_set *set, unsigned repidx) at common/set.c:2136>:
                            LOG()
                            PART()
                            RANGE_RW()
                            util_replica_deep_drain() <int util_replica_deep_drain (const void *addr, size_t len, struct pool_set *set, unsigned replica_id) at common/set.c:3314>:
                                LOG()
                                util_replica_deep_common() <int util_replica_deep_common (const void *addr, size_t len, struct pool_set *set, unsigned replica_id, int flush) at common/set.c:3247>:
                                    LOG()
                                    ASSERT()
                                    os_part_deep_common() <int os_part_deep_common (struct pool_replica *rep, unsigned partidx, void *addr, size_t len, int flush) at common/os_deep_linux.c:108>:
                                        LOG()
                                        pmem_msync()
                                        pmem_deep_flush()
                                        pmem_drain()
                                        util_ddax_region_find() <int util_ddax_region_find (const char *path, unsigned *region_id) at common/file_posix.c:150>:
                                            LOG()
                                            os_stat() <int os_stat (const char *pathname, os_stat_t *buf) at core/os_posix.c:79>:
                                                stat()
                                            ERR()
                                            pmem2_get_type_from_stat() <int pmem2_get_type_from_stat (const os_stat_t *st, enum pmem2_file_type *type) at libpmem2/pmem2_utils_linux.c:23>:
                                                S_ISREG()
                                                S_ISDIR()
                                                S_ISCHR()
                                                ERR()
                                                util_snprintf() <int util_snprintf (char *str, size_t size, const char *format, ...) at core/util.c:434>:
                                                    va_start()
                                                    vsnprintf()
                                                    va_end()
                                                os_major()
                                                os_minor()
                                                ASSERTinfo()
                                                LOG()
                                                realpath()
                                                strrchr()
                                                strcmp()
                                            pmem2_err_to_errno() <int pmem2_err_to_errno (int err) at libpmem2/pmem2_utils.c:67>:
                                                FATAL()
                                            pmem2_get_region_id() <int pmem2_get_region_id (const struct pmem2_source *src, unsigned *region_id) at libpmem2/region_namespace_ndctl.c:227>:
                                                LOG()
                                                ndctl_new()
                                                ERR()
                                                pmem2_region_namespace() <int pmem2_region_namespace (struct ndctl_ctx *ctx, const struct pmem2_source *src, struct ndctl_region **pregion, struct ndctl_namespace **pndns) at libpmem2/region_namespace_ndctl.c:131>:
                                                    LOG()
                                                    ERR()
                                                    FOREACH_BUS_REGION_NAMESPACE()
                                                    ndctl_namespace_get_dax()
                                                    ASSERTeq()
                                                    ndctl_dax_get_daxctl_region()
                                                    daxctl_dev_foreach()
                                                    daxctl_dev_get_devname()
                                                    ndctl_match_devdax() <int ndctl_match_devdax (dev_t st_rdev, const char *devname) at libpmem2/region_namespace_ndctl.c:26>:
                                                        LOG()
                                                        stat()
                                                        util_snprintf() <int util_snprintf (char *str, size_t size, const char *format, ...) at core/util.c:434>:
                                                            va_start()
                                                            vsnprintf()
                                                            va_end()
                                                        ERR()
                                                        os_stat() <int os_stat (const char *pathname, os_stat_t *buf) at core/os_posix.c:79>:
                                                            stat()
                                                    ndctl_namespace_get_btt()
                                                    ndctl_btt_get_block_device()
                                                    ndctl_namespace_get_pfn()
                                                    ndctl_pfn_get_block_device()
                                                    ndctl_namespace_get_block_device()
                                                    ndctl_match_fsdax() <int ndctl_match_fsdax (dev_t st_dev, const char *devname) at libpmem2/region_namespace_ndctl.c:64>:
                                                        LOG()
                                                        util_snprintf() <int util_snprintf (char *str, size_t size, const char *format, ...) at core/util.c:434>:
                                                            va_start()
                                                            vsnprintf()
                                                            va_end()
                                                        ERR()
                                                        major()
                                                        minor()
                                                        os_open() <int os_open (const char *pathname, int flags, ...) at core/os_posix.c:29>:
                                                            va_start()
                                                            va_arg()
                                                            va_end()
                                                            open()
                                                        read()
                                                        os_close()
                                                        strcmp()
                                                ndctl_region_get_id()
                                                ndctl_unref()
                                        pmem2_deep_flush_write() <int pmem2_deep_flush_write (unsigned region_id) at libpmem2/deep_flush_linux.c:27>:
                                            LOG()
                                            util_snprintf() <int util_snprintf (char *str, size_t size, const char *format, ...) at core/util.c:434>:
                                                va_start()
                                                vsnprintf()
                                                va_end()
                                            ERR()
                                            os_open() <int os_open (const char *pathname, int flags, ...) at core/os_posix.c:29>:
                                                va_start()
                                                va_arg()
                                                va_end()
                                                open()
                                            read()
                                            os_close()
                                        MIN()
                            shutdown_state_clear_dirty() <void shutdown_state_clear_dirty (struct shutdown_state *sds, struct pool_replica *rep) at common/shutdown_state.c:143>:
                                LOG()
                                FLUSH_SDS()
                                shutdown_state_checksum() <void shutdown_state_checksum (struct shutdown_state *sds, struct pool_replica *rep) at common/shutdown_state.c:27>:
                                    LOG()
                                    util_checksum() <int util_checksum (void *addr, size_t len, uint64_t *csump, int insert, size_t skip_off) at core/util.c:178>:
                                        util_checksum_compute() <uint64_t util_checksum_compute (void *addr, size_t len, uint64_t *csump, size_t skip_off) at core/util.c:134>:
                                            abort()
                                            le32toh()
                                        htole64()
                                    FLUSH_SDS()
                            util_unmap_hdr() <void util_unmap_hdr (struct pool_set_part *part) at common/set.c:211>:
                                LOG()
                                VALGRIND_REMOVE_PMEM_MAPPING()
                                munmap()
                                FATAL()
                            util_unmap_part() <int util_unmap_part (struct pool_set_part *part) at common/set.c:274>:
                                LOG()
                                VALGRIND_REMOVE_PMEM_MAPPING()
                                munmap()
                                ERR()
                        util_replica_close_local() <int util_replica_close_local (struct pool_replica *rep, unsigned repn, enum del_parts_mode del) at common/set.c:356>:
                            os_close()
                            LOG()
                            util_unlink() <int util_unlink (const char *path) at common/file.c:513>:
                                LOG()
                                util_file_get_type() <enum file_type util_file_get_type (const char *path) at common/file.c:106>:
                                    LOG()
                                    ERR()
                                    util_file_exists() <int util_file_exists (const char *path) at common/file.c:32>:
                                        LOG()
                                        os_access() <int os_access (const char *pathname, int mode) at core/os_posix.c:97>:
                                            access()
                                        ERR()
                                    os_stat() <int os_stat (const char *pathname, os_stat_t *buf) at core/os_posix.c:79>:
                                        stat()
                                    util_stat_get_type() <enum file_type util_stat_get_type (const os_stat_t *st) at common/file.c:62>:
                                        pmem2_get_type_from_stat() <int pmem2_get_type_from_stat (const os_stat_t *st, enum pmem2_file_type *type) at libpmem2/pmem2_utils_linux.c:23>:
                                            S_ISREG()
                                            S_ISDIR()
                                            S_ISCHR()
                                            ERR()
                                            util_snprintf() <int util_snprintf (char *str, size_t size, const char *format, ...) at core/util.c:434>:
                                                va_start()
                                                vsnprintf()
                                                va_end()
                                            os_major()
                                            os_minor()
                                            ASSERTinfo()
                                            LOG()
                                            realpath()
                                            strrchr()
                                            strcmp()
                                        pmem2_err_to_errno() <int pmem2_err_to_errno (int err) at libpmem2/pmem2_utils.c:67>:
                                            FATAL()
                                        ASSERTinfo()
                                util_file_zero() <int util_file_zero (const char *path, os_off_t off, size_t len) at common/file.c:234>:
                                    LOG()
                                    os_open() <int os_open (const char *pathname, int flags, ...) at core/os_posix.c:29>:
                                        va_start()
                                        va_arg()
                                        va_end()
                                        open()
                                    ERR()
                                    util_fd_get_size() <ssize_t util_fd_get_size (int fd) at common/file.c:157>:
                                        LOG()
                                        pmem2_source_from_fd() <int pmem2_source_from_fd (struct pmem2_source **src, int fd) at libpmem2/source_posix.c:19>:
                                            PMEM2_ERR_CLR()
                                            fcntl()
                                            ERR()
                                            os_fstat()
                                            pmem2_get_type_from_stat() <int pmem2_get_type_from_stat (const os_stat_t *st, enum pmem2_file_type *type) at libpmem2/pmem2_utils_linux.c:23>:
                                                S_ISREG()
                                                S_ISDIR()
                                                S_ISCHR()
                                                ERR()
                                                util_snprintf() <int util_snprintf (char *str, size_t size, const char *format, ...) at core/util.c:434>:
                                                    va_start()
                                                    vsnprintf()
                                                    va_end()
                                                os_major()
                                                os_minor()
                                                ASSERTinfo()
                                                LOG()
                                                realpath()
                                                strrchr()
                                                strcmp()
                                            pmem2_malloc() <void *pmem2_malloc (size_t size, int *err) at libpmem2/pmem2_utils.c:19>:
                                                Malloc()
                                                ERR()
                                            ASSERTne()
                                        pmem2_err_to_errno() <int pmem2_err_to_errno (int err) at libpmem2/pmem2_utils.c:67>:
                                            FATAL()
                                        pmem2_source_size() <int pmem2_source_size (const struct pmem2_source *src, size_t *size) at libpmem2/source_posix.c:90>:
                                            LOG()
                                            PMEM2_ERR_CLR()
                                            ASSERT()
                                            os_fstat()
                                            ERR()
                                            pmem2_device_dax_size() <int pmem2_device_dax_size (const struct pmem2_source *src, size_t *size) at libpmem2/pmem2_utils_ndctl.c:58>:
                                                ndctl_new()
                                                ERR()
                                                pmem2_region_namespace() <int pmem2_region_namespace (struct ndctl_ctx *ctx, const struct pmem2_source *src, struct ndctl_region **pregion, struct ndctl_namespace **pndns) at libpmem2/region_namespace_ndctl.c:131>:
                                                    LOG()
                                                    ERR()
                                                    FOREACH_BUS_REGION_NAMESPACE()
                                                    ndctl_namespace_get_dax()
                                                    ASSERTeq()
                                                    ndctl_dax_get_daxctl_region()
                                                    daxctl_dev_foreach()
                                                    daxctl_dev_get_devname()
                                                    ndctl_match_devdax() <int ndctl_match_devdax (dev_t st_rdev, const char *devname) at libpmem2/region_namespace_ndctl.c:26>:
                                                        LOG()
                                                        stat()
                                                        util_snprintf() <int util_snprintf (char *str, size_t size, const char *format, ...) at core/util.c:434>:
                                                            va_start()
                                                            vsnprintf()
                                                            va_end()
                                                        ERR()
                                                        os_stat() <int os_stat (const char *pathname, os_stat_t *buf) at core/os_posix.c:79>:
                                                            stat()
                                                    ndctl_namespace_get_btt()
                                                    ndctl_btt_get_block_device()
                                                    ndctl_namespace_get_pfn()
                                                    ndctl_pfn_get_block_device()
                                                    ndctl_namespace_get_block_device()
                                                    ndctl_match_fsdax() <int ndctl_match_fsdax (dev_t st_dev, const char *devname) at libpmem2/region_namespace_ndctl.c:64>:
                                                        LOG()
                                                        util_snprintf() <int util_snprintf (char *str, size_t size, const char *format, ...) at core/util.c:434>:
                                                            va_start()
                                                            vsnprintf()
                                                            va_end()
                                                        ERR()
                                                        major()
                                                        minor()
                                                        os_open() <int os_open (const char *pathname, int flags, ...) at core/os_posix.c:29>:
                                                            va_start()
                                                            va_arg()
                                                            va_end()
                                                            open()
                                                        read()
                                                        os_close()
                                                        strcmp()
                                                LOG()
                                                ndctl_namespace_get_dax()
                                                ndctl_dax_get_size()
                                                ndctl_unref()
                                            FATAL()
                                        pmem2_source_delete() <int pmem2_source_delete (struct pmem2_source **src) at libpmem2/source.c:30>:
                                            Free() <Free_func Free at core/alloc.c:91>
                                        ERR()
                                    out() <void out (const char *fmt, ...) at core/out.c:480>:
                                        va_start()
                                        out_common() <} void out_common (const char *file, int line, const char *func, int level, const char *suffix, const char *fmt, va_list ap) at core/out.c:334>
                                        va_end()
                                    util_map() <void *util_map (int fd, os_off_t off, size_t len, int flags, int rdonly, size_t req_align, int *map_sync) at common/mmap.c:85>:
                                        LOG()
                                        util_map_hint() <char *util_map_hint (size_t len, size_t req_align) at common/mmap_posix.c:118>:
                                            LOG()
                                            util_map_hint_align()
                                            util_map_hint_unused() <char *util_map_hint_unused (void *minaddr, size_t len, size_t align) at common/mmap_posix.c:36>:
                                                LOG()
                                                ASSERT()
                                                os_fopen() <FILE *os_fopen (const char *pathname, const char *mode) at core/os_posix.c:106>:
                                                    fopen()
                                                ERR()
                                                roundup()
                                                fgets()
                                                sscanf()
                                                fclose()
                                            mmap()
                                            ERR()
                                            roundup()
                                            munmap()
                                        ASSERTeq()
                                        util_map_sync() <void *util_map_sync (void *addr, size_t len, int proto, int flags, int fd, os_off_t offset, int *map_sync) at common/mmap_posix.c:159>:
                                            LOG()
                                            mmap()
                                        ERR()
                                    memset()
                                    util_unmap() <int util_unmap (void *addr, size_t len) at common/mmap.c:120>:
                                        LOG()
                                        munmap()
                                        ERR()
                                    os_close()
                                os_unlink() <int os_unlink (const char *pathname) at core/os_posix.c:88>:
                                    unlink()
                            ERR()
                        util_poolset_free() <void util_poolset_free (struct pool_set *set) at common/set.c:312>:
                            LOG()
                            Free() <Free_func Free at core/alloc.c:91>
                            VEC_FOREACH_BY_PTR()
                            VEC_DELETE()
            os_mutex_unlock() <int os_mutex_unlock (os_mutex_t *__restrict mutex) at core/os_thread_posix.c:108>:
                pthread_mutex_unlock()
            obj_replicas_init() <int obj_replicas_init (struct pool_set *set) at libpmemobj/obj.c:1259>:
                VALGRIND_REMOVE_PMEM_MAPPING()
                memset()
                obj_replica_init() <int obj_replica_init (PMEMobjpool *rep, struct pool_set *set, unsigned repidx) at libpmemobj/obj.c:844>:
                    obj_rep_persist() <int obj_rep_persist (void *ctx, const void *addr, size_t len, unsigned flags) at libpmemobj/obj.c:475>:
                        SUPPRESS_UNUSED()
                        LOG()
                    obj_rep_flush() <int obj_rep_flush (void *ctx, const void *addr, size_t len, unsigned flags) at libpmemobj/obj.c:499>:
                        SUPPRESS_UNUSED()
                        LOG()
                    obj_rep_drain() <void obj_rep_drain (void *ctx) at libpmemobj/obj.c:523>:
                        LOG()
                    obj_rep_memcpy() <void *obj_rep_memcpy (void *ctx, void *dest, const void *src, size_t len, unsigned flags) at libpmemobj/obj.c:404>:
                        LOG()
                    obj_rep_memmove() <void *obj_rep_memmove (void *ctx, void *dest, const void *src, size_t len, unsigned flags) at libpmemobj/obj.c:428>:
                        LOG()
                    obj_rep_memset() <void *obj_rep_memset (void *ctx, void *dest, int c, size_t len, unsigned flags) at libpmemobj/obj.c:452>:
                        LOG()
                    obj_norep_persist() <int obj_norep_persist (void *ctx, const void *addr, size_t len, unsigned flags) at libpmemobj/obj.c:356>:
                        SUPPRESS_UNUSED()
                        LOG()
                    obj_norep_flush() <int obj_norep_flush (void *ctx, const void *addr, size_t len, unsigned flags) at libpmemobj/obj.c:373>:
                        SUPPRESS_UNUSED()
                        LOG()
                    obj_norep_drain() <void obj_norep_drain (void *ctx) at libpmemobj/obj.c:390>:
                        LOG()
                    obj_norep_memcpy() <void *obj_norep_memcpy (void *ctx, void *dest, const void *src, size_t len, unsigned flags) at libpmemobj/obj.c:313>:
                        LOG()
                    obj_norep_memmove() <void *obj_norep_memmove (void *ctx, void *dest, const void *src, size_t len, unsigned flags) at libpmemobj/obj.c:328>:
                        LOG()
                    obj_norep_memset() <void *obj_norep_memset (void *ctx, void *dest, int c, size_t len, unsigned flags) at libpmemobj/obj.c:343>:
                        LOG()
                    obj_replica_init_local() <int obj_replica_init_local (PMEMobjpool *rep, int is_pmem, size_t resvsize) at libpmemobj/obj.c:802>:
                        LOG()
                        VALGRIND_ADD_TO_GLOBAL_TX_IGNORE()
                        pmem_drain()
                        pmem_memcpy()
                        pmem_memmove()
                        pmem_memset()
                        obj_msync_nofail() <void obj_msync_nofail (const void *addr, size_t size) at libpmemobj/obj.c:250>:
                            pmem_msync()
                            FATAL()
                        obj_drain_empty() <void obj_drain_empty (void) at libpmemobj/obj.c:240>
                        obj_nopmem_memcpy() <void *obj_nopmem_memcpy (void *dest, const void *src, size_t len, unsigned flags) at libpmemobj/obj.c:260>:
                            LOG()
                            pmem_memcpy()
                            obj_msync_nofail() <void obj_msync_nofail (const void *addr, size_t size) at libpmemobj/obj.c:250>:
                                pmem_msync()
                                FATAL()
                        obj_nopmem_memmove() <void *obj_nopmem_memmove (void *dest, const void *src, size_t len, unsigned flags) at libpmemobj/obj.c:279>:
                            LOG()
                            pmem_memmove()
                            obj_msync_nofail() <void obj_msync_nofail (const void *addr, size_t size) at libpmemobj/obj.c:250>:
                                pmem_msync()
                                FATAL()
                        obj_nopmem_memset() <void *obj_nopmem_memset (void *dest, int c, size_t len, unsigned flags) at libpmemobj/obj.c:293>:
                            LOG()
                            pmem_memset()
                            obj_msync_nofail() <void obj_msync_nofail (const void *addr, size_t size) at libpmemobj/obj.c:250>:
                                pmem_msync()
                                FATAL()
                ERR()
                obj_replica_fini() <void obj_replica_fini (struct pool_replica *repset) at libpmemobj/obj.c:898>:
                    LOG()
            obj_descr_check() <int obj_descr_check (PMEMobjpool *pop, const char *layout, size_t poolsize) at libpmemobj/obj.c:767>:
                LOG()
                util_checksum() <int util_checksum (void *addr, size_t len, uint64_t *csump, int insert, size_t skip_off) at core/util.c:178>:
                    util_checksum_compute() <uint64_t util_checksum_compute (void *addr, size_t len, uint64_t *csump, size_t skip_off) at core/util.c:134>:
                        abort()
                        le32toh()
                    htole64()
                ERR()
                strncmp()
            obj_check_basic() <int obj_check_basic (PMEMobjpool *pop, size_t mapped_size) at libpmemobj/obj.c:1209>:
                LOG()
                obj_check_basic_local() <int obj_check_basic_local (PMEMobjpool *pop, size_t mapped_size) at libpmemobj/obj.c:1175>:
                    LOG()
                    ERR()
                    lane_check() <int lane_check (PMEMobjpool *pop) at libpmemobj/lane.c:407>:
                        lane_get_layout() <struct lane_layout *lane_get_layout (PMEMobjpool *pop, uint64_t lane_idx) at libpmemobj/lane.c:150>
                        ulog_check() <int ulog_check (struct ulog *ulog, ulog_check_offset_fn check, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:881>:
                            LOG()
                            ulog_foreach_entry() <int ulog_foreach_entry (struct ulog *ulog, ulog_entry_cb cb, void *arg, const struct pmem_ops *ops) at libpmemobj/ulog.c:180>
                            ulog_check_entry() <int ulog_check_entry (struct ulog_entry_base *e, void *arg, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:862>:
                                ulog_entry_offset() <uint64_t ulog_entry_offset (const struct ulog_entry_base *entry) at libpmemobj/ulog.c:68>:
                                check()
                                LOG()
                        LOG()
                    palloc_heap_check() <int palloc_heap_check (void *heap_start, uint64_t heap_size) at libpmemobj/palloc.c:1290>:
                        heap_check() <int heap_check (void *heap_start, uint64_t heap_size) at libpmemobj/heap.c:1874>:
                            ERR()
                            heap_verify_header() <int heap_verify_header (struct heap_header *hdr) at libpmemobj/heap.c:1777>:
                                util_checksum() <int util_checksum (void *addr, size_t len, uint64_t *csump, int insert, size_t skip_off) at core/util.c:178>:
                                    util_checksum_compute() <uint64_t util_checksum_compute (void *addr, size_t len, uint64_t *csump, size_t skip_off) at core/util.c:134>:
                                        abort()
                                        le32toh()
                                    htole64()
                                ERR()
                                memcmp()
                            heap_max_zone() <unsigned heap_max_zone (size_t size) at libpmemobj/heap.c:516>:
                            heap_verify_zone() <int heap_verify_zone (struct zone *zone) at libpmemobj/heap.c:1839>:
                                ERR()
                                heap_verify_zone_header() <int heap_verify_zone_header (struct zone_header *hdr) at libpmemobj/heap.c:1797>:
                                    ERR()
                                heap_verify_chunk_header() <int heap_verify_chunk_header (struct chunk_header *hdr) at libpmemobj/heap.c:1815>:
                                    ERR()
                            ZID_TO_ZONE()
            obj_replicas_check_basic() <int obj_replicas_check_basic (PMEMobjpool *pop) at libpmemobj/obj.c:1311>:
                obj_check_basic() <int obj_check_basic (PMEMobjpool *pop, size_t mapped_size) at libpmemobj/obj.c:1209>:
                    LOG()
                    obj_check_basic_local() <int obj_check_basic_local (PMEMobjpool *pop, size_t mapped_size) at libpmemobj/obj.c:1175>:
                        LOG()
                        ERR()
                        lane_check() <int lane_check (PMEMobjpool *pop) at libpmemobj/lane.c:407>:
                            lane_get_layout() <struct lane_layout *lane_get_layout (PMEMobjpool *pop, uint64_t lane_idx) at libpmemobj/lane.c:150>
                            ulog_check() <int ulog_check (struct ulog *ulog, ulog_check_offset_fn check, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:881>:
                                LOG()
                                ulog_foreach_entry() <int ulog_foreach_entry (struct ulog *ulog, ulog_entry_cb cb, void *arg, const struct pmem_ops *ops) at libpmemobj/ulog.c:180>
                                ulog_check_entry() <int ulog_check_entry (struct ulog_entry_base *e, void *arg, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:862>:
                                    ulog_entry_offset() <uint64_t ulog_entry_offset (const struct ulog_entry_base *entry) at libpmemobj/ulog.c:68>:
                                    check()
                                    LOG()
                            LOG()
                        palloc_heap_check() <int palloc_heap_check (void *heap_start, uint64_t heap_size) at libpmemobj/palloc.c:1290>:
                            heap_check() <int heap_check (void *heap_start, uint64_t heap_size) at libpmemobj/heap.c:1874>:
                                ERR()
                                heap_verify_header() <int heap_verify_header (struct heap_header *hdr) at libpmemobj/heap.c:1777>:
                                    util_checksum() <int util_checksum (void *addr, size_t len, uint64_t *csump, int insert, size_t skip_off) at core/util.c:178>:
                                        util_checksum_compute() <uint64_t util_checksum_compute (void *addr, size_t len, uint64_t *csump, size_t skip_off) at core/util.c:134>:
                                            abort()
                                            le32toh()
                                        htole64()
                                    ERR()
                                    memcmp()
                                heap_max_zone() <unsigned heap_max_zone (size_t size) at libpmemobj/heap.c:516>:
                                heap_verify_zone() <int heap_verify_zone (struct zone *zone) at libpmemobj/heap.c:1839>:
                                    ERR()
                                    heap_verify_zone_header() <int heap_verify_zone_header (struct zone_header *hdr) at libpmemobj/heap.c:1797>:
                                        ERR()
                                    heap_verify_chunk_header() <int heap_verify_chunk_header (struct chunk_header *hdr) at libpmemobj/heap.c:1815>:
                                        ERR()
                                ZID_TO_ZONE()
                ERR()
            obj_runtime_init() <int obj_runtime_init (PMEMobjpool *pop, int rdonly, int boot, unsigned nlanes) at libpmemobj/obj.c:907>:
                LOG()
                pmemops_persist()
                pmemobj_get_uuid_lo()
                tx_params_new() <struct tx_parameters *tx_params_new (void) at libpmemobj/tx.c:109>:
                    Malloc()
                stats_new() <struct stats *stats_new (PMEMobjpool *pop) at libpmemobj/stats.c:116>:
                    Malloc()
                    ERR()
                    VALGRIND_ADD_TO_GLOBAL_TX_IGNORE()
                    Zalloc() <void *Zalloc (size_t sz) at core/alloc.c:98>:
                        Malloc()
                        memset()
                    Free() <Free_func Free at core/alloc.c:91>
                VALGRIND_REMOVE_PMEM_MAPPING()
                obj_runtime_init_common() <int obj_runtime_init_common (PMEMobjpool *pop) at libpmemobj/obj.c:658>:
                    LOG()
                    lane_boot() <int lane_boot (PMEMobjpool *pop) at libpmemobj/lane.c:260>:
                        Malloc()
                        ERR()
                        Zalloc() <void *Zalloc (size_t sz) at core/alloc.c:98>:
                            Malloc()
                            memset()
                        VALGRIND_ADD_TO_GLOBAL_TX_IGNORE()
                        lane_get_layout() <struct lane_layout *lane_get_layout (PMEMobjpool *pop, uint64_t lane_idx) at libpmemobj/lane.c:150>
                        lane_init() <int lane_init (PMEMobjpool *pop, struct lane *lane, struct lane_layout *layout) at libpmemobj/lane.c:205>:
                            ASSERTne()
                            operation_new() <struct operation_context *operation_new (struct ulog *ulog, size_t ulog_base_nbytes, ulog_extend_fn extend, ulog_free_fn ulog_free, const struct pmem_ops *p_ops, enum log_type type) at libpmemobj/memops.c:171>:
                                Zalloc() <void *Zalloc (size_t sz) at core/alloc.c:98>:
                                    Malloc()
                                    memset()
                                ERR()
                                ulog_capacity() <size_t ulog_capacity (struct ulog *ulog, size_t ulog_base_bytes, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:206>:
                                    ulog_next() <struct ulog *ulog_next (struct ulog *ulog, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:50>:
                                        ulog_by_offset() <struct ulog *ulog_by_offset (size_t offset, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:36>:
                                            CACHELINE_ALIGN()
                                VEC_INIT()
                                ulog_rebuild_next_vec() <void ulog_rebuild_next_vec (struct ulog *ulog, struct ulog_next *next, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:223>:
                                    VEC_PUSH_BACK()
                                    ulog_next() <struct ulog *ulog_next (struct ulog *ulog, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:50>:
                                        ulog_by_offset() <struct ulog *ulog_by_offset (size_t offset, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:36>:
                                            CACHELINE_ALIGN()
                                operation_transient_clean() <int operation_transient_clean (void *base, const void *addr, size_t len, unsigned flags) at libpmemobj/memops.c:133>:
                                    SUPPRESS_UNUSED()
                                    VALGRIND_SET_CLEAN()
                                operation_transient_memcpy() <void *operation_transient_memcpy (void *base, void *dest, const void *src, size_t len, unsigned flags) at libpmemobj/memops.c:158>:
                                    SUPPRESS_UNUSED()
                                    memcpy()
                                operation_transient_drain() <void operation_transient_drain (void *base) at libpmemobj/memops.c:148>:
                                    SUPPRESS_UNUSED()
                                VECQ_INIT()
                                operation_log_transient_init() <int operation_log_transient_init (struct operation_log *log) at libpmemobj/memops.c:82>:
                                    Zalloc() <void *Zalloc (size_t sz) at core/alloc.c:98>:
                                        Malloc()
                                        memset()
                                    ERR()
                                operation_log_persistent_init() <int operation_log_persistent_init (struct operation_log *log, size_t ulog_base_nbytes) at libpmemobj/memops.c:107>:
                                    Zalloc() <void *Zalloc (size_t sz) at core/alloc.c:98>:
                                        Malloc()
                                        memset()
                                    ERR()
                                    memset()
                                operation_delete() <void operation_delete (struct operation_context *ctx) at libpmemobj/memops.c:229>:
                                    VECQ_DELETE()
                                    VEC_DELETE()
                                    Free() <Free_func Free at core/alloc.c:91>
                            lane_redo_extend() <int lane_redo_extend (void *base, uint64_t *redo, uint64_t gen_num) at libpmemobj/lane.c:193>:
                                SIZEOF_ALIGNED_ULOG()
                                pmalloc_construct() <int pmalloc_construct (PMEMobjpool *pop, uint64_t *off, size_t size, palloc_constr constructor, void *arg, uint64_t extra_field, uint16_t object_flags, uint16_t class_id) at libpmemobj/pmalloc.c:119>:
                                    pmalloc_operation_hold_type() <struct operation_context *pmalloc_operation_hold_type (PMEMobjpool *pop, enum pmalloc_operation_type type, int start) at libpmemobj/pmalloc.c:45>:
                                        lane_hold() <unsigned lane_hold (PMEMobjpool *pop, struct lane **lanep) at libpmemobj/lane.c:510>:
                                            get_lane_info_record() <inline struct lane_info *get_lane_info_record (PMEMobjpool *pop) at libpmemobj/lane.c:466>:
                                                likely()
                                                unlikely()
                                                lane_info_ht_boot() <inline void lane_info_ht_boot (void) at libpmemobj/lane.c:74>:
                                                    lane_info_create() <inline void lane_info_create (void) at libpmemobj/lane.c:39>:
                                                        critnib_new() <struct critnib *critnib_new (void) at libpmemobj/critnib.c:187>:
                                                            Zalloc() <void *Zalloc (size_t sz) at core/alloc.c:98>:
                                                                Malloc()
                                                                memset()
                                                            util_mutex_init()
                                                            VALGRIND_HG_DRD_DISABLE_CHECKING()
                                                        FATAL()
                                                    os_tls_set() <int os_tls_set (os_tls_key_t key, const void *value) at core/os_thread_posix.c:53>:
                                                        pthread_setspecific()
                                                    FATAL()
                                                critnib_get() <void *critnib_get (struct critnib *c, uint64_t key) at libpmemobj/critnib.c:515>:
                                                    load() <void load (void *src, void *dst) at libpmemobj/critnib.c:130>:
                                                        util_atomic_load_explicit64()
                                                    is_leaf() <inline bool is_leaf (struct critnib_node *n) at libpmemobj/critnib.c:150>:
                                                    slice_index() <inline unsigned slice_index (uint64_t key, sh_t shift) at libpmemobj/critnib.c:178>:
                                                    to_leaf() <inline struct critnib_leaf *to_leaf (struct critnib_node *n) at libpmemobj/critnib.c:159>:
                                                Malloc()
                                                FATAL()
                                                critnib_insert() <int critnib_insert (struct critnib *c, uint64_t key, void *value) at libpmemobj/critnib.c:340>:
                                                    util_mutex_lock()
                                                    alloc_leaf() <struct critnib_leaf *alloc_leaf (struct critnib *__restrict c) at libpmemobj/critnib.c:311>:
                                                        Malloc()
                                                        ERR()
                                                        VALGRIND_ANNOTATE_NEW_MEMORY()
                                                    util_mutex_unlock()
                                                    VALGRIND_HG_DRD_DISABLE_CHECKING()
                                                    is_leaf() <inline bool is_leaf (struct critnib_node *n) at libpmemobj/critnib.c:150>:
                                                    path_mask() <inline uint64_t path_mask (sh_t shift) at libpmemobj/critnib.c:169>:
                                                    slice_index() <inline unsigned slice_index (uint64_t key, sh_t shift) at libpmemobj/critnib.c:178>:
                                                    store() <void store (void *dst, void *src) at libpmemobj/critnib.c:140>:
                                                        util_atomic_store_explicit64()
                                                    to_leaf() <inline struct critnib_leaf *to_leaf (struct critnib_node *n) at libpmemobj/critnib.c:159>:
                                                    ASSERT()
                                                    free_leaf() <void free_leaf (struct critnib *__restrict c, struct critnib_leaf *__restrict k) at libpmemobj/critnib.c:298>
                                                    util_mssb_index64()
                                                    alloc_node() <struct critnib_node *alloc_node (struct critnib *__restrict c) at libpmemobj/critnib.c:274>:
                                                        Malloc()
                                                        ERR()
                                                        VALGRIND_ANNOTATE_NEW_MEMORY()
                                            unlikely()
                                            util_fetch_and_add32()
                                            get_lane() <inline void get_lane (uint64_t *locks, struct lane_info *info, uint64_t nlocks) at libpmemobj/lane.c:430>:
                                                likely()
                                                util_bool_compare_and_swap64()
                                                sched_yield()
                                            VALGRIND_ANNOTATE_NEW_MEMORY()
                                            operation_init() <void operation_init (struct operation_context *ctx) at libpmemobj/memops.c:709>:
                                                VALGRIND_ANNOTATE_NEW_MEMORY()
                                                VECQ_REINIT()
                                        operation_start() <void operation_start (struct operation_context *ctx) at libpmemobj/memops.c:736>:
                                            operation_init() <void operation_init (struct operation_context *ctx) at libpmemobj/memops.c:709>:
                                                VALGRIND_ANNOTATE_NEW_MEMORY()
                                                VECQ_REINIT()
                                            ASSERTeq()
                                    palloc_operation() <int palloc_operation (struct palloc_heap *heap, uint64_t off, uint64_t *dest_off, size_t size, palloc_constr constructor, void *arg, uint64_t extra_field, uint16_t object_flags, uint16_t class_id, uint16_t arena_id, struct operation_context *ctx) at libpmemobj/palloc.c:705>:
                                        palloc_defer_free_create() <void palloc_defer_free_create (struct palloc_heap *heap, uint64_t off, struct pobj_action_internal *out) at libpmemobj/palloc.c:610>:
                                            COMPILE_ERROR_ON()
                                            memblock_from_offset() <struct memory_block memblock_from_offset (struct palloc_heap *heap, uint64_t off) at libpmemobj/memblock.c:1532>:
                                                memblock_from_offset_opt() <struct memory_block memblock_from_offset_opt (struct palloc_heap *heap, uint64_t off, int size) at libpmemobj/memblock.c:1476>:
                                                    HEAP_PTR_TO_OFF()
                                                    heap_get_chunk_hdr()
                                                    memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                                        heap_get_chunk_hdr()
                                                    ASSERTeq()
                                                    memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                                        heap_get_chunk_hdr()
                                                        FATAL()
                                                    run_get_data_offset() <size_t run_get_data_offset (const struct memory_block *m) at libpmemobj/memblock.c:572>:
                                                        heap_get_chunk_run()
                                                        run_get_data_start() <char *run_get_data_start (const struct memory_block *m) at libpmemobj/memblock.c:544>:
                                                            heap_get_chunk_hdr()
                                                            heap_get_chunk_run()
                                                            run_get_bitmap() <void run_get_bitmap (const struct memory_block *m, struct run_bitmap *b) at libpmemobj/memblock.c:488>:
                                                                heap_get_chunk_run()
                                                                heap_get_chunk_hdr()
                                                                memblock_run_bitmap() <void memblock_run_bitmap (uint32_t *size_idx, uint16_t flags, uint64_t unit_size, uint64_t alignment, void *content, struct run_bitmap *b) at libpmemobj/memblock.c:410>:
                                                                    ASSERTne()
                                                                    RUN_CONTENT_SIZE_BYTES()
                                                                    util_div_ceil()
                                                                    ALIGN_UP()
                                                                    memblock_run_default_nallocs() <unsigned memblock_run_default_nallocs (uint32_t *size_idx, uint16_t flags, uint64_t unit_size, uint64_t alignment) at libpmemobj/memblock.c:370>:
                                                                        SUPPRESS_UNUSED()
                                                                        RUN_DEFAULT_SIZE_BYTES()
                                                                        LOG()
                                                                ASSERTeq()
                                                            ALIGN_UP()
                                                    heap_alloc_classes() <struct alloc_class_collection *heap_alloc_classes (struct palloc_heap *heap) at libpmemobj/heap.c:160>:
                                                    alloc_class_by_run() <struct alloc_class *alloc_class_by_run (struct alloc_class_collection *ac, size_t unit_size, uint16_t flags, uint32_t size_idx) at libpmemobj/alloc_class.c:594>:
                                                        SIZE_TO_CLASS_MAP_INDEX()
                                                        ASSERT()
                                                        critnib_get() <void *critnib_get (struct critnib *c, uint64_t key) at libpmemobj/critnib.c:515>:
                                                            load() <void load (void *src, void *dst) at libpmemobj/critnib.c:130>:
                                                                util_atomic_load_explicit64()
                                                            is_leaf() <inline bool is_leaf (struct critnib_node *n) at libpmemobj/critnib.c:150>:
                                                            slice_index() <inline unsigned slice_index (uint64_t key, sh_t shift) at libpmemobj/critnib.c:178>:
                                                            to_leaf() <inline struct critnib_leaf *to_leaf (struct critnib_node *n) at libpmemobj/critnib.c:159>:
                                                        RUN_CLASS_KEY_PACK()
                                                    CALC_SIZE_IDX()
                                            heap_ensure_zone_reclaimed() <void heap_ensure_zone_reclaimed (struct palloc_heap *heap, uint32_t zone_id) at libpmemobj/heap.c:816>:
                                                util_atomic_load_explicit32()
                                                heap_bucket_acquire() <struct bucket *heap_bucket_acquire (struct palloc_heap *heap, uint8_t class_id, uint16_t arena_id) at libpmemobj/heap.c:470>:
                                                    out() <void out (const char *fmt, ...) at core/out.c:480>:
                                                        va_start()
                                                        out_common() <} void out_common (const char *file, int line, const char *func, int level, const char *suffix, const char *fmt, va_list ap) at core/out.c:334>
                                                        va_end()
                                                    heap_thread_arena() <struct arena *heap_thread_arena (struct palloc_heap *heap) at libpmemobj/heap.c:414>:
                                                        os_tls_get() <void *os_tls_get (os_tls_key_t key) at core/os_thread_posix.c:62>:
                                                            pthread_getspecific()
                                                        heap_thread_arena_assign() <struct arena *heap_thread_arena_assign (struct palloc_heap *heap) at libpmemobj/heap.c:381>:
                                                            util_mutex_lock()
                                                            ASSERTne()
                                                            VEC_SIZE()
                                                            VEC_FOREACH()
                                                            LOG()
                                                            heap_arena_thread_attach() <void heap_arena_thread_attach (struct palloc_heap *heap, struct arena *a) at libpmemobj/heap.c:249>:
                                                                ASSERTeq()
                                                                os_tls_get() <void *os_tls_get (os_tls_key_t key) at core/os_thread_posix.c:62>:
                                                                    pthread_getspecific()
                                                                heap_arena_thread_detach() <void heap_arena_thread_detach (struct arena *a) at libpmemobj/heap.c:232>:
                                                                    util_fetch_and_sub64()
                                                                ASSERTne()
                                                                util_fetch_and_add64()
                                                                os_tls_set() <int os_tls_set (os_tls_key_t key, const void *value) at core/os_thread_posix.c:53>:
                                                                    pthread_setspecific()
                                                            util_mutex_unlock()
                                                        heap_global_arena_assign() <struct arena *heap_global_arena_assign (struct palloc_heap *heap) at libpmemobj/heap.c:348>:
                                                            util_mutex_lock()
                                                            ASSERTne()
                                                            VEC_SIZE()
                                                            VEC_FOREACH()
                                                            LOG()
                                                            util_mutex_unlock()
                                                        ASSERT()
                                                        ASSERTne()
                                                    ASSERTne()
                                                    VEC_ARR()
                                                    bucket_acquire() <struct bucket *bucket_acquire (struct bucket_locked *b) at libpmemobj/bucket.c:117>:
                                                        util_mutex_lock()
                                                ZID_TO_ZONE()
                                                ASSERTeq()
                                                out() <void out (const char *fmt, ...) at core/out.c:480>:
                                                    va_start()
                                                    out_common() <} void out_common (const char *file, int line, const char *func, int level, const char *suffix, const char *fmt, va_list ap) at core/out.c:334>
                                                    va_end()
                                                util_atomic_store_explicit32()
                                                heap_reclaim_zone_garbage() <void heap_reclaim_zone_garbage (struct palloc_heap *heap, struct bucket *bucket, uint32_t zone_id) at libpmemobj/heap.c:775>:
                                                    ZID_TO_ZONE()
                                                    ASSERT()
                                                    memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                                        memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                                            heap_get_chunk_hdr()
                                                        memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                                            heap_get_chunk_hdr()
                                                            FATAL()
                                                    heap_reclaim_run() <int heap_reclaim_run (struct palloc_heap *heap, struct memory_block *m, int startup) at libpmemobj/heap.c:733>:
                                                        heap_get_chunk_run()
                                                        heap_get_chunk_hdr()
                                                        alloc_class_by_run() <struct alloc_class *alloc_class_by_run (struct alloc_class_collection *ac, size_t unit_size, uint16_t flags, uint32_t size_idx) at libpmemobj/alloc_class.c:594>:
                                                            SIZE_TO_CLASS_MAP_INDEX()
                                                            ASSERT()
                                                            critnib_get() <void *critnib_get (struct critnib *c, uint64_t key) at libpmemobj/critnib.c:515>:
                                                                load() <void load (void *src, void *dst) at libpmemobj/critnib.c:130>:
                                                                    util_atomic_load_explicit64()
                                                                is_leaf() <inline bool is_leaf (struct critnib_node *n) at libpmemobj/critnib.c:150>:
                                                                slice_index() <inline unsigned slice_index (uint64_t key, sh_t shift) at libpmemobj/critnib.c:178>:
                                                                to_leaf() <inline struct critnib_leaf *to_leaf (struct critnib_node *n) at libpmemobj/critnib.c:159>:
                                                            RUN_CLASS_KEY_PACK()
                                                        recycler_element_new() <struct recycler_element recycler_element_new (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/recycler.c:122>:
                                                            SUPPRESS_UNUSED()
                                                            util_mutex_lock()
                                                            util_mutex_unlock()
                                                        ASSERTeq()
                                                        STATS_INC()
                                                        heap_get_recycler() <struct recycler *heap_get_recycler (struct palloc_heap *heap, size_t id, size_t nallocs) at libpmemobj/heap.c:106> (R):
                                                            util_atomic_load_explicit64()
                                                            recycler_new() <struct recycler *recycler_new (struct palloc_heap *heap, size_t nallocs, size_t *peak_arenas) at libpmemobj/recycler.c:74>:
                                                                Malloc()
                                                                ravl_new_sized() <struct ravl *ravl_new_sized (ravl_compare *compare, size_t data_size) at core/ravl.c:45>:
                                                                    Malloc()
                                                                    ERR()
                                                                recycler_element_cmp() <int recycler_element_cmp (const void *lhs, const void *rhs) at libpmemobj/recycler.c:23>:
                                                                memset()
                                                                VEC_INIT()
                                                                util_mutex_init()
                                                                Free() <Free_func Free at core/alloc.c:91>
                                                            util_bool_compare_and_swap64()
                                                            recycler_delete() <void recycler_delete (struct recycler *r) at libpmemobj/recycler.c:107>:
                                                                VEC_DELETE()
                                                                util_mutex_destroy()
                                                                ravl_delete() <void ravl_delete (struct ravl *ravl) at core/ravl.c:112>:
                                                                    ravl_delete_cb() <void ravl_delete_cb (struct ravl *ravl, ravl_cb cb, void *arg) at core/ravl.c:102>:
                                                                        ravl_foreach_node() <void ravl_foreach_node (struct ravl_node *n, ravl_cb cb, void *arg, int free_node) at core/ravl.c:74> (R):
                                                                            ravl_foreach_node() <void ravl_foreach_node (struct ravl_node *n, ravl_cb cb, void *arg, int free_node) at core/ravl.c:74> (recursive: see 18211)
                                                                            Free() <Free_func Free at core/alloc.c:91>
                                                                        Free() <Free_func Free at core/alloc.c:91>
                                                                Free() <Free_func Free at core/alloc.c:91>
                                                            heap_get_recycler() <struct recycler *heap_get_recycler (struct palloc_heap *heap, size_t id, size_t nallocs) at libpmemobj/heap.c:106> (recursive: see 18193)
                                                        recycler_put() <int recycler_put (struct recycler *r, struct recycler_element element) at libpmemobj/recycler.c:154>:
                                                            util_mutex_lock()
                                                            ravl_emplace_copy() <int ravl_emplace_copy (struct ravl *ravl, const void *data) at core/ravl.c:384>:
                                                                ravl_emplace() <int ravl_emplace (struct ravl *ravl, ravl_constr constr, const void *arg) at core/ravl.c:393>:
                                                                    LOG()
                                                                    ravl_new_node() <struct ravl_node *ravl_new_node (struct ravl *ravl, ravl_constr constr, const void *arg) at core/ravl.c:161>:
                                                                        Malloc()
                                                                        ERR()
                                                                        ravl_node_insert_constructor() <void ravl_node_insert_constructor (void *data, size_t data_size, const void *arg) at core/ravl.c:139>:
                                                                            SUPPRESS_UNUSED()
                                                                            memcpy()
                                                                    ravl_data() <void *ravl_data (struct ravl_node *node) at core/ravl.c:571>:
                                                                        memcpy()
                                                                    ravl_balance() <void ravl_balance (struct ravl *ravl, struct ravl_node *n) at core/ravl.c:337>:
                                                                        ravl_node_is() <int ravl_node_is (struct ravl_node *n, int i, int j) at core/ravl.c:306>:
                                                                            ravl_node_is_i_j() <int ravl_node_is_i_j (struct ravl_node *n, int i, int j) at core/ravl.c:296>:
                                                                                ravl_node_rank_difference_parent() <int ravl_node_rank_difference_parent (struct ravl_node *p, struct ravl_node *n) at core/ravl.c:275>:
                                                                                    ravl_node_rank() <int ravl_node_rank (struct ravl_node *n) at core/ravl.c:261>:
                                                                        ravl_node_promote() <void ravl_node_promote (struct ravl_node *n) at core/ravl.c:315>
                                                                        ravl_node_sibling() <struct ravl_node *ravl_node_sibling (struct ravl_node *n) at core/ravl.c:209>:
                                                                            ravl_node_slot_type() <enum ravl_slot_type ravl_node_slot_type (struct ravl_node *n) at core/ravl.c:196>:
                                                                        ravl_node_rank_difference() <int ravl_node_rank_difference (struct ravl_node *n) at core/ravl.c:287>:
                                                                            ravl_node_rank_difference_parent() <int ravl_node_rank_difference_parent (struct ravl_node *p, struct ravl_node *n) at core/ravl.c:275>:
                                                                                ravl_node_rank() <int ravl_node_rank (struct ravl_node *n) at core/ravl.c:261>:
                                                                        ravl_node_rank_difference_parent() <int ravl_node_rank_difference_parent (struct ravl_node *p, struct ravl_node *n) at core/ravl.c:275>:
                                                                            ravl_node_rank() <int ravl_node_rank (struct ravl_node *n) at core/ravl.c:261>:
                                                                        ravl_slot_opposite() <enum ravl_slot_type ravl_slot_opposite (enum ravl_slot_type t) at core/ravl.c:184>:
                                                                            ASSERTne()
                                                                        ravl_node_slot_type() <enum ravl_slot_type ravl_node_slot_type (struct ravl_node *n) at core/ravl.c:196>:
                                                                        ravl_rotate() <void ravl_rotate (struct ravl *ravl, struct ravl_node *n) at core/ravl.c:237>:
                                                                            ASSERTne()
                                                                            ravl_node_ref() <struct ravl_node **ravl_node_ref (struct ravl *ravl, struct ravl_node *n) at core/ravl.c:223>:
                                                                                ravl_node_slot_type() <enum ravl_slot_type ravl_node_slot_type (struct ravl_node *n) at core/ravl.c:196>:
                                                                            ravl_node_slot_type() <enum ravl_slot_type ravl_node_slot_type (struct ravl_node *n) at core/ravl.c:196>:
                                                                            ravl_slot_opposite() <enum ravl_slot_type ravl_slot_opposite (enum ravl_slot_type t) at core/ravl.c:184>:
                                                                                ASSERTne()
                                                                        ravl_node_demote() <void ravl_node_demote (struct ravl_node *n) at core/ravl.c:324>:
                                                                            ASSERT()
                                                                    Free() <Free_func Free at core/alloc.c:91>
                                                                ravl_node_copy_constructor() <void ravl_node_copy_constructor (void *data, size_t data_size, const void *arg) at core/ravl.c:152>:
                                                                    memcpy()
                                                            util_mutex_unlock()
                                                        ERR()
                                                    heap_run_into_free_chunk() <void heap_run_into_free_chunk (struct palloc_heap *heap, struct bucket *bucket, struct memory_block *m) at libpmemobj/heap.c:697>:
                                                        heap_get_chunk_hdr()
                                                        STATS_SUB()
                                                        util_mutex_lock()
                                                        memblock_huge_init() <struct memory_block memblock_huge_init (struct palloc_heap *heap, uint32_t chunk_id, uint32_t zone_id, uint32_t size_idx) at libpmemobj/memblock.c:1329>:
                                                            heap_get_chunk_hdr()
                                                            VALGRIND_DO_MAKE_MEM_UNDEFINED()
                                                            VALGRIND_ANNOTATE_NEW_MEMORY()
                                                            chunk_get_chunk_hdr_value() <uint64_t chunk_get_chunk_hdr_value (uint16_t type, uint16_t flags, uint32_t size_idx) at libpmemobj/memblock.c:604>:
                                                                COMPILE_ERROR_ON()
                                                                memcpy()
                                                            util_atomic_store_explicit64()
                                                            pmemops_persist()
                                                            huge_write_footer() <void huge_write_footer (struct chunk_header *hdr, uint32_t size_idx) at libpmemobj/memblock.c:1166>:
                                                                VALGRIND_DO_MAKE_MEM_UNDEFINED()
                                                                VALGRIND_SET_CLEAN()
                                                            memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                                                memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                                                    heap_get_chunk_hdr()
                                                                memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                                                    heap_get_chunk_hdr()
                                                                    FATAL()
                                                        heap_free_chunk_reuse() <int heap_free_chunk_reuse (struct palloc_heap *heap, struct bucket *bucket, struct memory_block *m) at libpmemobj/heap.c:674>:
                                                            heap_coalesce_huge() <struct memory_block heap_coalesce_huge (struct palloc_heap *heap, struct bucket *b, const struct memory_block *m) at libpmemobj/heap.c:650>:
                                                                heap_get_adjacent_free_block() <int heap_get_adjacent_free_block (struct palloc_heap *heap, const struct memory_block *in, struct memory_block *out, int prev) at libpmemobj/heap.c:582>:
                                                                    ZID_TO_ZONE()
                                                                    memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                                                        memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                                                            heap_get_chunk_hdr()
                                                                        memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                                                            heap_get_chunk_hdr()
                                                                            FATAL()
                                                                bucket_remove_block() <int bucket_remove_block (struct bucket *b, const struct memory_block *m) at libpmemobj/bucket.c:178>
                                                                heap_coalesce() <struct memory_block heap_coalesce (struct palloc_heap *heap, const struct memory_block *blocks[], int n) at libpmemobj/heap.c:621>:
                                                                    ASSERTne()
                                                                    memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                                                        memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                                                            heap_get_chunk_hdr()
                                                                        memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                                                            heap_get_chunk_hdr()
                                                                            FATAL()
                                                            bucket_insert_block() <int bucket_insert_block (struct bucket *b, const struct memory_block *m) at libpmemobj/bucket.c:161>:
                                                                VALGRIND_DO_MAKE_MEM_NOACCESS()
                                                                VALGRIND_ANNOTATE_NEW_MEMORY()
                                                        util_mutex_unlock()
                                                    heap_free_chunk_reuse() <int heap_free_chunk_reuse (struct palloc_heap *heap, struct bucket *bucket, struct memory_block *m) at libpmemobj/heap.c:674>:
                                                        heap_coalesce_huge() <struct memory_block heap_coalesce_huge (struct palloc_heap *heap, struct bucket *b, const struct memory_block *m) at libpmemobj/heap.c:650>:
                                                            heap_get_adjacent_free_block() <int heap_get_adjacent_free_block (struct palloc_heap *heap, const struct memory_block *in, struct memory_block *out, int prev) at libpmemobj/heap.c:582>:
                                                                ZID_TO_ZONE()
                                                                memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                                                    memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                                                        heap_get_chunk_hdr()
                                                                    memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                                                        heap_get_chunk_hdr()
                                                                        FATAL()
                                                            bucket_remove_block() <int bucket_remove_block (struct bucket *b, const struct memory_block *m) at libpmemobj/bucket.c:178>
                                                            heap_coalesce() <struct memory_block heap_coalesce (struct palloc_heap *heap, const struct memory_block *blocks[], int n) at libpmemobj/heap.c:621>:
                                                                ASSERTne()
                                                                memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                                                    memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                                                        heap_get_chunk_hdr()
                                                                    memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                                                        heap_get_chunk_hdr()
                                                                        FATAL()
                                                        bucket_insert_block() <int bucket_insert_block (struct bucket *b, const struct memory_block *m) at libpmemobj/bucket.c:161>:
                                                            VALGRIND_DO_MAKE_MEM_NOACCESS()
                                                            VALGRIND_ANNOTATE_NEW_MEMORY()
                                                heap_bucket_release() <void heap_bucket_release (struct bucket *b) at libpmemobj/heap.c:498>:
                                                    bucket_release() <void bucket_release (struct bucket *b) at libpmemobj/bucket.c:127>:
                                                        util_mutex_unlock()
                                        operation_cancel() <void operation_cancel (struct operation_context *ctx) at libpmemobj/memops.c:761>:
                                            ASSERTeq()
                                        palloc_reservation_create() <int palloc_reservation_create (struct palloc_heap *heap, size_t size, palloc_constr constructor, void *arg, uint64_t extra_field, uint16_t object_flags, uint16_t class_id, uint16_t arena_id, struct pobj_action_internal *out) at libpmemobj/palloc.c:178>:
                                            ASSERT()
                                            heap_get_best_class() <struct alloc_class *heap_get_best_class (struct palloc_heap *heap, size_t size) at libpmemobj/heap.c:221>:
                                                alloc_class_by_alloc_size() <struct alloc_class *alloc_class_by_alloc_size (struct alloc_class_collection *ac, size_t size) at libpmemobj/alloc_class.c:568>:
                                                    SIZE_TO_CLASS_MAP_INDEX()
                                                    alloc_class_assign_by_size() <struct alloc_class *alloc_class_assign_by_size (struct alloc_class_collection *ac, size_t size) at libpmemobj/alloc_class.c:538>:
                                                        LOG()
                                                        SIZE_TO_CLASS_MAP_INDEX()
                                                        alloc_class_find_min_frag() <struct alloc_class *alloc_class_find_min_frag (struct alloc_class_collection *ac, size_t n) at libpmemobj/alloc_class.c:340>:
                                                            LOG()
                                                            ASSERTne()
                                                        ASSERTne()
                                                        util_bool_compare_and_swap64()
                                            alloc_class_by_id() <struct alloc_class *alloc_class_by_id (struct alloc_class_collection *ac, uint8_t id) at libpmemobj/alloc_class.c:612>
                                            heap_alloc_classes() <struct alloc_class_collection *heap_alloc_classes (struct palloc_heap *heap) at libpmemobj/heap.c:160>:
                                            ERR()
                                            alloc_class_calc_size_idx() <ssize_t alloc_class_calc_size_idx (struct alloc_class *c, size_t size) at libpmemobj/alloc_class.c:621>:
                                                CALC_SIZE_IDX()
                                            heap_bucket_acquire() <struct bucket *heap_bucket_acquire (struct palloc_heap *heap, uint8_t class_id, uint16_t arena_id) at libpmemobj/heap.c:470>:
                                                out() <void out (const char *fmt, ...) at core/out.c:480>:
                                                    va_start()
                                                    out_common() <} void out_common (const char *file, int line, const char *func, int level, const char *suffix, const char *fmt, va_list ap) at core/out.c:334>
                                                    va_end()
                                                heap_thread_arena() <struct arena *heap_thread_arena (struct palloc_heap *heap) at libpmemobj/heap.c:414>:
                                                    os_tls_get() <void *os_tls_get (os_tls_key_t key) at core/os_thread_posix.c:62>:
                                                        pthread_getspecific()
                                                    heap_thread_arena_assign() <struct arena *heap_thread_arena_assign (struct palloc_heap *heap) at libpmemobj/heap.c:381>:
                                                        util_mutex_lock()
                                                        ASSERTne()
                                                        VEC_SIZE()
                                                        VEC_FOREACH()
                                                        LOG()
                                                        heap_arena_thread_attach() <void heap_arena_thread_attach (struct palloc_heap *heap, struct arena *a) at libpmemobj/heap.c:249>:
                                                            ASSERTeq()
                                                            os_tls_get() <void *os_tls_get (os_tls_key_t key) at core/os_thread_posix.c:62>:
                                                                pthread_getspecific()
                                                            heap_arena_thread_detach() <void heap_arena_thread_detach (struct arena *a) at libpmemobj/heap.c:232>:
                                                                util_fetch_and_sub64()
                                                            ASSERTne()
                                                            util_fetch_and_add64()
                                                            os_tls_set() <int os_tls_set (os_tls_key_t key, const void *value) at core/os_thread_posix.c:53>:
                                                                pthread_setspecific()
                                                        util_mutex_unlock()
                                                    heap_global_arena_assign() <struct arena *heap_global_arena_assign (struct palloc_heap *heap) at libpmemobj/heap.c:348>:
                                                        util_mutex_lock()
                                                        ASSERTne()
                                                        VEC_SIZE()
                                                        VEC_FOREACH()
                                                        LOG()
                                                        util_mutex_unlock()
                                                    ASSERT()
                                                    ASSERTne()
                                                ASSERTne()
                                                VEC_ARR()
                                                bucket_acquire() <struct bucket *bucket_acquire (struct bucket_locked *b) at libpmemobj/bucket.c:117>:
                                                    util_mutex_lock()
                                            heap_get_bestfit_block() <int heap_get_bestfit_block (struct palloc_heap *heap, struct bucket *b, struct memory_block *m) at libpmemobj/heap.c:1210> (R):
                                                bucket_alloc_class() <struct alloc_class *bucket_alloc_class (struct bucket *b) at libpmemobj/bucket.c:152>
                                                bucket_alloc_block() <int bucket_alloc_block (struct bucket *b, struct memory_block *m_out) at libpmemobj/bucket.c:187>
                                                heap_ensure_huge_bucket_filled() <int heap_ensure_huge_bucket_filled (struct palloc_heap *heap, struct bucket *bucket) at libpmemobj/heap.c:943>:
                                                    heap_reclaim_garbage() <int heap_reclaim_garbage (struct palloc_heap *heap, struct bucket *bucket) at libpmemobj/heap.c:923>:
                                                        heap_recycle_unused() <int heap_recycle_unused (struct palloc_heap *heap, struct recycler *recycler, struct bucket *defb, int force) at libpmemobj/heap.c:894>:
                                                            recycler_recalc() <struct empty_runs recycler_recalc (struct recycler *r, int force) at libpmemobj/recycler.c:207>:
                                                                VEC_INIT()
                                                                util_atomic_load64()
                                                                util_mutex_trylock()
                                                                ravl_find() <struct ravl_node *ravl_find (struct ravl *ravl, const void *data, enum ravl_predicate flags) at core/ravl.c:524>:
                                                                    LOG()
                                                                    ravl_data() <void *ravl_data (struct ravl_node *node) at core/ravl.c:571>:
                                                                        memcpy()
                                                                    ravl_predicate_holds() <int ravl_predicate_holds (int result, struct ravl_node **ret, struct ravl_node *n, enum ravl_predicate flags) at core/ravl.c:489>:
                                                                        ravl_node_successor() <struct ravl_node *ravl_node_successor (struct ravl_node *n) at core/ravl.c:465>:
                                                                            ravl_node_cessor() <struct ravl_node *ravl_node_cessor (struct ravl_node *n, enum ravl_slot_type t) at core/ravl.c:443>:
                                                                                ravl_node_type_most() <struct ravl_node *ravl_node_type_most (struct ravl_node *n, enum ravl_slot_type t) at core/ravl.c:430>:
                                                                                ravl_slot_opposite() <enum ravl_slot_type ravl_slot_opposite (enum ravl_slot_type t) at core/ravl.c:184>:
                                                                                    ASSERTne()
                                                                        ravl_node_predecessor() <struct ravl_node *ravl_node_predecessor (struct ravl_node *n) at core/ravl.c:476>:
                                                                            ravl_node_cessor() <struct ravl_node *ravl_node_cessor (struct ravl_node *n, enum ravl_slot_type t) at core/ravl.c:443>:
                                                                                ravl_node_type_most() <struct ravl_node *ravl_node_type_most (struct ravl_node *n, enum ravl_slot_type t) at core/ravl.c:430>:
                                                                                ravl_slot_opposite() <enum ravl_slot_type ravl_slot_opposite (enum ravl_slot_type t) at core/ravl.c:184>:
                                                                                    ASSERTne()
                                                                ravl_data() <void *ravl_data (struct ravl_node *node) at core/ravl.c:571>:
                                                                    memcpy()
                                                                memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                                                    memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                                                        heap_get_chunk_hdr()
                                                                    memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                                                        heap_get_chunk_hdr()
                                                                        FATAL()
                                                                recycler_element_new() <struct recycler_element recycler_element_new (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/recycler.c:122>:
                                                                    SUPPRESS_UNUSED()
                                                                    util_mutex_lock()
                                                                    util_mutex_unlock()
                                                                ASSERT()
                                                                util_fetch_and_sub64()
                                                                MIN()
                                                                ravl_remove() <void ravl_remove (struct ravl *ravl, struct ravl_node *n) at core/ravl.c:545> (R):
                                                                    LOG()
                                                                    ravl_node_successor() <struct ravl_node *ravl_node_successor (struct ravl_node *n) at core/ravl.c:465>:
                                                                        ravl_node_cessor() <struct ravl_node *ravl_node_cessor (struct ravl_node *n, enum ravl_slot_type t) at core/ravl.c:443>:
                                                                            ravl_node_type_most() <struct ravl_node *ravl_node_type_most (struct ravl_node *n, enum ravl_slot_type t) at core/ravl.c:430>:
                                                                            ravl_slot_opposite() <enum ravl_slot_type ravl_slot_opposite (enum ravl_slot_type t) at core/ravl.c:184>:
                                                                                ASSERTne()
                                                                    memcpy()
                                                                    ravl_remove() <void ravl_remove (struct ravl *ravl, struct ravl_node *n) at core/ravl.c:545> (recursive: see 18428)
                                                                    ravl_node_ref() <struct ravl_node **ravl_node_ref (struct ravl *ravl, struct ravl_node *n) at core/ravl.c:223>:
                                                                        ravl_node_slot_type() <enum ravl_slot_type ravl_node_slot_type (struct ravl_node *n) at core/ravl.c:196>:
                                                                    Free() <Free_func Free at core/alloc.c:91>
                                                                VEC_PUSH_BACK()
                                                                VEC_FOREACH_BY_PTR()
                                                                ravl_emplace_copy() <int ravl_emplace_copy (struct ravl *ravl, const void *data) at core/ravl.c:384>:
                                                                    ravl_emplace() <int ravl_emplace (struct ravl *ravl, ravl_constr constr, const void *arg) at core/ravl.c:393>:
                                                                        LOG()
                                                                        ravl_new_node() <struct ravl_node *ravl_new_node (struct ravl *ravl, ravl_constr constr, const void *arg) at core/ravl.c:161>:
                                                                            Malloc()
                                                                            ERR()
                                                                            ravl_node_insert_constructor() <void ravl_node_insert_constructor (void *data, size_t data_size, const void *arg) at core/ravl.c:139>:
                                                                                SUPPRESS_UNUSED()
                                                                                memcpy()
                                                                        ravl_data() <void *ravl_data (struct ravl_node *node) at core/ravl.c:571>:
                                                                            memcpy()
                                                                        ravl_balance() <void ravl_balance (struct ravl *ravl, struct ravl_node *n) at core/ravl.c:337>:
                                                                            ravl_node_is() <int ravl_node_is (struct ravl_node *n, int i, int j) at core/ravl.c:306>:
                                                                                ravl_node_is_i_j() <int ravl_node_is_i_j (struct ravl_node *n, int i, int j) at core/ravl.c:296>:
                                                                                    ravl_node_rank_difference_parent() <int ravl_node_rank_difference_parent (struct ravl_node *p, struct ravl_node *n) at core/ravl.c:275>:
                                                                                        ravl_node_rank() <int ravl_node_rank (struct ravl_node *n) at core/ravl.c:261>:
                                                                            ravl_node_promote() <void ravl_node_promote (struct ravl_node *n) at core/ravl.c:315>
                                                                            ravl_node_sibling() <struct ravl_node *ravl_node_sibling (struct ravl_node *n) at core/ravl.c:209>:
                                                                                ravl_node_slot_type() <enum ravl_slot_type ravl_node_slot_type (struct ravl_node *n) at core/ravl.c:196>:
                                                                            ravl_node_rank_difference() <int ravl_node_rank_difference (struct ravl_node *n) at core/ravl.c:287>:
                                                                                ravl_node_rank_difference_parent() <int ravl_node_rank_difference_parent (struct ravl_node *p, struct ravl_node *n) at core/ravl.c:275>:
                                                                                    ravl_node_rank() <int ravl_node_rank (struct ravl_node *n) at core/ravl.c:261>:
                                                                            ravl_node_rank_difference_parent() <int ravl_node_rank_difference_parent (struct ravl_node *p, struct ravl_node *n) at core/ravl.c:275>:
                                                                                ravl_node_rank() <int ravl_node_rank (struct ravl_node *n) at core/ravl.c:261>:
                                                                            ravl_slot_opposite() <enum ravl_slot_type ravl_slot_opposite (enum ravl_slot_type t) at core/ravl.c:184>:
                                                                                ASSERTne()
                                                                            ravl_node_slot_type() <enum ravl_slot_type ravl_node_slot_type (struct ravl_node *n) at core/ravl.c:196>:
                                                                            ravl_rotate() <void ravl_rotate (struct ravl *ravl, struct ravl_node *n) at core/ravl.c:237>:
                                                                                ASSERTne()
                                                                                ravl_node_ref() <struct ravl_node **ravl_node_ref (struct ravl *ravl, struct ravl_node *n) at core/ravl.c:223>:
                                                                                    ravl_node_slot_type() <enum ravl_slot_type ravl_node_slot_type (struct ravl_node *n) at core/ravl.c:196>:
                                                                                ravl_node_slot_type() <enum ravl_slot_type ravl_node_slot_type (struct ravl_node *n) at core/ravl.c:196>:
                                                                                ravl_slot_opposite() <enum ravl_slot_type ravl_slot_opposite (enum ravl_slot_type t) at core/ravl.c:184>:
                                                                                    ASSERTne()
                                                                            ravl_node_demote() <void ravl_node_demote (struct ravl_node *n) at core/ravl.c:324>:
                                                                                ASSERT()
                                                                        Free() <Free_func Free at core/alloc.c:91>
                                                                    ravl_node_copy_constructor() <void ravl_node_copy_constructor (void *data, size_t data_size, const void *arg) at core/ravl.c:152>:
                                                                        memcpy()
                                                                VEC_CLEAR()
                                                                util_mutex_unlock()
                                                            VEC_SIZE()
                                                            heap_bucket_acquire() <struct bucket *heap_bucket_acquire (struct palloc_heap *heap, uint8_t class_id, uint16_t arena_id) at libpmemobj/heap.c:470>:
                                                                out() <void out (const char *fmt, ...) at core/out.c:480>:
                                                                    va_start()
                                                                    out_common() <} void out_common (const char *file, int line, const char *func, int level, const char *suffix, const char *fmt, va_list ap) at core/out.c:334>
                                                                    va_end()
                                                                heap_thread_arena() <struct arena *heap_thread_arena (struct palloc_heap *heap) at libpmemobj/heap.c:414>:
                                                                    os_tls_get() <void *os_tls_get (os_tls_key_t key) at core/os_thread_posix.c:62>:
                                                                        pthread_getspecific()
                                                                    heap_thread_arena_assign() <struct arena *heap_thread_arena_assign (struct palloc_heap *heap) at libpmemobj/heap.c:381>:
                                                                        util_mutex_lock()
                                                                        ASSERTne()
                                                                        VEC_SIZE()
                                                                        VEC_FOREACH()
                                                                        LOG()
                                                                        heap_arena_thread_attach() <void heap_arena_thread_attach (struct palloc_heap *heap, struct arena *a) at libpmemobj/heap.c:249>:
                                                                            ASSERTeq()
                                                                            os_tls_get() <void *os_tls_get (os_tls_key_t key) at core/os_thread_posix.c:62>:
                                                                                pthread_getspecific()
                                                                            heap_arena_thread_detach() <void heap_arena_thread_detach (struct arena *a) at libpmemobj/heap.c:232>:
                                                                                util_fetch_and_sub64()
                                                                            ASSERTne()
                                                                            util_fetch_and_add64()
                                                                            os_tls_set() <int os_tls_set (os_tls_key_t key, const void *value) at core/os_thread_posix.c:53>:
                                                                                pthread_setspecific()
                                                                        util_mutex_unlock()
                                                                    heap_global_arena_assign() <struct arena *heap_global_arena_assign (struct palloc_heap *heap) at libpmemobj/heap.c:348>:
                                                                        util_mutex_lock()
                                                                        ASSERTne()
                                                                        VEC_SIZE()
                                                                        VEC_FOREACH()
                                                                        LOG()
                                                                        util_mutex_unlock()
                                                                    ASSERT()
                                                                    ASSERTne()
                                                                ASSERTne()
                                                                VEC_ARR()
                                                                bucket_acquire() <struct bucket *bucket_acquire (struct bucket_locked *b) at libpmemobj/bucket.c:117>:
                                                                    util_mutex_lock()
                                                            ASSERT()
                                                            VEC_FOREACH_BY_PTR()
                                                            heap_run_into_free_chunk() <void heap_run_into_free_chunk (struct palloc_heap *heap, struct bucket *bucket, struct memory_block *m) at libpmemobj/heap.c:697>:
                                                                heap_get_chunk_hdr()
                                                                STATS_SUB()
                                                                util_mutex_lock()
                                                                memblock_huge_init() <struct memory_block memblock_huge_init (struct palloc_heap *heap, uint32_t chunk_id, uint32_t zone_id, uint32_t size_idx) at libpmemobj/memblock.c:1329>:
                                                                    heap_get_chunk_hdr()
                                                                    VALGRIND_DO_MAKE_MEM_UNDEFINED()
                                                                    VALGRIND_ANNOTATE_NEW_MEMORY()
                                                                    chunk_get_chunk_hdr_value() <uint64_t chunk_get_chunk_hdr_value (uint16_t type, uint16_t flags, uint32_t size_idx) at libpmemobj/memblock.c:604>:
                                                                        COMPILE_ERROR_ON()
                                                                        memcpy()
                                                                    util_atomic_store_explicit64()
                                                                    pmemops_persist()
                                                                    huge_write_footer() <void huge_write_footer (struct chunk_header *hdr, uint32_t size_idx) at libpmemobj/memblock.c:1166>:
                                                                        VALGRIND_DO_MAKE_MEM_UNDEFINED()
                                                                        VALGRIND_SET_CLEAN()
                                                                    memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                                                        memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                                                            heap_get_chunk_hdr()
                                                                        memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                                                            heap_get_chunk_hdr()
                                                                            FATAL()
                                                                heap_free_chunk_reuse() <int heap_free_chunk_reuse (struct palloc_heap *heap, struct bucket *bucket, struct memory_block *m) at libpmemobj/heap.c:674>:
                                                                    heap_coalesce_huge() <struct memory_block heap_coalesce_huge (struct palloc_heap *heap, struct bucket *b, const struct memory_block *m) at libpmemobj/heap.c:650>:
                                                                        heap_get_adjacent_free_block() <int heap_get_adjacent_free_block (struct palloc_heap *heap, const struct memory_block *in, struct memory_block *out, int prev) at libpmemobj/heap.c:582>:
                                                                            ZID_TO_ZONE()
                                                                            memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                                                                memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                                                                    heap_get_chunk_hdr()
                                                                                memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                                                                    heap_get_chunk_hdr()
                                                                                    FATAL()
                                                                        bucket_remove_block() <int bucket_remove_block (struct bucket *b, const struct memory_block *m) at libpmemobj/bucket.c:178>
                                                                        heap_coalesce() <struct memory_block heap_coalesce (struct palloc_heap *heap, const struct memory_block *blocks[], int n) at libpmemobj/heap.c:621>:
                                                                            ASSERTne()
                                                                            memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                                                                memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                                                                    heap_get_chunk_hdr()
                                                                                memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                                                                    heap_get_chunk_hdr()
                                                                                    FATAL()
                                                                    bucket_insert_block() <int bucket_insert_block (struct bucket *b, const struct memory_block *m) at libpmemobj/bucket.c:161>:
                                                                        VALGRIND_DO_MAKE_MEM_NOACCESS()
                                                                        VALGRIND_ANNOTATE_NEW_MEMORY()
                                                                util_mutex_unlock()
                                                            heap_bucket_release() <void heap_bucket_release (struct bucket *b) at libpmemobj/heap.c:498>:
                                                                bucket_release() <void bucket_release (struct bucket *b) at libpmemobj/bucket.c:127>:
                                                                    util_mutex_unlock()
                                                            VEC_DELETE()
                                                    heap_populate_bucket() <int heap_populate_bucket (struct palloc_heap *heap, struct bucket *bucket) at libpmemobj/heap.c:850>:
                                                        util_atomic_store_explicit32()
                                                        ZID_TO_ZONE()
                                                        VALGRIND_ADD_TO_GLOBAL_TX_IGNORE()
                                                        heap_zone_init() <void heap_zone_init (struct palloc_heap *heap, uint32_t zone_id, uint32_t first_chunk_id) at libpmemobj/heap.c:559>:
                                                            ZID_TO_ZONE()
                                                            zone_calc_size_idx() <uint32_t zone_calc_size_idx (uint32_t zone_id, unsigned max_zone, size_t heap_size) at libpmemobj/heap.c:533>:
                                                                ASSERT()
                                                            ASSERT()
                                                            memblock_huge_init() <struct memory_block memblock_huge_init (struct palloc_heap *heap, uint32_t chunk_id, uint32_t zone_id, uint32_t size_idx) at libpmemobj/memblock.c:1329>:
                                                                heap_get_chunk_hdr()
                                                                VALGRIND_DO_MAKE_MEM_UNDEFINED()
                                                                VALGRIND_ANNOTATE_NEW_MEMORY()
                                                                chunk_get_chunk_hdr_value() <uint64_t chunk_get_chunk_hdr_value (uint16_t type, uint16_t flags, uint32_t size_idx) at libpmemobj/memblock.c:604>:
                                                                    COMPILE_ERROR_ON()
                                                                    memcpy()
                                                                util_atomic_store_explicit64()
                                                                pmemops_persist()
                                                                huge_write_footer() <void huge_write_footer (struct chunk_header *hdr, uint32_t size_idx) at libpmemobj/memblock.c:1166>:
                                                                    VALGRIND_DO_MAKE_MEM_UNDEFINED()
                                                                    VALGRIND_SET_CLEAN()
                                                                memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                                                    memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                                                        heap_get_chunk_hdr()
                                                                    memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                                                        heap_get_chunk_hdr()
                                                                        FATAL()
                                                            pmemops_persist()
                                                        heap_reclaim_zone_garbage() <void heap_reclaim_zone_garbage (struct palloc_heap *heap, struct bucket *bucket, uint32_t zone_id) at libpmemobj/heap.c:775>:
                                                            ZID_TO_ZONE()
                                                            ASSERT()
                                                            memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                                                memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                                                    heap_get_chunk_hdr()
                                                                memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                                                    heap_get_chunk_hdr()
                                                                    FATAL()
                                                            heap_reclaim_run() <int heap_reclaim_run (struct palloc_heap *heap, struct memory_block *m, int startup) at libpmemobj/heap.c:733>:
                                                                heap_get_chunk_run()
                                                                heap_get_chunk_hdr()
                                                                alloc_class_by_run() <struct alloc_class *alloc_class_by_run (struct alloc_class_collection *ac, size_t unit_size, uint16_t flags, uint32_t size_idx) at libpmemobj/alloc_class.c:594>:
                                                                    SIZE_TO_CLASS_MAP_INDEX()
                                                                    ASSERT()
                                                                    critnib_get() <void *critnib_get (struct critnib *c, uint64_t key) at libpmemobj/critnib.c:515>:
                                                                        load() <void load (void *src, void *dst) at libpmemobj/critnib.c:130>:
                                                                            util_atomic_load_explicit64()
                                                                        is_leaf() <inline bool is_leaf (struct critnib_node *n) at libpmemobj/critnib.c:150>:
                                                                        slice_index() <inline unsigned slice_index (uint64_t key, sh_t shift) at libpmemobj/critnib.c:178>:
                                                                        to_leaf() <inline struct critnib_leaf *to_leaf (struct critnib_node *n) at libpmemobj/critnib.c:159>:
                                                                    RUN_CLASS_KEY_PACK()
                                                                recycler_element_new() <struct recycler_element recycler_element_new (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/recycler.c:122>:
                                                                    SUPPRESS_UNUSED()
                                                                    util_mutex_lock()
                                                                    util_mutex_unlock()
                                                                ASSERTeq()
                                                                STATS_INC()
                                                                heap_get_recycler() <struct recycler *heap_get_recycler (struct palloc_heap *heap, size_t id, size_t nallocs) at libpmemobj/heap.c:106> (R):
                                                                    util_atomic_load_explicit64()
                                                                    recycler_new() <struct recycler *recycler_new (struct palloc_heap *heap, size_t nallocs, size_t *peak_arenas) at libpmemobj/recycler.c:74>:
                                                                        Malloc()
                                                                        ravl_new_sized() <struct ravl *ravl_new_sized (ravl_compare *compare, size_t data_size) at core/ravl.c:45>:
                                                                            Malloc()
                                                                            ERR()
                                                                        recycler_element_cmp() <int recycler_element_cmp (const void *lhs, const void *rhs) at libpmemobj/recycler.c:23>:
                                                                        memset()
                                                                        VEC_INIT()
                                                                        util_mutex_init()
                                                                        Free() <Free_func Free at core/alloc.c:91>
                                                                    util_bool_compare_and_swap64()
                                                                    recycler_delete() <void recycler_delete (struct recycler *r) at libpmemobj/recycler.c:107>:
                                                                        VEC_DELETE()
                                                                        util_mutex_destroy()
                                                                        ravl_delete() <void ravl_delete (struct ravl *ravl) at core/ravl.c:112>:
                                                                            ravl_delete_cb() <void ravl_delete_cb (struct ravl *ravl, ravl_cb cb, void *arg) at core/ravl.c:102>:
                                                                                ravl_foreach_node() <void ravl_foreach_node (struct ravl_node *n, ravl_cb cb, void *arg, int free_node) at core/ravl.c:74> (R):
                                                                                    ravl_foreach_node() <void ravl_foreach_node (struct ravl_node *n, ravl_cb cb, void *arg, int free_node) at core/ravl.c:74> (recursive: see 18647)
                                                                                    Free() <Free_func Free at core/alloc.c:91>
                                                                                Free() <Free_func Free at core/alloc.c:91>
                                                                        Free() <Free_func Free at core/alloc.c:91>
                                                                    heap_get_recycler() <struct recycler *heap_get_recycler (struct palloc_heap *heap, size_t id, size_t nallocs) at libpmemobj/heap.c:106> (recursive: see 18629)
                                                                recycler_put() <int recycler_put (struct recycler *r, struct recycler_element element) at libpmemobj/recycler.c:154>:
                                                                    util_mutex_lock()
                                                                    ravl_emplace_copy() <int ravl_emplace_copy (struct ravl *ravl, const void *data) at core/ravl.c:384>:
                                                                        ravl_emplace() <int ravl_emplace (struct ravl *ravl, ravl_constr constr, const void *arg) at core/ravl.c:393>:
                                                                            LOG()
                                                                            ravl_new_node() <struct ravl_node *ravl_new_node (struct ravl *ravl, ravl_constr constr, const void *arg) at core/ravl.c:161>:
                                                                                Malloc()
                                                                                ERR()
                                                                                ravl_node_insert_constructor() <void ravl_node_insert_constructor (void *data, size_t data_size, const void *arg) at core/ravl.c:139>:
                                                                                    SUPPRESS_UNUSED()
                                                                                    memcpy()
                                                                            ravl_data() <void *ravl_data (struct ravl_node *node) at core/ravl.c:571>:
                                                                                memcpy()
                                                                            ravl_balance() <void ravl_balance (struct ravl *ravl, struct ravl_node *n) at core/ravl.c:337>:
                                                                                ravl_node_is() <int ravl_node_is (struct ravl_node *n, int i, int j) at core/ravl.c:306>:
                                                                                    ravl_node_is_i_j() <int ravl_node_is_i_j (struct ravl_node *n, int i, int j) at core/ravl.c:296>:
                                                                                        ravl_node_rank_difference_parent() <int ravl_node_rank_difference_parent (struct ravl_node *p, struct ravl_node *n) at core/ravl.c:275>:
                                                                                            ravl_node_rank() <int ravl_node_rank (struct ravl_node *n) at core/ravl.c:261>:
                                                                                ravl_node_promote() <void ravl_node_promote (struct ravl_node *n) at core/ravl.c:315>
                                                                                ravl_node_sibling() <struct ravl_node *ravl_node_sibling (struct ravl_node *n) at core/ravl.c:209>:
                                                                                    ravl_node_slot_type() <enum ravl_slot_type ravl_node_slot_type (struct ravl_node *n) at core/ravl.c:196>:
                                                                                ravl_node_rank_difference() <int ravl_node_rank_difference (struct ravl_node *n) at core/ravl.c:287>:
                                                                                    ravl_node_rank_difference_parent() <int ravl_node_rank_difference_parent (struct ravl_node *p, struct ravl_node *n) at core/ravl.c:275>:
                                                                                        ravl_node_rank() <int ravl_node_rank (struct ravl_node *n) at core/ravl.c:261>:
                                                                                ravl_node_rank_difference_parent() <int ravl_node_rank_difference_parent (struct ravl_node *p, struct ravl_node *n) at core/ravl.c:275>:
                                                                                    ravl_node_rank() <int ravl_node_rank (struct ravl_node *n) at core/ravl.c:261>:
                                                                                ravl_slot_opposite() <enum ravl_slot_type ravl_slot_opposite (enum ravl_slot_type t) at core/ravl.c:184>:
                                                                                    ASSERTne()
                                                                                ravl_node_slot_type() <enum ravl_slot_type ravl_node_slot_type (struct ravl_node *n) at core/ravl.c:196>:
                                                                                ravl_rotate() <void ravl_rotate (struct ravl *ravl, struct ravl_node *n) at core/ravl.c:237>:
                                                                                    ASSERTne()
                                                                                    ravl_node_ref() <struct ravl_node **ravl_node_ref (struct ravl *ravl, struct ravl_node *n) at core/ravl.c:223>:
                                                                                        ravl_node_slot_type() <enum ravl_slot_type ravl_node_slot_type (struct ravl_node *n) at core/ravl.c:196>:
                                                                                    ravl_node_slot_type() <enum ravl_slot_type ravl_node_slot_type (struct ravl_node *n) at core/ravl.c:196>:
                                                                                    ravl_slot_opposite() <enum ravl_slot_type ravl_slot_opposite (enum ravl_slot_type t) at core/ravl.c:184>:
                                                                                        ASSERTne()
                                                                                ravl_node_demote() <void ravl_node_demote (struct ravl_node *n) at core/ravl.c:324>:
                                                                                    ASSERT()
                                                                            Free() <Free_func Free at core/alloc.c:91>
                                                                        ravl_node_copy_constructor() <void ravl_node_copy_constructor (void *data, size_t data_size, const void *arg) at core/ravl.c:152>:
                                                                            memcpy()
                                                                    util_mutex_unlock()
                                                                ERR()
                                                            heap_run_into_free_chunk() <void heap_run_into_free_chunk (struct palloc_heap *heap, struct bucket *bucket, struct memory_block *m) at libpmemobj/heap.c:697>:
                                                                heap_get_chunk_hdr()
                                                                STATS_SUB()
                                                                util_mutex_lock()
                                                                memblock_huge_init() <struct memory_block memblock_huge_init (struct palloc_heap *heap, uint32_t chunk_id, uint32_t zone_id, uint32_t size_idx) at libpmemobj/memblock.c:1329>:
                                                                    heap_get_chunk_hdr()
                                                                    VALGRIND_DO_MAKE_MEM_UNDEFINED()
                                                                    VALGRIND_ANNOTATE_NEW_MEMORY()
                                                                    chunk_get_chunk_hdr_value() <uint64_t chunk_get_chunk_hdr_value (uint16_t type, uint16_t flags, uint32_t size_idx) at libpmemobj/memblock.c:604>:
                                                                        COMPILE_ERROR_ON()
                                                                        memcpy()
                                                                    util_atomic_store_explicit64()
                                                                    pmemops_persist()
                                                                    huge_write_footer() <void huge_write_footer (struct chunk_header *hdr, uint32_t size_idx) at libpmemobj/memblock.c:1166>:
                                                                        VALGRIND_DO_MAKE_MEM_UNDEFINED()
                                                                        VALGRIND_SET_CLEAN()
                                                                    memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                                                        memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                                                            heap_get_chunk_hdr()
                                                                        memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                                                            heap_get_chunk_hdr()
                                                                            FATAL()
                                                                heap_free_chunk_reuse() <int heap_free_chunk_reuse (struct palloc_heap *heap, struct bucket *bucket, struct memory_block *m) at libpmemobj/heap.c:674>:
                                                                    heap_coalesce_huge() <struct memory_block heap_coalesce_huge (struct palloc_heap *heap, struct bucket *b, const struct memory_block *m) at libpmemobj/heap.c:650>:
                                                                        heap_get_adjacent_free_block() <int heap_get_adjacent_free_block (struct palloc_heap *heap, const struct memory_block *in, struct memory_block *out, int prev) at libpmemobj/heap.c:582>:
                                                                            ZID_TO_ZONE()
                                                                            memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                                                                memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                                                                    heap_get_chunk_hdr()
                                                                                memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                                                                    heap_get_chunk_hdr()
                                                                                    FATAL()
                                                                        bucket_remove_block() <int bucket_remove_block (struct bucket *b, const struct memory_block *m) at libpmemobj/bucket.c:178>
                                                                        heap_coalesce() <struct memory_block heap_coalesce (struct palloc_heap *heap, const struct memory_block *blocks[], int n) at libpmemobj/heap.c:621>:
                                                                            ASSERTne()
                                                                            memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                                                                memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                                                                    heap_get_chunk_hdr()
                                                                                memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                                                                    heap_get_chunk_hdr()
                                                                                    FATAL()
                                                                    bucket_insert_block() <int bucket_insert_block (struct bucket *b, const struct memory_block *m) at libpmemobj/bucket.c:161>:
                                                                        VALGRIND_DO_MAKE_MEM_NOACCESS()
                                                                        VALGRIND_ANNOTATE_NEW_MEMORY()
                                                                util_mutex_unlock()
                                                            heap_free_chunk_reuse() <int heap_free_chunk_reuse (struct palloc_heap *heap, struct bucket *bucket, struct memory_block *m) at libpmemobj/heap.c:674>:
                                                                heap_coalesce_huge() <struct memory_block heap_coalesce_huge (struct palloc_heap *heap, struct bucket *b, const struct memory_block *m) at libpmemobj/heap.c:650>:
                                                                    heap_get_adjacent_free_block() <int heap_get_adjacent_free_block (struct palloc_heap *heap, const struct memory_block *in, struct memory_block *out, int prev) at libpmemobj/heap.c:582>:
                                                                        ZID_TO_ZONE()
                                                                        memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                                                            memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                                                                heap_get_chunk_hdr()
                                                                            memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                                                                heap_get_chunk_hdr()
                                                                                FATAL()
                                                                    bucket_remove_block() <int bucket_remove_block (struct bucket *b, const struct memory_block *m) at libpmemobj/bucket.c:178>
                                                                    heap_coalesce() <struct memory_block heap_coalesce (struct palloc_heap *heap, const struct memory_block *blocks[], int n) at libpmemobj/heap.c:621>:
                                                                        ASSERTne()
                                                                        memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                                                            memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                                                                heap_get_chunk_hdr()
                                                                            memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                                                                heap_get_chunk_hdr()
                                                                                FATAL()
                                                                bucket_insert_block() <int bucket_insert_block (struct bucket *b, const struct memory_block *m) at libpmemobj/bucket.c:161>:
                                                                    VALGRIND_DO_MAKE_MEM_NOACCESS()
                                                                    VALGRIND_ANNOTATE_NEW_MEMORY()
                                                    heap_extend() <int heap_extend (struct palloc_heap *heap, struct bucket *b, size_t size) at libpmemobj/heap.c:1515>:
                                                        util_pool_extend() <void *util_pool_extend (struct pool_set *set, size_t *size, size_t minpartsize) at common/set.c:2231>:
                                                            LOG()
                                                            ERR()
                                                            util_poolset_append_new_part() <int util_poolset_append_new_part (struct pool_set *set, size_t size) at common/set.c:2174>:
                                                                LOG()
                                                                VEC_SIZE()
                                                                VEC_GET()
                                                                strlen()
                                                                Malloc()
                                                                ERR()
                                                                snprintf()
                                                                util_replica_add_part() <int util_replica_add_part (struct pool_replica **repp, const char *path, size_t filesize) at common/set.c:708>:
                                                                    LOG()
                                                                    util_replica_add_part_by_idx() <int util_replica_add_part_by_idx (struct pool_replica **repp, const char *path, size_t filesize, unsigned p) at common/set.c:662>:
                                                                        LOG()
                                                                        util_replica_reserve() <int util_replica_reserve (struct pool_replica **repp, unsigned n) at common/set.c:633>:
                                                                            LOG()
                                                                            Realloc()
                                                                            ERR()
                                                                            memset()
                                                                        ASSERTne()
                                                                        util_file_get_type() <enum file_type util_file_get_type (const char *path) at common/file.c:106>:
                                                                            LOG()
                                                                            ERR()
                                                                            util_file_exists() <int util_file_exists (const char *path) at common/file.c:32>:
                                                                                LOG()
                                                                                os_access() <int os_access (const char *pathname, int mode) at core/os_posix.c:97>:
                                                                                    access()
                                                                                ERR()
                                                                            os_stat() <int os_stat (const char *pathname, os_stat_t *buf) at core/os_posix.c:79>:
                                                                                stat()
                                                                            util_stat_get_type() <enum file_type util_stat_get_type (const os_stat_t *st) at common/file.c:62>:
                                                                                pmem2_get_type_from_stat() <int pmem2_get_type_from_stat (const os_stat_t *st, enum pmem2_file_type *type) at libpmem2/pmem2_utils_linux.c:23>:
                                                                                    S_ISREG()
                                                                                    S_ISDIR()
                                                                                    S_ISCHR()
                                                                                    ERR()
                                                                                    util_snprintf() <int util_snprintf (char *str, size_t size, const char *format, ...) at core/util.c:434>:
                                                                                        va_start()
                                                                                        vsnprintf()
                                                                                        va_end()
                                                                                    os_major()
                                                                                    os_minor()
                                                                                    ASSERTinfo()
                                                                                    LOG()
                                                                                    realpath()
                                                                                    strrchr()
                                                                                    strcmp()
                                                                                pmem2_err_to_errno() <int pmem2_err_to_errno (int err) at libpmem2/pmem2_utils.c:67>:
                                                                                    FATAL()
                                                                                ASSERTinfo()
                                                                        util_file_device_dax_alignment() <size_t util_file_device_dax_alignment (const char *path) at common/file_posix.c:139>:
                                                                            LOG()
                                                                            device_dax_alignment() <size_t device_dax_alignment (const char *path) at common/file_posix.c:105>:
                                                                                LOG()
                                                                                os_open() <int os_open (const char *pathname, int flags, ...) at core/os_posix.c:29>:
                                                                                    va_start()
                                                                                    va_arg()
                                                                                    va_end()
                                                                                    open()
                                                                                pmem2_source_from_fd() <int pmem2_source_from_fd (struct pmem2_source **src, int fd) at libpmem2/source_posix.c:19>:
                                                                                    PMEM2_ERR_CLR()
                                                                                    fcntl()
                                                                                    ERR()
                                                                                    os_fstat()
                                                                                    pmem2_get_type_from_stat() <int pmem2_get_type_from_stat (const os_stat_t *st, enum pmem2_file_type *type) at libpmem2/pmem2_utils_linux.c:23>:
                                                                                        S_ISREG()
                                                                                        S_ISDIR()
                                                                                        S_ISCHR()
                                                                                        ERR()
                                                                                        util_snprintf() <int util_snprintf (char *str, size_t size, const char *format, ...) at core/util.c:434>:
                                                                                            va_start()
                                                                                            vsnprintf()
                                                                                            va_end()
                                                                                        os_major()
                                                                                        os_minor()
                                                                                        ASSERTinfo()
                                                                                        LOG()
                                                                                        realpath()
                                                                                        strrchr()
                                                                                        strcmp()
                                                                                    pmem2_malloc() <void *pmem2_malloc (size_t size, int *err) at libpmem2/pmem2_utils.c:19>:
                                                                                        Malloc()
                                                                                        ERR()
                                                                                    ASSERTne()
                                                                                pmem2_device_dax_alignment() <int pmem2_device_dax_alignment (const struct pmem2_source *src, size_t *alignment) at libpmem2/pmem2_utils_ndctl.c:18>:
                                                                                    ndctl_new()
                                                                                    ERR()
                                                                                    pmem2_region_namespace() <int pmem2_region_namespace (struct ndctl_ctx *ctx, const struct pmem2_source *src, struct ndctl_region **pregion, struct ndctl_namespace **pndns) at libpmem2/region_namespace_ndctl.c:131>:
                                                                                        LOG()
                                                                                        ERR()
                                                                                        FOREACH_BUS_REGION_NAMESPACE()
                                                                                        ndctl_namespace_get_dax()
                                                                                        ASSERTeq()
                                                                                        ndctl_dax_get_daxctl_region()
                                                                                        daxctl_dev_foreach()
                                                                                        daxctl_dev_get_devname()
                                                                                        ndctl_match_devdax() <int ndctl_match_devdax (dev_t st_rdev, const char *devname) at libpmem2/region_namespace_ndctl.c:26>:
                                                                                            LOG()
                                                                                            stat()
                                                                                            util_snprintf() <int util_snprintf (char *str, size_t size, const char *format, ...) at core/util.c:434>:
                                                                                                va_start()
                                                                                                vsnprintf()
                                                                                                va_end()
                                                                                            ERR()
                                                                                            os_stat() <int os_stat (const char *pathname, os_stat_t *buf) at core/os_posix.c:79>:
                                                                                                stat()
                                                                                        ndctl_namespace_get_btt()
                                                                                        ndctl_btt_get_block_device()
                                                                                        ndctl_namespace_get_pfn()
                                                                                        ndctl_pfn_get_block_device()
                                                                                        ndctl_namespace_get_block_device()
                                                                                        ndctl_match_fsdax() <int ndctl_match_fsdax (dev_t st_dev, const char *devname) at libpmem2/region_namespace_ndctl.c:64>:
                                                                                            LOG()
                                                                                            util_snprintf() <int util_snprintf (char *str, size_t size, const char *format, ...) at core/util.c:434>:
                                                                                                va_start()
                                                                                                vsnprintf()
                                                                                                va_end()
                                                                                            ERR()
                                                                                            major()
                                                                                            minor()
                                                                                            os_open() <int os_open (const char *pathname, int flags, ...) at core/os_posix.c:29>:
                                                                                                va_start()
                                                                                                va_arg()
                                                                                                va_end()
                                                                                                open()
                                                                                            read()
                                                                                            os_close()
                                                                                            strcmp()
                                                                                    LOG()
                                                                                    ndctl_namespace_get_dax()
                                                                                    ndctl_dax_get_align()
                                                                                    ndctl_unref()
                                                                                pmem2_source_delete() <int pmem2_source_delete (struct pmem2_source **src) at libpmem2/source.c:30>:
                                                                                    Free() <Free_func Free at core/alloc.c:91>
                                                                                os_close()
                                                                FATAL()
                                                                util_poolset_set_size() <void util_poolset_set_size (struct pool_set *set) at common/set.c:949>:
                                                                    LOG()
                                                                Free() <Free_func Free at core/alloc.c:91>
                                                            util_part_open() <int util_part_open (struct pool_set_part *part, size_t minsize, int create_part) at common/set.c:1459>:
                                                                LOG()
                                                                util_file_exists() <int util_file_exists (const char *path) at common/file.c:32>:
                                                                    LOG()
                                                                    os_access() <int os_access (const char *pathname, int mode) at core/os_posix.c:97>:
                                                                        access()
                                                                    ERR()
                                                                util_file_create() <int util_file_create (const char *path, size_t size, size_t minsize) at common/file.c:398>:
                                                                    LOG()
                                                                    ASSERTne()
                                                                    ERR()
                                                                    os_open() <int os_open (const char *pathname, int flags, ...) at core/os_posix.c:29>:
                                                                        va_start()
                                                                        va_arg()
                                                                        va_end()
                                                                        open()
                                                                    os_posix_fallocate() <int os_posix_fallocate (int fd, os_off_t offset, off_t len) at core/os_posix.c:142>:
                                                                        posix_fallocate()
                                                                    os_flock() <int os_flock (int fd, int operation) at core/os_posix.c:215>:
                                                                        flock()
                                                                    os_close()
                                                                    os_unlink() <int os_unlink (const char *pathname) at core/os_posix.c:88>:
                                                                        unlink()
                                                                util_file_open() <int util_file_open (const char *path, size_t *size, size_t minsize, int flags) at common/file.c:456>:
                                                                    LOG()
                                                                    os_open() <int os_open (const char *pathname, int flags, ...) at core/os_posix.c:29>:
                                                                        va_start()
                                                                        va_arg()
                                                                        va_end()
                                                                        open()
                                                                    ERR()
                                                                    os_flock() <int os_flock (int fd, int operation) at core/os_posix.c:215>:
                                                                        flock()
                                                                    os_close()
                                                                    ASSERTeq()
                                                                    util_fd_get_size() <ssize_t util_fd_get_size (int fd) at common/file.c:157>:
                                                                        LOG()
                                                                        pmem2_source_from_fd() <int pmem2_source_from_fd (struct pmem2_source **src, int fd) at libpmem2/source_posix.c:19>:
                                                                            PMEM2_ERR_CLR()
                                                                            fcntl()
                                                                            ERR()
                                                                            os_fstat()
                                                                            pmem2_get_type_from_stat() <int pmem2_get_type_from_stat (const os_stat_t *st, enum pmem2_file_type *type) at libpmem2/pmem2_utils_linux.c:23>:
                                                                                S_ISREG()
                                                                                S_ISDIR()
                                                                                S_ISCHR()
                                                                                ERR()
                                                                                util_snprintf() <int util_snprintf (char *str, size_t size, const char *format, ...) at core/util.c:434>:
                                                                                    va_start()
                                                                                    vsnprintf()
                                                                                    va_end()
                                                                                os_major()
                                                                                os_minor()
                                                                                ASSERTinfo()
                                                                                LOG()
                                                                                realpath()
                                                                                strrchr()
                                                                                strcmp()
                                                                            pmem2_malloc() <void *pmem2_malloc (size_t size, int *err) at libpmem2/pmem2_utils.c:19>:
                                                                                Malloc()
                                                                                ERR()
                                                                            ASSERTne()
                                                                        pmem2_err_to_errno() <int pmem2_err_to_errno (int err) at libpmem2/pmem2_utils.c:67>:
                                                                            FATAL()
                                                                        pmem2_source_size() <int pmem2_source_size (const struct pmem2_source *src, size_t *size) at libpmem2/source_posix.c:90>:
                                                                            LOG()
                                                                            PMEM2_ERR_CLR()
                                                                            ASSERT()
                                                                            os_fstat()
                                                                            ERR()
                                                                            pmem2_device_dax_size() <int pmem2_device_dax_size (const struct pmem2_source *src, size_t *size) at libpmem2/pmem2_utils_ndctl.c:58>:
                                                                                ndctl_new()
                                                                                ERR()
                                                                                pmem2_region_namespace() <int pmem2_region_namespace (struct ndctl_ctx *ctx, const struct pmem2_source *src, struct ndctl_region **pregion, struct ndctl_namespace **pndns) at libpmem2/region_namespace_ndctl.c:131>:
                                                                                    LOG()
                                                                                    ERR()
                                                                                    FOREACH_BUS_REGION_NAMESPACE()
                                                                                    ndctl_namespace_get_dax()
                                                                                    ASSERTeq()
                                                                                    ndctl_dax_get_daxctl_region()
                                                                                    daxctl_dev_foreach()
                                                                                    daxctl_dev_get_devname()
                                                                                    ndctl_match_devdax() <int ndctl_match_devdax (dev_t st_rdev, const char *devname) at libpmem2/region_namespace_ndctl.c:26>:
                                                                                        LOG()
                                                                                        stat()
                                                                                        util_snprintf() <int util_snprintf (char *str, size_t size, const char *format, ...) at core/util.c:434>:
                                                                                            va_start()
                                                                                            vsnprintf()
                                                                                            va_end()
                                                                                        ERR()
                                                                                        os_stat() <int os_stat (const char *pathname, os_stat_t *buf) at core/os_posix.c:79>:
                                                                                            stat()
                                                                                    ndctl_namespace_get_btt()
                                                                                    ndctl_btt_get_block_device()
                                                                                    ndctl_namespace_get_pfn()
                                                                                    ndctl_pfn_get_block_device()
                                                                                    ndctl_namespace_get_block_device()
                                                                                    ndctl_match_fsdax() <int ndctl_match_fsdax (dev_t st_dev, const char *devname) at libpmem2/region_namespace_ndctl.c:64>:
                                                                                        LOG()
                                                                                        util_snprintf() <int util_snprintf (char *str, size_t size, const char *format, ...) at core/util.c:434>:
                                                                                            va_start()
                                                                                            vsnprintf()
                                                                                            va_end()
                                                                                        ERR()
                                                                                        major()
                                                                                        minor()
                                                                                        os_open() <int os_open (const char *pathname, int flags, ...) at core/os_posix.c:29>:
                                                                                            va_start()
                                                                                            va_arg()
                                                                                            va_end()
                                                                                            open()
                                                                                        read()
                                                                                        os_close()
                                                                                        strcmp()
                                                                                LOG()
                                                                                ndctl_namespace_get_dax()
                                                                                ndctl_dax_get_size()
                                                                                ndctl_unref()
                                                                            FATAL()
                                                                        pmem2_source_delete() <int pmem2_source_delete (struct pmem2_source **src) at libpmem2/source.c:30>:
                                                                            Free() <Free_func Free at core/alloc.c:91>
                                                                        ERR()
                                                                os_posix_fallocate() <int os_posix_fallocate (int fd, os_off_t offset, off_t len) at core/os_posix.c:142>:
                                                                    posix_fallocate()
                                                                ERR()
                                                            util_map_part() <int util_map_part (struct pool_set_part *part, void *addr, size_t size, size_t offset, int flags, int rdonly) at common/set.c:229>:
                                                                LOG()
                                                                ASSERTeq()
                                                                ASSERT()
                                                                roundup()
                                                                util_map_sync() <void *util_map_sync (void *addr, size_t len, int proto, int flags, int fd, os_off_t offset, int *map_sync) at common/mmap_posix.c:159>:
                                                                    LOG()
                                                                    mmap()
                                                                ERR()
                                                                munmap()
                                                                VALGRIND_REGISTER_PMEM_MAPPING()
                                                                VALGRIND_REGISTER_PMEM_FILE()
                                                            util_poolset_chmod() <int util_poolset_chmod (struct pool_set *set, mode_t mode) at common/set.c:404>:
                                                                LOG()
                                                                os_fstat()
                                                                ERR()
                                                                os_chmod() <int os_chmod (const char *pathname, mode_t mode) at core/os_posix.c:124>:
                                                                    chmod()
                                                            util_poolset_fdclose() <void util_poolset_fdclose (struct pool_set *set) at common/set.c:457>:
                                                                util_poolset_fdclose_always() <void util_poolset_fdclose_always (struct pool_set *set) at common/set.c:445>:
                                                                    LOG()
                                                                    util_replica_fdclose() <void util_replica_fdclose (struct pool_replica *rep) at common/set.c:3232>:
                                                                        util_part_fdclose() <void util_part_fdclose (struct pool_set_part *part) at common/set.c:1517>:
                                                                            LOG()
                                                                            os_close()
                                                            os_close()
                                                            os_unlink() <int os_unlink (const char *pathname) at core/os_posix.c:88>:
                                                                unlink()
                                                            Free() <Free_func Free at core/alloc.c:91>
                                                            util_poolset_set_size() <void util_poolset_set_size (struct pool_set *set) at common/set.c:949>:
                                                                LOG()
                                                        pmemops_persist()
                                                        heap_max_zone() <unsigned heap_max_zone (size_t size) at libpmemobj/heap.c:516>:
                                                        ZID_TO_ZONE()
                                                        heap_zone_init() <void heap_zone_init (struct palloc_heap *heap, uint32_t zone_id, uint32_t first_chunk_id) at libpmemobj/heap.c:559>:
                                                            ZID_TO_ZONE()
                                                            zone_calc_size_idx() <uint32_t zone_calc_size_idx (uint32_t zone_id, unsigned max_zone, size_t heap_size) at libpmemobj/heap.c:533>:
                                                                ASSERT()
                                                            ASSERT()
                                                            memblock_huge_init() <struct memory_block memblock_huge_init (struct palloc_heap *heap, uint32_t chunk_id, uint32_t zone_id, uint32_t size_idx) at libpmemobj/memblock.c:1329>:
                                                                heap_get_chunk_hdr()
                                                                VALGRIND_DO_MAKE_MEM_UNDEFINED()
                                                                VALGRIND_ANNOTATE_NEW_MEMORY()
                                                                chunk_get_chunk_hdr_value() <uint64_t chunk_get_chunk_hdr_value (uint16_t type, uint16_t flags, uint32_t size_idx) at libpmemobj/memblock.c:604>:
                                                                    COMPILE_ERROR_ON()
                                                                    memcpy()
                                                                util_atomic_store_explicit64()
                                                                pmemops_persist()
                                                                huge_write_footer() <void huge_write_footer (struct chunk_header *hdr, uint32_t size_idx) at libpmemobj/memblock.c:1166>:
                                                                    VALGRIND_DO_MAKE_MEM_UNDEFINED()
                                                                    VALGRIND_SET_CLEAN()
                                                                memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                                                    memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                                                        heap_get_chunk_hdr()
                                                                    memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                                                        heap_get_chunk_hdr()
                                                                        FATAL()
                                                            pmemops_persist()
                                                        memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                                            memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                                                heap_get_chunk_hdr()
                                                            memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                                                heap_get_chunk_hdr()
                                                                FATAL()
                                                        heap_free_chunk_reuse() <int heap_free_chunk_reuse (struct palloc_heap *heap, struct bucket *bucket, struct memory_block *m) at libpmemobj/heap.c:674>:
                                                            heap_coalesce_huge() <struct memory_block heap_coalesce_huge (struct palloc_heap *heap, struct bucket *b, const struct memory_block *m) at libpmemobj/heap.c:650>:
                                                                heap_get_adjacent_free_block() <int heap_get_adjacent_free_block (struct palloc_heap *heap, const struct memory_block *in, struct memory_block *out, int prev) at libpmemobj/heap.c:582>:
                                                                    ZID_TO_ZONE()
                                                                    memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                                                        memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                                                            heap_get_chunk_hdr()
                                                                        memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                                                            heap_get_chunk_hdr()
                                                                            FATAL()
                                                                bucket_remove_block() <int bucket_remove_block (struct bucket *b, const struct memory_block *m) at libpmemobj/bucket.c:178>
                                                                heap_coalesce() <struct memory_block heap_coalesce (struct palloc_heap *heap, const struct memory_block *blocks[], int n) at libpmemobj/heap.c:621>:
                                                                    ASSERTne()
                                                                    memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                                                        memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                                                            heap_get_chunk_hdr()
                                                                        memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                                                            heap_get_chunk_hdr()
                                                                            FATAL()
                                                            bucket_insert_block() <int bucket_insert_block (struct bucket *b, const struct memory_block *m) at libpmemobj/bucket.c:161>:
                                                                VALGRIND_DO_MAKE_MEM_NOACCESS()
                                                                VALGRIND_ANNOTATE_NEW_MEMORY()
                                                heap_ensure_run_bucket_filled() <int heap_ensure_run_bucket_filled (struct palloc_heap *heap, struct bucket *b, uint32_t units) at libpmemobj/heap.c:1083> (R):
                                                    bucket_alloc_class() <struct alloc_class *bucket_alloc_class (struct bucket *b) at libpmemobj/bucket.c:152>
                                                    ASSERTeq()
                                                    heap_detach_and_try_discard_run() <int heap_detach_and_try_discard_run (struct palloc_heap *heap, struct bucket *b) at libpmemobj/heap.c:992>:
                                                        bucket_detach_run() <int bucket_detach_run (struct bucket *b, struct memory_block *m_out, int *empty) at libpmemobj/bucket.c:231>:
                                                            util_fetch_and_sub64()
                                                            VALGRIND_ANNOTATE_HAPPENS_AFTER()
                                                            VALGRIND_ANNOTATE_HAPPENS_BEFORE()
                                                            Zalloc() <void *Zalloc (size_t sz) at core/alloc.c:98>:
                                                                Malloc()
                                                                memset()
                                                        heap_discard_run() <void heap_discard_run (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/heap.c:974>:
                                                            heap_reclaim_run() <int heap_reclaim_run (struct palloc_heap *heap, struct memory_block *m, int startup) at libpmemobj/heap.c:733>:
                                                                heap_get_chunk_run()
                                                                heap_get_chunk_hdr()
                                                                alloc_class_by_run() <struct alloc_class *alloc_class_by_run (struct alloc_class_collection *ac, size_t unit_size, uint16_t flags, uint32_t size_idx) at libpmemobj/alloc_class.c:594>:
                                                                    SIZE_TO_CLASS_MAP_INDEX()
                                                                    ASSERT()
                                                                    critnib_get() <void *critnib_get (struct critnib *c, uint64_t key) at libpmemobj/critnib.c:515>:
                                                                        load() <void load (void *src, void *dst) at libpmemobj/critnib.c:130>:
                                                                            util_atomic_load_explicit64()
                                                                        is_leaf() <inline bool is_leaf (struct critnib_node *n) at libpmemobj/critnib.c:150>:
                                                                        slice_index() <inline unsigned slice_index (uint64_t key, sh_t shift) at libpmemobj/critnib.c:178>:
                                                                        to_leaf() <inline struct critnib_leaf *to_leaf (struct critnib_node *n) at libpmemobj/critnib.c:159>:
                                                                    RUN_CLASS_KEY_PACK()
                                                                recycler_element_new() <struct recycler_element recycler_element_new (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/recycler.c:122>:
                                                                    SUPPRESS_UNUSED()
                                                                    util_mutex_lock()
                                                                    util_mutex_unlock()
                                                                ASSERTeq()
                                                                STATS_INC()
                                                                heap_get_recycler() <struct recycler *heap_get_recycler (struct palloc_heap *heap, size_t id, size_t nallocs) at libpmemobj/heap.c:106> (R):
                                                                    util_atomic_load_explicit64()
                                                                    recycler_new() <struct recycler *recycler_new (struct palloc_heap *heap, size_t nallocs, size_t *peak_arenas) at libpmemobj/recycler.c:74>:
                                                                        Malloc()
                                                                        ravl_new_sized() <struct ravl *ravl_new_sized (ravl_compare *compare, size_t data_size) at core/ravl.c:45>:
                                                                            Malloc()
                                                                            ERR()
                                                                        recycler_element_cmp() <int recycler_element_cmp (const void *lhs, const void *rhs) at libpmemobj/recycler.c:23>:
                                                                        memset()
                                                                        VEC_INIT()
                                                                        util_mutex_init()
                                                                        Free() <Free_func Free at core/alloc.c:91>
                                                                    util_bool_compare_and_swap64()
                                                                    recycler_delete() <void recycler_delete (struct recycler *r) at libpmemobj/recycler.c:107>:
                                                                        VEC_DELETE()
                                                                        util_mutex_destroy()
                                                                        ravl_delete() <void ravl_delete (struct ravl *ravl) at core/ravl.c:112>:
                                                                            ravl_delete_cb() <void ravl_delete_cb (struct ravl *ravl, ravl_cb cb, void *arg) at core/ravl.c:102>:
                                                                                ravl_foreach_node() <void ravl_foreach_node (struct ravl_node *n, ravl_cb cb, void *arg, int free_node) at core/ravl.c:74> (R):
                                                                                    ravl_foreach_node() <void ravl_foreach_node (struct ravl_node *n, ravl_cb cb, void *arg, int free_node) at core/ravl.c:74> (recursive: see 19164)
                                                                                    Free() <Free_func Free at core/alloc.c:91>
                                                                                Free() <Free_func Free at core/alloc.c:91>
                                                                        Free() <Free_func Free at core/alloc.c:91>
                                                                    heap_get_recycler() <struct recycler *heap_get_recycler (struct palloc_heap *heap, size_t id, size_t nallocs) at libpmemobj/heap.c:106> (recursive: see 19146)
                                                                recycler_put() <int recycler_put (struct recycler *r, struct recycler_element element) at libpmemobj/recycler.c:154>:
                                                                    util_mutex_lock()
                                                                    ravl_emplace_copy() <int ravl_emplace_copy (struct ravl *ravl, const void *data) at core/ravl.c:384>:
                                                                        ravl_emplace() <int ravl_emplace (struct ravl *ravl, ravl_constr constr, const void *arg) at core/ravl.c:393>:
                                                                            LOG()
                                                                            ravl_new_node() <struct ravl_node *ravl_new_node (struct ravl *ravl, ravl_constr constr, const void *arg) at core/ravl.c:161>:
                                                                                Malloc()
                                                                                ERR()
                                                                                ravl_node_insert_constructor() <void ravl_node_insert_constructor (void *data, size_t data_size, const void *arg) at core/ravl.c:139>:
                                                                                    SUPPRESS_UNUSED()
                                                                                    memcpy()
                                                                            ravl_data() <void *ravl_data (struct ravl_node *node) at core/ravl.c:571>:
                                                                                memcpy()
                                                                            ravl_balance() <void ravl_balance (struct ravl *ravl, struct ravl_node *n) at core/ravl.c:337>:
                                                                                ravl_node_is() <int ravl_node_is (struct ravl_node *n, int i, int j) at core/ravl.c:306>:
                                                                                    ravl_node_is_i_j() <int ravl_node_is_i_j (struct ravl_node *n, int i, int j) at core/ravl.c:296>:
                                                                                        ravl_node_rank_difference_parent() <int ravl_node_rank_difference_parent (struct ravl_node *p, struct ravl_node *n) at core/ravl.c:275>:
                                                                                            ravl_node_rank() <int ravl_node_rank (struct ravl_node *n) at core/ravl.c:261>:
                                                                                ravl_node_promote() <void ravl_node_promote (struct ravl_node *n) at core/ravl.c:315>
                                                                                ravl_node_sibling() <struct ravl_node *ravl_node_sibling (struct ravl_node *n) at core/ravl.c:209>:
                                                                                    ravl_node_slot_type() <enum ravl_slot_type ravl_node_slot_type (struct ravl_node *n) at core/ravl.c:196>:
                                                                                ravl_node_rank_difference() <int ravl_node_rank_difference (struct ravl_node *n) at core/ravl.c:287>:
                                                                                    ravl_node_rank_difference_parent() <int ravl_node_rank_difference_parent (struct ravl_node *p, struct ravl_node *n) at core/ravl.c:275>:
                                                                                        ravl_node_rank() <int ravl_node_rank (struct ravl_node *n) at core/ravl.c:261>:
                                                                                ravl_node_rank_difference_parent() <int ravl_node_rank_difference_parent (struct ravl_node *p, struct ravl_node *n) at core/ravl.c:275>:
                                                                                    ravl_node_rank() <int ravl_node_rank (struct ravl_node *n) at core/ravl.c:261>:
                                                                                ravl_slot_opposite() <enum ravl_slot_type ravl_slot_opposite (enum ravl_slot_type t) at core/ravl.c:184>:
                                                                                    ASSERTne()
                                                                                ravl_node_slot_type() <enum ravl_slot_type ravl_node_slot_type (struct ravl_node *n) at core/ravl.c:196>:
                                                                                ravl_rotate() <void ravl_rotate (struct ravl *ravl, struct ravl_node *n) at core/ravl.c:237>:
                                                                                    ASSERTne()
                                                                                    ravl_node_ref() <struct ravl_node **ravl_node_ref (struct ravl *ravl, struct ravl_node *n) at core/ravl.c:223>:
                                                                                        ravl_node_slot_type() <enum ravl_slot_type ravl_node_slot_type (struct ravl_node *n) at core/ravl.c:196>:
                                                                                    ravl_node_slot_type() <enum ravl_slot_type ravl_node_slot_type (struct ravl_node *n) at core/ravl.c:196>:
                                                                                    ravl_slot_opposite() <enum ravl_slot_type ravl_slot_opposite (enum ravl_slot_type t) at core/ravl.c:184>:
                                                                                        ASSERTne()
                                                                                ravl_node_demote() <void ravl_node_demote (struct ravl_node *n) at core/ravl.c:324>:
                                                                                    ASSERT()
                                                                            Free() <Free_func Free at core/alloc.c:91>
                                                                        ravl_node_copy_constructor() <void ravl_node_copy_constructor (void *data, size_t data_size, const void *arg) at core/ravl.c:152>:
                                                                            memcpy()
                                                                    util_mutex_unlock()
                                                                ERR()
                                                            heap_bucket_acquire() <struct bucket *heap_bucket_acquire (struct palloc_heap *heap, uint8_t class_id, uint16_t arena_id) at libpmemobj/heap.c:470>:
                                                                out() <void out (const char *fmt, ...) at core/out.c:480>:
                                                                    va_start()
                                                                    out_common() <} void out_common (const char *file, int line, const char *func, int level, const char *suffix, const char *fmt, va_list ap) at core/out.c:334>
                                                                    va_end()
                                                                heap_thread_arena() <struct arena *heap_thread_arena (struct palloc_heap *heap) at libpmemobj/heap.c:414>:
                                                                    os_tls_get() <void *os_tls_get (os_tls_key_t key) at core/os_thread_posix.c:62>:
                                                                        pthread_getspecific()
                                                                    heap_thread_arena_assign() <struct arena *heap_thread_arena_assign (struct palloc_heap *heap) at libpmemobj/heap.c:381>:
                                                                        util_mutex_lock()
                                                                        ASSERTne()
                                                                        VEC_SIZE()
                                                                        VEC_FOREACH()
                                                                        LOG()
                                                                        heap_arena_thread_attach() <void heap_arena_thread_attach (struct palloc_heap *heap, struct arena *a) at libpmemobj/heap.c:249>:
                                                                            ASSERTeq()
                                                                            os_tls_get() <void *os_tls_get (os_tls_key_t key) at core/os_thread_posix.c:62>:
                                                                                pthread_getspecific()
                                                                            heap_arena_thread_detach() <void heap_arena_thread_detach (struct arena *a) at libpmemobj/heap.c:232>:
                                                                                util_fetch_and_sub64()
                                                                            ASSERTne()
                                                                            util_fetch_and_add64()
                                                                            os_tls_set() <int os_tls_set (os_tls_key_t key, const void *value) at core/os_thread_posix.c:53>:
                                                                                pthread_setspecific()
                                                                        util_mutex_unlock()
                                                                    heap_global_arena_assign() <struct arena *heap_global_arena_assign (struct palloc_heap *heap) at libpmemobj/heap.c:348>:
                                                                        util_mutex_lock()
                                                                        ASSERTne()
                                                                        VEC_SIZE()
                                                                        VEC_FOREACH()
                                                                        LOG()
                                                                        util_mutex_unlock()
                                                                    ASSERT()
                                                                    ASSERTne()
                                                                ASSERTne()
                                                                VEC_ARR()
                                                                bucket_acquire() <struct bucket *bucket_acquire (struct bucket_locked *b) at libpmemobj/bucket.c:117>:
                                                                    util_mutex_lock()
                                                            heap_run_into_free_chunk() <void heap_run_into_free_chunk (struct palloc_heap *heap, struct bucket *bucket, struct memory_block *m) at libpmemobj/heap.c:697>:
                                                                heap_get_chunk_hdr()
                                                                STATS_SUB()
                                                                util_mutex_lock()
                                                                memblock_huge_init() <struct memory_block memblock_huge_init (struct palloc_heap *heap, uint32_t chunk_id, uint32_t zone_id, uint32_t size_idx) at libpmemobj/memblock.c:1329>:
                                                                    heap_get_chunk_hdr()
                                                                    VALGRIND_DO_MAKE_MEM_UNDEFINED()
                                                                    VALGRIND_ANNOTATE_NEW_MEMORY()
                                                                    chunk_get_chunk_hdr_value() <uint64_t chunk_get_chunk_hdr_value (uint16_t type, uint16_t flags, uint32_t size_idx) at libpmemobj/memblock.c:604>:
                                                                        COMPILE_ERROR_ON()
                                                                        memcpy()
                                                                    util_atomic_store_explicit64()
                                                                    pmemops_persist()
                                                                    huge_write_footer() <void huge_write_footer (struct chunk_header *hdr, uint32_t size_idx) at libpmemobj/memblock.c:1166>:
                                                                        VALGRIND_DO_MAKE_MEM_UNDEFINED()
                                                                        VALGRIND_SET_CLEAN()
                                                                    memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                                                        memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                                                            heap_get_chunk_hdr()
                                                                        memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                                                            heap_get_chunk_hdr()
                                                                            FATAL()
                                                                heap_free_chunk_reuse() <int heap_free_chunk_reuse (struct palloc_heap *heap, struct bucket *bucket, struct memory_block *m) at libpmemobj/heap.c:674>:
                                                                    heap_coalesce_huge() <struct memory_block heap_coalesce_huge (struct palloc_heap *heap, struct bucket *b, const struct memory_block *m) at libpmemobj/heap.c:650>:
                                                                        heap_get_adjacent_free_block() <int heap_get_adjacent_free_block (struct palloc_heap *heap, const struct memory_block *in, struct memory_block *out, int prev) at libpmemobj/heap.c:582>:
                                                                            ZID_TO_ZONE()
                                                                            memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                                                                memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                                                                    heap_get_chunk_hdr()
                                                                                memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                                                                    heap_get_chunk_hdr()
                                                                                    FATAL()
                                                                        bucket_remove_block() <int bucket_remove_block (struct bucket *b, const struct memory_block *m) at libpmemobj/bucket.c:178>
                                                                        heap_coalesce() <struct memory_block heap_coalesce (struct palloc_heap *heap, const struct memory_block *blocks[], int n) at libpmemobj/heap.c:621>:
                                                                            ASSERTne()
                                                                            memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                                                                memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                                                                    heap_get_chunk_hdr()
                                                                                memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                                                                    heap_get_chunk_hdr()
                                                                                    FATAL()
                                                                    bucket_insert_block() <int bucket_insert_block (struct bucket *b, const struct memory_block *m) at libpmemobj/bucket.c:161>:
                                                                        VALGRIND_DO_MAKE_MEM_NOACCESS()
                                                                        VALGRIND_ANNOTATE_NEW_MEMORY()
                                                                util_mutex_unlock()
                                                            heap_bucket_release() <void heap_bucket_release (struct bucket *b) at libpmemobj/heap.c:498>:
                                                                bucket_release() <void bucket_release (struct bucket *b) at libpmemobj/bucket.c:127>:
                                                                    util_mutex_unlock()
                                                    heap_reuse_from_recycler() <int heap_reuse_from_recycler (struct palloc_heap *heap, struct bucket *b, uint32_t units, int force) at libpmemobj/heap.c:1034>:
                                                        bucket_alloc_class() <struct alloc_class *bucket_alloc_class (struct bucket *b) at libpmemobj/bucket.c:152>
                                                        heap_get_recycler() <struct recycler *heap_get_recycler (struct palloc_heap *heap, size_t id, size_t nallocs) at libpmemobj/heap.c:106> (R):
                                                            util_atomic_load_explicit64()
                                                            recycler_new() <struct recycler *recycler_new (struct palloc_heap *heap, size_t nallocs, size_t *peak_arenas) at libpmemobj/recycler.c:74>:
                                                                Malloc()
                                                                ravl_new_sized() <struct ravl *ravl_new_sized (ravl_compare *compare, size_t data_size) at core/ravl.c:45>:
                                                                    Malloc()
                                                                    ERR()
                                                                recycler_element_cmp() <int recycler_element_cmp (const void *lhs, const void *rhs) at libpmemobj/recycler.c:23>:
                                                                memset()
                                                                VEC_INIT()
                                                                util_mutex_init()
                                                                Free() <Free_func Free at core/alloc.c:91>
                                                            util_bool_compare_and_swap64()
                                                            recycler_delete() <void recycler_delete (struct recycler *r) at libpmemobj/recycler.c:107>:
                                                                VEC_DELETE()
                                                                util_mutex_destroy()
                                                                ravl_delete() <void ravl_delete (struct ravl *ravl) at core/ravl.c:112>:
                                                                    ravl_delete_cb() <void ravl_delete_cb (struct ravl *ravl, ravl_cb cb, void *arg) at core/ravl.c:102>:
                                                                        ravl_foreach_node() <void ravl_foreach_node (struct ravl_node *n, ravl_cb cb, void *arg, int free_node) at core/ravl.c:74> (R):
                                                                            ravl_foreach_node() <void ravl_foreach_node (struct ravl_node *n, ravl_cb cb, void *arg, int free_node) at core/ravl.c:74> (recursive: see 19319)
                                                                            Free() <Free_func Free at core/alloc.c:91>
                                                                        Free() <Free_func Free at core/alloc.c:91>
                                                                Free() <Free_func Free at core/alloc.c:91>
                                                            heap_get_recycler() <struct recycler *heap_get_recycler (struct palloc_heap *heap, size_t id, size_t nallocs) at libpmemobj/heap.c:106> (recursive: see 19301)
                                                        ERR()
                                                        recycler_get() <int recycler_get (struct recycler *r, struct memory_block *m) at libpmemobj/recycler.c:171>:
                                                            util_mutex_lock()
                                                            ravl_find() <struct ravl_node *ravl_find (struct ravl *ravl, const void *data, enum ravl_predicate flags) at core/ravl.c:524>:
                                                                LOG()
                                                                ravl_data() <void *ravl_data (struct ravl_node *node) at core/ravl.c:571>:
                                                                    memcpy()
                                                                ravl_predicate_holds() <int ravl_predicate_holds (int result, struct ravl_node **ret, struct ravl_node *n, enum ravl_predicate flags) at core/ravl.c:489>:
                                                                    ravl_node_successor() <struct ravl_node *ravl_node_successor (struct ravl_node *n) at core/ravl.c:465>:
                                                                        ravl_node_cessor() <struct ravl_node *ravl_node_cessor (struct ravl_node *n, enum ravl_slot_type t) at core/ravl.c:443>:
                                                                            ravl_node_type_most() <struct ravl_node *ravl_node_type_most (struct ravl_node *n, enum ravl_slot_type t) at core/ravl.c:430>:
                                                                            ravl_slot_opposite() <enum ravl_slot_type ravl_slot_opposite (enum ravl_slot_type t) at core/ravl.c:184>:
                                                                                ASSERTne()
                                                                    ravl_node_predecessor() <struct ravl_node *ravl_node_predecessor (struct ravl_node *n) at core/ravl.c:476>:
                                                                        ravl_node_cessor() <struct ravl_node *ravl_node_cessor (struct ravl_node *n, enum ravl_slot_type t) at core/ravl.c:443>:
                                                                            ravl_node_type_most() <struct ravl_node *ravl_node_type_most (struct ravl_node *n, enum ravl_slot_type t) at core/ravl.c:430>:
                                                                            ravl_slot_opposite() <enum ravl_slot_type ravl_slot_opposite (enum ravl_slot_type t) at core/ravl.c:184>:
                                                                                ASSERTne()
                                                            out() <void out (const char *fmt, ...) at core/out.c:480>:
                                                                va_start()
                                                                out_common() <} void out_common (const char *file, int line, const char *func, int level, const char *suffix, const char *fmt, va_list ap) at core/out.c:334>
                                                                va_end()
                                                            ravl_data() <void *ravl_data (struct ravl_node *node) at core/ravl.c:571>:
                                                                memcpy()
                                                            ravl_remove() <void ravl_remove (struct ravl *ravl, struct ravl_node *n) at core/ravl.c:545> (R):
                                                                LOG()
                                                                ravl_node_successor() <struct ravl_node *ravl_node_successor (struct ravl_node *n) at core/ravl.c:465>:
                                                                    ravl_node_cessor() <struct ravl_node *ravl_node_cessor (struct ravl_node *n, enum ravl_slot_type t) at core/ravl.c:443>:
                                                                        ravl_node_type_most() <struct ravl_node *ravl_node_type_most (struct ravl_node *n, enum ravl_slot_type t) at core/ravl.c:430>:
                                                                        ravl_slot_opposite() <enum ravl_slot_type ravl_slot_opposite (enum ravl_slot_type t) at core/ravl.c:184>:
                                                                            ASSERTne()
                                                                memcpy()
                                                                ravl_remove() <void ravl_remove (struct ravl *ravl, struct ravl_node *n) at core/ravl.c:545> (recursive: see 19349)
                                                                ravl_node_ref() <struct ravl_node **ravl_node_ref (struct ravl *ravl, struct ravl_node *n) at core/ravl.c:223>:
                                                                    ravl_node_slot_type() <enum ravl_slot_type ravl_node_slot_type (struct ravl_node *n) at core/ravl.c:196>:
                                                                Free() <Free_func Free at core/alloc.c:91>
                                                            heap_get_chunk_hdr()
                                                            memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                                                memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                                                    heap_get_chunk_hdr()
                                                                memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                                                    heap_get_chunk_hdr()
                                                                    FATAL()
                                                            util_mutex_unlock()
                                                        bucket_attach_run() <int bucket_attach_run (struct bucket *b, const struct memory_block *m) at libpmemobj/bucket.c:206>:
                                                            util_mutex_lock()
                                                            bucket_memblock_insert_block() <int bucket_memblock_insert_block (const struct memory_block *m, void *b) at libpmemobj/bucket.c:197>:
                                                                bucket_insert_block() <int bucket_insert_block (struct bucket *b, const struct memory_block *m) at libpmemobj/bucket.c:161>:
                                                                    VALGRIND_DO_MAKE_MEM_NOACCESS()
                                                                    VALGRIND_ANNOTATE_NEW_MEMORY()
                                                            util_mutex_unlock()
                                                            util_fetch_and_add64()
                                                        heap_recycle_unused() <int heap_recycle_unused (struct palloc_heap *heap, struct recycler *recycler, struct bucket *defb, int force) at libpmemobj/heap.c:894>:
                                                            recycler_recalc() <struct empty_runs recycler_recalc (struct recycler *r, int force) at libpmemobj/recycler.c:207>:
                                                                VEC_INIT()
                                                                util_atomic_load64()
                                                                util_mutex_trylock()
                                                                ravl_find() <struct ravl_node *ravl_find (struct ravl *ravl, const void *data, enum ravl_predicate flags) at core/ravl.c:524>:
                                                                    LOG()
                                                                    ravl_data() <void *ravl_data (struct ravl_node *node) at core/ravl.c:571>:
                                                                        memcpy()
                                                                    ravl_predicate_holds() <int ravl_predicate_holds (int result, struct ravl_node **ret, struct ravl_node *n, enum ravl_predicate flags) at core/ravl.c:489>:
                                                                        ravl_node_successor() <struct ravl_node *ravl_node_successor (struct ravl_node *n) at core/ravl.c:465>:
                                                                            ravl_node_cessor() <struct ravl_node *ravl_node_cessor (struct ravl_node *n, enum ravl_slot_type t) at core/ravl.c:443>:
                                                                                ravl_node_type_most() <struct ravl_node *ravl_node_type_most (struct ravl_node *n, enum ravl_slot_type t) at core/ravl.c:430>:
                                                                                ravl_slot_opposite() <enum ravl_slot_type ravl_slot_opposite (enum ravl_slot_type t) at core/ravl.c:184>:
                                                                                    ASSERTne()
                                                                        ravl_node_predecessor() <struct ravl_node *ravl_node_predecessor (struct ravl_node *n) at core/ravl.c:476>:
                                                                            ravl_node_cessor() <struct ravl_node *ravl_node_cessor (struct ravl_node *n, enum ravl_slot_type t) at core/ravl.c:443>:
                                                                                ravl_node_type_most() <struct ravl_node *ravl_node_type_most (struct ravl_node *n, enum ravl_slot_type t) at core/ravl.c:430>:
                                                                                ravl_slot_opposite() <enum ravl_slot_type ravl_slot_opposite (enum ravl_slot_type t) at core/ravl.c:184>:
                                                                                    ASSERTne()
                                                                ravl_data() <void *ravl_data (struct ravl_node *node) at core/ravl.c:571>:
                                                                    memcpy()
                                                                memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                                                    memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                                                        heap_get_chunk_hdr()
                                                                    memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                                                        heap_get_chunk_hdr()
                                                                        FATAL()
                                                                recycler_element_new() <struct recycler_element recycler_element_new (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/recycler.c:122>:
                                                                    SUPPRESS_UNUSED()
                                                                    util_mutex_lock()
                                                                    util_mutex_unlock()
                                                                ASSERT()
                                                                util_fetch_and_sub64()
                                                                MIN()
                                                                ravl_remove() <void ravl_remove (struct ravl *ravl, struct ravl_node *n) at core/ravl.c:545> (R):
                                                                    LOG()
                                                                    ravl_node_successor() <struct ravl_node *ravl_node_successor (struct ravl_node *n) at core/ravl.c:465>:
                                                                        ravl_node_cessor() <struct ravl_node *ravl_node_cessor (struct ravl_node *n, enum ravl_slot_type t) at core/ravl.c:443>:
                                                                            ravl_node_type_most() <struct ravl_node *ravl_node_type_most (struct ravl_node *n, enum ravl_slot_type t) at core/ravl.c:430>:
                                                                            ravl_slot_opposite() <enum ravl_slot_type ravl_slot_opposite (enum ravl_slot_type t) at core/ravl.c:184>:
                                                                                ASSERTne()
                                                                    memcpy()
                                                                    ravl_remove() <void ravl_remove (struct ravl *ravl, struct ravl_node *n) at core/ravl.c:545> (recursive: see 19412)
                                                                    ravl_node_ref() <struct ravl_node **ravl_node_ref (struct ravl *ravl, struct ravl_node *n) at core/ravl.c:223>:
                                                                        ravl_node_slot_type() <enum ravl_slot_type ravl_node_slot_type (struct ravl_node *n) at core/ravl.c:196>:
                                                                    Free() <Free_func Free at core/alloc.c:91>
                                                                VEC_PUSH_BACK()
                                                                VEC_FOREACH_BY_PTR()
                                                                ravl_emplace_copy() <int ravl_emplace_copy (struct ravl *ravl, const void *data) at core/ravl.c:384>:
                                                                    ravl_emplace() <int ravl_emplace (struct ravl *ravl, ravl_constr constr, const void *arg) at core/ravl.c:393>:
                                                                        LOG()
                                                                        ravl_new_node() <struct ravl_node *ravl_new_node (struct ravl *ravl, ravl_constr constr, const void *arg) at core/ravl.c:161>:
                                                                            Malloc()
                                                                            ERR()
                                                                            ravl_node_insert_constructor() <void ravl_node_insert_constructor (void *data, size_t data_size, const void *arg) at core/ravl.c:139>:
                                                                                SUPPRESS_UNUSED()
                                                                                memcpy()
                                                                        ravl_data() <void *ravl_data (struct ravl_node *node) at core/ravl.c:571>:
                                                                            memcpy()
                                                                        ravl_balance() <void ravl_balance (struct ravl *ravl, struct ravl_node *n) at core/ravl.c:337>:
                                                                            ravl_node_is() <int ravl_node_is (struct ravl_node *n, int i, int j) at core/ravl.c:306>:
                                                                                ravl_node_is_i_j() <int ravl_node_is_i_j (struct ravl_node *n, int i, int j) at core/ravl.c:296>:
                                                                                    ravl_node_rank_difference_parent() <int ravl_node_rank_difference_parent (struct ravl_node *p, struct ravl_node *n) at core/ravl.c:275>:
                                                                                        ravl_node_rank() <int ravl_node_rank (struct ravl_node *n) at core/ravl.c:261>:
                                                                            ravl_node_promote() <void ravl_node_promote (struct ravl_node *n) at core/ravl.c:315>
                                                                            ravl_node_sibling() <struct ravl_node *ravl_node_sibling (struct ravl_node *n) at core/ravl.c:209>:
                                                                                ravl_node_slot_type() <enum ravl_slot_type ravl_node_slot_type (struct ravl_node *n) at core/ravl.c:196>:
                                                                            ravl_node_rank_difference() <int ravl_node_rank_difference (struct ravl_node *n) at core/ravl.c:287>:
                                                                                ravl_node_rank_difference_parent() <int ravl_node_rank_difference_parent (struct ravl_node *p, struct ravl_node *n) at core/ravl.c:275>:
                                                                                    ravl_node_rank() <int ravl_node_rank (struct ravl_node *n) at core/ravl.c:261>:
                                                                            ravl_node_rank_difference_parent() <int ravl_node_rank_difference_parent (struct ravl_node *p, struct ravl_node *n) at core/ravl.c:275>:
                                                                                ravl_node_rank() <int ravl_node_rank (struct ravl_node *n) at core/ravl.c:261>:
                                                                            ravl_slot_opposite() <enum ravl_slot_type ravl_slot_opposite (enum ravl_slot_type t) at core/ravl.c:184>:
                                                                                ASSERTne()
                                                                            ravl_node_slot_type() <enum ravl_slot_type ravl_node_slot_type (struct ravl_node *n) at core/ravl.c:196>:
                                                                            ravl_rotate() <void ravl_rotate (struct ravl *ravl, struct ravl_node *n) at core/ravl.c:237>:
                                                                                ASSERTne()
                                                                                ravl_node_ref() <struct ravl_node **ravl_node_ref (struct ravl *ravl, struct ravl_node *n) at core/ravl.c:223>:
                                                                                    ravl_node_slot_type() <enum ravl_slot_type ravl_node_slot_type (struct ravl_node *n) at core/ravl.c:196>:
                                                                                ravl_node_slot_type() <enum ravl_slot_type ravl_node_slot_type (struct ravl_node *n) at core/ravl.c:196>:
                                                                                ravl_slot_opposite() <enum ravl_slot_type ravl_slot_opposite (enum ravl_slot_type t) at core/ravl.c:184>:
                                                                                    ASSERTne()
                                                                            ravl_node_demote() <void ravl_node_demote (struct ravl_node *n) at core/ravl.c:324>:
                                                                                ASSERT()
                                                                        Free() <Free_func Free at core/alloc.c:91>
                                                                    ravl_node_copy_constructor() <void ravl_node_copy_constructor (void *data, size_t data_size, const void *arg) at core/ravl.c:152>:
                                                                        memcpy()
                                                                VEC_CLEAR()
                                                                util_mutex_unlock()
                                                            VEC_SIZE()
                                                            heap_bucket_acquire() <struct bucket *heap_bucket_acquire (struct palloc_heap *heap, uint8_t class_id, uint16_t arena_id) at libpmemobj/heap.c:470>:
                                                                out() <void out (const char *fmt, ...) at core/out.c:480>:
                                                                    va_start()
                                                                    out_common() <} void out_common (const char *file, int line, const char *func, int level, const char *suffix, const char *fmt, va_list ap) at core/out.c:334>
                                                                    va_end()
                                                                heap_thread_arena() <struct arena *heap_thread_arena (struct palloc_heap *heap) at libpmemobj/heap.c:414>:
                                                                    os_tls_get() <void *os_tls_get (os_tls_key_t key) at core/os_thread_posix.c:62>:
                                                                        pthread_getspecific()
                                                                    heap_thread_arena_assign() <struct arena *heap_thread_arena_assign (struct palloc_heap *heap) at libpmemobj/heap.c:381>:
                                                                        util_mutex_lock()
                                                                        ASSERTne()
                                                                        VEC_SIZE()
                                                                        VEC_FOREACH()
                                                                        LOG()
                                                                        heap_arena_thread_attach() <void heap_arena_thread_attach (struct palloc_heap *heap, struct arena *a) at libpmemobj/heap.c:249>:
                                                                            ASSERTeq()
                                                                            os_tls_get() <void *os_tls_get (os_tls_key_t key) at core/os_thread_posix.c:62>:
                                                                                pthread_getspecific()
                                                                            heap_arena_thread_detach() <void heap_arena_thread_detach (struct arena *a) at libpmemobj/heap.c:232>:
                                                                                util_fetch_and_sub64()
                                                                            ASSERTne()
                                                                            util_fetch_and_add64()
                                                                            os_tls_set() <int os_tls_set (os_tls_key_t key, const void *value) at core/os_thread_posix.c:53>:
                                                                                pthread_setspecific()
                                                                        util_mutex_unlock()
                                                                    heap_global_arena_assign() <struct arena *heap_global_arena_assign (struct palloc_heap *heap) at libpmemobj/heap.c:348>:
                                                                        util_mutex_lock()
                                                                        ASSERTne()
                                                                        VEC_SIZE()
                                                                        VEC_FOREACH()
                                                                        LOG()
                                                                        util_mutex_unlock()
                                                                    ASSERT()
                                                                    ASSERTne()
                                                                ASSERTne()
                                                                VEC_ARR()
                                                                bucket_acquire() <struct bucket *bucket_acquire (struct bucket_locked *b) at libpmemobj/bucket.c:117>:
                                                                    util_mutex_lock()
                                                            ASSERT()
                                                            VEC_FOREACH_BY_PTR()
                                                            heap_run_into_free_chunk() <void heap_run_into_free_chunk (struct palloc_heap *heap, struct bucket *bucket, struct memory_block *m) at libpmemobj/heap.c:697>:
                                                                heap_get_chunk_hdr()
                                                                STATS_SUB()
                                                                util_mutex_lock()
                                                                memblock_huge_init() <struct memory_block memblock_huge_init (struct palloc_heap *heap, uint32_t chunk_id, uint32_t zone_id, uint32_t size_idx) at libpmemobj/memblock.c:1329>:
                                                                    heap_get_chunk_hdr()
                                                                    VALGRIND_DO_MAKE_MEM_UNDEFINED()
                                                                    VALGRIND_ANNOTATE_NEW_MEMORY()
                                                                    chunk_get_chunk_hdr_value() <uint64_t chunk_get_chunk_hdr_value (uint16_t type, uint16_t flags, uint32_t size_idx) at libpmemobj/memblock.c:604>:
                                                                        COMPILE_ERROR_ON()
                                                                        memcpy()
                                                                    util_atomic_store_explicit64()
                                                                    pmemops_persist()
                                                                    huge_write_footer() <void huge_write_footer (struct chunk_header *hdr, uint32_t size_idx) at libpmemobj/memblock.c:1166>:
                                                                        VALGRIND_DO_MAKE_MEM_UNDEFINED()
                                                                        VALGRIND_SET_CLEAN()
                                                                    memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                                                        memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                                                            heap_get_chunk_hdr()
                                                                        memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                                                            heap_get_chunk_hdr()
                                                                            FATAL()
                                                                heap_free_chunk_reuse() <int heap_free_chunk_reuse (struct palloc_heap *heap, struct bucket *bucket, struct memory_block *m) at libpmemobj/heap.c:674>:
                                                                    heap_coalesce_huge() <struct memory_block heap_coalesce_huge (struct palloc_heap *heap, struct bucket *b, const struct memory_block *m) at libpmemobj/heap.c:650>:
                                                                        heap_get_adjacent_free_block() <int heap_get_adjacent_free_block (struct palloc_heap *heap, const struct memory_block *in, struct memory_block *out, int prev) at libpmemobj/heap.c:582>:
                                                                            ZID_TO_ZONE()
                                                                            memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                                                                memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                                                                    heap_get_chunk_hdr()
                                                                                memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                                                                    heap_get_chunk_hdr()
                                                                                    FATAL()
                                                                        bucket_remove_block() <int bucket_remove_block (struct bucket *b, const struct memory_block *m) at libpmemobj/bucket.c:178>
                                                                        heap_coalesce() <struct memory_block heap_coalesce (struct palloc_heap *heap, const struct memory_block *blocks[], int n) at libpmemobj/heap.c:621>:
                                                                            ASSERTne()
                                                                            memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                                                                memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                                                                    heap_get_chunk_hdr()
                                                                                memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                                                                    heap_get_chunk_hdr()
                                                                                    FATAL()
                                                                    bucket_insert_block() <int bucket_insert_block (struct bucket *b, const struct memory_block *m) at libpmemobj/bucket.c:161>:
                                                                        VALGRIND_DO_MAKE_MEM_NOACCESS()
                                                                        VALGRIND_ANNOTATE_NEW_MEMORY()
                                                                util_mutex_unlock()
                                                            heap_bucket_release() <void heap_bucket_release (struct bucket *b) at libpmemobj/heap.c:498>:
                                                                bucket_release() <void bucket_release (struct bucket *b) at libpmemobj/bucket.c:127>:
                                                                    util_mutex_unlock()
                                                            VEC_DELETE()
                                                    out() <void out (const char *fmt, ...) at core/out.c:480>:
                                                        va_start()
                                                        out_common() <} void out_common (const char *file, int line, const char *func, int level, const char *suffix, const char *fmt, va_list ap) at core/out.c:334>
                                                        va_end()
                                                    heap_bucket_acquire() <struct bucket *heap_bucket_acquire (struct palloc_heap *heap, uint8_t class_id, uint16_t arena_id) at libpmemobj/heap.c:470>:
                                                        out() <void out (const char *fmt, ...) at core/out.c:480>:
                                                            va_start()
                                                            out_common() <} void out_common (const char *file, int line, const char *func, int level, const char *suffix, const char *fmt, va_list ap) at core/out.c:334>
                                                            va_end()
                                                        heap_thread_arena() <struct arena *heap_thread_arena (struct palloc_heap *heap) at libpmemobj/heap.c:414>:
                                                            os_tls_get() <void *os_tls_get (os_tls_key_t key) at core/os_thread_posix.c:62>:
                                                                pthread_getspecific()
                                                            heap_thread_arena_assign() <struct arena *heap_thread_arena_assign (struct palloc_heap *heap) at libpmemobj/heap.c:381>:
                                                                util_mutex_lock()
                                                                ASSERTne()
                                                                VEC_SIZE()
                                                                VEC_FOREACH()
                                                                LOG()
                                                                heap_arena_thread_attach() <void heap_arena_thread_attach (struct palloc_heap *heap, struct arena *a) at libpmemobj/heap.c:249>:
                                                                    ASSERTeq()
                                                                    os_tls_get() <void *os_tls_get (os_tls_key_t key) at core/os_thread_posix.c:62>:
                                                                        pthread_getspecific()
                                                                    heap_arena_thread_detach() <void heap_arena_thread_detach (struct arena *a) at libpmemobj/heap.c:232>:
                                                                        util_fetch_and_sub64()
                                                                    ASSERTne()
                                                                    util_fetch_and_add64()
                                                                    os_tls_set() <int os_tls_set (os_tls_key_t key, const void *value) at core/os_thread_posix.c:53>:
                                                                        pthread_setspecific()
                                                                util_mutex_unlock()
                                                            heap_global_arena_assign() <struct arena *heap_global_arena_assign (struct palloc_heap *heap) at libpmemobj/heap.c:348>:
                                                                util_mutex_lock()
                                                                ASSERTne()
                                                                VEC_SIZE()
                                                                VEC_FOREACH()
                                                                LOG()
                                                                util_mutex_unlock()
                                                            ASSERT()
                                                            ASSERTne()
                                                        ASSERTne()
                                                        VEC_ARR()
                                                        bucket_acquire() <struct bucket *bucket_acquire (struct bucket_locked *b) at libpmemobj/bucket.c:117>:
                                                            util_mutex_lock()
                                                    heap_populate_bucket() <int heap_populate_bucket (struct palloc_heap *heap, struct bucket *bucket) at libpmemobj/heap.c:850>:
                                                        util_atomic_store_explicit32()
                                                        ZID_TO_ZONE()
                                                        VALGRIND_ADD_TO_GLOBAL_TX_IGNORE()
                                                        heap_zone_init() <void heap_zone_init (struct palloc_heap *heap, uint32_t zone_id, uint32_t first_chunk_id) at libpmemobj/heap.c:559>:
                                                            ZID_TO_ZONE()
                                                            zone_calc_size_idx() <uint32_t zone_calc_size_idx (uint32_t zone_id, unsigned max_zone, size_t heap_size) at libpmemobj/heap.c:533>:
                                                                ASSERT()
                                                            ASSERT()
                                                            memblock_huge_init() <struct memory_block memblock_huge_init (struct palloc_heap *heap, uint32_t chunk_id, uint32_t zone_id, uint32_t size_idx) at libpmemobj/memblock.c:1329>:
                                                                heap_get_chunk_hdr()
                                                                VALGRIND_DO_MAKE_MEM_UNDEFINED()
                                                                VALGRIND_ANNOTATE_NEW_MEMORY()
                                                                chunk_get_chunk_hdr_value() <uint64_t chunk_get_chunk_hdr_value (uint16_t type, uint16_t flags, uint32_t size_idx) at libpmemobj/memblock.c:604>:
                                                                    COMPILE_ERROR_ON()
                                                                    memcpy()
                                                                util_atomic_store_explicit64()
                                                                pmemops_persist()
                                                                huge_write_footer() <void huge_write_footer (struct chunk_header *hdr, uint32_t size_idx) at libpmemobj/memblock.c:1166>:
                                                                    VALGRIND_DO_MAKE_MEM_UNDEFINED()
                                                                    VALGRIND_SET_CLEAN()
                                                                memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                                                    memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                                                        heap_get_chunk_hdr()
                                                                    memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                                                        heap_get_chunk_hdr()
                                                                        FATAL()
                                                            pmemops_persist()
                                                        heap_reclaim_zone_garbage() <void heap_reclaim_zone_garbage (struct palloc_heap *heap, struct bucket *bucket, uint32_t zone_id) at libpmemobj/heap.c:775>:
                                                            ZID_TO_ZONE()
                                                            ASSERT()
                                                            memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                                                memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                                                    heap_get_chunk_hdr()
                                                                memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                                                    heap_get_chunk_hdr()
                                                                    FATAL()
                                                            heap_reclaim_run() <int heap_reclaim_run (struct palloc_heap *heap, struct memory_block *m, int startup) at libpmemobj/heap.c:733>:
                                                                heap_get_chunk_run()
                                                                heap_get_chunk_hdr()
                                                                alloc_class_by_run() <struct alloc_class *alloc_class_by_run (struct alloc_class_collection *ac, size_t unit_size, uint16_t flags, uint32_t size_idx) at libpmemobj/alloc_class.c:594>:
                                                                    SIZE_TO_CLASS_MAP_INDEX()
                                                                    ASSERT()
                                                                    critnib_get() <void *critnib_get (struct critnib *c, uint64_t key) at libpmemobj/critnib.c:515>:
                                                                        load() <void load (void *src, void *dst) at libpmemobj/critnib.c:130>:
                                                                            util_atomic_load_explicit64()
                                                                        is_leaf() <inline bool is_leaf (struct critnib_node *n) at libpmemobj/critnib.c:150>:
                                                                        slice_index() <inline unsigned slice_index (uint64_t key, sh_t shift) at libpmemobj/critnib.c:178>:
                                                                        to_leaf() <inline struct critnib_leaf *to_leaf (struct critnib_node *n) at libpmemobj/critnib.c:159>:
                                                                    RUN_CLASS_KEY_PACK()
                                                                recycler_element_new() <struct recycler_element recycler_element_new (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/recycler.c:122>:
                                                                    SUPPRESS_UNUSED()
                                                                    util_mutex_lock()
                                                                    util_mutex_unlock()
                                                                ASSERTeq()
                                                                STATS_INC()
                                                                heap_get_recycler() <struct recycler *heap_get_recycler (struct palloc_heap *heap, size_t id, size_t nallocs) at libpmemobj/heap.c:106> (R):
                                                                    util_atomic_load_explicit64()
                                                                    recycler_new() <struct recycler *recycler_new (struct palloc_heap *heap, size_t nallocs, size_t *peak_arenas) at libpmemobj/recycler.c:74>:
                                                                        Malloc()
                                                                        ravl_new_sized() <struct ravl *ravl_new_sized (ravl_compare *compare, size_t data_size) at core/ravl.c:45>:
                                                                            Malloc()
                                                                            ERR()
                                                                        recycler_element_cmp() <int recycler_element_cmp (const void *lhs, const void *rhs) at libpmemobj/recycler.c:23>:
                                                                        memset()
                                                                        VEC_INIT()
                                                                        util_mutex_init()
                                                                        Free() <Free_func Free at core/alloc.c:91>
                                                                    util_bool_compare_and_swap64()
                                                                    recycler_delete() <void recycler_delete (struct recycler *r) at libpmemobj/recycler.c:107>:
                                                                        VEC_DELETE()
                                                                        util_mutex_destroy()
                                                                        ravl_delete() <void ravl_delete (struct ravl *ravl) at core/ravl.c:112>:
                                                                            ravl_delete_cb() <void ravl_delete_cb (struct ravl *ravl, ravl_cb cb, void *arg) at core/ravl.c:102>:
                                                                                ravl_foreach_node() <void ravl_foreach_node (struct ravl_node *n, ravl_cb cb, void *arg, int free_node) at core/ravl.c:74> (R):
                                                                                    ravl_foreach_node() <void ravl_foreach_node (struct ravl_node *n, ravl_cb cb, void *arg, int free_node) at core/ravl.c:74> (recursive: see 19673)
                                                                                    Free() <Free_func Free at core/alloc.c:91>
                                                                                Free() <Free_func Free at core/alloc.c:91>
                                                                        Free() <Free_func Free at core/alloc.c:91>
                                                                    heap_get_recycler() <struct recycler *heap_get_recycler (struct palloc_heap *heap, size_t id, size_t nallocs) at libpmemobj/heap.c:106> (recursive: see 19655)
                                                                recycler_put() <int recycler_put (struct recycler *r, struct recycler_element element) at libpmemobj/recycler.c:154>:
                                                                    util_mutex_lock()
                                                                    ravl_emplace_copy() <int ravl_emplace_copy (struct ravl *ravl, const void *data) at core/ravl.c:384>:
                                                                        ravl_emplace() <int ravl_emplace (struct ravl *ravl, ravl_constr constr, const void *arg) at core/ravl.c:393>:
                                                                            LOG()
                                                                            ravl_new_node() <struct ravl_node *ravl_new_node (struct ravl *ravl, ravl_constr constr, const void *arg) at core/ravl.c:161>:
                                                                                Malloc()
                                                                                ERR()
                                                                                ravl_node_insert_constructor() <void ravl_node_insert_constructor (void *data, size_t data_size, const void *arg) at core/ravl.c:139>:
                                                                                    SUPPRESS_UNUSED()
                                                                                    memcpy()
                                                                            ravl_data() <void *ravl_data (struct ravl_node *node) at core/ravl.c:571>:
                                                                                memcpy()
                                                                            ravl_balance() <void ravl_balance (struct ravl *ravl, struct ravl_node *n) at core/ravl.c:337>:
                                                                                ravl_node_is() <int ravl_node_is (struct ravl_node *n, int i, int j) at core/ravl.c:306>:
                                                                                    ravl_node_is_i_j() <int ravl_node_is_i_j (struct ravl_node *n, int i, int j) at core/ravl.c:296>:
                                                                                        ravl_node_rank_difference_parent() <int ravl_node_rank_difference_parent (struct ravl_node *p, struct ravl_node *n) at core/ravl.c:275>:
                                                                                            ravl_node_rank() <int ravl_node_rank (struct ravl_node *n) at core/ravl.c:261>:
                                                                                ravl_node_promote() <void ravl_node_promote (struct ravl_node *n) at core/ravl.c:315>
                                                                                ravl_node_sibling() <struct ravl_node *ravl_node_sibling (struct ravl_node *n) at core/ravl.c:209>:
                                                                                    ravl_node_slot_type() <enum ravl_slot_type ravl_node_slot_type (struct ravl_node *n) at core/ravl.c:196>:
                                                                                ravl_node_rank_difference() <int ravl_node_rank_difference (struct ravl_node *n) at core/ravl.c:287>:
                                                                                    ravl_node_rank_difference_parent() <int ravl_node_rank_difference_parent (struct ravl_node *p, struct ravl_node *n) at core/ravl.c:275>:
                                                                                        ravl_node_rank() <int ravl_node_rank (struct ravl_node *n) at core/ravl.c:261>:
                                                                                ravl_node_rank_difference_parent() <int ravl_node_rank_difference_parent (struct ravl_node *p, struct ravl_node *n) at core/ravl.c:275>:
                                                                                    ravl_node_rank() <int ravl_node_rank (struct ravl_node *n) at core/ravl.c:261>:
                                                                                ravl_slot_opposite() <enum ravl_slot_type ravl_slot_opposite (enum ravl_slot_type t) at core/ravl.c:184>:
                                                                                    ASSERTne()
                                                                                ravl_node_slot_type() <enum ravl_slot_type ravl_node_slot_type (struct ravl_node *n) at core/ravl.c:196>:
                                                                                ravl_rotate() <void ravl_rotate (struct ravl *ravl, struct ravl_node *n) at core/ravl.c:237>:
                                                                                    ASSERTne()
                                                                                    ravl_node_ref() <struct ravl_node **ravl_node_ref (struct ravl *ravl, struct ravl_node *n) at core/ravl.c:223>:
                                                                                        ravl_node_slot_type() <enum ravl_slot_type ravl_node_slot_type (struct ravl_node *n) at core/ravl.c:196>:
                                                                                    ravl_node_slot_type() <enum ravl_slot_type ravl_node_slot_type (struct ravl_node *n) at core/ravl.c:196>:
                                                                                    ravl_slot_opposite() <enum ravl_slot_type ravl_slot_opposite (enum ravl_slot_type t) at core/ravl.c:184>:
                                                                                        ASSERTne()
                                                                                ravl_node_demote() <void ravl_node_demote (struct ravl_node *n) at core/ravl.c:324>:
                                                                                    ASSERT()
                                                                            Free() <Free_func Free at core/alloc.c:91>
                                                                        ravl_node_copy_constructor() <void ravl_node_copy_constructor (void *data, size_t data_size, const void *arg) at core/ravl.c:152>:
                                                                            memcpy()
                                                                    util_mutex_unlock()
                                                                ERR()
                                                            heap_run_into_free_chunk() <void heap_run_into_free_chunk (struct palloc_heap *heap, struct bucket *bucket, struct memory_block *m) at libpmemobj/heap.c:697>:
                                                                heap_get_chunk_hdr()
                                                                STATS_SUB()
                                                                util_mutex_lock()
                                                                memblock_huge_init() <struct memory_block memblock_huge_init (struct palloc_heap *heap, uint32_t chunk_id, uint32_t zone_id, uint32_t size_idx) at libpmemobj/memblock.c:1329>:
                                                                    heap_get_chunk_hdr()
                                                                    VALGRIND_DO_MAKE_MEM_UNDEFINED()
                                                                    VALGRIND_ANNOTATE_NEW_MEMORY()
                                                                    chunk_get_chunk_hdr_value() <uint64_t chunk_get_chunk_hdr_value (uint16_t type, uint16_t flags, uint32_t size_idx) at libpmemobj/memblock.c:604>:
                                                                        COMPILE_ERROR_ON()
                                                                        memcpy()
                                                                    util_atomic_store_explicit64()
                                                                    pmemops_persist()
                                                                    huge_write_footer() <void huge_write_footer (struct chunk_header *hdr, uint32_t size_idx) at libpmemobj/memblock.c:1166>:
                                                                        VALGRIND_DO_MAKE_MEM_UNDEFINED()
                                                                        VALGRIND_SET_CLEAN()
                                                                    memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                                                        memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                                                            heap_get_chunk_hdr()
                                                                        memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                                                            heap_get_chunk_hdr()
                                                                            FATAL()
                                                                heap_free_chunk_reuse() <int heap_free_chunk_reuse (struct palloc_heap *heap, struct bucket *bucket, struct memory_block *m) at libpmemobj/heap.c:674>:
                                                                    heap_coalesce_huge() <struct memory_block heap_coalesce_huge (struct palloc_heap *heap, struct bucket *b, const struct memory_block *m) at libpmemobj/heap.c:650>:
                                                                        heap_get_adjacent_free_block() <int heap_get_adjacent_free_block (struct palloc_heap *heap, const struct memory_block *in, struct memory_block *out, int prev) at libpmemobj/heap.c:582>:
                                                                            ZID_TO_ZONE()
                                                                            memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                                                                memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                                                                    heap_get_chunk_hdr()
                                                                                memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                                                                    heap_get_chunk_hdr()
                                                                                    FATAL()
                                                                        bucket_remove_block() <int bucket_remove_block (struct bucket *b, const struct memory_block *m) at libpmemobj/bucket.c:178>
                                                                        heap_coalesce() <struct memory_block heap_coalesce (struct palloc_heap *heap, const struct memory_block *blocks[], int n) at libpmemobj/heap.c:621>:
                                                                            ASSERTne()
                                                                            memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                                                                memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                                                                    heap_get_chunk_hdr()
                                                                                memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                                                                    heap_get_chunk_hdr()
                                                                                    FATAL()
                                                                    bucket_insert_block() <int bucket_insert_block (struct bucket *b, const struct memory_block *m) at libpmemobj/bucket.c:161>:
                                                                        VALGRIND_DO_MAKE_MEM_NOACCESS()
                                                                        VALGRIND_ANNOTATE_NEW_MEMORY()
                                                                util_mutex_unlock()
                                                            heap_free_chunk_reuse() <int heap_free_chunk_reuse (struct palloc_heap *heap, struct bucket *bucket, struct memory_block *m) at libpmemobj/heap.c:674>:
                                                                heap_coalesce_huge() <struct memory_block heap_coalesce_huge (struct palloc_heap *heap, struct bucket *b, const struct memory_block *m) at libpmemobj/heap.c:650>:
                                                                    heap_get_adjacent_free_block() <int heap_get_adjacent_free_block (struct palloc_heap *heap, const struct memory_block *in, struct memory_block *out, int prev) at libpmemobj/heap.c:582>:
                                                                        ZID_TO_ZONE()
                                                                        memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                                                            memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                                                                heap_get_chunk_hdr()
                                                                            memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                                                                heap_get_chunk_hdr()
                                                                                FATAL()
                                                                    bucket_remove_block() <int bucket_remove_block (struct bucket *b, const struct memory_block *m) at libpmemobj/bucket.c:178>
                                                                    heap_coalesce() <struct memory_block heap_coalesce (struct palloc_heap *heap, const struct memory_block *blocks[], int n) at libpmemobj/heap.c:621>:
                                                                        ASSERTne()
                                                                        memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                                                            memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                                                                heap_get_chunk_hdr()
                                                                            memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                                                                heap_get_chunk_hdr()
                                                                                FATAL()
                                                                bucket_insert_block() <int bucket_insert_block (struct bucket *b, const struct memory_block *m) at libpmemobj/bucket.c:161>:
                                                                    VALGRIND_DO_MAKE_MEM_NOACCESS()
                                                                    VALGRIND_ANNOTATE_NEW_MEMORY()
                                                    heap_bucket_release() <void heap_bucket_release (struct bucket *b) at libpmemobj/heap.c:498>:
                                                        bucket_release() <void bucket_release (struct bucket *b) at libpmemobj/bucket.c:127>:
                                                            util_mutex_unlock()
                                                    heap_get_bestfit_block() <int heap_get_bestfit_block (struct palloc_heap *heap, struct bucket *b, struct memory_block *m) at libpmemobj/heap.c:1210> (recursive: see 18388)
                                                    heap_run_create() <int heap_run_create (struct palloc_heap *heap, struct bucket *b, struct memory_block *m) at libpmemobj/heap.c:1065>:
                                                        bucket_alloc_class() <struct alloc_class *bucket_alloc_class (struct bucket *b) at libpmemobj/bucket.c:152>
                                                        memblock_run_init() <struct memory_block memblock_run_init (struct palloc_heap *heap, uint32_t chunk_id, uint32_t zone_id, struct run_descriptor *rdsc) at libpmemobj/memblock.c:1361>:
                                                            ASSERTne()
                                                            ZID_TO_ZONE()
                                                            heap_get_chunk_run()
                                                            SIZEOF_RUN()
                                                            VALGRIND_DO_MAKE_MEM_UNDEFINED()
                                                            VALGRIND_ADD_TO_TX()
                                                            memset()
                                                            VALGRIND_REMOVE_FROM_TX()
                                                            pmemops_flush()
                                                            VALGRIND_ANNOTATE_NEW_MEMORY()
                                                            pmemops_persist()
                                                            ASSERT()
                                                            chunk_get_chunk_hdr_value() <uint64_t chunk_get_chunk_hdr_value (uint16_t type, uint16_t flags, uint32_t size_idx) at libpmemobj/memblock.c:604>:
                                                                COMPILE_ERROR_ON()
                                                                memcpy()
                                                            util_atomic_store_explicit64()
                                                            memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                                                memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                                                    heap_get_chunk_hdr()
                                                                memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                                                    heap_get_chunk_hdr()
                                                                    FATAL()
                                                        bucket_attach_run() <int bucket_attach_run (struct bucket *b, const struct memory_block *m) at libpmemobj/bucket.c:206>:
                                                            util_mutex_lock()
                                                            bucket_memblock_insert_block() <int bucket_memblock_insert_block (const struct memory_block *m, void *b) at libpmemobj/bucket.c:197>:
                                                                bucket_insert_block() <int bucket_insert_block (struct bucket *b, const struct memory_block *m) at libpmemobj/bucket.c:161>:
                                                                    VALGRIND_DO_MAKE_MEM_NOACCESS()
                                                                    VALGRIND_ANNOTATE_NEW_MEMORY()
                                                            util_mutex_unlock()
                                                            util_fetch_and_add64()
                                                        STATS_INC()
                                                ASSERT()
                                                heap_split_block() <void heap_split_block (struct palloc_heap *heap, struct bucket *b, struct memory_block *m, uint32_t units) at libpmemobj/heap.c:1172>:
                                                    bucket_alloc_class() <struct alloc_class *bucket_alloc_class (struct bucket *b) at libpmemobj/bucket.c:152>
                                                    ASSERT()
                                                    memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                                        memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                                            heap_get_chunk_hdr()
                                                        memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                                            heap_get_chunk_hdr()
                                                            FATAL()
                                                    bucket_insert_block() <int bucket_insert_block (struct bucket *b, const struct memory_block *m) at libpmemobj/bucket.c:161>:
                                                        VALGRIND_DO_MAKE_MEM_NOACCESS()
                                                        VALGRIND_ANNOTATE_NEW_MEMORY()
                                                    LOG()
                                                    memblock_huge_init() <struct memory_block memblock_huge_init (struct palloc_heap *heap, uint32_t chunk_id, uint32_t zone_id, uint32_t size_idx) at libpmemobj/memblock.c:1329>:
                                                        heap_get_chunk_hdr()
                                                        VALGRIND_DO_MAKE_MEM_UNDEFINED()
                                                        VALGRIND_ANNOTATE_NEW_MEMORY()
                                                        chunk_get_chunk_hdr_value() <uint64_t chunk_get_chunk_hdr_value (uint16_t type, uint16_t flags, uint32_t size_idx) at libpmemobj/memblock.c:604>:
                                                            COMPILE_ERROR_ON()
                                                            memcpy()
                                                        util_atomic_store_explicit64()
                                                        pmemops_persist()
                                                        huge_write_footer() <void huge_write_footer (struct chunk_header *hdr, uint32_t size_idx) at libpmemobj/memblock.c:1166>:
                                                            VALGRIND_DO_MAKE_MEM_UNDEFINED()
                                                            VALGRIND_SET_CLEAN()
                                                        memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                                            memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                                                heap_get_chunk_hdr()
                                                            memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                                                heap_get_chunk_hdr()
                                                                FATAL()
                                            alloc_prep_block() <int alloc_prep_block (struct palloc_heap *heap, const struct memory_block *m, palloc_constr constructor, void *arg, uint64_t extra_field, uint16_t object_flags, struct pobj_action_internal *out) at libpmemobj/palloc.c:112>:
                                                VALGRIND_DO_MEMPOOL_ALLOC()
                                                VALGRIND_DO_MAKE_MEM_UNDEFINED()
                                                VALGRIND_ANNOTATE_NEW_MEMORY()
                                                unlikely()
                                                pmemops_memset()
                                                VALGRIND_DO_MEMPOOL_FREE()
                                                HEAP_PTR_TO_OFF()
                                            bucket_insert_block() <int bucket_insert_block (struct bucket *b, const struct memory_block *m) at libpmemobj/bucket.c:161>:
                                                VALGRIND_DO_MAKE_MEM_NOACCESS()
                                                VALGRIND_ANNOTATE_NEW_MEMORY()
                                            bucket_active_block() <struct memory_block_reserved *bucket_active_block (struct bucket *b) at libpmemobj/bucket.c:265>:
                                            util_fetch_and_add64()
                                            heap_bucket_release() <void heap_bucket_release (struct bucket *b) at libpmemobj/heap.c:498>:
                                                bucket_release() <void bucket_release (struct bucket *b) at libpmemobj/bucket.c:127>:
                                                    util_mutex_unlock()
                                        VALGRIND_ADD_TO_TX()
                                        HEAP_OFF_TO_PTR()
                                        pmemops_memcpy()
                                        VALGRIND_REMOVE_FROM_TX()
                                        operation_add_entry() <int operation_add_entry (struct operation_context *ctx, void *ptr, uint64_t value, ulog_operation_type type) at libpmemobj/memops.c:411>:
                                            OBJ_OFF_IS_VALID()
                                            operation_add_typed_entry() <int operation_add_typed_entry (struct operation_context *ctx, void *ptr, uint64_t value, ulog_operation_type type, enum operation_log_type log_type) at libpmemobj/memops.c:362>:
                                                Realloc()
                                                SIZEOF_ULOG()
                                                VECQ_CLEAR()
                                                operation_try_merge_entry() <int operation_try_merge_entry (struct operation_context *ctx, void *ptr, uint64_t value, ulog_operation_type type) at libpmemobj/memops.c:318>:
                                                    OBJ_PTR_TO_OFF()
                                                    VECQ_FOREACH_REVERSE()
                                                    ulog_entry_offset() <uint64_t ulog_entry_offset (const struct ulog_entry_base *entry) at libpmemobj/ulog.c:68>:
                                                    ulog_entry_type() <ulog_operation_type ulog_entry_type (const struct ulog_entry_base *entry) at libpmemobj/ulog.c:59>:
                                                        ULOG_OPERATION_FROM_OFFSET()
                                                    operation_merge() <inline void operation_merge (struct ulog_entry_base *entry, uint64_t value, ulog_operation_type type) at libpmemobj/memops.c:288>:
                                                        ASSERT()
                                                ulog_entry_val_create() <struct ulog_entry_val *ulog_entry_val_create (struct ulog *ulog, size_t offset, uint64_t *dest, uint64_t value, ulog_operation_type type, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:372>:
                                                    COMPILE_ERROR_ON()
                                                    ULOG_OPERATION()
                                                    pmemops_memcpy()
                                                operation_merge_entry_add() <void operation_merge_entry_add (struct operation_context *ctx, struct ulog_entry_val *entry) at libpmemobj/memops.c:344>:
                                                    VECQ_SIZE()
                                                    VECQ_DEQUEUE()
                                                    VECQ_ENQUEUE()
                                                    LOG()
                                                ulog_entry_size() <size_t ulog_entry_size (const struct ulog_entry_base *entry) at libpmemobj/ulog.c:77>:
                                                    ulog_entry_type() <ulog_operation_type ulog_entry_type (const struct ulog_entry_base *entry) at libpmemobj/ulog.c:59>:
                                                        ULOG_OPERATION_FROM_OFFSET()
                                                    CACHELINE_ALIGN()
                                                    ASSERT()
                                        palloc_exec_actions() <void palloc_exec_actions (struct palloc_heap *heap, struct operation_context *ctx, struct pobj_action_internal *actv, size_t actvcnt) at libpmemobj/palloc.c:526>:
                                            qsort()
                                            palloc_action_compare() <int palloc_action_compare (const void *lhs, const void *rhs) at libpmemobj/palloc.c:507>:
                                            ASSERTeq()
                                            util_mutex_lock()
                                            pmemops_drain()
                                            operation_process() <void operation_process (struct operation_context *ctx) at libpmemobj/memops.c:776>:
                                                ulog_entry_type() <ulog_operation_type ulog_entry_type (const struct ulog_entry_base *entry) at libpmemobj/ulog.c:59>:
                                                    ULOG_OPERATION_FROM_OFFSET()
                                                ulog_entry_apply() <void ulog_entry_apply (const struct ulog_entry_base *e, int persist, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:526>:
                                                    ulog_entry_type() <ulog_operation_type ulog_entry_type (const struct ulog_entry_base *entry) at libpmemobj/ulog.c:59>:
                                                        ULOG_OPERATION_FROM_OFFSET()
                                                    ulog_entry_offset() <uint64_t ulog_entry_offset (const struct ulog_entry_base *entry) at libpmemobj/ulog.c:68>:
                                                    f()
                                                    VALGRIND_ADD_TO_TX()
                                                    pmemops_memset()
                                                    pmemops_memcpy()
                                                    ASSERT()
                                                    VALGRIND_REMOVE_FROM_TX()
                                                operation_process_persistent_redo() <void operation_process_persistent_redo (struct operation_context *ctx) at libpmemobj/memops.c:654>:
                                                    ASSERTeq()
                                                    ulog_store() <void ulog_store (struct ulog *dest, struct ulog *src, size_t nbytes, size_t ulog_base_nbytes, size_t ulog_total_capacity, struct ulog_next *next, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:288>:
                                                        MIN()
                                                        CACHELINE_ALIGN()
                                                        ASSERT()
                                                        ulog_by_offset() <struct ulog *ulog_by_offset (size_t offset, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:36>:
                                                            CACHELINE_ALIGN()
                                                        VEC_ARR()
                                                        ASSERTne()
                                                        IS_CACHELINE_ALIGNED()
                                                        VALGRIND_ADD_TO_TX()
                                                        pmemops_memcpy()
                                                        VALGRIND_REMOVE_FROM_TX()
                                                        pmemops_drain()
                                                        VEC_SIZE()
                                                        VEC_FRONT()
                                                        ulog_checksum() <int ulog_checksum (struct ulog *ulog, size_t ulog_base_bytes, int insert) at libpmemobj/ulog.c:275>:
                                                            util_checksum() <int util_checksum (void *addr, size_t len, uint64_t *csump, int insert, size_t skip_off) at core/util.c:178>:
                                                                util_checksum_compute() <uint64_t util_checksum_compute (void *addr, size_t len, uint64_t *csump, size_t skip_off) at core/util.c:134>:
                                                                    abort()
                                                                    le32toh()
                                                                htole64()
                                                            SIZEOF_ULOG()
                                                        SIZEOF_ULOG()
                                                    ulog_process() <void ulog_process (struct ulog *ulog, ulog_check_offset_fn check, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:786>:
                                                        SUPPRESS_UNUSED()
                                                        LOG()
                                                        ulog_check() <int ulog_check (struct ulog *ulog, ulog_check_offset_fn check, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:881>:
                                                            LOG()
                                                            ulog_foreach_entry() <int ulog_foreach_entry (struct ulog *ulog, ulog_entry_cb cb, void *arg, const struct pmem_ops *ops) at libpmemobj/ulog.c:180>
                                                            ulog_check_entry() <int ulog_check_entry (struct ulog_entry_base *e, void *arg, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:862>:
                                                                ulog_entry_offset() <uint64_t ulog_entry_offset (const struct ulog_entry_base *entry) at libpmemobj/ulog.c:68>:
                                                                check()
                                                                LOG()
                                                        ulog_foreach_entry() <int ulog_foreach_entry (struct ulog *ulog, ulog_entry_cb cb, void *arg, const struct pmem_ops *ops) at libpmemobj/ulog.c:180>
                                                        ulog_process_entry() <int ulog_process_entry (struct ulog_entry_base *e, void *arg, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:591>:
                                                            SUPPRESS_UNUSED()
                                                            ulog_entry_apply() <void ulog_entry_apply (const struct ulog_entry_base *e, int persist, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:526>:
                                                                ulog_entry_type() <ulog_operation_type ulog_entry_type (const struct ulog_entry_base *entry) at libpmemobj/ulog.c:59>:
                                                                    ULOG_OPERATION_FROM_OFFSET()
                                                                ulog_entry_offset() <uint64_t ulog_entry_offset (const struct ulog_entry_base *entry) at libpmemobj/ulog.c:68>:
                                                                f()
                                                                VALGRIND_ADD_TO_TX()
                                                                pmemops_memset()
                                                                pmemops_memcpy()
                                                                ASSERT()
                                                                VALGRIND_REMOVE_FROM_TX()
                                                        pmemops_drain()
                                                    ulog_clobber() <void ulog_clobber (struct ulog *dest, struct ulog_next *next, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:694>:
                                                        memset()
                                                        VEC_SIZE()
                                                        VEC_FRONT()
                                                        pmemops_memcpy()
                                                operation_process_persistent_undo() <void operation_process_persistent_undo (struct operation_context *ctx) at libpmemobj/memops.c:673>:
                                                    ASSERTeq()
                                                    ulog_process() <void ulog_process (struct ulog *ulog, ulog_check_offset_fn check, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:786>:
                                                        SUPPRESS_UNUSED()
                                                        LOG()
                                                        ulog_check() <int ulog_check (struct ulog *ulog, ulog_check_offset_fn check, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:881>:
                                                            LOG()
                                                            ulog_foreach_entry() <int ulog_foreach_entry (struct ulog *ulog, ulog_entry_cb cb, void *arg, const struct pmem_ops *ops) at libpmemobj/ulog.c:180>
                                                            ulog_check_entry() <int ulog_check_entry (struct ulog_entry_base *e, void *arg, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:862>:
                                                                ulog_entry_offset() <uint64_t ulog_entry_offset (const struct ulog_entry_base *entry) at libpmemobj/ulog.c:68>:
                                                                check()
                                                                LOG()
                                                        ulog_foreach_entry() <int ulog_foreach_entry (struct ulog *ulog, ulog_entry_cb cb, void *arg, const struct pmem_ops *ops) at libpmemobj/ulog.c:180>
                                                        ulog_process_entry() <int ulog_process_entry (struct ulog_entry_base *e, void *arg, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:591>:
                                                            SUPPRESS_UNUSED()
                                                            ulog_entry_apply() <void ulog_entry_apply (const struct ulog_entry_base *e, int persist, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:526>:
                                                                ulog_entry_type() <ulog_operation_type ulog_entry_type (const struct ulog_entry_base *entry) at libpmemobj/ulog.c:59>:
                                                                    ULOG_OPERATION_FROM_OFFSET()
                                                                ulog_entry_offset() <uint64_t ulog_entry_offset (const struct ulog_entry_base *entry) at libpmemobj/ulog.c:68>:
                                                                f()
                                                                VALGRIND_ADD_TO_TX()
                                                                pmemops_memset()
                                                                pmemops_memcpy()
                                                                ASSERT()
                                                                VALGRIND_REMOVE_FROM_TX()
                                                        pmemops_drain()
                                                ulog_process() <void ulog_process (struct ulog *ulog, ulog_check_offset_fn check, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:786>:
                                                    SUPPRESS_UNUSED()
                                                    LOG()
                                                    ulog_check() <int ulog_check (struct ulog *ulog, ulog_check_offset_fn check, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:881>:
                                                        LOG()
                                                        ulog_foreach_entry() <int ulog_foreach_entry (struct ulog *ulog, ulog_entry_cb cb, void *arg, const struct pmem_ops *ops) at libpmemobj/ulog.c:180>
                                                        ulog_check_entry() <int ulog_check_entry (struct ulog_entry_base *e, void *arg, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:862>:
                                                            ulog_entry_offset() <uint64_t ulog_entry_offset (const struct ulog_entry_base *entry) at libpmemobj/ulog.c:68>:
                                                            check()
                                                            LOG()
                                                    ulog_foreach_entry() <int ulog_foreach_entry (struct ulog *ulog, ulog_entry_cb cb, void *arg, const struct pmem_ops *ops) at libpmemobj/ulog.c:180>
                                                    ulog_process_entry() <int ulog_process_entry (struct ulog_entry_base *e, void *arg, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:591>:
                                                        SUPPRESS_UNUSED()
                                                        ulog_entry_apply() <void ulog_entry_apply (const struct ulog_entry_base *e, int persist, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:526>:
                                                            ulog_entry_type() <ulog_operation_type ulog_entry_type (const struct ulog_entry_base *entry) at libpmemobj/ulog.c:59>:
                                                                ULOG_OPERATION_FROM_OFFSET()
                                                            ulog_entry_offset() <uint64_t ulog_entry_offset (const struct ulog_entry_base *entry) at libpmemobj/ulog.c:68>:
                                                            f()
                                                            VALGRIND_ADD_TO_TX()
                                                            pmemops_memset()
                                                            pmemops_memcpy()
                                                            ASSERT()
                                                            VALGRIND_REMOVE_FROM_TX()
                                                    pmemops_drain()
                                            util_mutex_unlock()
                                            operation_finish() <void operation_finish (struct operation_context *ctx, unsigned flags) at libpmemobj/memops.c:814>:
                                                ASSERTne()
                                                out() <void out (const char *fmt, ...) at core/out.c:480>:
                                                    va_start()
                                                    out_common() <} void out_common (const char *file, int line, const char *func, int level, const char *suffix, const char *fmt, va_list ap) at core/out.c:334>
                                                    va_end()
                                                ulog_clobber_data() <int ulog_clobber_data (struct ulog *ulog_first, struct ulog_next *next, ulog_free_fn ulog_free, ulog_rm_user_buffer_fn user_buff_remove, const struct pmem_ops *p_ops, unsigned flags) at libpmemobj/ulog.c:713>:
                                                    ASSERTne()
                                                    ulog_inc_gen_num() <void ulog_inc_gen_num (struct ulog *ulog, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:605>:
                                                        VALGRIND_ADD_TO_TX()
                                                        pmemops_persist()
                                                        VALGRIND_SET_CLEAN()
                                                        VALGRIND_REMOVE_FROM_TX()
                                                    VEC_SIZE()
                                                    VEC_GET()
                                                    ulog_by_offset() <struct ulog *ulog_by_offset (size_t offset, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:36>:
                                                        CACHELINE_ALIGN()
                                                    ulog_free_next() <int ulog_free_next (struct ulog *u, const struct pmem_ops *p_ops, ulog_free_fn ulog_free, ulog_rm_user_buffer_fn user_buff_remove, uint64_t flags) at libpmemobj/ulog.c:625>:
                                                        VEC()
                                                        VEC_INIT()
                                                        ulog_by_offset() <struct ulog *ulog_by_offset (size_t offset, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:36>:
                                                            CACHELINE_ALIGN()
                                                        pmemops_persist()
                                                        VEC_PUSH_BACK()
                                                        LOG()
                                                        out() <void out (const char *fmt, ...) at core/out.c:480>:
                                                            va_start()
                                                            out_common() <} void out_common (const char *file, int line, const char *func, int level, const char *suffix, const char *fmt, va_list ap) at core/out.c:334>
                                                            va_end()
                                                        VEC_FOREACH_REVERSE()
                                                        VEC_DELETE()
                                                operation_user_buffer_remove() <int operation_user_buffer_remove (void *base, void *addr) at libpmemobj/memops.c:242>:
                                                    util_mutex_lock()
                                                    ravl_find() <struct ravl_node *ravl_find (struct ravl *ravl, const void *data, enum ravl_predicate flags) at core/ravl.c:524>:
                                                        LOG()
                                                        ravl_data() <void *ravl_data (struct ravl_node *node) at core/ravl.c:571>:
                                                            memcpy()
                                                        ravl_predicate_holds() <int ravl_predicate_holds (int result, struct ravl_node **ret, struct ravl_node *n, enum ravl_predicate flags) at core/ravl.c:489>:
                                                            ravl_node_successor() <struct ravl_node *ravl_node_successor (struct ravl_node *n) at core/ravl.c:465>:
                                                                ravl_node_cessor() <struct ravl_node *ravl_node_cessor (struct ravl_node *n, enum ravl_slot_type t) at core/ravl.c:443>:
                                                                    ravl_node_type_most() <struct ravl_node *ravl_node_type_most (struct ravl_node *n, enum ravl_slot_type t) at core/ravl.c:430>:
                                                                    ravl_slot_opposite() <enum ravl_slot_type ravl_slot_opposite (enum ravl_slot_type t) at core/ravl.c:184>:
                                                                        ASSERTne()
                                                            ravl_node_predecessor() <struct ravl_node *ravl_node_predecessor (struct ravl_node *n) at core/ravl.c:476>:
                                                                ravl_node_cessor() <struct ravl_node *ravl_node_cessor (struct ravl_node *n, enum ravl_slot_type t) at core/ravl.c:443>:
                                                                    ravl_node_type_most() <struct ravl_node *ravl_node_type_most (struct ravl_node *n, enum ravl_slot_type t) at core/ravl.c:430>:
                                                                    ravl_slot_opposite() <enum ravl_slot_type ravl_slot_opposite (enum ravl_slot_type t) at core/ravl.c:184>:
                                                                        ASSERTne()
                                                    ASSERTne()
                                                    ravl_remove() <void ravl_remove (struct ravl *ravl, struct ravl_node *n) at core/ravl.c:545> (R):
                                                        LOG()
                                                        ravl_node_successor() <struct ravl_node *ravl_node_successor (struct ravl_node *n) at core/ravl.c:465>:
                                                            ravl_node_cessor() <struct ravl_node *ravl_node_cessor (struct ravl_node *n, enum ravl_slot_type t) at core/ravl.c:443>:
                                                                ravl_node_type_most() <struct ravl_node *ravl_node_type_most (struct ravl_node *n, enum ravl_slot_type t) at core/ravl.c:430>:
                                                                ravl_slot_opposite() <enum ravl_slot_type ravl_slot_opposite (enum ravl_slot_type t) at core/ravl.c:184>:
                                                                    ASSERTne()
                                                        memcpy()
                                                        ravl_remove() <void ravl_remove (struct ravl *ravl, struct ravl_node *n) at core/ravl.c:545> (recursive: see 20080)
                                                        ravl_node_ref() <struct ravl_node **ravl_node_ref (struct ravl *ravl, struct ravl_node *n) at core/ravl.c:223>:
                                                            ravl_node_slot_type() <enum ravl_slot_type ravl_node_slot_type (struct ravl_node *n) at core/ravl.c:196>:
                                                        Free() <Free_func Free at core/alloc.c:91>
                                                    util_mutex_unlock()
                                                ulog_free_next() <int ulog_free_next (struct ulog *u, const struct pmem_ops *p_ops, ulog_free_fn ulog_free, ulog_rm_user_buffer_fn user_buff_remove, uint64_t flags) at libpmemobj/ulog.c:625>:
                                                    VEC()
                                                    VEC_INIT()
                                                    ulog_by_offset() <struct ulog *ulog_by_offset (size_t offset, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:36>:
                                                        CACHELINE_ALIGN()
                                                    pmemops_persist()
                                                    VEC_PUSH_BACK()
                                                    LOG()
                                                    out() <void out (const char *fmt, ...) at core/out.c:480>:
                                                        va_start()
                                                        out_common() <} void out_common (const char *file, int line, const char *func, int level, const char *suffix, const char *fmt, va_list ap) at core/out.c:334>
                                                        va_end()
                                                    VEC_FOREACH_REVERSE()
                                                    VEC_DELETE()
                                                ulog_capacity() <size_t ulog_capacity (struct ulog *ulog, size_t ulog_base_bytes, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:206>:
                                                    ulog_next() <struct ulog *ulog_next (struct ulog *ulog, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:50>:
                                                        ulog_by_offset() <struct ulog *ulog_by_offset (size_t offset, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:36>:
                                                            CACHELINE_ALIGN()
                                                VEC_CLEAR()
                                                ulog_rebuild_next_vec() <void ulog_rebuild_next_vec (struct ulog *ulog, struct ulog_next *next, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:223>:
                                                    VEC_PUSH_BACK()
                                                    ulog_next() <struct ulog *ulog_next (struct ulog *ulog, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:50>:
                                                        ulog_by_offset() <struct ulog *ulog_by_offset (size_t offset, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:36>:
                                                            CACHELINE_ALIGN()
                                    pmalloc_operation_release() <void pmalloc_operation_release (PMEMobjpool *pop) at libpmemobj/pmalloc.c:83>:
                                        lane_release() <void lane_release (PMEMobjpool *pop) at libpmemobj/lane.c:546>:
                                            get_lane_info_record() <inline struct lane_info *get_lane_info_record (PMEMobjpool *pop) at libpmemobj/lane.c:466>:
                                                likely()
                                                unlikely()
                                                lane_info_ht_boot() <inline void lane_info_ht_boot (void) at libpmemobj/lane.c:74>:
                                                    lane_info_create() <inline void lane_info_create (void) at libpmemobj/lane.c:39>:
                                                        critnib_new() <struct critnib *critnib_new (void) at libpmemobj/critnib.c:187>:
                                                            Zalloc() <void *Zalloc (size_t sz) at core/alloc.c:98>:
                                                                Malloc()
                                                                memset()
                                                            util_mutex_init()
                                                            VALGRIND_HG_DRD_DISABLE_CHECKING()
                                                        FATAL()
                                                    os_tls_set() <int os_tls_set (os_tls_key_t key, const void *value) at core/os_thread_posix.c:53>:
                                                        pthread_setspecific()
                                                    FATAL()
                                                critnib_get() <void *critnib_get (struct critnib *c, uint64_t key) at libpmemobj/critnib.c:515>:
                                                    load() <void load (void *src, void *dst) at libpmemobj/critnib.c:130>:
                                                        util_atomic_load_explicit64()
                                                    is_leaf() <inline bool is_leaf (struct critnib_node *n) at libpmemobj/critnib.c:150>:
                                                    slice_index() <inline unsigned slice_index (uint64_t key, sh_t shift) at libpmemobj/critnib.c:178>:
                                                    to_leaf() <inline struct critnib_leaf *to_leaf (struct critnib_node *n) at libpmemobj/critnib.c:159>:
                                                Malloc()
                                                FATAL()
                                                critnib_insert() <int critnib_insert (struct critnib *c, uint64_t key, void *value) at libpmemobj/critnib.c:340>:
                                                    util_mutex_lock()
                                                    alloc_leaf() <struct critnib_leaf *alloc_leaf (struct critnib *__restrict c) at libpmemobj/critnib.c:311>:
                                                        Malloc()
                                                        ERR()
                                                        VALGRIND_ANNOTATE_NEW_MEMORY()
                                                    util_mutex_unlock()
                                                    VALGRIND_HG_DRD_DISABLE_CHECKING()
                                                    is_leaf() <inline bool is_leaf (struct critnib_node *n) at libpmemobj/critnib.c:150>:
                                                    path_mask() <inline uint64_t path_mask (sh_t shift) at libpmemobj/critnib.c:169>:
                                                    slice_index() <inline unsigned slice_index (uint64_t key, sh_t shift) at libpmemobj/critnib.c:178>:
                                                    store() <void store (void *dst, void *src) at libpmemobj/critnib.c:140>:
                                                        util_atomic_store_explicit64()
                                                    to_leaf() <inline struct critnib_leaf *to_leaf (struct critnib_node *n) at libpmemobj/critnib.c:159>:
                                                    ASSERT()
                                                    free_leaf() <void free_leaf (struct critnib *__restrict c, struct critnib_leaf *__restrict k) at libpmemobj/critnib.c:298>
                                                    util_mssb_index64()
                                                    alloc_node() <struct critnib_node *alloc_node (struct critnib *__restrict c) at libpmemobj/critnib.c:274>:
                                                        Malloc()
                                                        ERR()
                                                        VALGRIND_ANNOTATE_NEW_MEMORY()
                                            ASSERTne()
                                            unlikely()
                                            FATAL()
                                            util_bool_compare_and_swap64()
                                lane_ulog_constructor() <int lane_ulog_constructor (void *base, void *ptr, size_t usable_size, void *arg) at libpmemobj/lane.c:160>:
                                    ALIGN_DOWN()
                                    ulog_construct() <void ulog_construct (uint64_t offset, size_t capacity, uint64_t gen_num, int flush, uint64_t flags, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:136>:
                                        ulog_by_offset() <struct ulog *ulog_by_offset (size_t offset, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:36>:
                                            CACHELINE_ALIGN()
                                        ASSERTne()
                                        OBJ_PTR_TO_OFF()
                                        ALIGN_DOWN()
                                        VALGRIND_ADD_TO_TX()
                                        SIZEOF_ULOG()
                                        memset()
                                        CACHELINE_ALIGN()
                                        pmemops_xflush()
                                        pmemops_memset()
                                        VALGRIND_REMOVE_FROM_TX()
                                    OBJ_PTR_TO_OFF()
                            pfree() <void pfree (PMEMobjpool *pop, uint64_t *off) at libpmemobj/pmalloc.c:164>:
                                pmalloc_operation_hold_type() <struct operation_context *pmalloc_operation_hold_type (PMEMobjpool *pop, enum pmalloc_operation_type type, int start) at libpmemobj/pmalloc.c:45>:
                                    lane_hold() <unsigned lane_hold (PMEMobjpool *pop, struct lane **lanep) at libpmemobj/lane.c:510>:
                                        get_lane_info_record() <inline struct lane_info *get_lane_info_record (PMEMobjpool *pop) at libpmemobj/lane.c:466>:
                                            likely()
                                            unlikely()
                                            lane_info_ht_boot() <inline void lane_info_ht_boot (void) at libpmemobj/lane.c:74>:
                                                lane_info_create() <inline void lane_info_create (void) at libpmemobj/lane.c:39>:
                                                    critnib_new() <struct critnib *critnib_new (void) at libpmemobj/critnib.c:187>:
                                                        Zalloc() <void *Zalloc (size_t sz) at core/alloc.c:98>:
                                                            Malloc()
                                                            memset()
                                                        util_mutex_init()
                                                        VALGRIND_HG_DRD_DISABLE_CHECKING()
                                                    FATAL()
                                                os_tls_set() <int os_tls_set (os_tls_key_t key, const void *value) at core/os_thread_posix.c:53>:
                                                    pthread_setspecific()
                                                FATAL()
                                            critnib_get() <void *critnib_get (struct critnib *c, uint64_t key) at libpmemobj/critnib.c:515>:
                                                load() <void load (void *src, void *dst) at libpmemobj/critnib.c:130>:
                                                    util_atomic_load_explicit64()
                                                is_leaf() <inline bool is_leaf (struct critnib_node *n) at libpmemobj/critnib.c:150>:
                                                slice_index() <inline unsigned slice_index (uint64_t key, sh_t shift) at libpmemobj/critnib.c:178>:
                                                to_leaf() <inline struct critnib_leaf *to_leaf (struct critnib_node *n) at libpmemobj/critnib.c:159>:
                                            Malloc()
                                            FATAL()
                                            critnib_insert() <int critnib_insert (struct critnib *c, uint64_t key, void *value) at libpmemobj/critnib.c:340>:
                                                util_mutex_lock()
                                                alloc_leaf() <struct critnib_leaf *alloc_leaf (struct critnib *__restrict c) at libpmemobj/critnib.c:311>:
                                                    Malloc()
                                                    ERR()
                                                    VALGRIND_ANNOTATE_NEW_MEMORY()
                                                util_mutex_unlock()
                                                VALGRIND_HG_DRD_DISABLE_CHECKING()
                                                is_leaf() <inline bool is_leaf (struct critnib_node *n) at libpmemobj/critnib.c:150>:
                                                path_mask() <inline uint64_t path_mask (sh_t shift) at libpmemobj/critnib.c:169>:
                                                slice_index() <inline unsigned slice_index (uint64_t key, sh_t shift) at libpmemobj/critnib.c:178>:
                                                store() <void store (void *dst, void *src) at libpmemobj/critnib.c:140>:
                                                    util_atomic_store_explicit64()
                                                to_leaf() <inline struct critnib_leaf *to_leaf (struct critnib_node *n) at libpmemobj/critnib.c:159>:
                                                ASSERT()
                                                free_leaf() <void free_leaf (struct critnib *__restrict c, struct critnib_leaf *__restrict k) at libpmemobj/critnib.c:298>
                                                util_mssb_index64()
                                                alloc_node() <struct critnib_node *alloc_node (struct critnib *__restrict c) at libpmemobj/critnib.c:274>:
                                                    Malloc()
                                                    ERR()
                                                    VALGRIND_ANNOTATE_NEW_MEMORY()
                                        unlikely()
                                        util_fetch_and_add32()
                                        get_lane() <inline void get_lane (uint64_t *locks, struct lane_info *info, uint64_t nlocks) at libpmemobj/lane.c:430>:
                                            likely()
                                            util_bool_compare_and_swap64()
                                            sched_yield()
                                        VALGRIND_ANNOTATE_NEW_MEMORY()
                                        operation_init() <void operation_init (struct operation_context *ctx) at libpmemobj/memops.c:709>:
                                            VALGRIND_ANNOTATE_NEW_MEMORY()
                                            VECQ_REINIT()
                                    operation_start() <void operation_start (struct operation_context *ctx) at libpmemobj/memops.c:736>:
                                        operation_init() <void operation_init (struct operation_context *ctx) at libpmemobj/memops.c:709>:
                                            VALGRIND_ANNOTATE_NEW_MEMORY()
                                            VECQ_REINIT()
                                        ASSERTeq()
                                palloc_operation() <int palloc_operation (struct palloc_heap *heap, uint64_t off, uint64_t *dest_off, size_t size, palloc_constr constructor, void *arg, uint64_t extra_field, uint16_t object_flags, uint16_t class_id, uint16_t arena_id, struct operation_context *ctx) at libpmemobj/palloc.c:705>:
                                    palloc_defer_free_create() <void palloc_defer_free_create (struct palloc_heap *heap, uint64_t off, struct pobj_action_internal *out) at libpmemobj/palloc.c:610>:
                                        COMPILE_ERROR_ON()
                                        memblock_from_offset() <struct memory_block memblock_from_offset (struct palloc_heap *heap, uint64_t off) at libpmemobj/memblock.c:1532>:
                                            memblock_from_offset_opt() <struct memory_block memblock_from_offset_opt (struct palloc_heap *heap, uint64_t off, int size) at libpmemobj/memblock.c:1476>:
                                                HEAP_PTR_TO_OFF()
                                                heap_get_chunk_hdr()
                                                memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                                    heap_get_chunk_hdr()
                                                ASSERTeq()
                                                memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                                    heap_get_chunk_hdr()
                                                    FATAL()
                                                run_get_data_offset() <size_t run_get_data_offset (const struct memory_block *m) at libpmemobj/memblock.c:572>:
                                                    heap_get_chunk_run()
                                                    run_get_data_start() <char *run_get_data_start (const struct memory_block *m) at libpmemobj/memblock.c:544>:
                                                        heap_get_chunk_hdr()
                                                        heap_get_chunk_run()
                                                        run_get_bitmap() <void run_get_bitmap (const struct memory_block *m, struct run_bitmap *b) at libpmemobj/memblock.c:488>:
                                                            heap_get_chunk_run()
                                                            heap_get_chunk_hdr()
                                                            memblock_run_bitmap() <void memblock_run_bitmap (uint32_t *size_idx, uint16_t flags, uint64_t unit_size, uint64_t alignment, void *content, struct run_bitmap *b) at libpmemobj/memblock.c:410>:
                                                                ASSERTne()
                                                                RUN_CONTENT_SIZE_BYTES()
                                                                util_div_ceil()
                                                                ALIGN_UP()
                                                                memblock_run_default_nallocs() <unsigned memblock_run_default_nallocs (uint32_t *size_idx, uint16_t flags, uint64_t unit_size, uint64_t alignment) at libpmemobj/memblock.c:370>:
                                                                    SUPPRESS_UNUSED()
                                                                    RUN_DEFAULT_SIZE_BYTES()
                                                                    LOG()
                                                            ASSERTeq()
                                                        ALIGN_UP()
                                                heap_alloc_classes() <struct alloc_class_collection *heap_alloc_classes (struct palloc_heap *heap) at libpmemobj/heap.c:160>:
                                                alloc_class_by_run() <struct alloc_class *alloc_class_by_run (struct alloc_class_collection *ac, size_t unit_size, uint16_t flags, uint32_t size_idx) at libpmemobj/alloc_class.c:594>:
                                                    SIZE_TO_CLASS_MAP_INDEX()
                                                    ASSERT()
                                                    critnib_get() <void *critnib_get (struct critnib *c, uint64_t key) at libpmemobj/critnib.c:515>:
                                                        load() <void load (void *src, void *dst) at libpmemobj/critnib.c:130>:
                                                            util_atomic_load_explicit64()
                                                        is_leaf() <inline bool is_leaf (struct critnib_node *n) at libpmemobj/critnib.c:150>:
                                                        slice_index() <inline unsigned slice_index (uint64_t key, sh_t shift) at libpmemobj/critnib.c:178>:
                                                        to_leaf() <inline struct critnib_leaf *to_leaf (struct critnib_node *n) at libpmemobj/critnib.c:159>:
                                                    RUN_CLASS_KEY_PACK()
                                                CALC_SIZE_IDX()
                                        heap_ensure_zone_reclaimed() <void heap_ensure_zone_reclaimed (struct palloc_heap *heap, uint32_t zone_id) at libpmemobj/heap.c:816>:
                                            util_atomic_load_explicit32()
                                            heap_bucket_acquire() <struct bucket *heap_bucket_acquire (struct palloc_heap *heap, uint8_t class_id, uint16_t arena_id) at libpmemobj/heap.c:470>:
                                                out() <void out (const char *fmt, ...) at core/out.c:480>:
                                                    va_start()
                                                    out_common() <} void out_common (const char *file, int line, const char *func, int level, const char *suffix, const char *fmt, va_list ap) at core/out.c:334>
                                                    va_end()
                                                heap_thread_arena() <struct arena *heap_thread_arena (struct palloc_heap *heap) at libpmemobj/heap.c:414>:
                                                    os_tls_get() <void *os_tls_get (os_tls_key_t key) at core/os_thread_posix.c:62>:
                                                        pthread_getspecific()
                                                    heap_thread_arena_assign() <struct arena *heap_thread_arena_assign (struct palloc_heap *heap) at libpmemobj/heap.c:381>:
                                                        util_mutex_lock()
                                                        ASSERTne()
                                                        VEC_SIZE()
                                                        VEC_FOREACH()
                                                        LOG()
                                                        heap_arena_thread_attach() <void heap_arena_thread_attach (struct palloc_heap *heap, struct arena *a) at libpmemobj/heap.c:249>:
                                                            ASSERTeq()
                                                            os_tls_get() <void *os_tls_get (os_tls_key_t key) at core/os_thread_posix.c:62>:
                                                                pthread_getspecific()
                                                            heap_arena_thread_detach() <void heap_arena_thread_detach (struct arena *a) at libpmemobj/heap.c:232>:
                                                                util_fetch_and_sub64()
                                                            ASSERTne()
                                                            util_fetch_and_add64()
                                                            os_tls_set() <int os_tls_set (os_tls_key_t key, const void *value) at core/os_thread_posix.c:53>:
                                                                pthread_setspecific()
                                                        util_mutex_unlock()
                                                    heap_global_arena_assign() <struct arena *heap_global_arena_assign (struct palloc_heap *heap) at libpmemobj/heap.c:348>:
                                                        util_mutex_lock()
                                                        ASSERTne()
                                                        VEC_SIZE()
                                                        VEC_FOREACH()
                                                        LOG()
                                                        util_mutex_unlock()
                                                    ASSERT()
                                                    ASSERTne()
                                                ASSERTne()
                                                VEC_ARR()
                                                bucket_acquire() <struct bucket *bucket_acquire (struct bucket_locked *b) at libpmemobj/bucket.c:117>:
                                                    util_mutex_lock()
                                            ZID_TO_ZONE()
                                            ASSERTeq()
                                            out() <void out (const char *fmt, ...) at core/out.c:480>:
                                                va_start()
                                                out_common() <} void out_common (const char *file, int line, const char *func, int level, const char *suffix, const char *fmt, va_list ap) at core/out.c:334>
                                                va_end()
                                            util_atomic_store_explicit32()
                                            heap_reclaim_zone_garbage() <void heap_reclaim_zone_garbage (struct palloc_heap *heap, struct bucket *bucket, uint32_t zone_id) at libpmemobj/heap.c:775>:
                                                ZID_TO_ZONE()
                                                ASSERT()
                                                memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                                    memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                                        heap_get_chunk_hdr()
                                                    memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                                        heap_get_chunk_hdr()
                                                        FATAL()
                                                heap_reclaim_run() <int heap_reclaim_run (struct palloc_heap *heap, struct memory_block *m, int startup) at libpmemobj/heap.c:733>:
                                                    heap_get_chunk_run()
                                                    heap_get_chunk_hdr()
                                                    alloc_class_by_run() <struct alloc_class *alloc_class_by_run (struct alloc_class_collection *ac, size_t unit_size, uint16_t flags, uint32_t size_idx) at libpmemobj/alloc_class.c:594>:
                                                        SIZE_TO_CLASS_MAP_INDEX()
                                                        ASSERT()
                                                        critnib_get() <void *critnib_get (struct critnib *c, uint64_t key) at libpmemobj/critnib.c:515>:
                                                            load() <void load (void *src, void *dst) at libpmemobj/critnib.c:130>:
                                                                util_atomic_load_explicit64()
                                                            is_leaf() <inline bool is_leaf (struct critnib_node *n) at libpmemobj/critnib.c:150>:
                                                            slice_index() <inline unsigned slice_index (uint64_t key, sh_t shift) at libpmemobj/critnib.c:178>:
                                                            to_leaf() <inline struct critnib_leaf *to_leaf (struct critnib_node *n) at libpmemobj/critnib.c:159>:
                                                        RUN_CLASS_KEY_PACK()
                                                    recycler_element_new() <struct recycler_element recycler_element_new (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/recycler.c:122>:
                                                        SUPPRESS_UNUSED()
                                                        util_mutex_lock()
                                                        util_mutex_unlock()
                                                    ASSERTeq()
                                                    STATS_INC()
                                                    heap_get_recycler() <struct recycler *heap_get_recycler (struct palloc_heap *heap, size_t id, size_t nallocs) at libpmemobj/heap.c:106> (R):
                                                        util_atomic_load_explicit64()
                                                        recycler_new() <struct recycler *recycler_new (struct palloc_heap *heap, size_t nallocs, size_t *peak_arenas) at libpmemobj/recycler.c:74>:
                                                            Malloc()
                                                            ravl_new_sized() <struct ravl *ravl_new_sized (ravl_compare *compare, size_t data_size) at core/ravl.c:45>:
                                                                Malloc()
                                                                ERR()
                                                            recycler_element_cmp() <int recycler_element_cmp (const void *lhs, const void *rhs) at libpmemobj/recycler.c:23>:
                                                            memset()
                                                            VEC_INIT()
                                                            util_mutex_init()
                                                            Free() <Free_func Free at core/alloc.c:91>
                                                        util_bool_compare_and_swap64()
                                                        recycler_delete() <void recycler_delete (struct recycler *r) at libpmemobj/recycler.c:107>:
                                                            VEC_DELETE()
                                                            util_mutex_destroy()
                                                            ravl_delete() <void ravl_delete (struct ravl *ravl) at core/ravl.c:112>:
                                                                ravl_delete_cb() <void ravl_delete_cb (struct ravl *ravl, ravl_cb cb, void *arg) at core/ravl.c:102>:
                                                                    ravl_foreach_node() <void ravl_foreach_node (struct ravl_node *n, ravl_cb cb, void *arg, int free_node) at core/ravl.c:74> (R):
                                                                        ravl_foreach_node() <void ravl_foreach_node (struct ravl_node *n, ravl_cb cb, void *arg, int free_node) at core/ravl.c:74> (recursive: see 20382)
                                                                        Free() <Free_func Free at core/alloc.c:91>
                                                                    Free() <Free_func Free at core/alloc.c:91>
                                                            Free() <Free_func Free at core/alloc.c:91>
                                                        heap_get_recycler() <struct recycler *heap_get_recycler (struct palloc_heap *heap, size_t id, size_t nallocs) at libpmemobj/heap.c:106> (recursive: see 20364)
                                                    recycler_put() <int recycler_put (struct recycler *r, struct recycler_element element) at libpmemobj/recycler.c:154>:
                                                        util_mutex_lock()
                                                        ravl_emplace_copy() <int ravl_emplace_copy (struct ravl *ravl, const void *data) at core/ravl.c:384>:
                                                            ravl_emplace() <int ravl_emplace (struct ravl *ravl, ravl_constr constr, const void *arg) at core/ravl.c:393>:
                                                                LOG()
                                                                ravl_new_node() <struct ravl_node *ravl_new_node (struct ravl *ravl, ravl_constr constr, const void *arg) at core/ravl.c:161>:
                                                                    Malloc()
                                                                    ERR()
                                                                    ravl_node_insert_constructor() <void ravl_node_insert_constructor (void *data, size_t data_size, const void *arg) at core/ravl.c:139>:
                                                                        SUPPRESS_UNUSED()
                                                                        memcpy()
                                                                ravl_data() <void *ravl_data (struct ravl_node *node) at core/ravl.c:571>:
                                                                    memcpy()
                                                                ravl_balance() <void ravl_balance (struct ravl *ravl, struct ravl_node *n) at core/ravl.c:337>:
                                                                    ravl_node_is() <int ravl_node_is (struct ravl_node *n, int i, int j) at core/ravl.c:306>:
                                                                        ravl_node_is_i_j() <int ravl_node_is_i_j (struct ravl_node *n, int i, int j) at core/ravl.c:296>:
                                                                            ravl_node_rank_difference_parent() <int ravl_node_rank_difference_parent (struct ravl_node *p, struct ravl_node *n) at core/ravl.c:275>:
                                                                                ravl_node_rank() <int ravl_node_rank (struct ravl_node *n) at core/ravl.c:261>:
                                                                    ravl_node_promote() <void ravl_node_promote (struct ravl_node *n) at core/ravl.c:315>
                                                                    ravl_node_sibling() <struct ravl_node *ravl_node_sibling (struct ravl_node *n) at core/ravl.c:209>:
                                                                        ravl_node_slot_type() <enum ravl_slot_type ravl_node_slot_type (struct ravl_node *n) at core/ravl.c:196>:
                                                                    ravl_node_rank_difference() <int ravl_node_rank_difference (struct ravl_node *n) at core/ravl.c:287>:
                                                                        ravl_node_rank_difference_parent() <int ravl_node_rank_difference_parent (struct ravl_node *p, struct ravl_node *n) at core/ravl.c:275>:
                                                                            ravl_node_rank() <int ravl_node_rank (struct ravl_node *n) at core/ravl.c:261>:
                                                                    ravl_node_rank_difference_parent() <int ravl_node_rank_difference_parent (struct ravl_node *p, struct ravl_node *n) at core/ravl.c:275>:
                                                                        ravl_node_rank() <int ravl_node_rank (struct ravl_node *n) at core/ravl.c:261>:
                                                                    ravl_slot_opposite() <enum ravl_slot_type ravl_slot_opposite (enum ravl_slot_type t) at core/ravl.c:184>:
                                                                        ASSERTne()
                                                                    ravl_node_slot_type() <enum ravl_slot_type ravl_node_slot_type (struct ravl_node *n) at core/ravl.c:196>:
                                                                    ravl_rotate() <void ravl_rotate (struct ravl *ravl, struct ravl_node *n) at core/ravl.c:237>:
                                                                        ASSERTne()
                                                                        ravl_node_ref() <struct ravl_node **ravl_node_ref (struct ravl *ravl, struct ravl_node *n) at core/ravl.c:223>:
                                                                            ravl_node_slot_type() <enum ravl_slot_type ravl_node_slot_type (struct ravl_node *n) at core/ravl.c:196>:
                                                                        ravl_node_slot_type() <enum ravl_slot_type ravl_node_slot_type (struct ravl_node *n) at core/ravl.c:196>:
                                                                        ravl_slot_opposite() <enum ravl_slot_type ravl_slot_opposite (enum ravl_slot_type t) at core/ravl.c:184>:
                                                                            ASSERTne()
                                                                    ravl_node_demote() <void ravl_node_demote (struct ravl_node *n) at core/ravl.c:324>:
                                                                        ASSERT()
                                                                Free() <Free_func Free at core/alloc.c:91>
                                                            ravl_node_copy_constructor() <void ravl_node_copy_constructor (void *data, size_t data_size, const void *arg) at core/ravl.c:152>:
                                                                memcpy()
                                                        util_mutex_unlock()
                                                    ERR()
                                                heap_run_into_free_chunk() <void heap_run_into_free_chunk (struct palloc_heap *heap, struct bucket *bucket, struct memory_block *m) at libpmemobj/heap.c:697>:
                                                    heap_get_chunk_hdr()
                                                    STATS_SUB()
                                                    util_mutex_lock()
                                                    memblock_huge_init() <struct memory_block memblock_huge_init (struct palloc_heap *heap, uint32_t chunk_id, uint32_t zone_id, uint32_t size_idx) at libpmemobj/memblock.c:1329>:
                                                        heap_get_chunk_hdr()
                                                        VALGRIND_DO_MAKE_MEM_UNDEFINED()
                                                        VALGRIND_ANNOTATE_NEW_MEMORY()
                                                        chunk_get_chunk_hdr_value() <uint64_t chunk_get_chunk_hdr_value (uint16_t type, uint16_t flags, uint32_t size_idx) at libpmemobj/memblock.c:604>:
                                                            COMPILE_ERROR_ON()
                                                            memcpy()
                                                        util_atomic_store_explicit64()
                                                        pmemops_persist()
                                                        huge_write_footer() <void huge_write_footer (struct chunk_header *hdr, uint32_t size_idx) at libpmemobj/memblock.c:1166>:
                                                            VALGRIND_DO_MAKE_MEM_UNDEFINED()
                                                            VALGRIND_SET_CLEAN()
                                                        memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                                            memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                                                heap_get_chunk_hdr()
                                                            memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                                                heap_get_chunk_hdr()
                                                                FATAL()
                                                    heap_free_chunk_reuse() <int heap_free_chunk_reuse (struct palloc_heap *heap, struct bucket *bucket, struct memory_block *m) at libpmemobj/heap.c:674>:
                                                        heap_coalesce_huge() <struct memory_block heap_coalesce_huge (struct palloc_heap *heap, struct bucket *b, const struct memory_block *m) at libpmemobj/heap.c:650>:
                                                            heap_get_adjacent_free_block() <int heap_get_adjacent_free_block (struct palloc_heap *heap, const struct memory_block *in, struct memory_block *out, int prev) at libpmemobj/heap.c:582>:
                                                                ZID_TO_ZONE()
                                                                memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                                                    memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                                                        heap_get_chunk_hdr()
                                                                    memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                                                        heap_get_chunk_hdr()
                                                                        FATAL()
                                                            bucket_remove_block() <int bucket_remove_block (struct bucket *b, const struct memory_block *m) at libpmemobj/bucket.c:178>
                                                            heap_coalesce() <struct memory_block heap_coalesce (struct palloc_heap *heap, const struct memory_block *blocks[], int n) at libpmemobj/heap.c:621>:
                                                                ASSERTne()
                                                                memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                                                    memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                                                        heap_get_chunk_hdr()
                                                                    memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                                                        heap_get_chunk_hdr()
                                                                        FATAL()
                                                        bucket_insert_block() <int bucket_insert_block (struct bucket *b, const struct memory_block *m) at libpmemobj/bucket.c:161>:
                                                            VALGRIND_DO_MAKE_MEM_NOACCESS()
                                                            VALGRIND_ANNOTATE_NEW_MEMORY()
                                                    util_mutex_unlock()
                                                heap_free_chunk_reuse() <int heap_free_chunk_reuse (struct palloc_heap *heap, struct bucket *bucket, struct memory_block *m) at libpmemobj/heap.c:674>:
                                                    heap_coalesce_huge() <struct memory_block heap_coalesce_huge (struct palloc_heap *heap, struct bucket *b, const struct memory_block *m) at libpmemobj/heap.c:650>:
                                                        heap_get_adjacent_free_block() <int heap_get_adjacent_free_block (struct palloc_heap *heap, const struct memory_block *in, struct memory_block *out, int prev) at libpmemobj/heap.c:582>:
                                                            ZID_TO_ZONE()
                                                            memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                                                memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                                                    heap_get_chunk_hdr()
                                                                memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                                                    heap_get_chunk_hdr()
                                                                    FATAL()
                                                        bucket_remove_block() <int bucket_remove_block (struct bucket *b, const struct memory_block *m) at libpmemobj/bucket.c:178>
                                                        heap_coalesce() <struct memory_block heap_coalesce (struct palloc_heap *heap, const struct memory_block *blocks[], int n) at libpmemobj/heap.c:621>:
                                                            ASSERTne()
                                                            memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                                                memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                                                    heap_get_chunk_hdr()
                                                                memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                                                    heap_get_chunk_hdr()
                                                                    FATAL()
                                                    bucket_insert_block() <int bucket_insert_block (struct bucket *b, const struct memory_block *m) at libpmemobj/bucket.c:161>:
                                                        VALGRIND_DO_MAKE_MEM_NOACCESS()
                                                        VALGRIND_ANNOTATE_NEW_MEMORY()
                                            heap_bucket_release() <void heap_bucket_release (struct bucket *b) at libpmemobj/heap.c:498>:
                                                bucket_release() <void bucket_release (struct bucket *b) at libpmemobj/bucket.c:127>:
                                                    util_mutex_unlock()
                                    operation_cancel() <void operation_cancel (struct operation_context *ctx) at libpmemobj/memops.c:761>:
                                        ASSERTeq()
                                    palloc_reservation_create() <int palloc_reservation_create (struct palloc_heap *heap, size_t size, palloc_constr constructor, void *arg, uint64_t extra_field, uint16_t object_flags, uint16_t class_id, uint16_t arena_id, struct pobj_action_internal *out) at libpmemobj/palloc.c:178>:
                                        ASSERT()
                                        heap_get_best_class() <struct alloc_class *heap_get_best_class (struct palloc_heap *heap, size_t size) at libpmemobj/heap.c:221>:
                                            alloc_class_by_alloc_size() <struct alloc_class *alloc_class_by_alloc_size (struct alloc_class_collection *ac, size_t size) at libpmemobj/alloc_class.c:568>:
                                                SIZE_TO_CLASS_MAP_INDEX()
                                                alloc_class_assign_by_size() <struct alloc_class *alloc_class_assign_by_size (struct alloc_class_collection *ac, size_t size) at libpmemobj/alloc_class.c:538>:
                                                    LOG()
                                                    SIZE_TO_CLASS_MAP_INDEX()
                                                    alloc_class_find_min_frag() <struct alloc_class *alloc_class_find_min_frag (struct alloc_class_collection *ac, size_t n) at libpmemobj/alloc_class.c:340>:
                                                        LOG()
                                                        ASSERTne()
                                                    ASSERTne()
                                                    util_bool_compare_and_swap64()
                                        alloc_class_by_id() <struct alloc_class *alloc_class_by_id (struct alloc_class_collection *ac, uint8_t id) at libpmemobj/alloc_class.c:612>
                                        heap_alloc_classes() <struct alloc_class_collection *heap_alloc_classes (struct palloc_heap *heap) at libpmemobj/heap.c:160>:
                                        ERR()
                                        alloc_class_calc_size_idx() <ssize_t alloc_class_calc_size_idx (struct alloc_class *c, size_t size) at libpmemobj/alloc_class.c:621>:
                                            CALC_SIZE_IDX()
                                        heap_bucket_acquire() <struct bucket *heap_bucket_acquire (struct palloc_heap *heap, uint8_t class_id, uint16_t arena_id) at libpmemobj/heap.c:470>:
                                            out() <void out (const char *fmt, ...) at core/out.c:480>:
                                                va_start()
                                                out_common() <} void out_common (const char *file, int line, const char *func, int level, const char *suffix, const char *fmt, va_list ap) at core/out.c:334>
                                                va_end()
                                            heap_thread_arena() <struct arena *heap_thread_arena (struct palloc_heap *heap) at libpmemobj/heap.c:414>:
                                                os_tls_get() <void *os_tls_get (os_tls_key_t key) at core/os_thread_posix.c:62>:
                                                    pthread_getspecific()
                                                heap_thread_arena_assign() <struct arena *heap_thread_arena_assign (struct palloc_heap *heap) at libpmemobj/heap.c:381>:
                                                    util_mutex_lock()
                                                    ASSERTne()
                                                    VEC_SIZE()
                                                    VEC_FOREACH()
                                                    LOG()
                                                    heap_arena_thread_attach() <void heap_arena_thread_attach (struct palloc_heap *heap, struct arena *a) at libpmemobj/heap.c:249>:
                                                        ASSERTeq()
                                                        os_tls_get() <void *os_tls_get (os_tls_key_t key) at core/os_thread_posix.c:62>:
                                                            pthread_getspecific()
                                                        heap_arena_thread_detach() <void heap_arena_thread_detach (struct arena *a) at libpmemobj/heap.c:232>:
                                                            util_fetch_and_sub64()
                                                        ASSERTne()
                                                        util_fetch_and_add64()
                                                        os_tls_set() <int os_tls_set (os_tls_key_t key, const void *value) at core/os_thread_posix.c:53>:
                                                            pthread_setspecific()
                                                    util_mutex_unlock()
                                                heap_global_arena_assign() <struct arena *heap_global_arena_assign (struct palloc_heap *heap) at libpmemobj/heap.c:348>:
                                                    util_mutex_lock()
                                                    ASSERTne()
                                                    VEC_SIZE()
                                                    VEC_FOREACH()
                                                    LOG()
                                                    util_mutex_unlock()
                                                ASSERT()
                                                ASSERTne()
                                            ASSERTne()
                                            VEC_ARR()
                                            bucket_acquire() <struct bucket *bucket_acquire (struct bucket_locked *b) at libpmemobj/bucket.c:117>:
                                                util_mutex_lock()
                                        heap_get_bestfit_block() <int heap_get_bestfit_block (struct palloc_heap *heap, struct bucket *b, struct memory_block *m) at libpmemobj/heap.c:1210> (R):
                                            bucket_alloc_class() <struct alloc_class *bucket_alloc_class (struct bucket *b) at libpmemobj/bucket.c:152>
                                            bucket_alloc_block() <int bucket_alloc_block (struct bucket *b, struct memory_block *m_out) at libpmemobj/bucket.c:187>
                                            heap_ensure_huge_bucket_filled() <int heap_ensure_huge_bucket_filled (struct palloc_heap *heap, struct bucket *bucket) at libpmemobj/heap.c:943>:
                                                heap_reclaim_garbage() <int heap_reclaim_garbage (struct palloc_heap *heap, struct bucket *bucket) at libpmemobj/heap.c:923>:
                                                    heap_recycle_unused() <int heap_recycle_unused (struct palloc_heap *heap, struct recycler *recycler, struct bucket *defb, int force) at libpmemobj/heap.c:894>:
                                                        recycler_recalc() <struct empty_runs recycler_recalc (struct recycler *r, int force) at libpmemobj/recycler.c:207>:
                                                            VEC_INIT()
                                                            util_atomic_load64()
                                                            util_mutex_trylock()
                                                            ravl_find() <struct ravl_node *ravl_find (struct ravl *ravl, const void *data, enum ravl_predicate flags) at core/ravl.c:524>:
                                                                LOG()
                                                                ravl_data() <void *ravl_data (struct ravl_node *node) at core/ravl.c:571>:
                                                                    memcpy()
                                                                ravl_predicate_holds() <int ravl_predicate_holds (int result, struct ravl_node **ret, struct ravl_node *n, enum ravl_predicate flags) at core/ravl.c:489>:
                                                                    ravl_node_successor() <struct ravl_node *ravl_node_successor (struct ravl_node *n) at core/ravl.c:465>:
                                                                        ravl_node_cessor() <struct ravl_node *ravl_node_cessor (struct ravl_node *n, enum ravl_slot_type t) at core/ravl.c:443>:
                                                                            ravl_node_type_most() <struct ravl_node *ravl_node_type_most (struct ravl_node *n, enum ravl_slot_type t) at core/ravl.c:430>:
                                                                            ravl_slot_opposite() <enum ravl_slot_type ravl_slot_opposite (enum ravl_slot_type t) at core/ravl.c:184>:
                                                                                ASSERTne()
                                                                    ravl_node_predecessor() <struct ravl_node *ravl_node_predecessor (struct ravl_node *n) at core/ravl.c:476>:
                                                                        ravl_node_cessor() <struct ravl_node *ravl_node_cessor (struct ravl_node *n, enum ravl_slot_type t) at core/ravl.c:443>:
                                                                            ravl_node_type_most() <struct ravl_node *ravl_node_type_most (struct ravl_node *n, enum ravl_slot_type t) at core/ravl.c:430>:
                                                                            ravl_slot_opposite() <enum ravl_slot_type ravl_slot_opposite (enum ravl_slot_type t) at core/ravl.c:184>:
                                                                                ASSERTne()
                                                            ravl_data() <void *ravl_data (struct ravl_node *node) at core/ravl.c:571>:
                                                                memcpy()
                                                            memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                                                memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                                                    heap_get_chunk_hdr()
                                                                memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                                                    heap_get_chunk_hdr()
                                                                    FATAL()
                                                            recycler_element_new() <struct recycler_element recycler_element_new (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/recycler.c:122>:
                                                                SUPPRESS_UNUSED()
                                                                util_mutex_lock()
                                                                util_mutex_unlock()
                                                            ASSERT()
                                                            util_fetch_and_sub64()
                                                            MIN()
                                                            ravl_remove() <void ravl_remove (struct ravl *ravl, struct ravl_node *n) at core/ravl.c:545> (R):
                                                                LOG()
                                                                ravl_node_successor() <struct ravl_node *ravl_node_successor (struct ravl_node *n) at core/ravl.c:465>:
                                                                    ravl_node_cessor() <struct ravl_node *ravl_node_cessor (struct ravl_node *n, enum ravl_slot_type t) at core/ravl.c:443>:
                                                                        ravl_node_type_most() <struct ravl_node *ravl_node_type_most (struct ravl_node *n, enum ravl_slot_type t) at core/ravl.c:430>:
                                                                        ravl_slot_opposite() <enum ravl_slot_type ravl_slot_opposite (enum ravl_slot_type t) at core/ravl.c:184>:
                                                                            ASSERTne()
                                                                memcpy()
                                                                ravl_remove() <void ravl_remove (struct ravl *ravl, struct ravl_node *n) at core/ravl.c:545> (recursive: see 20599)
                                                                ravl_node_ref() <struct ravl_node **ravl_node_ref (struct ravl *ravl, struct ravl_node *n) at core/ravl.c:223>:
                                                                    ravl_node_slot_type() <enum ravl_slot_type ravl_node_slot_type (struct ravl_node *n) at core/ravl.c:196>:
                                                                Free() <Free_func Free at core/alloc.c:91>
                                                            VEC_PUSH_BACK()
                                                            VEC_FOREACH_BY_PTR()
                                                            ravl_emplace_copy() <int ravl_emplace_copy (struct ravl *ravl, const void *data) at core/ravl.c:384>:
                                                                ravl_emplace() <int ravl_emplace (struct ravl *ravl, ravl_constr constr, const void *arg) at core/ravl.c:393>:
                                                                    LOG()
                                                                    ravl_new_node() <struct ravl_node *ravl_new_node (struct ravl *ravl, ravl_constr constr, const void *arg) at core/ravl.c:161>:
                                                                        Malloc()
                                                                        ERR()
                                                                        ravl_node_insert_constructor() <void ravl_node_insert_constructor (void *data, size_t data_size, const void *arg) at core/ravl.c:139>:
                                                                            SUPPRESS_UNUSED()
                                                                            memcpy()
                                                                    ravl_data() <void *ravl_data (struct ravl_node *node) at core/ravl.c:571>:
                                                                        memcpy()
                                                                    ravl_balance() <void ravl_balance (struct ravl *ravl, struct ravl_node *n) at core/ravl.c:337>:
                                                                        ravl_node_is() <int ravl_node_is (struct ravl_node *n, int i, int j) at core/ravl.c:306>:
                                                                            ravl_node_is_i_j() <int ravl_node_is_i_j (struct ravl_node *n, int i, int j) at core/ravl.c:296>:
                                                                                ravl_node_rank_difference_parent() <int ravl_node_rank_difference_parent (struct ravl_node *p, struct ravl_node *n) at core/ravl.c:275>:
                                                                                    ravl_node_rank() <int ravl_node_rank (struct ravl_node *n) at core/ravl.c:261>:
                                                                        ravl_node_promote() <void ravl_node_promote (struct ravl_node *n) at core/ravl.c:315>
                                                                        ravl_node_sibling() <struct ravl_node *ravl_node_sibling (struct ravl_node *n) at core/ravl.c:209>:
                                                                            ravl_node_slot_type() <enum ravl_slot_type ravl_node_slot_type (struct ravl_node *n) at core/ravl.c:196>:
                                                                        ravl_node_rank_difference() <int ravl_node_rank_difference (struct ravl_node *n) at core/ravl.c:287>:
                                                                            ravl_node_rank_difference_parent() <int ravl_node_rank_difference_parent (struct ravl_node *p, struct ravl_node *n) at core/ravl.c:275>:
                                                                                ravl_node_rank() <int ravl_node_rank (struct ravl_node *n) at core/ravl.c:261>:
                                                                        ravl_node_rank_difference_parent() <int ravl_node_rank_difference_parent (struct ravl_node *p, struct ravl_node *n) at core/ravl.c:275>:
                                                                            ravl_node_rank() <int ravl_node_rank (struct ravl_node *n) at core/ravl.c:261>:
                                                                        ravl_slot_opposite() <enum ravl_slot_type ravl_slot_opposite (enum ravl_slot_type t) at core/ravl.c:184>:
                                                                            ASSERTne()
                                                                        ravl_node_slot_type() <enum ravl_slot_type ravl_node_slot_type (struct ravl_node *n) at core/ravl.c:196>:
                                                                        ravl_rotate() <void ravl_rotate (struct ravl *ravl, struct ravl_node *n) at core/ravl.c:237>:
                                                                            ASSERTne()
                                                                            ravl_node_ref() <struct ravl_node **ravl_node_ref (struct ravl *ravl, struct ravl_node *n) at core/ravl.c:223>:
                                                                                ravl_node_slot_type() <enum ravl_slot_type ravl_node_slot_type (struct ravl_node *n) at core/ravl.c:196>:
                                                                            ravl_node_slot_type() <enum ravl_slot_type ravl_node_slot_type (struct ravl_node *n) at core/ravl.c:196>:
                                                                            ravl_slot_opposite() <enum ravl_slot_type ravl_slot_opposite (enum ravl_slot_type t) at core/ravl.c:184>:
                                                                                ASSERTne()
                                                                        ravl_node_demote() <void ravl_node_demote (struct ravl_node *n) at core/ravl.c:324>:
                                                                            ASSERT()
                                                                    Free() <Free_func Free at core/alloc.c:91>
                                                                ravl_node_copy_constructor() <void ravl_node_copy_constructor (void *data, size_t data_size, const void *arg) at core/ravl.c:152>:
                                                                    memcpy()
                                                            VEC_CLEAR()
                                                            util_mutex_unlock()
                                                        VEC_SIZE()
                                                        heap_bucket_acquire() <struct bucket *heap_bucket_acquire (struct palloc_heap *heap, uint8_t class_id, uint16_t arena_id) at libpmemobj/heap.c:470>:
                                                            out() <void out (const char *fmt, ...) at core/out.c:480>:
                                                                va_start()
                                                                out_common() <} void out_common (const char *file, int line, const char *func, int level, const char *suffix, const char *fmt, va_list ap) at core/out.c:334>
                                                                va_end()
                                                            heap_thread_arena() <struct arena *heap_thread_arena (struct palloc_heap *heap) at libpmemobj/heap.c:414>:
                                                                os_tls_get() <void *os_tls_get (os_tls_key_t key) at core/os_thread_posix.c:62>:
                                                                    pthread_getspecific()
                                                                heap_thread_arena_assign() <struct arena *heap_thread_arena_assign (struct palloc_heap *heap) at libpmemobj/heap.c:381>:
                                                                    util_mutex_lock()
                                                                    ASSERTne()
                                                                    VEC_SIZE()
                                                                    VEC_FOREACH()
                                                                    LOG()
                                                                    heap_arena_thread_attach() <void heap_arena_thread_attach (struct palloc_heap *heap, struct arena *a) at libpmemobj/heap.c:249>:
                                                                        ASSERTeq()
                                                                        os_tls_get() <void *os_tls_get (os_tls_key_t key) at core/os_thread_posix.c:62>:
                                                                            pthread_getspecific()
                                                                        heap_arena_thread_detach() <void heap_arena_thread_detach (struct arena *a) at libpmemobj/heap.c:232>:
                                                                            util_fetch_and_sub64()
                                                                        ASSERTne()
                                                                        util_fetch_and_add64()
                                                                        os_tls_set() <int os_tls_set (os_tls_key_t key, const void *value) at core/os_thread_posix.c:53>:
                                                                            pthread_setspecific()
                                                                    util_mutex_unlock()
                                                                heap_global_arena_assign() <struct arena *heap_global_arena_assign (struct palloc_heap *heap) at libpmemobj/heap.c:348>:
                                                                    util_mutex_lock()
                                                                    ASSERTne()
                                                                    VEC_SIZE()
                                                                    VEC_FOREACH()
                                                                    LOG()
                                                                    util_mutex_unlock()
                                                                ASSERT()
                                                                ASSERTne()
                                                            ASSERTne()
                                                            VEC_ARR()
                                                            bucket_acquire() <struct bucket *bucket_acquire (struct bucket_locked *b) at libpmemobj/bucket.c:117>:
                                                                util_mutex_lock()
                                                        ASSERT()
                                                        VEC_FOREACH_BY_PTR()
                                                        heap_run_into_free_chunk() <void heap_run_into_free_chunk (struct palloc_heap *heap, struct bucket *bucket, struct memory_block *m) at libpmemobj/heap.c:697>:
                                                            heap_get_chunk_hdr()
                                                            STATS_SUB()
                                                            util_mutex_lock()
                                                            memblock_huge_init() <struct memory_block memblock_huge_init (struct palloc_heap *heap, uint32_t chunk_id, uint32_t zone_id, uint32_t size_idx) at libpmemobj/memblock.c:1329>:
                                                                heap_get_chunk_hdr()
                                                                VALGRIND_DO_MAKE_MEM_UNDEFINED()
                                                                VALGRIND_ANNOTATE_NEW_MEMORY()
                                                                chunk_get_chunk_hdr_value() <uint64_t chunk_get_chunk_hdr_value (uint16_t type, uint16_t flags, uint32_t size_idx) at libpmemobj/memblock.c:604>:
                                                                    COMPILE_ERROR_ON()
                                                                    memcpy()
                                                                util_atomic_store_explicit64()
                                                                pmemops_persist()
                                                                huge_write_footer() <void huge_write_footer (struct chunk_header *hdr, uint32_t size_idx) at libpmemobj/memblock.c:1166>:
                                                                    VALGRIND_DO_MAKE_MEM_UNDEFINED()
                                                                    VALGRIND_SET_CLEAN()
                                                                memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                                                    memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                                                        heap_get_chunk_hdr()
                                                                    memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                                                        heap_get_chunk_hdr()
                                                                        FATAL()
                                                            heap_free_chunk_reuse() <int heap_free_chunk_reuse (struct palloc_heap *heap, struct bucket *bucket, struct memory_block *m) at libpmemobj/heap.c:674>:
                                                                heap_coalesce_huge() <struct memory_block heap_coalesce_huge (struct palloc_heap *heap, struct bucket *b, const struct memory_block *m) at libpmemobj/heap.c:650>:
                                                                    heap_get_adjacent_free_block() <int heap_get_adjacent_free_block (struct palloc_heap *heap, const struct memory_block *in, struct memory_block *out, int prev) at libpmemobj/heap.c:582>:
                                                                        ZID_TO_ZONE()
                                                                        memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                                                            memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                                                                heap_get_chunk_hdr()
                                                                            memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                                                                heap_get_chunk_hdr()
                                                                                FATAL()
                                                                    bucket_remove_block() <int bucket_remove_block (struct bucket *b, const struct memory_block *m) at libpmemobj/bucket.c:178>
                                                                    heap_coalesce() <struct memory_block heap_coalesce (struct palloc_heap *heap, const struct memory_block *blocks[], int n) at libpmemobj/heap.c:621>:
                                                                        ASSERTne()
                                                                        memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                                                            memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                                                                heap_get_chunk_hdr()
                                                                            memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                                                                heap_get_chunk_hdr()
                                                                                FATAL()
                                                                bucket_insert_block() <int bucket_insert_block (struct bucket *b, const struct memory_block *m) at libpmemobj/bucket.c:161>:
                                                                    VALGRIND_DO_MAKE_MEM_NOACCESS()
                                                                    VALGRIND_ANNOTATE_NEW_MEMORY()
                                                            util_mutex_unlock()
                                                        heap_bucket_release() <void heap_bucket_release (struct bucket *b) at libpmemobj/heap.c:498>:
                                                            bucket_release() <void bucket_release (struct bucket *b) at libpmemobj/bucket.c:127>:
                                                                util_mutex_unlock()
                                                        VEC_DELETE()
                                                heap_populate_bucket() <int heap_populate_bucket (struct palloc_heap *heap, struct bucket *bucket) at libpmemobj/heap.c:850>:
                                                    util_atomic_store_explicit32()
                                                    ZID_TO_ZONE()
                                                    VALGRIND_ADD_TO_GLOBAL_TX_IGNORE()
                                                    heap_zone_init() <void heap_zone_init (struct palloc_heap *heap, uint32_t zone_id, uint32_t first_chunk_id) at libpmemobj/heap.c:559>:
                                                        ZID_TO_ZONE()
                                                        zone_calc_size_idx() <uint32_t zone_calc_size_idx (uint32_t zone_id, unsigned max_zone, size_t heap_size) at libpmemobj/heap.c:533>:
                                                            ASSERT()
                                                        ASSERT()
                                                        memblock_huge_init() <struct memory_block memblock_huge_init (struct palloc_heap *heap, uint32_t chunk_id, uint32_t zone_id, uint32_t size_idx) at libpmemobj/memblock.c:1329>:
                                                            heap_get_chunk_hdr()
                                                            VALGRIND_DO_MAKE_MEM_UNDEFINED()
                                                            VALGRIND_ANNOTATE_NEW_MEMORY()
                                                            chunk_get_chunk_hdr_value() <uint64_t chunk_get_chunk_hdr_value (uint16_t type, uint16_t flags, uint32_t size_idx) at libpmemobj/memblock.c:604>:
                                                                COMPILE_ERROR_ON()
                                                                memcpy()
                                                            util_atomic_store_explicit64()
                                                            pmemops_persist()
                                                            huge_write_footer() <void huge_write_footer (struct chunk_header *hdr, uint32_t size_idx) at libpmemobj/memblock.c:1166>:
                                                                VALGRIND_DO_MAKE_MEM_UNDEFINED()
                                                                VALGRIND_SET_CLEAN()
                                                            memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                                                memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                                                    heap_get_chunk_hdr()
                                                                memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                                                    heap_get_chunk_hdr()
                                                                    FATAL()
                                                        pmemops_persist()
                                                    heap_reclaim_zone_garbage() <void heap_reclaim_zone_garbage (struct palloc_heap *heap, struct bucket *bucket, uint32_t zone_id) at libpmemobj/heap.c:775>:
                                                        ZID_TO_ZONE()
                                                        ASSERT()
                                                        memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                                            memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                                                heap_get_chunk_hdr()
                                                            memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                                                heap_get_chunk_hdr()
                                                                FATAL()
                                                        heap_reclaim_run() <int heap_reclaim_run (struct palloc_heap *heap, struct memory_block *m, int startup) at libpmemobj/heap.c:733>:
                                                            heap_get_chunk_run()
                                                            heap_get_chunk_hdr()
                                                            alloc_class_by_run() <struct alloc_class *alloc_class_by_run (struct alloc_class_collection *ac, size_t unit_size, uint16_t flags, uint32_t size_idx) at libpmemobj/alloc_class.c:594>:
                                                                SIZE_TO_CLASS_MAP_INDEX()
                                                                ASSERT()
                                                                critnib_get() <void *critnib_get (struct critnib *c, uint64_t key) at libpmemobj/critnib.c:515>:
                                                                    load() <void load (void *src, void *dst) at libpmemobj/critnib.c:130>:
                                                                        util_atomic_load_explicit64()
                                                                    is_leaf() <inline bool is_leaf (struct critnib_node *n) at libpmemobj/critnib.c:150>:
                                                                    slice_index() <inline unsigned slice_index (uint64_t key, sh_t shift) at libpmemobj/critnib.c:178>:
                                                                    to_leaf() <inline struct critnib_leaf *to_leaf (struct critnib_node *n) at libpmemobj/critnib.c:159>:
                                                                RUN_CLASS_KEY_PACK()
                                                            recycler_element_new() <struct recycler_element recycler_element_new (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/recycler.c:122>:
                                                                SUPPRESS_UNUSED()
                                                                util_mutex_lock()
                                                                util_mutex_unlock()
                                                            ASSERTeq()
                                                            STATS_INC()
                                                            heap_get_recycler() <struct recycler *heap_get_recycler (struct palloc_heap *heap, size_t id, size_t nallocs) at libpmemobj/heap.c:106> (R):
                                                                util_atomic_load_explicit64()
                                                                recycler_new() <struct recycler *recycler_new (struct palloc_heap *heap, size_t nallocs, size_t *peak_arenas) at libpmemobj/recycler.c:74>:
                                                                    Malloc()
                                                                    ravl_new_sized() <struct ravl *ravl_new_sized (ravl_compare *compare, size_t data_size) at core/ravl.c:45>:
                                                                        Malloc()
                                                                        ERR()
                                                                    recycler_element_cmp() <int recycler_element_cmp (const void *lhs, const void *rhs) at libpmemobj/recycler.c:23>:
                                                                    memset()
                                                                    VEC_INIT()
                                                                    util_mutex_init()
                                                                    Free() <Free_func Free at core/alloc.c:91>
                                                                util_bool_compare_and_swap64()
                                                                recycler_delete() <void recycler_delete (struct recycler *r) at libpmemobj/recycler.c:107>:
                                                                    VEC_DELETE()
                                                                    util_mutex_destroy()
                                                                    ravl_delete() <void ravl_delete (struct ravl *ravl) at core/ravl.c:112>:
                                                                        ravl_delete_cb() <void ravl_delete_cb (struct ravl *ravl, ravl_cb cb, void *arg) at core/ravl.c:102>:
                                                                            ravl_foreach_node() <void ravl_foreach_node (struct ravl_node *n, ravl_cb cb, void *arg, int free_node) at core/ravl.c:74> (R):
                                                                                ravl_foreach_node() <void ravl_foreach_node (struct ravl_node *n, ravl_cb cb, void *arg, int free_node) at core/ravl.c:74> (recursive: see 20818)
                                                                                Free() <Free_func Free at core/alloc.c:91>
                                                                            Free() <Free_func Free at core/alloc.c:91>
                                                                    Free() <Free_func Free at core/alloc.c:91>
                                                                heap_get_recycler() <struct recycler *heap_get_recycler (struct palloc_heap *heap, size_t id, size_t nallocs) at libpmemobj/heap.c:106> (recursive: see 20800)
                                                            recycler_put() <int recycler_put (struct recycler *r, struct recycler_element element) at libpmemobj/recycler.c:154>:
                                                                util_mutex_lock()
                                                                ravl_emplace_copy() <int ravl_emplace_copy (struct ravl *ravl, const void *data) at core/ravl.c:384>:
                                                                    ravl_emplace() <int ravl_emplace (struct ravl *ravl, ravl_constr constr, const void *arg) at core/ravl.c:393>:
                                                                        LOG()
                                                                        ravl_new_node() <struct ravl_node *ravl_new_node (struct ravl *ravl, ravl_constr constr, const void *arg) at core/ravl.c:161>:
                                                                            Malloc()
                                                                            ERR()
                                                                            ravl_node_insert_constructor() <void ravl_node_insert_constructor (void *data, size_t data_size, const void *arg) at core/ravl.c:139>:
                                                                                SUPPRESS_UNUSED()
                                                                                memcpy()
                                                                        ravl_data() <void *ravl_data (struct ravl_node *node) at core/ravl.c:571>:
                                                                            memcpy()
                                                                        ravl_balance() <void ravl_balance (struct ravl *ravl, struct ravl_node *n) at core/ravl.c:337>:
                                                                            ravl_node_is() <int ravl_node_is (struct ravl_node *n, int i, int j) at core/ravl.c:306>:
                                                                                ravl_node_is_i_j() <int ravl_node_is_i_j (struct ravl_node *n, int i, int j) at core/ravl.c:296>:
                                                                                    ravl_node_rank_difference_parent() <int ravl_node_rank_difference_parent (struct ravl_node *p, struct ravl_node *n) at core/ravl.c:275>:
                                                                                        ravl_node_rank() <int ravl_node_rank (struct ravl_node *n) at core/ravl.c:261>:
                                                                            ravl_node_promote() <void ravl_node_promote (struct ravl_node *n) at core/ravl.c:315>
                                                                            ravl_node_sibling() <struct ravl_node *ravl_node_sibling (struct ravl_node *n) at core/ravl.c:209>:
                                                                                ravl_node_slot_type() <enum ravl_slot_type ravl_node_slot_type (struct ravl_node *n) at core/ravl.c:196>:
                                                                            ravl_node_rank_difference() <int ravl_node_rank_difference (struct ravl_node *n) at core/ravl.c:287>:
                                                                                ravl_node_rank_difference_parent() <int ravl_node_rank_difference_parent (struct ravl_node *p, struct ravl_node *n) at core/ravl.c:275>:
                                                                                    ravl_node_rank() <int ravl_node_rank (struct ravl_node *n) at core/ravl.c:261>:
                                                                            ravl_node_rank_difference_parent() <int ravl_node_rank_difference_parent (struct ravl_node *p, struct ravl_node *n) at core/ravl.c:275>:
                                                                                ravl_node_rank() <int ravl_node_rank (struct ravl_node *n) at core/ravl.c:261>:
                                                                            ravl_slot_opposite() <enum ravl_slot_type ravl_slot_opposite (enum ravl_slot_type t) at core/ravl.c:184>:
                                                                                ASSERTne()
                                                                            ravl_node_slot_type() <enum ravl_slot_type ravl_node_slot_type (struct ravl_node *n) at core/ravl.c:196>:
                                                                            ravl_rotate() <void ravl_rotate (struct ravl *ravl, struct ravl_node *n) at core/ravl.c:237>:
                                                                                ASSERTne()
                                                                                ravl_node_ref() <struct ravl_node **ravl_node_ref (struct ravl *ravl, struct ravl_node *n) at core/ravl.c:223>:
                                                                                    ravl_node_slot_type() <enum ravl_slot_type ravl_node_slot_type (struct ravl_node *n) at core/ravl.c:196>:
                                                                                ravl_node_slot_type() <enum ravl_slot_type ravl_node_slot_type (struct ravl_node *n) at core/ravl.c:196>:
                                                                                ravl_slot_opposite() <enum ravl_slot_type ravl_slot_opposite (enum ravl_slot_type t) at core/ravl.c:184>:
                                                                                    ASSERTne()
                                                                            ravl_node_demote() <void ravl_node_demote (struct ravl_node *n) at core/ravl.c:324>:
                                                                                ASSERT()
                                                                        Free() <Free_func Free at core/alloc.c:91>
                                                                    ravl_node_copy_constructor() <void ravl_node_copy_constructor (void *data, size_t data_size, const void *arg) at core/ravl.c:152>:
                                                                        memcpy()
                                                                util_mutex_unlock()
                                                            ERR()
                                                        heap_run_into_free_chunk() <void heap_run_into_free_chunk (struct palloc_heap *heap, struct bucket *bucket, struct memory_block *m) at libpmemobj/heap.c:697>:
                                                            heap_get_chunk_hdr()
                                                            STATS_SUB()
                                                            util_mutex_lock()
                                                            memblock_huge_init() <struct memory_block memblock_huge_init (struct palloc_heap *heap, uint32_t chunk_id, uint32_t zone_id, uint32_t size_idx) at libpmemobj/memblock.c:1329>:
                                                                heap_get_chunk_hdr()
                                                                VALGRIND_DO_MAKE_MEM_UNDEFINED()
                                                                VALGRIND_ANNOTATE_NEW_MEMORY()
                                                                chunk_get_chunk_hdr_value() <uint64_t chunk_get_chunk_hdr_value (uint16_t type, uint16_t flags, uint32_t size_idx) at libpmemobj/memblock.c:604>:
                                                                    COMPILE_ERROR_ON()
                                                                    memcpy()
                                                                util_atomic_store_explicit64()
                                                                pmemops_persist()
                                                                huge_write_footer() <void huge_write_footer (struct chunk_header *hdr, uint32_t size_idx) at libpmemobj/memblock.c:1166>:
                                                                    VALGRIND_DO_MAKE_MEM_UNDEFINED()
                                                                    VALGRIND_SET_CLEAN()
                                                                memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                                                    memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                                                        heap_get_chunk_hdr()
                                                                    memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                                                        heap_get_chunk_hdr()
                                                                        FATAL()
                                                            heap_free_chunk_reuse() <int heap_free_chunk_reuse (struct palloc_heap *heap, struct bucket *bucket, struct memory_block *m) at libpmemobj/heap.c:674>:
                                                                heap_coalesce_huge() <struct memory_block heap_coalesce_huge (struct palloc_heap *heap, struct bucket *b, const struct memory_block *m) at libpmemobj/heap.c:650>:
                                                                    heap_get_adjacent_free_block() <int heap_get_adjacent_free_block (struct palloc_heap *heap, const struct memory_block *in, struct memory_block *out, int prev) at libpmemobj/heap.c:582>:
                                                                        ZID_TO_ZONE()
                                                                        memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                                                            memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                                                                heap_get_chunk_hdr()
                                                                            memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                                                                heap_get_chunk_hdr()
                                                                                FATAL()
                                                                    bucket_remove_block() <int bucket_remove_block (struct bucket *b, const struct memory_block *m) at libpmemobj/bucket.c:178>
                                                                    heap_coalesce() <struct memory_block heap_coalesce (struct palloc_heap *heap, const struct memory_block *blocks[], int n) at libpmemobj/heap.c:621>:
                                                                        ASSERTne()
                                                                        memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                                                            memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                                                                heap_get_chunk_hdr()
                                                                            memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                                                                heap_get_chunk_hdr()
                                                                                FATAL()
                                                                bucket_insert_block() <int bucket_insert_block (struct bucket *b, const struct memory_block *m) at libpmemobj/bucket.c:161>:
                                                                    VALGRIND_DO_MAKE_MEM_NOACCESS()
                                                                    VALGRIND_ANNOTATE_NEW_MEMORY()
                                                            util_mutex_unlock()
                                                        heap_free_chunk_reuse() <int heap_free_chunk_reuse (struct palloc_heap *heap, struct bucket *bucket, struct memory_block *m) at libpmemobj/heap.c:674>:
                                                            heap_coalesce_huge() <struct memory_block heap_coalesce_huge (struct palloc_heap *heap, struct bucket *b, const struct memory_block *m) at libpmemobj/heap.c:650>:
                                                                heap_get_adjacent_free_block() <int heap_get_adjacent_free_block (struct palloc_heap *heap, const struct memory_block *in, struct memory_block *out, int prev) at libpmemobj/heap.c:582>:
                                                                    ZID_TO_ZONE()
                                                                    memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                                                        memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                                                            heap_get_chunk_hdr()
                                                                        memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                                                            heap_get_chunk_hdr()
                                                                            FATAL()
                                                                bucket_remove_block() <int bucket_remove_block (struct bucket *b, const struct memory_block *m) at libpmemobj/bucket.c:178>
                                                                heap_coalesce() <struct memory_block heap_coalesce (struct palloc_heap *heap, const struct memory_block *blocks[], int n) at libpmemobj/heap.c:621>:
                                                                    ASSERTne()
                                                                    memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                                                        memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                                                            heap_get_chunk_hdr()
                                                                        memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                                                            heap_get_chunk_hdr()
                                                                            FATAL()
                                                            bucket_insert_block() <int bucket_insert_block (struct bucket *b, const struct memory_block *m) at libpmemobj/bucket.c:161>:
                                                                VALGRIND_DO_MAKE_MEM_NOACCESS()
                                                                VALGRIND_ANNOTATE_NEW_MEMORY()
                                                heap_extend() <int heap_extend (struct palloc_heap *heap, struct bucket *b, size_t size) at libpmemobj/heap.c:1515>:
                                                    util_pool_extend() <void *util_pool_extend (struct pool_set *set, size_t *size, size_t minpartsize) at common/set.c:2231>:
                                                        LOG()
                                                        ERR()
                                                        util_poolset_append_new_part() <int util_poolset_append_new_part (struct pool_set *set, size_t size) at common/set.c:2174>:
                                                            LOG()
                                                            VEC_SIZE()
                                                            VEC_GET()
                                                            strlen()
                                                            Malloc()
                                                            ERR()
                                                            snprintf()
                                                            util_replica_add_part() <int util_replica_add_part (struct pool_replica **repp, const char *path, size_t filesize) at common/set.c:708>:
                                                                LOG()
                                                                util_replica_add_part_by_idx() <int util_replica_add_part_by_idx (struct pool_replica **repp, const char *path, size_t filesize, unsigned p) at common/set.c:662>:
                                                                    LOG()
                                                                    util_replica_reserve() <int util_replica_reserve (struct pool_replica **repp, unsigned n) at common/set.c:633>:
                                                                        LOG()
                                                                        Realloc()
                                                                        ERR()
                                                                        memset()
                                                                    ASSERTne()
                                                                    util_file_get_type() <enum file_type util_file_get_type (const char *path) at common/file.c:106>:
                                                                        LOG()
                                                                        ERR()
                                                                        util_file_exists() <int util_file_exists (const char *path) at common/file.c:32>:
                                                                            LOG()
                                                                            os_access() <int os_access (const char *pathname, int mode) at core/os_posix.c:97>:
                                                                                access()
                                                                            ERR()
                                                                        os_stat() <int os_stat (const char *pathname, os_stat_t *buf) at core/os_posix.c:79>:
                                                                            stat()
                                                                        util_stat_get_type() <enum file_type util_stat_get_type (const os_stat_t *st) at common/file.c:62>:
                                                                            pmem2_get_type_from_stat() <int pmem2_get_type_from_stat (const os_stat_t *st, enum pmem2_file_type *type) at libpmem2/pmem2_utils_linux.c:23>:
                                                                                S_ISREG()
                                                                                S_ISDIR()
                                                                                S_ISCHR()
                                                                                ERR()
                                                                                util_snprintf() <int util_snprintf (char *str, size_t size, const char *format, ...) at core/util.c:434>:
                                                                                    va_start()
                                                                                    vsnprintf()
                                                                                    va_end()
                                                                                os_major()
                                                                                os_minor()
                                                                                ASSERTinfo()
                                                                                LOG()
                                                                                realpath()
                                                                                strrchr()
                                                                                strcmp()
                                                                            pmem2_err_to_errno() <int pmem2_err_to_errno (int err) at libpmem2/pmem2_utils.c:67>:
                                                                                FATAL()
                                                                            ASSERTinfo()
                                                                    util_file_device_dax_alignment() <size_t util_file_device_dax_alignment (const char *path) at common/file_posix.c:139>:
                                                                        LOG()
                                                                        device_dax_alignment() <size_t device_dax_alignment (const char *path) at common/file_posix.c:105>:
                                                                            LOG()
                                                                            os_open() <int os_open (const char *pathname, int flags, ...) at core/os_posix.c:29>:
                                                                                va_start()
                                                                                va_arg()
                                                                                va_end()
                                                                                open()
                                                                            pmem2_source_from_fd() <int pmem2_source_from_fd (struct pmem2_source **src, int fd) at libpmem2/source_posix.c:19>:
                                                                                PMEM2_ERR_CLR()
                                                                                fcntl()
                                                                                ERR()
                                                                                os_fstat()
                                                                                pmem2_get_type_from_stat() <int pmem2_get_type_from_stat (const os_stat_t *st, enum pmem2_file_type *type) at libpmem2/pmem2_utils_linux.c:23>:
                                                                                    S_ISREG()
                                                                                    S_ISDIR()
                                                                                    S_ISCHR()
                                                                                    ERR()
                                                                                    util_snprintf() <int util_snprintf (char *str, size_t size, const char *format, ...) at core/util.c:434>:
                                                                                        va_start()
                                                                                        vsnprintf()
                                                                                        va_end()
                                                                                    os_major()
                                                                                    os_minor()
                                                                                    ASSERTinfo()
                                                                                    LOG()
                                                                                    realpath()
                                                                                    strrchr()
                                                                                    strcmp()
                                                                                pmem2_malloc() <void *pmem2_malloc (size_t size, int *err) at libpmem2/pmem2_utils.c:19>:
                                                                                    Malloc()
                                                                                    ERR()
                                                                                ASSERTne()
                                                                            pmem2_device_dax_alignment() <int pmem2_device_dax_alignment (const struct pmem2_source *src, size_t *alignment) at libpmem2/pmem2_utils_ndctl.c:18>:
                                                                                ndctl_new()
                                                                                ERR()
                                                                                pmem2_region_namespace() <int pmem2_region_namespace (struct ndctl_ctx *ctx, const struct pmem2_source *src, struct ndctl_region **pregion, struct ndctl_namespace **pndns) at libpmem2/region_namespace_ndctl.c:131>:
                                                                                    LOG()
                                                                                    ERR()
                                                                                    FOREACH_BUS_REGION_NAMESPACE()
                                                                                    ndctl_namespace_get_dax()
                                                                                    ASSERTeq()
                                                                                    ndctl_dax_get_daxctl_region()
                                                                                    daxctl_dev_foreach()
                                                                                    daxctl_dev_get_devname()
                                                                                    ndctl_match_devdax() <int ndctl_match_devdax (dev_t st_rdev, const char *devname) at libpmem2/region_namespace_ndctl.c:26>:
                                                                                        LOG()
                                                                                        stat()
                                                                                        util_snprintf() <int util_snprintf (char *str, size_t size, const char *format, ...) at core/util.c:434>:
                                                                                            va_start()
                                                                                            vsnprintf()
                                                                                            va_end()
                                                                                        ERR()
                                                                                        os_stat() <int os_stat (const char *pathname, os_stat_t *buf) at core/os_posix.c:79>:
                                                                                            stat()
                                                                                    ndctl_namespace_get_btt()
                                                                                    ndctl_btt_get_block_device()
                                                                                    ndctl_namespace_get_pfn()
                                                                                    ndctl_pfn_get_block_device()
                                                                                    ndctl_namespace_get_block_device()
                                                                                    ndctl_match_fsdax() <int ndctl_match_fsdax (dev_t st_dev, const char *devname) at libpmem2/region_namespace_ndctl.c:64>:
                                                                                        LOG()
                                                                                        util_snprintf() <int util_snprintf (char *str, size_t size, const char *format, ...) at core/util.c:434>:
                                                                                            va_start()
                                                                                            vsnprintf()
                                                                                            va_end()
                                                                                        ERR()
                                                                                        major()
                                                                                        minor()
                                                                                        os_open() <int os_open (const char *pathname, int flags, ...) at core/os_posix.c:29>:
                                                                                            va_start()
                                                                                            va_arg()
                                                                                            va_end()
                                                                                            open()
                                                                                        read()
                                                                                        os_close()
                                                                                        strcmp()
                                                                                LOG()
                                                                                ndctl_namespace_get_dax()
                                                                                ndctl_dax_get_align()
                                                                                ndctl_unref()
                                                                            pmem2_source_delete() <int pmem2_source_delete (struct pmem2_source **src) at libpmem2/source.c:30>:
                                                                                Free() <Free_func Free at core/alloc.c:91>
                                                                            os_close()
                                                            FATAL()
                                                            util_poolset_set_size() <void util_poolset_set_size (struct pool_set *set) at common/set.c:949>:
                                                                LOG()
                                                            Free() <Free_func Free at core/alloc.c:91>
                                                        util_part_open() <int util_part_open (struct pool_set_part *part, size_t minsize, int create_part) at common/set.c:1459>:
                                                            LOG()
                                                            util_file_exists() <int util_file_exists (const char *path) at common/file.c:32>:
                                                                LOG()
                                                                os_access() <int os_access (const char *pathname, int mode) at core/os_posix.c:97>:
                                                                    access()
                                                                ERR()
                                                            util_file_create() <int util_file_create (const char *path, size_t size, size_t minsize) at common/file.c:398>:
                                                                LOG()
                                                                ASSERTne()
                                                                ERR()
                                                                os_open() <int os_open (const char *pathname, int flags, ...) at core/os_posix.c:29>:
                                                                    va_start()
                                                                    va_arg()
                                                                    va_end()
                                                                    open()
                                                                os_posix_fallocate() <int os_posix_fallocate (int fd, os_off_t offset, off_t len) at core/os_posix.c:142>:
                                                                    posix_fallocate()
                                                                os_flock() <int os_flock (int fd, int operation) at core/os_posix.c:215>:
                                                                    flock()
                                                                os_close()
                                                                os_unlink() <int os_unlink (const char *pathname) at core/os_posix.c:88>:
                                                                    unlink()
                                                            util_file_open() <int util_file_open (const char *path, size_t *size, size_t minsize, int flags) at common/file.c:456>:
                                                                LOG()
                                                                os_open() <int os_open (const char *pathname, int flags, ...) at core/os_posix.c:29>:
                                                                    va_start()
                                                                    va_arg()
                                                                    va_end()
                                                                    open()
                                                                ERR()
                                                                os_flock() <int os_flock (int fd, int operation) at core/os_posix.c:215>:
                                                                    flock()
                                                                os_close()
                                                                ASSERTeq()
                                                                util_fd_get_size() <ssize_t util_fd_get_size (int fd) at common/file.c:157>:
                                                                    LOG()
                                                                    pmem2_source_from_fd() <int pmem2_source_from_fd (struct pmem2_source **src, int fd) at libpmem2/source_posix.c:19>:
                                                                        PMEM2_ERR_CLR()
                                                                        fcntl()
                                                                        ERR()
                                                                        os_fstat()
                                                                        pmem2_get_type_from_stat() <int pmem2_get_type_from_stat (const os_stat_t *st, enum pmem2_file_type *type) at libpmem2/pmem2_utils_linux.c:23>:
                                                                            S_ISREG()
                                                                            S_ISDIR()
                                                                            S_ISCHR()
                                                                            ERR()
                                                                            util_snprintf() <int util_snprintf (char *str, size_t size, const char *format, ...) at core/util.c:434>:
                                                                                va_start()
                                                                                vsnprintf()
                                                                                va_end()
                                                                            os_major()
                                                                            os_minor()
                                                                            ASSERTinfo()
                                                                            LOG()
                                                                            realpath()
                                                                            strrchr()
                                                                            strcmp()
                                                                        pmem2_malloc() <void *pmem2_malloc (size_t size, int *err) at libpmem2/pmem2_utils.c:19>:
                                                                            Malloc()
                                                                            ERR()
                                                                        ASSERTne()
                                                                    pmem2_err_to_errno() <int pmem2_err_to_errno (int err) at libpmem2/pmem2_utils.c:67>:
                                                                        FATAL()
                                                                    pmem2_source_size() <int pmem2_source_size (const struct pmem2_source *src, size_t *size) at libpmem2/source_posix.c:90>:
                                                                        LOG()
                                                                        PMEM2_ERR_CLR()
                                                                        ASSERT()
                                                                        os_fstat()
                                                                        ERR()
                                                                        pmem2_device_dax_size() <int pmem2_device_dax_size (const struct pmem2_source *src, size_t *size) at libpmem2/pmem2_utils_ndctl.c:58>:
                                                                            ndctl_new()
                                                                            ERR()
                                                                            pmem2_region_namespace() <int pmem2_region_namespace (struct ndctl_ctx *ctx, const struct pmem2_source *src, struct ndctl_region **pregion, struct ndctl_namespace **pndns) at libpmem2/region_namespace_ndctl.c:131>:
                                                                                LOG()
                                                                                ERR()
                                                                                FOREACH_BUS_REGION_NAMESPACE()
                                                                                ndctl_namespace_get_dax()
                                                                                ASSERTeq()
                                                                                ndctl_dax_get_daxctl_region()
                                                                                daxctl_dev_foreach()
                                                                                daxctl_dev_get_devname()
                                                                                ndctl_match_devdax() <int ndctl_match_devdax (dev_t st_rdev, const char *devname) at libpmem2/region_namespace_ndctl.c:26>:
                                                                                    LOG()
                                                                                    stat()
                                                                                    util_snprintf() <int util_snprintf (char *str, size_t size, const char *format, ...) at core/util.c:434>:
                                                                                        va_start()
                                                                                        vsnprintf()
                                                                                        va_end()
                                                                                    ERR()
                                                                                    os_stat() <int os_stat (const char *pathname, os_stat_t *buf) at core/os_posix.c:79>:
                                                                                        stat()
                                                                                ndctl_namespace_get_btt()
                                                                                ndctl_btt_get_block_device()
                                                                                ndctl_namespace_get_pfn()
                                                                                ndctl_pfn_get_block_device()
                                                                                ndctl_namespace_get_block_device()
                                                                                ndctl_match_fsdax() <int ndctl_match_fsdax (dev_t st_dev, const char *devname) at libpmem2/region_namespace_ndctl.c:64>:
                                                                                    LOG()
                                                                                    util_snprintf() <int util_snprintf (char *str, size_t size, const char *format, ...) at core/util.c:434>:
                                                                                        va_start()
                                                                                        vsnprintf()
                                                                                        va_end()
                                                                                    ERR()
                                                                                    major()
                                                                                    minor()
                                                                                    os_open() <int os_open (const char *pathname, int flags, ...) at core/os_posix.c:29>:
                                                                                        va_start()
                                                                                        va_arg()
                                                                                        va_end()
                                                                                        open()
                                                                                    read()
                                                                                    os_close()
                                                                                    strcmp()
                                                                            LOG()
                                                                            ndctl_namespace_get_dax()
                                                                            ndctl_dax_get_size()
                                                                            ndctl_unref()
                                                                        FATAL()
                                                                    pmem2_source_delete() <int pmem2_source_delete (struct pmem2_source **src) at libpmem2/source.c:30>:
                                                                        Free() <Free_func Free at core/alloc.c:91>
                                                                    ERR()
                                                            os_posix_fallocate() <int os_posix_fallocate (int fd, os_off_t offset, off_t len) at core/os_posix.c:142>:
                                                                posix_fallocate()
                                                            ERR()
                                                        util_map_part() <int util_map_part (struct pool_set_part *part, void *addr, size_t size, size_t offset, int flags, int rdonly) at common/set.c:229>:
                                                            LOG()
                                                            ASSERTeq()
                                                            ASSERT()
                                                            roundup()
                                                            util_map_sync() <void *util_map_sync (void *addr, size_t len, int proto, int flags, int fd, os_off_t offset, int *map_sync) at common/mmap_posix.c:159>:
                                                                LOG()
                                                                mmap()
                                                            ERR()
                                                            munmap()
                                                            VALGRIND_REGISTER_PMEM_MAPPING()
                                                            VALGRIND_REGISTER_PMEM_FILE()
                                                        util_poolset_chmod() <int util_poolset_chmod (struct pool_set *set, mode_t mode) at common/set.c:404>:
                                                            LOG()
                                                            os_fstat()
                                                            ERR()
                                                            os_chmod() <int os_chmod (const char *pathname, mode_t mode) at core/os_posix.c:124>:
                                                                chmod()
                                                        util_poolset_fdclose() <void util_poolset_fdclose (struct pool_set *set) at common/set.c:457>:
                                                            util_poolset_fdclose_always() <void util_poolset_fdclose_always (struct pool_set *set) at common/set.c:445>:
                                                                LOG()
                                                                util_replica_fdclose() <void util_replica_fdclose (struct pool_replica *rep) at common/set.c:3232>:
                                                                    util_part_fdclose() <void util_part_fdclose (struct pool_set_part *part) at common/set.c:1517>:
                                                                        LOG()
                                                                        os_close()
                                                        os_close()
                                                        os_unlink() <int os_unlink (const char *pathname) at core/os_posix.c:88>:
                                                            unlink()
                                                        Free() <Free_func Free at core/alloc.c:91>
                                                        util_poolset_set_size() <void util_poolset_set_size (struct pool_set *set) at common/set.c:949>:
                                                            LOG()
                                                    pmemops_persist()
                                                    heap_max_zone() <unsigned heap_max_zone (size_t size) at libpmemobj/heap.c:516>:
                                                    ZID_TO_ZONE()
                                                    heap_zone_init() <void heap_zone_init (struct palloc_heap *heap, uint32_t zone_id, uint32_t first_chunk_id) at libpmemobj/heap.c:559>:
                                                        ZID_TO_ZONE()
                                                        zone_calc_size_idx() <uint32_t zone_calc_size_idx (uint32_t zone_id, unsigned max_zone, size_t heap_size) at libpmemobj/heap.c:533>:
                                                            ASSERT()
                                                        ASSERT()
                                                        memblock_huge_init() <struct memory_block memblock_huge_init (struct palloc_heap *heap, uint32_t chunk_id, uint32_t zone_id, uint32_t size_idx) at libpmemobj/memblock.c:1329>:
                                                            heap_get_chunk_hdr()
                                                            VALGRIND_DO_MAKE_MEM_UNDEFINED()
                                                            VALGRIND_ANNOTATE_NEW_MEMORY()
                                                            chunk_get_chunk_hdr_value() <uint64_t chunk_get_chunk_hdr_value (uint16_t type, uint16_t flags, uint32_t size_idx) at libpmemobj/memblock.c:604>:
                                                                COMPILE_ERROR_ON()
                                                                memcpy()
                                                            util_atomic_store_explicit64()
                                                            pmemops_persist()
                                                            huge_write_footer() <void huge_write_footer (struct chunk_header *hdr, uint32_t size_idx) at libpmemobj/memblock.c:1166>:
                                                                VALGRIND_DO_MAKE_MEM_UNDEFINED()
                                                                VALGRIND_SET_CLEAN()
                                                            memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                                                memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                                                    heap_get_chunk_hdr()
                                                                memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                                                    heap_get_chunk_hdr()
                                                                    FATAL()
                                                        pmemops_persist()
                                                    memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                                        memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                                            heap_get_chunk_hdr()
                                                        memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                                            heap_get_chunk_hdr()
                                                            FATAL()
                                                    heap_free_chunk_reuse() <int heap_free_chunk_reuse (struct palloc_heap *heap, struct bucket *bucket, struct memory_block *m) at libpmemobj/heap.c:674>:
                                                        heap_coalesce_huge() <struct memory_block heap_coalesce_huge (struct palloc_heap *heap, struct bucket *b, const struct memory_block *m) at libpmemobj/heap.c:650>:
                                                            heap_get_adjacent_free_block() <int heap_get_adjacent_free_block (struct palloc_heap *heap, const struct memory_block *in, struct memory_block *out, int prev) at libpmemobj/heap.c:582>:
                                                                ZID_TO_ZONE()
                                                                memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                                                    memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                                                        heap_get_chunk_hdr()
                                                                    memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                                                        heap_get_chunk_hdr()
                                                                        FATAL()
                                                            bucket_remove_block() <int bucket_remove_block (struct bucket *b, const struct memory_block *m) at libpmemobj/bucket.c:178>
                                                            heap_coalesce() <struct memory_block heap_coalesce (struct palloc_heap *heap, const struct memory_block *blocks[], int n) at libpmemobj/heap.c:621>:
                                                                ASSERTne()
                                                                memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                                                    memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                                                        heap_get_chunk_hdr()
                                                                    memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                                                        heap_get_chunk_hdr()
                                                                        FATAL()
                                                        bucket_insert_block() <int bucket_insert_block (struct bucket *b, const struct memory_block *m) at libpmemobj/bucket.c:161>:
                                                            VALGRIND_DO_MAKE_MEM_NOACCESS()
                                                            VALGRIND_ANNOTATE_NEW_MEMORY()
                                            heap_ensure_run_bucket_filled() <int heap_ensure_run_bucket_filled (struct palloc_heap *heap, struct bucket *b, uint32_t units) at libpmemobj/heap.c:1083> (R):
                                                bucket_alloc_class() <struct alloc_class *bucket_alloc_class (struct bucket *b) at libpmemobj/bucket.c:152>
                                                ASSERTeq()
                                                heap_detach_and_try_discard_run() <int heap_detach_and_try_discard_run (struct palloc_heap *heap, struct bucket *b) at libpmemobj/heap.c:992>:
                                                    bucket_detach_run() <int bucket_detach_run (struct bucket *b, struct memory_block *m_out, int *empty) at libpmemobj/bucket.c:231>:
                                                        util_fetch_and_sub64()
                                                        VALGRIND_ANNOTATE_HAPPENS_AFTER()
                                                        VALGRIND_ANNOTATE_HAPPENS_BEFORE()
                                                        Zalloc() <void *Zalloc (size_t sz) at core/alloc.c:98>:
                                                            Malloc()
                                                            memset()
                                                    heap_discard_run() <void heap_discard_run (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/heap.c:974>:
                                                        heap_reclaim_run() <int heap_reclaim_run (struct palloc_heap *heap, struct memory_block *m, int startup) at libpmemobj/heap.c:733>:
                                                            heap_get_chunk_run()
                                                            heap_get_chunk_hdr()
                                                            alloc_class_by_run() <struct alloc_class *alloc_class_by_run (struct alloc_class_collection *ac, size_t unit_size, uint16_t flags, uint32_t size_idx) at libpmemobj/alloc_class.c:594>:
                                                                SIZE_TO_CLASS_MAP_INDEX()
                                                                ASSERT()
                                                                critnib_get() <void *critnib_get (struct critnib *c, uint64_t key) at libpmemobj/critnib.c:515>:
                                                                    load() <void load (void *src, void *dst) at libpmemobj/critnib.c:130>:
                                                                        util_atomic_load_explicit64()
                                                                    is_leaf() <inline bool is_leaf (struct critnib_node *n) at libpmemobj/critnib.c:150>:
                                                                    slice_index() <inline unsigned slice_index (uint64_t key, sh_t shift) at libpmemobj/critnib.c:178>:
                                                                    to_leaf() <inline struct critnib_leaf *to_leaf (struct critnib_node *n) at libpmemobj/critnib.c:159>:
                                                                RUN_CLASS_KEY_PACK()
                                                            recycler_element_new() <struct recycler_element recycler_element_new (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/recycler.c:122>:
                                                                SUPPRESS_UNUSED()
                                                                util_mutex_lock()
                                                                util_mutex_unlock()
                                                            ASSERTeq()
                                                            STATS_INC()
                                                            heap_get_recycler() <struct recycler *heap_get_recycler (struct palloc_heap *heap, size_t id, size_t nallocs) at libpmemobj/heap.c:106> (R):
                                                                util_atomic_load_explicit64()
                                                                recycler_new() <struct recycler *recycler_new (struct palloc_heap *heap, size_t nallocs, size_t *peak_arenas) at libpmemobj/recycler.c:74>:
                                                                    Malloc()
                                                                    ravl_new_sized() <struct ravl *ravl_new_sized (ravl_compare *compare, size_t data_size) at core/ravl.c:45>:
                                                                        Malloc()
                                                                        ERR()
                                                                    recycler_element_cmp() <int recycler_element_cmp (const void *lhs, const void *rhs) at libpmemobj/recycler.c:23>:
                                                                    memset()
                                                                    VEC_INIT()
                                                                    util_mutex_init()
                                                                    Free() <Free_func Free at core/alloc.c:91>
                                                                util_bool_compare_and_swap64()
                                                                recycler_delete() <void recycler_delete (struct recycler *r) at libpmemobj/recycler.c:107>:
                                                                    VEC_DELETE()
                                                                    util_mutex_destroy()
                                                                    ravl_delete() <void ravl_delete (struct ravl *ravl) at core/ravl.c:112>:
                                                                        ravl_delete_cb() <void ravl_delete_cb (struct ravl *ravl, ravl_cb cb, void *arg) at core/ravl.c:102>:
                                                                            ravl_foreach_node() <void ravl_foreach_node (struct ravl_node *n, ravl_cb cb, void *arg, int free_node) at core/ravl.c:74> (R):
                                                                                ravl_foreach_node() <void ravl_foreach_node (struct ravl_node *n, ravl_cb cb, void *arg, int free_node) at core/ravl.c:74> (recursive: see 21335)
                                                                                Free() <Free_func Free at core/alloc.c:91>
                                                                            Free() <Free_func Free at core/alloc.c:91>
                                                                    Free() <Free_func Free at core/alloc.c:91>
                                                                heap_get_recycler() <struct recycler *heap_get_recycler (struct palloc_heap *heap, size_t id, size_t nallocs) at libpmemobj/heap.c:106> (recursive: see 21317)
                                                            recycler_put() <int recycler_put (struct recycler *r, struct recycler_element element) at libpmemobj/recycler.c:154>:
                                                                util_mutex_lock()
                                                                ravl_emplace_copy() <int ravl_emplace_copy (struct ravl *ravl, const void *data) at core/ravl.c:384>:
                                                                    ravl_emplace() <int ravl_emplace (struct ravl *ravl, ravl_constr constr, const void *arg) at core/ravl.c:393>:
                                                                        LOG()
                                                                        ravl_new_node() <struct ravl_node *ravl_new_node (struct ravl *ravl, ravl_constr constr, const void *arg) at core/ravl.c:161>:
                                                                            Malloc()
                                                                            ERR()
                                                                            ravl_node_insert_constructor() <void ravl_node_insert_constructor (void *data, size_t data_size, const void *arg) at core/ravl.c:139>:
                                                                                SUPPRESS_UNUSED()
                                                                                memcpy()
                                                                        ravl_data() <void *ravl_data (struct ravl_node *node) at core/ravl.c:571>:
                                                                            memcpy()
                                                                        ravl_balance() <void ravl_balance (struct ravl *ravl, struct ravl_node *n) at core/ravl.c:337>:
                                                                            ravl_node_is() <int ravl_node_is (struct ravl_node *n, int i, int j) at core/ravl.c:306>:
                                                                                ravl_node_is_i_j() <int ravl_node_is_i_j (struct ravl_node *n, int i, int j) at core/ravl.c:296>:
                                                                                    ravl_node_rank_difference_parent() <int ravl_node_rank_difference_parent (struct ravl_node *p, struct ravl_node *n) at core/ravl.c:275>:
                                                                                        ravl_node_rank() <int ravl_node_rank (struct ravl_node *n) at core/ravl.c:261>:
                                                                            ravl_node_promote() <void ravl_node_promote (struct ravl_node *n) at core/ravl.c:315>
                                                                            ravl_node_sibling() <struct ravl_node *ravl_node_sibling (struct ravl_node *n) at core/ravl.c:209>:
                                                                                ravl_node_slot_type() <enum ravl_slot_type ravl_node_slot_type (struct ravl_node *n) at core/ravl.c:196>:
                                                                            ravl_node_rank_difference() <int ravl_node_rank_difference (struct ravl_node *n) at core/ravl.c:287>:
                                                                                ravl_node_rank_difference_parent() <int ravl_node_rank_difference_parent (struct ravl_node *p, struct ravl_node *n) at core/ravl.c:275>:
                                                                                    ravl_node_rank() <int ravl_node_rank (struct ravl_node *n) at core/ravl.c:261>:
                                                                            ravl_node_rank_difference_parent() <int ravl_node_rank_difference_parent (struct ravl_node *p, struct ravl_node *n) at core/ravl.c:275>:
                                                                                ravl_node_rank() <int ravl_node_rank (struct ravl_node *n) at core/ravl.c:261>:
                                                                            ravl_slot_opposite() <enum ravl_slot_type ravl_slot_opposite (enum ravl_slot_type t) at core/ravl.c:184>:
                                                                                ASSERTne()
                                                                            ravl_node_slot_type() <enum ravl_slot_type ravl_node_slot_type (struct ravl_node *n) at core/ravl.c:196>:
                                                                            ravl_rotate() <void ravl_rotate (struct ravl *ravl, struct ravl_node *n) at core/ravl.c:237>:
                                                                                ASSERTne()
                                                                                ravl_node_ref() <struct ravl_node **ravl_node_ref (struct ravl *ravl, struct ravl_node *n) at core/ravl.c:223>:
                                                                                    ravl_node_slot_type() <enum ravl_slot_type ravl_node_slot_type (struct ravl_node *n) at core/ravl.c:196>:
                                                                                ravl_node_slot_type() <enum ravl_slot_type ravl_node_slot_type (struct ravl_node *n) at core/ravl.c:196>:
                                                                                ravl_slot_opposite() <enum ravl_slot_type ravl_slot_opposite (enum ravl_slot_type t) at core/ravl.c:184>:
                                                                                    ASSERTne()
                                                                            ravl_node_demote() <void ravl_node_demote (struct ravl_node *n) at core/ravl.c:324>:
                                                                                ASSERT()
                                                                        Free() <Free_func Free at core/alloc.c:91>
                                                                    ravl_node_copy_constructor() <void ravl_node_copy_constructor (void *data, size_t data_size, const void *arg) at core/ravl.c:152>:
                                                                        memcpy()
                                                                util_mutex_unlock()
                                                            ERR()
                                                        heap_bucket_acquire() <struct bucket *heap_bucket_acquire (struct palloc_heap *heap, uint8_t class_id, uint16_t arena_id) at libpmemobj/heap.c:470>:
                                                            out() <void out (const char *fmt, ...) at core/out.c:480>:
                                                                va_start()
                                                                out_common() <} void out_common (const char *file, int line, const char *func, int level, const char *suffix, const char *fmt, va_list ap) at core/out.c:334>
                                                                va_end()
                                                            heap_thread_arena() <struct arena *heap_thread_arena (struct palloc_heap *heap) at libpmemobj/heap.c:414>:
                                                                os_tls_get() <void *os_tls_get (os_tls_key_t key) at core/os_thread_posix.c:62>:
                                                                    pthread_getspecific()
                                                                heap_thread_arena_assign() <struct arena *heap_thread_arena_assign (struct palloc_heap *heap) at libpmemobj/heap.c:381>:
                                                                    util_mutex_lock()
                                                                    ASSERTne()
                                                                    VEC_SIZE()
                                                                    VEC_FOREACH()
                                                                    LOG()
                                                                    heap_arena_thread_attach() <void heap_arena_thread_attach (struct palloc_heap *heap, struct arena *a) at libpmemobj/heap.c:249>:
                                                                        ASSERTeq()
                                                                        os_tls_get() <void *os_tls_get (os_tls_key_t key) at core/os_thread_posix.c:62>:
                                                                            pthread_getspecific()
                                                                        heap_arena_thread_detach() <void heap_arena_thread_detach (struct arena *a) at libpmemobj/heap.c:232>:
                                                                            util_fetch_and_sub64()
                                                                        ASSERTne()
                                                                        util_fetch_and_add64()
                                                                        os_tls_set() <int os_tls_set (os_tls_key_t key, const void *value) at core/os_thread_posix.c:53>:
                                                                            pthread_setspecific()
                                                                    util_mutex_unlock()
                                                                heap_global_arena_assign() <struct arena *heap_global_arena_assign (struct palloc_heap *heap) at libpmemobj/heap.c:348>:
                                                                    util_mutex_lock()
                                                                    ASSERTne()
                                                                    VEC_SIZE()
                                                                    VEC_FOREACH()
                                                                    LOG()
                                                                    util_mutex_unlock()
                                                                ASSERT()
                                                                ASSERTne()
                                                            ASSERTne()
                                                            VEC_ARR()
                                                            bucket_acquire() <struct bucket *bucket_acquire (struct bucket_locked *b) at libpmemobj/bucket.c:117>:
                                                                util_mutex_lock()
                                                        heap_run_into_free_chunk() <void heap_run_into_free_chunk (struct palloc_heap *heap, struct bucket *bucket, struct memory_block *m) at libpmemobj/heap.c:697>:
                                                            heap_get_chunk_hdr()
                                                            STATS_SUB()
                                                            util_mutex_lock()
                                                            memblock_huge_init() <struct memory_block memblock_huge_init (struct palloc_heap *heap, uint32_t chunk_id, uint32_t zone_id, uint32_t size_idx) at libpmemobj/memblock.c:1329>:
                                                                heap_get_chunk_hdr()
                                                                VALGRIND_DO_MAKE_MEM_UNDEFINED()
                                                                VALGRIND_ANNOTATE_NEW_MEMORY()
                                                                chunk_get_chunk_hdr_value() <uint64_t chunk_get_chunk_hdr_value (uint16_t type, uint16_t flags, uint32_t size_idx) at libpmemobj/memblock.c:604>:
                                                                    COMPILE_ERROR_ON()
                                                                    memcpy()
                                                                util_atomic_store_explicit64()
                                                                pmemops_persist()
                                                                huge_write_footer() <void huge_write_footer (struct chunk_header *hdr, uint32_t size_idx) at libpmemobj/memblock.c:1166>:
                                                                    VALGRIND_DO_MAKE_MEM_UNDEFINED()
                                                                    VALGRIND_SET_CLEAN()
                                                                memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                                                    memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                                                        heap_get_chunk_hdr()
                                                                    memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                                                        heap_get_chunk_hdr()
                                                                        FATAL()
                                                            heap_free_chunk_reuse() <int heap_free_chunk_reuse (struct palloc_heap *heap, struct bucket *bucket, struct memory_block *m) at libpmemobj/heap.c:674>:
                                                                heap_coalesce_huge() <struct memory_block heap_coalesce_huge (struct palloc_heap *heap, struct bucket *b, const struct memory_block *m) at libpmemobj/heap.c:650>:
                                                                    heap_get_adjacent_free_block() <int heap_get_adjacent_free_block (struct palloc_heap *heap, const struct memory_block *in, struct memory_block *out, int prev) at libpmemobj/heap.c:582>:
                                                                        ZID_TO_ZONE()
                                                                        memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                                                            memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                                                                heap_get_chunk_hdr()
                                                                            memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                                                                heap_get_chunk_hdr()
                                                                                FATAL()
                                                                    bucket_remove_block() <int bucket_remove_block (struct bucket *b, const struct memory_block *m) at libpmemobj/bucket.c:178>
                                                                    heap_coalesce() <struct memory_block heap_coalesce (struct palloc_heap *heap, const struct memory_block *blocks[], int n) at libpmemobj/heap.c:621>:
                                                                        ASSERTne()
                                                                        memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                                                            memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                                                                heap_get_chunk_hdr()
                                                                            memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                                                                heap_get_chunk_hdr()
                                                                                FATAL()
                                                                bucket_insert_block() <int bucket_insert_block (struct bucket *b, const struct memory_block *m) at libpmemobj/bucket.c:161>:
                                                                    VALGRIND_DO_MAKE_MEM_NOACCESS()
                                                                    VALGRIND_ANNOTATE_NEW_MEMORY()
                                                            util_mutex_unlock()
                                                        heap_bucket_release() <void heap_bucket_release (struct bucket *b) at libpmemobj/heap.c:498>:
                                                            bucket_release() <void bucket_release (struct bucket *b) at libpmemobj/bucket.c:127>:
                                                                util_mutex_unlock()
                                                heap_reuse_from_recycler() <int heap_reuse_from_recycler (struct palloc_heap *heap, struct bucket *b, uint32_t units, int force) at libpmemobj/heap.c:1034>:
                                                    bucket_alloc_class() <struct alloc_class *bucket_alloc_class (struct bucket *b) at libpmemobj/bucket.c:152>
                                                    heap_get_recycler() <struct recycler *heap_get_recycler (struct palloc_heap *heap, size_t id, size_t nallocs) at libpmemobj/heap.c:106> (R):
                                                        util_atomic_load_explicit64()
                                                        recycler_new() <struct recycler *recycler_new (struct palloc_heap *heap, size_t nallocs, size_t *peak_arenas) at libpmemobj/recycler.c:74>:
                                                            Malloc()
                                                            ravl_new_sized() <struct ravl *ravl_new_sized (ravl_compare *compare, size_t data_size) at core/ravl.c:45>:
                                                                Malloc()
                                                                ERR()
                                                            recycler_element_cmp() <int recycler_element_cmp (const void *lhs, const void *rhs) at libpmemobj/recycler.c:23>:
                                                            memset()
                                                            VEC_INIT()
                                                            util_mutex_init()
                                                            Free() <Free_func Free at core/alloc.c:91>
                                                        util_bool_compare_and_swap64()
                                                        recycler_delete() <void recycler_delete (struct recycler *r) at libpmemobj/recycler.c:107>:
                                                            VEC_DELETE()
                                                            util_mutex_destroy()
                                                            ravl_delete() <void ravl_delete (struct ravl *ravl) at core/ravl.c:112>:
                                                                ravl_delete_cb() <void ravl_delete_cb (struct ravl *ravl, ravl_cb cb, void *arg) at core/ravl.c:102>:
                                                                    ravl_foreach_node() <void ravl_foreach_node (struct ravl_node *n, ravl_cb cb, void *arg, int free_node) at core/ravl.c:74> (R):
                                                                        ravl_foreach_node() <void ravl_foreach_node (struct ravl_node *n, ravl_cb cb, void *arg, int free_node) at core/ravl.c:74> (recursive: see 21490)
                                                                        Free() <Free_func Free at core/alloc.c:91>
                                                                    Free() <Free_func Free at core/alloc.c:91>
                                                            Free() <Free_func Free at core/alloc.c:91>
                                                        heap_get_recycler() <struct recycler *heap_get_recycler (struct palloc_heap *heap, size_t id, size_t nallocs) at libpmemobj/heap.c:106> (recursive: see 21472)
                                                    ERR()
                                                    recycler_get() <int recycler_get (struct recycler *r, struct memory_block *m) at libpmemobj/recycler.c:171>:
                                                        util_mutex_lock()
                                                        ravl_find() <struct ravl_node *ravl_find (struct ravl *ravl, const void *data, enum ravl_predicate flags) at core/ravl.c:524>:
                                                            LOG()
                                                            ravl_data() <void *ravl_data (struct ravl_node *node) at core/ravl.c:571>:
                                                                memcpy()
                                                            ravl_predicate_holds() <int ravl_predicate_holds (int result, struct ravl_node **ret, struct ravl_node *n, enum ravl_predicate flags) at core/ravl.c:489>:
                                                                ravl_node_successor() <struct ravl_node *ravl_node_successor (struct ravl_node *n) at core/ravl.c:465>:
                                                                    ravl_node_cessor() <struct ravl_node *ravl_node_cessor (struct ravl_node *n, enum ravl_slot_type t) at core/ravl.c:443>:
                                                                        ravl_node_type_most() <struct ravl_node *ravl_node_type_most (struct ravl_node *n, enum ravl_slot_type t) at core/ravl.c:430>:
                                                                        ravl_slot_opposite() <enum ravl_slot_type ravl_slot_opposite (enum ravl_slot_type t) at core/ravl.c:184>:
                                                                            ASSERTne()
                                                                ravl_node_predecessor() <struct ravl_node *ravl_node_predecessor (struct ravl_node *n) at core/ravl.c:476>:
                                                                    ravl_node_cessor() <struct ravl_node *ravl_node_cessor (struct ravl_node *n, enum ravl_slot_type t) at core/ravl.c:443>:
                                                                        ravl_node_type_most() <struct ravl_node *ravl_node_type_most (struct ravl_node *n, enum ravl_slot_type t) at core/ravl.c:430>:
                                                                        ravl_slot_opposite() <enum ravl_slot_type ravl_slot_opposite (enum ravl_slot_type t) at core/ravl.c:184>:
                                                                            ASSERTne()
                                                        out() <void out (const char *fmt, ...) at core/out.c:480>:
                                                            va_start()
                                                            out_common() <} void out_common (const char *file, int line, const char *func, int level, const char *suffix, const char *fmt, va_list ap) at core/out.c:334>
                                                            va_end()
                                                        ravl_data() <void *ravl_data (struct ravl_node *node) at core/ravl.c:571>:
                                                            memcpy()
                                                        ravl_remove() <void ravl_remove (struct ravl *ravl, struct ravl_node *n) at core/ravl.c:545> (R):
                                                            LOG()
                                                            ravl_node_successor() <struct ravl_node *ravl_node_successor (struct ravl_node *n) at core/ravl.c:465>:
                                                                ravl_node_cessor() <struct ravl_node *ravl_node_cessor (struct ravl_node *n, enum ravl_slot_type t) at core/ravl.c:443>:
                                                                    ravl_node_type_most() <struct ravl_node *ravl_node_type_most (struct ravl_node *n, enum ravl_slot_type t) at core/ravl.c:430>:
                                                                    ravl_slot_opposite() <enum ravl_slot_type ravl_slot_opposite (enum ravl_slot_type t) at core/ravl.c:184>:
                                                                        ASSERTne()
                                                            memcpy()
                                                            ravl_remove() <void ravl_remove (struct ravl *ravl, struct ravl_node *n) at core/ravl.c:545> (recursive: see 21520)
                                                            ravl_node_ref() <struct ravl_node **ravl_node_ref (struct ravl *ravl, struct ravl_node *n) at core/ravl.c:223>:
                                                                ravl_node_slot_type() <enum ravl_slot_type ravl_node_slot_type (struct ravl_node *n) at core/ravl.c:196>:
                                                            Free() <Free_func Free at core/alloc.c:91>
                                                        heap_get_chunk_hdr()
                                                        memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                                            memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                                                heap_get_chunk_hdr()
                                                            memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                                                heap_get_chunk_hdr()
                                                                FATAL()
                                                        util_mutex_unlock()
                                                    bucket_attach_run() <int bucket_attach_run (struct bucket *b, const struct memory_block *m) at libpmemobj/bucket.c:206>:
                                                        util_mutex_lock()
                                                        bucket_memblock_insert_block() <int bucket_memblock_insert_block (const struct memory_block *m, void *b) at libpmemobj/bucket.c:197>:
                                                            bucket_insert_block() <int bucket_insert_block (struct bucket *b, const struct memory_block *m) at libpmemobj/bucket.c:161>:
                                                                VALGRIND_DO_MAKE_MEM_NOACCESS()
                                                                VALGRIND_ANNOTATE_NEW_MEMORY()
                                                        util_mutex_unlock()
                                                        util_fetch_and_add64()
                                                    heap_recycle_unused() <int heap_recycle_unused (struct palloc_heap *heap, struct recycler *recycler, struct bucket *defb, int force) at libpmemobj/heap.c:894>:
                                                        recycler_recalc() <struct empty_runs recycler_recalc (struct recycler *r, int force) at libpmemobj/recycler.c:207>:
                                                            VEC_INIT()
                                                            util_atomic_load64()
                                                            util_mutex_trylock()
                                                            ravl_find() <struct ravl_node *ravl_find (struct ravl *ravl, const void *data, enum ravl_predicate flags) at core/ravl.c:524>:
                                                                LOG()
                                                                ravl_data() <void *ravl_data (struct ravl_node *node) at core/ravl.c:571>:
                                                                    memcpy()
                                                                ravl_predicate_holds() <int ravl_predicate_holds (int result, struct ravl_node **ret, struct ravl_node *n, enum ravl_predicate flags) at core/ravl.c:489>:
                                                                    ravl_node_successor() <struct ravl_node *ravl_node_successor (struct ravl_node *n) at core/ravl.c:465>:
                                                                        ravl_node_cessor() <struct ravl_node *ravl_node_cessor (struct ravl_node *n, enum ravl_slot_type t) at core/ravl.c:443>:
                                                                            ravl_node_type_most() <struct ravl_node *ravl_node_type_most (struct ravl_node *n, enum ravl_slot_type t) at core/ravl.c:430>:
                                                                            ravl_slot_opposite() <enum ravl_slot_type ravl_slot_opposite (enum ravl_slot_type t) at core/ravl.c:184>:
                                                                                ASSERTne()
                                                                    ravl_node_predecessor() <struct ravl_node *ravl_node_predecessor (struct ravl_node *n) at core/ravl.c:476>:
                                                                        ravl_node_cessor() <struct ravl_node *ravl_node_cessor (struct ravl_node *n, enum ravl_slot_type t) at core/ravl.c:443>:
                                                                            ravl_node_type_most() <struct ravl_node *ravl_node_type_most (struct ravl_node *n, enum ravl_slot_type t) at core/ravl.c:430>:
                                                                            ravl_slot_opposite() <enum ravl_slot_type ravl_slot_opposite (enum ravl_slot_type t) at core/ravl.c:184>:
                                                                                ASSERTne()
                                                            ravl_data() <void *ravl_data (struct ravl_node *node) at core/ravl.c:571>:
                                                                memcpy()
                                                            memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                                                memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                                                    heap_get_chunk_hdr()
                                                                memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                                                    heap_get_chunk_hdr()
                                                                    FATAL()
                                                            recycler_element_new() <struct recycler_element recycler_element_new (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/recycler.c:122>:
                                                                SUPPRESS_UNUSED()
                                                                util_mutex_lock()
                                                                util_mutex_unlock()
                                                            ASSERT()
                                                            util_fetch_and_sub64()
                                                            MIN()
                                                            ravl_remove() <void ravl_remove (struct ravl *ravl, struct ravl_node *n) at core/ravl.c:545> (R):
                                                                LOG()
                                                                ravl_node_successor() <struct ravl_node *ravl_node_successor (struct ravl_node *n) at core/ravl.c:465>:
                                                                    ravl_node_cessor() <struct ravl_node *ravl_node_cessor (struct ravl_node *n, enum ravl_slot_type t) at core/ravl.c:443>:
                                                                        ravl_node_type_most() <struct ravl_node *ravl_node_type_most (struct ravl_node *n, enum ravl_slot_type t) at core/ravl.c:430>:
                                                                        ravl_slot_opposite() <enum ravl_slot_type ravl_slot_opposite (enum ravl_slot_type t) at core/ravl.c:184>:
                                                                            ASSERTne()
                                                                memcpy()
                                                                ravl_remove() <void ravl_remove (struct ravl *ravl, struct ravl_node *n) at core/ravl.c:545> (recursive: see 21583)
                                                                ravl_node_ref() <struct ravl_node **ravl_node_ref (struct ravl *ravl, struct ravl_node *n) at core/ravl.c:223>:
                                                                    ravl_node_slot_type() <enum ravl_slot_type ravl_node_slot_type (struct ravl_node *n) at core/ravl.c:196>:
                                                                Free() <Free_func Free at core/alloc.c:91>
                                                            VEC_PUSH_BACK()
                                                            VEC_FOREACH_BY_PTR()
                                                            ravl_emplace_copy() <int ravl_emplace_copy (struct ravl *ravl, const void *data) at core/ravl.c:384>:
                                                                ravl_emplace() <int ravl_emplace (struct ravl *ravl, ravl_constr constr, const void *arg) at core/ravl.c:393>:
                                                                    LOG()
                                                                    ravl_new_node() <struct ravl_node *ravl_new_node (struct ravl *ravl, ravl_constr constr, const void *arg) at core/ravl.c:161>:
                                                                        Malloc()
                                                                        ERR()
                                                                        ravl_node_insert_constructor() <void ravl_node_insert_constructor (void *data, size_t data_size, const void *arg) at core/ravl.c:139>:
                                                                            SUPPRESS_UNUSED()
                                                                            memcpy()
                                                                    ravl_data() <void *ravl_data (struct ravl_node *node) at core/ravl.c:571>:
                                                                        memcpy()
                                                                    ravl_balance() <void ravl_balance (struct ravl *ravl, struct ravl_node *n) at core/ravl.c:337>:
                                                                        ravl_node_is() <int ravl_node_is (struct ravl_node *n, int i, int j) at core/ravl.c:306>:
                                                                            ravl_node_is_i_j() <int ravl_node_is_i_j (struct ravl_node *n, int i, int j) at core/ravl.c:296>:
                                                                                ravl_node_rank_difference_parent() <int ravl_node_rank_difference_parent (struct ravl_node *p, struct ravl_node *n) at core/ravl.c:275>:
                                                                                    ravl_node_rank() <int ravl_node_rank (struct ravl_node *n) at core/ravl.c:261>:
                                                                        ravl_node_promote() <void ravl_node_promote (struct ravl_node *n) at core/ravl.c:315>
                                                                        ravl_node_sibling() <struct ravl_node *ravl_node_sibling (struct ravl_node *n) at core/ravl.c:209>:
                                                                            ravl_node_slot_type() <enum ravl_slot_type ravl_node_slot_type (struct ravl_node *n) at core/ravl.c:196>:
                                                                        ravl_node_rank_difference() <int ravl_node_rank_difference (struct ravl_node *n) at core/ravl.c:287>:
                                                                            ravl_node_rank_difference_parent() <int ravl_node_rank_difference_parent (struct ravl_node *p, struct ravl_node *n) at core/ravl.c:275>:
                                                                                ravl_node_rank() <int ravl_node_rank (struct ravl_node *n) at core/ravl.c:261>:
                                                                        ravl_node_rank_difference_parent() <int ravl_node_rank_difference_parent (struct ravl_node *p, struct ravl_node *n) at core/ravl.c:275>:
                                                                            ravl_node_rank() <int ravl_node_rank (struct ravl_node *n) at core/ravl.c:261>:
                                                                        ravl_slot_opposite() <enum ravl_slot_type ravl_slot_opposite (enum ravl_slot_type t) at core/ravl.c:184>:
                                                                            ASSERTne()
                                                                        ravl_node_slot_type() <enum ravl_slot_type ravl_node_slot_type (struct ravl_node *n) at core/ravl.c:196>:
                                                                        ravl_rotate() <void ravl_rotate (struct ravl *ravl, struct ravl_node *n) at core/ravl.c:237>:
                                                                            ASSERTne()
                                                                            ravl_node_ref() <struct ravl_node **ravl_node_ref (struct ravl *ravl, struct ravl_node *n) at core/ravl.c:223>:
                                                                                ravl_node_slot_type() <enum ravl_slot_type ravl_node_slot_type (struct ravl_node *n) at core/ravl.c:196>:
                                                                            ravl_node_slot_type() <enum ravl_slot_type ravl_node_slot_type (struct ravl_node *n) at core/ravl.c:196>:
                                                                            ravl_slot_opposite() <enum ravl_slot_type ravl_slot_opposite (enum ravl_slot_type t) at core/ravl.c:184>:
                                                                                ASSERTne()
                                                                        ravl_node_demote() <void ravl_node_demote (struct ravl_node *n) at core/ravl.c:324>:
                                                                            ASSERT()
                                                                    Free() <Free_func Free at core/alloc.c:91>
                                                                ravl_node_copy_constructor() <void ravl_node_copy_constructor (void *data, size_t data_size, const void *arg) at core/ravl.c:152>:
                                                                    memcpy()
                                                            VEC_CLEAR()
                                                            util_mutex_unlock()
                                                        VEC_SIZE()
                                                        heap_bucket_acquire() <struct bucket *heap_bucket_acquire (struct palloc_heap *heap, uint8_t class_id, uint16_t arena_id) at libpmemobj/heap.c:470>:
                                                            out() <void out (const char *fmt, ...) at core/out.c:480>:
                                                                va_start()
                                                                out_common() <} void out_common (const char *file, int line, const char *func, int level, const char *suffix, const char *fmt, va_list ap) at core/out.c:334>
                                                                va_end()
                                                            heap_thread_arena() <struct arena *heap_thread_arena (struct palloc_heap *heap) at libpmemobj/heap.c:414>:
                                                                os_tls_get() <void *os_tls_get (os_tls_key_t key) at core/os_thread_posix.c:62>:
                                                                    pthread_getspecific()
                                                                heap_thread_arena_assign() <struct arena *heap_thread_arena_assign (struct palloc_heap *heap) at libpmemobj/heap.c:381>:
                                                                    util_mutex_lock()
                                                                    ASSERTne()
                                                                    VEC_SIZE()
                                                                    VEC_FOREACH()
                                                                    LOG()
                                                                    heap_arena_thread_attach() <void heap_arena_thread_attach (struct palloc_heap *heap, struct arena *a) at libpmemobj/heap.c:249>:
                                                                        ASSERTeq()
                                                                        os_tls_get() <void *os_tls_get (os_tls_key_t key) at core/os_thread_posix.c:62>:
                                                                            pthread_getspecific()
                                                                        heap_arena_thread_detach() <void heap_arena_thread_detach (struct arena *a) at libpmemobj/heap.c:232>:
                                                                            util_fetch_and_sub64()
                                                                        ASSERTne()
                                                                        util_fetch_and_add64()
                                                                        os_tls_set() <int os_tls_set (os_tls_key_t key, const void *value) at core/os_thread_posix.c:53>:
                                                                            pthread_setspecific()
                                                                    util_mutex_unlock()
                                                                heap_global_arena_assign() <struct arena *heap_global_arena_assign (struct palloc_heap *heap) at libpmemobj/heap.c:348>:
                                                                    util_mutex_lock()
                                                                    ASSERTne()
                                                                    VEC_SIZE()
                                                                    VEC_FOREACH()
                                                                    LOG()
                                                                    util_mutex_unlock()
                                                                ASSERT()
                                                                ASSERTne()
                                                            ASSERTne()
                                                            VEC_ARR()
                                                            bucket_acquire() <struct bucket *bucket_acquire (struct bucket_locked *b) at libpmemobj/bucket.c:117>:
                                                                util_mutex_lock()
                                                        ASSERT()
                                                        VEC_FOREACH_BY_PTR()
                                                        heap_run_into_free_chunk() <void heap_run_into_free_chunk (struct palloc_heap *heap, struct bucket *bucket, struct memory_block *m) at libpmemobj/heap.c:697>:
                                                            heap_get_chunk_hdr()
                                                            STATS_SUB()
                                                            util_mutex_lock()
                                                            memblock_huge_init() <struct memory_block memblock_huge_init (struct palloc_heap *heap, uint32_t chunk_id, uint32_t zone_id, uint32_t size_idx) at libpmemobj/memblock.c:1329>:
                                                                heap_get_chunk_hdr()
                                                                VALGRIND_DO_MAKE_MEM_UNDEFINED()
                                                                VALGRIND_ANNOTATE_NEW_MEMORY()
                                                                chunk_get_chunk_hdr_value() <uint64_t chunk_get_chunk_hdr_value (uint16_t type, uint16_t flags, uint32_t size_idx) at libpmemobj/memblock.c:604>:
                                                                    COMPILE_ERROR_ON()
                                                                    memcpy()
                                                                util_atomic_store_explicit64()
                                                                pmemops_persist()
                                                                huge_write_footer() <void huge_write_footer (struct chunk_header *hdr, uint32_t size_idx) at libpmemobj/memblock.c:1166>:
                                                                    VALGRIND_DO_MAKE_MEM_UNDEFINED()
                                                                    VALGRIND_SET_CLEAN()
                                                                memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                                                    memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                                                        heap_get_chunk_hdr()
                                                                    memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                                                        heap_get_chunk_hdr()
                                                                        FATAL()
                                                            heap_free_chunk_reuse() <int heap_free_chunk_reuse (struct palloc_heap *heap, struct bucket *bucket, struct memory_block *m) at libpmemobj/heap.c:674>:
                                                                heap_coalesce_huge() <struct memory_block heap_coalesce_huge (struct palloc_heap *heap, struct bucket *b, const struct memory_block *m) at libpmemobj/heap.c:650>:
                                                                    heap_get_adjacent_free_block() <int heap_get_adjacent_free_block (struct palloc_heap *heap, const struct memory_block *in, struct memory_block *out, int prev) at libpmemobj/heap.c:582>:
                                                                        ZID_TO_ZONE()
                                                                        memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                                                            memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                                                                heap_get_chunk_hdr()
                                                                            memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                                                                heap_get_chunk_hdr()
                                                                                FATAL()
                                                                    bucket_remove_block() <int bucket_remove_block (struct bucket *b, const struct memory_block *m) at libpmemobj/bucket.c:178>
                                                                    heap_coalesce() <struct memory_block heap_coalesce (struct palloc_heap *heap, const struct memory_block *blocks[], int n) at libpmemobj/heap.c:621>:
                                                                        ASSERTne()
                                                                        memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                                                            memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                                                                heap_get_chunk_hdr()
                                                                            memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                                                                heap_get_chunk_hdr()
                                                                                FATAL()
                                                                bucket_insert_block() <int bucket_insert_block (struct bucket *b, const struct memory_block *m) at libpmemobj/bucket.c:161>:
                                                                    VALGRIND_DO_MAKE_MEM_NOACCESS()
                                                                    VALGRIND_ANNOTATE_NEW_MEMORY()
                                                            util_mutex_unlock()
                                                        heap_bucket_release() <void heap_bucket_release (struct bucket *b) at libpmemobj/heap.c:498>:
                                                            bucket_release() <void bucket_release (struct bucket *b) at libpmemobj/bucket.c:127>:
                                                                util_mutex_unlock()
                                                        VEC_DELETE()
                                                out() <void out (const char *fmt, ...) at core/out.c:480>:
                                                    va_start()
                                                    out_common() <} void out_common (const char *file, int line, const char *func, int level, const char *suffix, const char *fmt, va_list ap) at core/out.c:334>
                                                    va_end()
                                                heap_bucket_acquire() <struct bucket *heap_bucket_acquire (struct palloc_heap *heap, uint8_t class_id, uint16_t arena_id) at libpmemobj/heap.c:470>:
                                                    out() <void out (const char *fmt, ...) at core/out.c:480>:
                                                        va_start()
                                                        out_common() <} void out_common (const char *file, int line, const char *func, int level, const char *suffix, const char *fmt, va_list ap) at core/out.c:334>
                                                        va_end()
                                                    heap_thread_arena() <struct arena *heap_thread_arena (struct palloc_heap *heap) at libpmemobj/heap.c:414>:
                                                        os_tls_get() <void *os_tls_get (os_tls_key_t key) at core/os_thread_posix.c:62>:
                                                            pthread_getspecific()
                                                        heap_thread_arena_assign() <struct arena *heap_thread_arena_assign (struct palloc_heap *heap) at libpmemobj/heap.c:381>:
                                                            util_mutex_lock()
                                                            ASSERTne()
                                                            VEC_SIZE()
                                                            VEC_FOREACH()
                                                            LOG()
                                                            heap_arena_thread_attach() <void heap_arena_thread_attach (struct palloc_heap *heap, struct arena *a) at libpmemobj/heap.c:249>:
                                                                ASSERTeq()
                                                                os_tls_get() <void *os_tls_get (os_tls_key_t key) at core/os_thread_posix.c:62>:
                                                                    pthread_getspecific()
                                                                heap_arena_thread_detach() <void heap_arena_thread_detach (struct arena *a) at libpmemobj/heap.c:232>:
                                                                    util_fetch_and_sub64()
                                                                ASSERTne()
                                                                util_fetch_and_add64()
                                                                os_tls_set() <int os_tls_set (os_tls_key_t key, const void *value) at core/os_thread_posix.c:53>:
                                                                    pthread_setspecific()
                                                            util_mutex_unlock()
                                                        heap_global_arena_assign() <struct arena *heap_global_arena_assign (struct palloc_heap *heap) at libpmemobj/heap.c:348>:
                                                            util_mutex_lock()
                                                            ASSERTne()
                                                            VEC_SIZE()
                                                            VEC_FOREACH()
                                                            LOG()
                                                            util_mutex_unlock()
                                                        ASSERT()
                                                        ASSERTne()
                                                    ASSERTne()
                                                    VEC_ARR()
                                                    bucket_acquire() <struct bucket *bucket_acquire (struct bucket_locked *b) at libpmemobj/bucket.c:117>:
                                                        util_mutex_lock()
                                                heap_populate_bucket() <int heap_populate_bucket (struct palloc_heap *heap, struct bucket *bucket) at libpmemobj/heap.c:850>:
                                                    util_atomic_store_explicit32()
                                                    ZID_TO_ZONE()
                                                    VALGRIND_ADD_TO_GLOBAL_TX_IGNORE()
                                                    heap_zone_init() <void heap_zone_init (struct palloc_heap *heap, uint32_t zone_id, uint32_t first_chunk_id) at libpmemobj/heap.c:559>:
                                                        ZID_TO_ZONE()
                                                        zone_calc_size_idx() <uint32_t zone_calc_size_idx (uint32_t zone_id, unsigned max_zone, size_t heap_size) at libpmemobj/heap.c:533>:
                                                            ASSERT()
                                                        ASSERT()
                                                        memblock_huge_init() <struct memory_block memblock_huge_init (struct palloc_heap *heap, uint32_t chunk_id, uint32_t zone_id, uint32_t size_idx) at libpmemobj/memblock.c:1329>:
                                                            heap_get_chunk_hdr()
                                                            VALGRIND_DO_MAKE_MEM_UNDEFINED()
                                                            VALGRIND_ANNOTATE_NEW_MEMORY()
                                                            chunk_get_chunk_hdr_value() <uint64_t chunk_get_chunk_hdr_value (uint16_t type, uint16_t flags, uint32_t size_idx) at libpmemobj/memblock.c:604>:
                                                                COMPILE_ERROR_ON()
                                                                memcpy()
                                                            util_atomic_store_explicit64()
                                                            pmemops_persist()
                                                            huge_write_footer() <void huge_write_footer (struct chunk_header *hdr, uint32_t size_idx) at libpmemobj/memblock.c:1166>:
                                                                VALGRIND_DO_MAKE_MEM_UNDEFINED()
                                                                VALGRIND_SET_CLEAN()
                                                            memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                                                memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                                                    heap_get_chunk_hdr()
                                                                memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                                                    heap_get_chunk_hdr()
                                                                    FATAL()
                                                        pmemops_persist()
                                                    heap_reclaim_zone_garbage() <void heap_reclaim_zone_garbage (struct palloc_heap *heap, struct bucket *bucket, uint32_t zone_id) at libpmemobj/heap.c:775>:
                                                        ZID_TO_ZONE()
                                                        ASSERT()
                                                        memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                                            memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                                                heap_get_chunk_hdr()
                                                            memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                                                heap_get_chunk_hdr()
                                                                FATAL()
                                                        heap_reclaim_run() <int heap_reclaim_run (struct palloc_heap *heap, struct memory_block *m, int startup) at libpmemobj/heap.c:733>:
                                                            heap_get_chunk_run()
                                                            heap_get_chunk_hdr()
                                                            alloc_class_by_run() <struct alloc_class *alloc_class_by_run (struct alloc_class_collection *ac, size_t unit_size, uint16_t flags, uint32_t size_idx) at libpmemobj/alloc_class.c:594>:
                                                                SIZE_TO_CLASS_MAP_INDEX()
                                                                ASSERT()
                                                                critnib_get() <void *critnib_get (struct critnib *c, uint64_t key) at libpmemobj/critnib.c:515>:
                                                                    load() <void load (void *src, void *dst) at libpmemobj/critnib.c:130>:
                                                                        util_atomic_load_explicit64()
                                                                    is_leaf() <inline bool is_leaf (struct critnib_node *n) at libpmemobj/critnib.c:150>:
                                                                    slice_index() <inline unsigned slice_index (uint64_t key, sh_t shift) at libpmemobj/critnib.c:178>:
                                                                    to_leaf() <inline struct critnib_leaf *to_leaf (struct critnib_node *n) at libpmemobj/critnib.c:159>:
                                                                RUN_CLASS_KEY_PACK()
                                                            recycler_element_new() <struct recycler_element recycler_element_new (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/recycler.c:122>:
                                                                SUPPRESS_UNUSED()
                                                                util_mutex_lock()
                                                                util_mutex_unlock()
                                                            ASSERTeq()
                                                            STATS_INC()
                                                            heap_get_recycler() <struct recycler *heap_get_recycler (struct palloc_heap *heap, size_t id, size_t nallocs) at libpmemobj/heap.c:106> (R):
                                                                util_atomic_load_explicit64()
                                                                recycler_new() <struct recycler *recycler_new (struct palloc_heap *heap, size_t nallocs, size_t *peak_arenas) at libpmemobj/recycler.c:74>:
                                                                    Malloc()
                                                                    ravl_new_sized() <struct ravl *ravl_new_sized (ravl_compare *compare, size_t data_size) at core/ravl.c:45>:
                                                                        Malloc()
                                                                        ERR()
                                                                    recycler_element_cmp() <int recycler_element_cmp (const void *lhs, const void *rhs) at libpmemobj/recycler.c:23>:
                                                                    memset()
                                                                    VEC_INIT()
                                                                    util_mutex_init()
                                                                    Free() <Free_func Free at core/alloc.c:91>
                                                                util_bool_compare_and_swap64()
                                                                recycler_delete() <void recycler_delete (struct recycler *r) at libpmemobj/recycler.c:107>:
                                                                    VEC_DELETE()
                                                                    util_mutex_destroy()
                                                                    ravl_delete() <void ravl_delete (struct ravl *ravl) at core/ravl.c:112>:
                                                                        ravl_delete_cb() <void ravl_delete_cb (struct ravl *ravl, ravl_cb cb, void *arg) at core/ravl.c:102>:
                                                                            ravl_foreach_node() <void ravl_foreach_node (struct ravl_node *n, ravl_cb cb, void *arg, int free_node) at core/ravl.c:74> (R):
                                                                                ravl_foreach_node() <void ravl_foreach_node (struct ravl_node *n, ravl_cb cb, void *arg, int free_node) at core/ravl.c:74> (recursive: see 21844)
                                                                                Free() <Free_func Free at core/alloc.c:91>
                                                                            Free() <Free_func Free at core/alloc.c:91>
                                                                    Free() <Free_func Free at core/alloc.c:91>
                                                                heap_get_recycler() <struct recycler *heap_get_recycler (struct palloc_heap *heap, size_t id, size_t nallocs) at libpmemobj/heap.c:106> (recursive: see 21826)
                                                            recycler_put() <int recycler_put (struct recycler *r, struct recycler_element element) at libpmemobj/recycler.c:154>:
                                                                util_mutex_lock()
                                                                ravl_emplace_copy() <int ravl_emplace_copy (struct ravl *ravl, const void *data) at core/ravl.c:384>:
                                                                    ravl_emplace() <int ravl_emplace (struct ravl *ravl, ravl_constr constr, const void *arg) at core/ravl.c:393>:
                                                                        LOG()
                                                                        ravl_new_node() <struct ravl_node *ravl_new_node (struct ravl *ravl, ravl_constr constr, const void *arg) at core/ravl.c:161>:
                                                                            Malloc()
                                                                            ERR()
                                                                            ravl_node_insert_constructor() <void ravl_node_insert_constructor (void *data, size_t data_size, const void *arg) at core/ravl.c:139>:
                                                                                SUPPRESS_UNUSED()
                                                                                memcpy()
                                                                        ravl_data() <void *ravl_data (struct ravl_node *node) at core/ravl.c:571>:
                                                                            memcpy()
                                                                        ravl_balance() <void ravl_balance (struct ravl *ravl, struct ravl_node *n) at core/ravl.c:337>:
                                                                            ravl_node_is() <int ravl_node_is (struct ravl_node *n, int i, int j) at core/ravl.c:306>:
                                                                                ravl_node_is_i_j() <int ravl_node_is_i_j (struct ravl_node *n, int i, int j) at core/ravl.c:296>:
                                                                                    ravl_node_rank_difference_parent() <int ravl_node_rank_difference_parent (struct ravl_node *p, struct ravl_node *n) at core/ravl.c:275>:
                                                                                        ravl_node_rank() <int ravl_node_rank (struct ravl_node *n) at core/ravl.c:261>:
                                                                            ravl_node_promote() <void ravl_node_promote (struct ravl_node *n) at core/ravl.c:315>
                                                                            ravl_node_sibling() <struct ravl_node *ravl_node_sibling (struct ravl_node *n) at core/ravl.c:209>:
                                                                                ravl_node_slot_type() <enum ravl_slot_type ravl_node_slot_type (struct ravl_node *n) at core/ravl.c:196>:
                                                                            ravl_node_rank_difference() <int ravl_node_rank_difference (struct ravl_node *n) at core/ravl.c:287>:
                                                                                ravl_node_rank_difference_parent() <int ravl_node_rank_difference_parent (struct ravl_node *p, struct ravl_node *n) at core/ravl.c:275>:
                                                                                    ravl_node_rank() <int ravl_node_rank (struct ravl_node *n) at core/ravl.c:261>:
                                                                            ravl_node_rank_difference_parent() <int ravl_node_rank_difference_parent (struct ravl_node *p, struct ravl_node *n) at core/ravl.c:275>:
                                                                                ravl_node_rank() <int ravl_node_rank (struct ravl_node *n) at core/ravl.c:261>:
                                                                            ravl_slot_opposite() <enum ravl_slot_type ravl_slot_opposite (enum ravl_slot_type t) at core/ravl.c:184>:
                                                                                ASSERTne()
                                                                            ravl_node_slot_type() <enum ravl_slot_type ravl_node_slot_type (struct ravl_node *n) at core/ravl.c:196>:
                                                                            ravl_rotate() <void ravl_rotate (struct ravl *ravl, struct ravl_node *n) at core/ravl.c:237>:
                                                                                ASSERTne()
                                                                                ravl_node_ref() <struct ravl_node **ravl_node_ref (struct ravl *ravl, struct ravl_node *n) at core/ravl.c:223>:
                                                                                    ravl_node_slot_type() <enum ravl_slot_type ravl_node_slot_type (struct ravl_node *n) at core/ravl.c:196>:
                                                                                ravl_node_slot_type() <enum ravl_slot_type ravl_node_slot_type (struct ravl_node *n) at core/ravl.c:196>:
                                                                                ravl_slot_opposite() <enum ravl_slot_type ravl_slot_opposite (enum ravl_slot_type t) at core/ravl.c:184>:
                                                                                    ASSERTne()
                                                                            ravl_node_demote() <void ravl_node_demote (struct ravl_node *n) at core/ravl.c:324>:
                                                                                ASSERT()
                                                                        Free() <Free_func Free at core/alloc.c:91>
                                                                    ravl_node_copy_constructor() <void ravl_node_copy_constructor (void *data, size_t data_size, const void *arg) at core/ravl.c:152>:
                                                                        memcpy()
                                                                util_mutex_unlock()
                                                            ERR()
                                                        heap_run_into_free_chunk() <void heap_run_into_free_chunk (struct palloc_heap *heap, struct bucket *bucket, struct memory_block *m) at libpmemobj/heap.c:697>:
                                                            heap_get_chunk_hdr()
                                                            STATS_SUB()
                                                            util_mutex_lock()
                                                            memblock_huge_init() <struct memory_block memblock_huge_init (struct palloc_heap *heap, uint32_t chunk_id, uint32_t zone_id, uint32_t size_idx) at libpmemobj/memblock.c:1329>:
                                                                heap_get_chunk_hdr()
                                                                VALGRIND_DO_MAKE_MEM_UNDEFINED()
                                                                VALGRIND_ANNOTATE_NEW_MEMORY()
                                                                chunk_get_chunk_hdr_value() <uint64_t chunk_get_chunk_hdr_value (uint16_t type, uint16_t flags, uint32_t size_idx) at libpmemobj/memblock.c:604>:
                                                                    COMPILE_ERROR_ON()
                                                                    memcpy()
                                                                util_atomic_store_explicit64()
                                                                pmemops_persist()
                                                                huge_write_footer() <void huge_write_footer (struct chunk_header *hdr, uint32_t size_idx) at libpmemobj/memblock.c:1166>:
                                                                    VALGRIND_DO_MAKE_MEM_UNDEFINED()
                                                                    VALGRIND_SET_CLEAN()
                                                                memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                                                    memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                                                        heap_get_chunk_hdr()
                                                                    memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                                                        heap_get_chunk_hdr()
                                                                        FATAL()
                                                            heap_free_chunk_reuse() <int heap_free_chunk_reuse (struct palloc_heap *heap, struct bucket *bucket, struct memory_block *m) at libpmemobj/heap.c:674>:
                                                                heap_coalesce_huge() <struct memory_block heap_coalesce_huge (struct palloc_heap *heap, struct bucket *b, const struct memory_block *m) at libpmemobj/heap.c:650>:
                                                                    heap_get_adjacent_free_block() <int heap_get_adjacent_free_block (struct palloc_heap *heap, const struct memory_block *in, struct memory_block *out, int prev) at libpmemobj/heap.c:582>:
                                                                        ZID_TO_ZONE()
                                                                        memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                                                            memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                                                                heap_get_chunk_hdr()
                                                                            memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                                                                heap_get_chunk_hdr()
                                                                                FATAL()
                                                                    bucket_remove_block() <int bucket_remove_block (struct bucket *b, const struct memory_block *m) at libpmemobj/bucket.c:178>
                                                                    heap_coalesce() <struct memory_block heap_coalesce (struct palloc_heap *heap, const struct memory_block *blocks[], int n) at libpmemobj/heap.c:621>:
                                                                        ASSERTne()
                                                                        memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                                                            memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                                                                heap_get_chunk_hdr()
                                                                            memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                                                                heap_get_chunk_hdr()
                                                                                FATAL()
                                                                bucket_insert_block() <int bucket_insert_block (struct bucket *b, const struct memory_block *m) at libpmemobj/bucket.c:161>:
                                                                    VALGRIND_DO_MAKE_MEM_NOACCESS()
                                                                    VALGRIND_ANNOTATE_NEW_MEMORY()
                                                            util_mutex_unlock()
                                                        heap_free_chunk_reuse() <int heap_free_chunk_reuse (struct palloc_heap *heap, struct bucket *bucket, struct memory_block *m) at libpmemobj/heap.c:674>:
                                                            heap_coalesce_huge() <struct memory_block heap_coalesce_huge (struct palloc_heap *heap, struct bucket *b, const struct memory_block *m) at libpmemobj/heap.c:650>:
                                                                heap_get_adjacent_free_block() <int heap_get_adjacent_free_block (struct palloc_heap *heap, const struct memory_block *in, struct memory_block *out, int prev) at libpmemobj/heap.c:582>:
                                                                    ZID_TO_ZONE()
                                                                    memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                                                        memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                                                            heap_get_chunk_hdr()
                                                                        memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                                                            heap_get_chunk_hdr()
                                                                            FATAL()
                                                                bucket_remove_block() <int bucket_remove_block (struct bucket *b, const struct memory_block *m) at libpmemobj/bucket.c:178>
                                                                heap_coalesce() <struct memory_block heap_coalesce (struct palloc_heap *heap, const struct memory_block *blocks[], int n) at libpmemobj/heap.c:621>:
                                                                    ASSERTne()
                                                                    memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                                                        memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                                                            heap_get_chunk_hdr()
                                                                        memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                                                            heap_get_chunk_hdr()
                                                                            FATAL()
                                                            bucket_insert_block() <int bucket_insert_block (struct bucket *b, const struct memory_block *m) at libpmemobj/bucket.c:161>:
                                                                VALGRIND_DO_MAKE_MEM_NOACCESS()
                                                                VALGRIND_ANNOTATE_NEW_MEMORY()
                                                heap_bucket_release() <void heap_bucket_release (struct bucket *b) at libpmemobj/heap.c:498>:
                                                    bucket_release() <void bucket_release (struct bucket *b) at libpmemobj/bucket.c:127>:
                                                        util_mutex_unlock()
                                                heap_get_bestfit_block() <int heap_get_bestfit_block (struct palloc_heap *heap, struct bucket *b, struct memory_block *m) at libpmemobj/heap.c:1210> (recursive: see 20559)
                                                heap_run_create() <int heap_run_create (struct palloc_heap *heap, struct bucket *b, struct memory_block *m) at libpmemobj/heap.c:1065>:
                                                    bucket_alloc_class() <struct alloc_class *bucket_alloc_class (struct bucket *b) at libpmemobj/bucket.c:152>
                                                    memblock_run_init() <struct memory_block memblock_run_init (struct palloc_heap *heap, uint32_t chunk_id, uint32_t zone_id, struct run_descriptor *rdsc) at libpmemobj/memblock.c:1361>:
                                                        ASSERTne()
                                                        ZID_TO_ZONE()
                                                        heap_get_chunk_run()
                                                        SIZEOF_RUN()
                                                        VALGRIND_DO_MAKE_MEM_UNDEFINED()
                                                        VALGRIND_ADD_TO_TX()
                                                        memset()
                                                        VALGRIND_REMOVE_FROM_TX()
                                                        pmemops_flush()
                                                        VALGRIND_ANNOTATE_NEW_MEMORY()
                                                        pmemops_persist()
                                                        ASSERT()
                                                        chunk_get_chunk_hdr_value() <uint64_t chunk_get_chunk_hdr_value (uint16_t type, uint16_t flags, uint32_t size_idx) at libpmemobj/memblock.c:604>:
                                                            COMPILE_ERROR_ON()
                                                            memcpy()
                                                        util_atomic_store_explicit64()
                                                        memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                                            memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                                                heap_get_chunk_hdr()
                                                            memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                                                heap_get_chunk_hdr()
                                                                FATAL()
                                                    bucket_attach_run() <int bucket_attach_run (struct bucket *b, const struct memory_block *m) at libpmemobj/bucket.c:206>:
                                                        util_mutex_lock()
                                                        bucket_memblock_insert_block() <int bucket_memblock_insert_block (const struct memory_block *m, void *b) at libpmemobj/bucket.c:197>:
                                                            bucket_insert_block() <int bucket_insert_block (struct bucket *b, const struct memory_block *m) at libpmemobj/bucket.c:161>:
                                                                VALGRIND_DO_MAKE_MEM_NOACCESS()
                                                                VALGRIND_ANNOTATE_NEW_MEMORY()
                                                        util_mutex_unlock()
                                                        util_fetch_and_add64()
                                                    STATS_INC()
                                            ASSERT()
                                            heap_split_block() <void heap_split_block (struct palloc_heap *heap, struct bucket *b, struct memory_block *m, uint32_t units) at libpmemobj/heap.c:1172>:
                                                bucket_alloc_class() <struct alloc_class *bucket_alloc_class (struct bucket *b) at libpmemobj/bucket.c:152>
                                                ASSERT()
                                                memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                                    memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                                        heap_get_chunk_hdr()
                                                    memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                                        heap_get_chunk_hdr()
                                                        FATAL()
                                                bucket_insert_block() <int bucket_insert_block (struct bucket *b, const struct memory_block *m) at libpmemobj/bucket.c:161>:
                                                    VALGRIND_DO_MAKE_MEM_NOACCESS()
                                                    VALGRIND_ANNOTATE_NEW_MEMORY()
                                                LOG()
                                                memblock_huge_init() <struct memory_block memblock_huge_init (struct palloc_heap *heap, uint32_t chunk_id, uint32_t zone_id, uint32_t size_idx) at libpmemobj/memblock.c:1329>:
                                                    heap_get_chunk_hdr()
                                                    VALGRIND_DO_MAKE_MEM_UNDEFINED()
                                                    VALGRIND_ANNOTATE_NEW_MEMORY()
                                                    chunk_get_chunk_hdr_value() <uint64_t chunk_get_chunk_hdr_value (uint16_t type, uint16_t flags, uint32_t size_idx) at libpmemobj/memblock.c:604>:
                                                        COMPILE_ERROR_ON()
                                                        memcpy()
                                                    util_atomic_store_explicit64()
                                                    pmemops_persist()
                                                    huge_write_footer() <void huge_write_footer (struct chunk_header *hdr, uint32_t size_idx) at libpmemobj/memblock.c:1166>:
                                                        VALGRIND_DO_MAKE_MEM_UNDEFINED()
                                                        VALGRIND_SET_CLEAN()
                                                    memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                                        memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                                            heap_get_chunk_hdr()
                                                        memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                                            heap_get_chunk_hdr()
                                                            FATAL()
                                        alloc_prep_block() <int alloc_prep_block (struct palloc_heap *heap, const struct memory_block *m, palloc_constr constructor, void *arg, uint64_t extra_field, uint16_t object_flags, struct pobj_action_internal *out) at libpmemobj/palloc.c:112>:
                                            VALGRIND_DO_MEMPOOL_ALLOC()
                                            VALGRIND_DO_MAKE_MEM_UNDEFINED()
                                            VALGRIND_ANNOTATE_NEW_MEMORY()
                                            unlikely()
                                            pmemops_memset()
                                            VALGRIND_DO_MEMPOOL_FREE()
                                            HEAP_PTR_TO_OFF()
                                        bucket_insert_block() <int bucket_insert_block (struct bucket *b, const struct memory_block *m) at libpmemobj/bucket.c:161>:
                                            VALGRIND_DO_MAKE_MEM_NOACCESS()
                                            VALGRIND_ANNOTATE_NEW_MEMORY()
                                        bucket_active_block() <struct memory_block_reserved *bucket_active_block (struct bucket *b) at libpmemobj/bucket.c:265>:
                                        util_fetch_and_add64()
                                        heap_bucket_release() <void heap_bucket_release (struct bucket *b) at libpmemobj/heap.c:498>:
                                            bucket_release() <void bucket_release (struct bucket *b) at libpmemobj/bucket.c:127>:
                                                util_mutex_unlock()
                                    VALGRIND_ADD_TO_TX()
                                    HEAP_OFF_TO_PTR()
                                    pmemops_memcpy()
                                    VALGRIND_REMOVE_FROM_TX()
                                    operation_add_entry() <int operation_add_entry (struct operation_context *ctx, void *ptr, uint64_t value, ulog_operation_type type) at libpmemobj/memops.c:411>:
                                        OBJ_OFF_IS_VALID()
                                        operation_add_typed_entry() <int operation_add_typed_entry (struct operation_context *ctx, void *ptr, uint64_t value, ulog_operation_type type, enum operation_log_type log_type) at libpmemobj/memops.c:362>:
                                            Realloc()
                                            SIZEOF_ULOG()
                                            VECQ_CLEAR()
                                            operation_try_merge_entry() <int operation_try_merge_entry (struct operation_context *ctx, void *ptr, uint64_t value, ulog_operation_type type) at libpmemobj/memops.c:318>:
                                                OBJ_PTR_TO_OFF()
                                                VECQ_FOREACH_REVERSE()
                                                ulog_entry_offset() <uint64_t ulog_entry_offset (const struct ulog_entry_base *entry) at libpmemobj/ulog.c:68>:
                                                ulog_entry_type() <ulog_operation_type ulog_entry_type (const struct ulog_entry_base *entry) at libpmemobj/ulog.c:59>:
                                                    ULOG_OPERATION_FROM_OFFSET()
                                                operation_merge() <inline void operation_merge (struct ulog_entry_base *entry, uint64_t value, ulog_operation_type type) at libpmemobj/memops.c:288>:
                                                    ASSERT()
                                            ulog_entry_val_create() <struct ulog_entry_val *ulog_entry_val_create (struct ulog *ulog, size_t offset, uint64_t *dest, uint64_t value, ulog_operation_type type, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:372>:
                                                COMPILE_ERROR_ON()
                                                ULOG_OPERATION()
                                                pmemops_memcpy()
                                            operation_merge_entry_add() <void operation_merge_entry_add (struct operation_context *ctx, struct ulog_entry_val *entry) at libpmemobj/memops.c:344>:
                                                VECQ_SIZE()
                                                VECQ_DEQUEUE()
                                                VECQ_ENQUEUE()
                                                LOG()
                                            ulog_entry_size() <size_t ulog_entry_size (const struct ulog_entry_base *entry) at libpmemobj/ulog.c:77>:
                                                ulog_entry_type() <ulog_operation_type ulog_entry_type (const struct ulog_entry_base *entry) at libpmemobj/ulog.c:59>:
                                                    ULOG_OPERATION_FROM_OFFSET()
                                                CACHELINE_ALIGN()
                                                ASSERT()
                                    palloc_exec_actions() <void palloc_exec_actions (struct palloc_heap *heap, struct operation_context *ctx, struct pobj_action_internal *actv, size_t actvcnt) at libpmemobj/palloc.c:526>:
                                        qsort()
                                        palloc_action_compare() <int palloc_action_compare (const void *lhs, const void *rhs) at libpmemobj/palloc.c:507>:
                                        ASSERTeq()
                                        util_mutex_lock()
                                        pmemops_drain()
                                        operation_process() <void operation_process (struct operation_context *ctx) at libpmemobj/memops.c:776>:
                                            ulog_entry_type() <ulog_operation_type ulog_entry_type (const struct ulog_entry_base *entry) at libpmemobj/ulog.c:59>:
                                                ULOG_OPERATION_FROM_OFFSET()
                                            ulog_entry_apply() <void ulog_entry_apply (const struct ulog_entry_base *e, int persist, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:526>:
                                                ulog_entry_type() <ulog_operation_type ulog_entry_type (const struct ulog_entry_base *entry) at libpmemobj/ulog.c:59>:
                                                    ULOG_OPERATION_FROM_OFFSET()
                                                ulog_entry_offset() <uint64_t ulog_entry_offset (const struct ulog_entry_base *entry) at libpmemobj/ulog.c:68>:
                                                f()
                                                VALGRIND_ADD_TO_TX()
                                                pmemops_memset()
                                                pmemops_memcpy()
                                                ASSERT()
                                                VALGRIND_REMOVE_FROM_TX()
                                            operation_process_persistent_redo() <void operation_process_persistent_redo (struct operation_context *ctx) at libpmemobj/memops.c:654>:
                                                ASSERTeq()
                                                ulog_store() <void ulog_store (struct ulog *dest, struct ulog *src, size_t nbytes, size_t ulog_base_nbytes, size_t ulog_total_capacity, struct ulog_next *next, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:288>:
                                                    MIN()
                                                    CACHELINE_ALIGN()
                                                    ASSERT()
                                                    ulog_by_offset() <struct ulog *ulog_by_offset (size_t offset, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:36>:
                                                        CACHELINE_ALIGN()
                                                    VEC_ARR()
                                                    ASSERTne()
                                                    IS_CACHELINE_ALIGNED()
                                                    VALGRIND_ADD_TO_TX()
                                                    pmemops_memcpy()
                                                    VALGRIND_REMOVE_FROM_TX()
                                                    pmemops_drain()
                                                    VEC_SIZE()
                                                    VEC_FRONT()
                                                    ulog_checksum() <int ulog_checksum (struct ulog *ulog, size_t ulog_base_bytes, int insert) at libpmemobj/ulog.c:275>:
                                                        util_checksum() <int util_checksum (void *addr, size_t len, uint64_t *csump, int insert, size_t skip_off) at core/util.c:178>:
                                                            util_checksum_compute() <uint64_t util_checksum_compute (void *addr, size_t len, uint64_t *csump, size_t skip_off) at core/util.c:134>:
                                                                abort()
                                                                le32toh()
                                                            htole64()
                                                        SIZEOF_ULOG()
                                                    SIZEOF_ULOG()
                                                ulog_process() <void ulog_process (struct ulog *ulog, ulog_check_offset_fn check, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:786>:
                                                    SUPPRESS_UNUSED()
                                                    LOG()
                                                    ulog_check() <int ulog_check (struct ulog *ulog, ulog_check_offset_fn check, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:881>:
                                                        LOG()
                                                        ulog_foreach_entry() <int ulog_foreach_entry (struct ulog *ulog, ulog_entry_cb cb, void *arg, const struct pmem_ops *ops) at libpmemobj/ulog.c:180>
                                                        ulog_check_entry() <int ulog_check_entry (struct ulog_entry_base *e, void *arg, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:862>:
                                                            ulog_entry_offset() <uint64_t ulog_entry_offset (const struct ulog_entry_base *entry) at libpmemobj/ulog.c:68>:
                                                            check()
                                                            LOG()
                                                    ulog_foreach_entry() <int ulog_foreach_entry (struct ulog *ulog, ulog_entry_cb cb, void *arg, const struct pmem_ops *ops) at libpmemobj/ulog.c:180>
                                                    ulog_process_entry() <int ulog_process_entry (struct ulog_entry_base *e, void *arg, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:591>:
                                                        SUPPRESS_UNUSED()
                                                        ulog_entry_apply() <void ulog_entry_apply (const struct ulog_entry_base *e, int persist, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:526>:
                                                            ulog_entry_type() <ulog_operation_type ulog_entry_type (const struct ulog_entry_base *entry) at libpmemobj/ulog.c:59>:
                                                                ULOG_OPERATION_FROM_OFFSET()
                                                            ulog_entry_offset() <uint64_t ulog_entry_offset (const struct ulog_entry_base *entry) at libpmemobj/ulog.c:68>:
                                                            f()
                                                            VALGRIND_ADD_TO_TX()
                                                            pmemops_memset()
                                                            pmemops_memcpy()
                                                            ASSERT()
                                                            VALGRIND_REMOVE_FROM_TX()
                                                    pmemops_drain()
                                                ulog_clobber() <void ulog_clobber (struct ulog *dest, struct ulog_next *next, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:694>:
                                                    memset()
                                                    VEC_SIZE()
                                                    VEC_FRONT()
                                                    pmemops_memcpy()
                                            operation_process_persistent_undo() <void operation_process_persistent_undo (struct operation_context *ctx) at libpmemobj/memops.c:673>:
                                                ASSERTeq()
                                                ulog_process() <void ulog_process (struct ulog *ulog, ulog_check_offset_fn check, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:786>:
                                                    SUPPRESS_UNUSED()
                                                    LOG()
                                                    ulog_check() <int ulog_check (struct ulog *ulog, ulog_check_offset_fn check, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:881>:
                                                        LOG()
                                                        ulog_foreach_entry() <int ulog_foreach_entry (struct ulog *ulog, ulog_entry_cb cb, void *arg, const struct pmem_ops *ops) at libpmemobj/ulog.c:180>
                                                        ulog_check_entry() <int ulog_check_entry (struct ulog_entry_base *e, void *arg, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:862>:
                                                            ulog_entry_offset() <uint64_t ulog_entry_offset (const struct ulog_entry_base *entry) at libpmemobj/ulog.c:68>:
                                                            check()
                                                            LOG()
                                                    ulog_foreach_entry() <int ulog_foreach_entry (struct ulog *ulog, ulog_entry_cb cb, void *arg, const struct pmem_ops *ops) at libpmemobj/ulog.c:180>
                                                    ulog_process_entry() <int ulog_process_entry (struct ulog_entry_base *e, void *arg, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:591>:
                                                        SUPPRESS_UNUSED()
                                                        ulog_entry_apply() <void ulog_entry_apply (const struct ulog_entry_base *e, int persist, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:526>:
                                                            ulog_entry_type() <ulog_operation_type ulog_entry_type (const struct ulog_entry_base *entry) at libpmemobj/ulog.c:59>:
                                                                ULOG_OPERATION_FROM_OFFSET()
                                                            ulog_entry_offset() <uint64_t ulog_entry_offset (const struct ulog_entry_base *entry) at libpmemobj/ulog.c:68>:
                                                            f()
                                                            VALGRIND_ADD_TO_TX()
                                                            pmemops_memset()
                                                            pmemops_memcpy()
                                                            ASSERT()
                                                            VALGRIND_REMOVE_FROM_TX()
                                                    pmemops_drain()
                                            ulog_process() <void ulog_process (struct ulog *ulog, ulog_check_offset_fn check, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:786>:
                                                SUPPRESS_UNUSED()
                                                LOG()
                                                ulog_check() <int ulog_check (struct ulog *ulog, ulog_check_offset_fn check, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:881>:
                                                    LOG()
                                                    ulog_foreach_entry() <int ulog_foreach_entry (struct ulog *ulog, ulog_entry_cb cb, void *arg, const struct pmem_ops *ops) at libpmemobj/ulog.c:180>
                                                    ulog_check_entry() <int ulog_check_entry (struct ulog_entry_base *e, void *arg, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:862>:
                                                        ulog_entry_offset() <uint64_t ulog_entry_offset (const struct ulog_entry_base *entry) at libpmemobj/ulog.c:68>:
                                                        check()
                                                        LOG()
                                                ulog_foreach_entry() <int ulog_foreach_entry (struct ulog *ulog, ulog_entry_cb cb, void *arg, const struct pmem_ops *ops) at libpmemobj/ulog.c:180>
                                                ulog_process_entry() <int ulog_process_entry (struct ulog_entry_base *e, void *arg, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:591>:
                                                    SUPPRESS_UNUSED()
                                                    ulog_entry_apply() <void ulog_entry_apply (const struct ulog_entry_base *e, int persist, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:526>:
                                                        ulog_entry_type() <ulog_operation_type ulog_entry_type (const struct ulog_entry_base *entry) at libpmemobj/ulog.c:59>:
                                                            ULOG_OPERATION_FROM_OFFSET()
                                                        ulog_entry_offset() <uint64_t ulog_entry_offset (const struct ulog_entry_base *entry) at libpmemobj/ulog.c:68>:
                                                        f()
                                                        VALGRIND_ADD_TO_TX()
                                                        pmemops_memset()
                                                        pmemops_memcpy()
                                                        ASSERT()
                                                        VALGRIND_REMOVE_FROM_TX()
                                                pmemops_drain()
                                        util_mutex_unlock()
                                        operation_finish() <void operation_finish (struct operation_context *ctx, unsigned flags) at libpmemobj/memops.c:814>:
                                            ASSERTne()
                                            out() <void out (const char *fmt, ...) at core/out.c:480>:
                                                va_start()
                                                out_common() <} void out_common (const char *file, int line, const char *func, int level, const char *suffix, const char *fmt, va_list ap) at core/out.c:334>
                                                va_end()
                                            ulog_clobber_data() <int ulog_clobber_data (struct ulog *ulog_first, struct ulog_next *next, ulog_free_fn ulog_free, ulog_rm_user_buffer_fn user_buff_remove, const struct pmem_ops *p_ops, unsigned flags) at libpmemobj/ulog.c:713>:
                                                ASSERTne()
                                                ulog_inc_gen_num() <void ulog_inc_gen_num (struct ulog *ulog, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:605>:
                                                    VALGRIND_ADD_TO_TX()
                                                    pmemops_persist()
                                                    VALGRIND_SET_CLEAN()
                                                    VALGRIND_REMOVE_FROM_TX()
                                                VEC_SIZE()
                                                VEC_GET()
                                                ulog_by_offset() <struct ulog *ulog_by_offset (size_t offset, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:36>:
                                                    CACHELINE_ALIGN()
                                                ulog_free_next() <int ulog_free_next (struct ulog *u, const struct pmem_ops *p_ops, ulog_free_fn ulog_free, ulog_rm_user_buffer_fn user_buff_remove, uint64_t flags) at libpmemobj/ulog.c:625>:
                                                    VEC()
                                                    VEC_INIT()
                                                    ulog_by_offset() <struct ulog *ulog_by_offset (size_t offset, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:36>:
                                                        CACHELINE_ALIGN()
                                                    pmemops_persist()
                                                    VEC_PUSH_BACK()
                                                    LOG()
                                                    out() <void out (const char *fmt, ...) at core/out.c:480>:
                                                        va_start()
                                                        out_common() <} void out_common (const char *file, int line, const char *func, int level, const char *suffix, const char *fmt, va_list ap) at core/out.c:334>
                                                        va_end()
                                                    VEC_FOREACH_REVERSE()
                                                    VEC_DELETE()
                                            operation_user_buffer_remove() <int operation_user_buffer_remove (void *base, void *addr) at libpmemobj/memops.c:242>:
                                                util_mutex_lock()
                                                ravl_find() <struct ravl_node *ravl_find (struct ravl *ravl, const void *data, enum ravl_predicate flags) at core/ravl.c:524>:
                                                    LOG()
                                                    ravl_data() <void *ravl_data (struct ravl_node *node) at core/ravl.c:571>:
                                                        memcpy()
                                                    ravl_predicate_holds() <int ravl_predicate_holds (int result, struct ravl_node **ret, struct ravl_node *n, enum ravl_predicate flags) at core/ravl.c:489>:
                                                        ravl_node_successor() <struct ravl_node *ravl_node_successor (struct ravl_node *n) at core/ravl.c:465>:
                                                            ravl_node_cessor() <struct ravl_node *ravl_node_cessor (struct ravl_node *n, enum ravl_slot_type t) at core/ravl.c:443>:
                                                                ravl_node_type_most() <struct ravl_node *ravl_node_type_most (struct ravl_node *n, enum ravl_slot_type t) at core/ravl.c:430>:
                                                                ravl_slot_opposite() <enum ravl_slot_type ravl_slot_opposite (enum ravl_slot_type t) at core/ravl.c:184>:
                                                                    ASSERTne()
                                                        ravl_node_predecessor() <struct ravl_node *ravl_node_predecessor (struct ravl_node *n) at core/ravl.c:476>:
                                                            ravl_node_cessor() <struct ravl_node *ravl_node_cessor (struct ravl_node *n, enum ravl_slot_type t) at core/ravl.c:443>:
                                                                ravl_node_type_most() <struct ravl_node *ravl_node_type_most (struct ravl_node *n, enum ravl_slot_type t) at core/ravl.c:430>:
                                                                ravl_slot_opposite() <enum ravl_slot_type ravl_slot_opposite (enum ravl_slot_type t) at core/ravl.c:184>:
                                                                    ASSERTne()
                                                ASSERTne()
                                                ravl_remove() <void ravl_remove (struct ravl *ravl, struct ravl_node *n) at core/ravl.c:545> (R):
                                                    LOG()
                                                    ravl_node_successor() <struct ravl_node *ravl_node_successor (struct ravl_node *n) at core/ravl.c:465>:
                                                        ravl_node_cessor() <struct ravl_node *ravl_node_cessor (struct ravl_node *n, enum ravl_slot_type t) at core/ravl.c:443>:
                                                            ravl_node_type_most() <struct ravl_node *ravl_node_type_most (struct ravl_node *n, enum ravl_slot_type t) at core/ravl.c:430>:
                                                            ravl_slot_opposite() <enum ravl_slot_type ravl_slot_opposite (enum ravl_slot_type t) at core/ravl.c:184>:
                                                                ASSERTne()
                                                    memcpy()
                                                    ravl_remove() <void ravl_remove (struct ravl *ravl, struct ravl_node *n) at core/ravl.c:545> (recursive: see 22251)
                                                    ravl_node_ref() <struct ravl_node **ravl_node_ref (struct ravl *ravl, struct ravl_node *n) at core/ravl.c:223>:
                                                        ravl_node_slot_type() <enum ravl_slot_type ravl_node_slot_type (struct ravl_node *n) at core/ravl.c:196>:
                                                    Free() <Free_func Free at core/alloc.c:91>
                                                util_mutex_unlock()
                                            ulog_free_next() <int ulog_free_next (struct ulog *u, const struct pmem_ops *p_ops, ulog_free_fn ulog_free, ulog_rm_user_buffer_fn user_buff_remove, uint64_t flags) at libpmemobj/ulog.c:625>:
                                                VEC()
                                                VEC_INIT()
                                                ulog_by_offset() <struct ulog *ulog_by_offset (size_t offset, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:36>:
                                                    CACHELINE_ALIGN()
                                                pmemops_persist()
                                                VEC_PUSH_BACK()
                                                LOG()
                                                out() <void out (const char *fmt, ...) at core/out.c:480>:
                                                    va_start()
                                                    out_common() <} void out_common (const char *file, int line, const char *func, int level, const char *suffix, const char *fmt, va_list ap) at core/out.c:334>
                                                    va_end()
                                                VEC_FOREACH_REVERSE()
                                                VEC_DELETE()
                                            ulog_capacity() <size_t ulog_capacity (struct ulog *ulog, size_t ulog_base_bytes, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:206>:
                                                ulog_next() <struct ulog *ulog_next (struct ulog *ulog, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:50>:
                                                    ulog_by_offset() <struct ulog *ulog_by_offset (size_t offset, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:36>:
                                                        CACHELINE_ALIGN()
                                            VEC_CLEAR()
                                            ulog_rebuild_next_vec() <void ulog_rebuild_next_vec (struct ulog *ulog, struct ulog_next *next, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:223>:
                                                VEC_PUSH_BACK()
                                                ulog_next() <struct ulog *ulog_next (struct ulog *ulog, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:50>:
                                                    ulog_by_offset() <struct ulog *ulog_by_offset (size_t offset, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:36>:
                                                        CACHELINE_ALIGN()
                                ASSERTeq()
                                pmalloc_operation_release() <void pmalloc_operation_release (PMEMobjpool *pop) at libpmemobj/pmalloc.c:83>:
                                    lane_release() <void lane_release (PMEMobjpool *pop) at libpmemobj/lane.c:546>:
                                        get_lane_info_record() <inline struct lane_info *get_lane_info_record (PMEMobjpool *pop) at libpmemobj/lane.c:466>:
                                            likely()
                                            unlikely()
                                            lane_info_ht_boot() <inline void lane_info_ht_boot (void) at libpmemobj/lane.c:74>:
                                                lane_info_create() <inline void lane_info_create (void) at libpmemobj/lane.c:39>:
                                                    critnib_new() <struct critnib *critnib_new (void) at libpmemobj/critnib.c:187>:
                                                        Zalloc() <void *Zalloc (size_t sz) at core/alloc.c:98>:
                                                            Malloc()
                                                            memset()
                                                        util_mutex_init()
                                                        VALGRIND_HG_DRD_DISABLE_CHECKING()
                                                    FATAL()
                                                os_tls_set() <int os_tls_set (os_tls_key_t key, const void *value) at core/os_thread_posix.c:53>:
                                                    pthread_setspecific()
                                                FATAL()
                                            critnib_get() <void *critnib_get (struct critnib *c, uint64_t key) at libpmemobj/critnib.c:515>:
                                                load() <void load (void *src, void *dst) at libpmemobj/critnib.c:130>:
                                                    util_atomic_load_explicit64()
                                                is_leaf() <inline bool is_leaf (struct critnib_node *n) at libpmemobj/critnib.c:150>:
                                                slice_index() <inline unsigned slice_index (uint64_t key, sh_t shift) at libpmemobj/critnib.c:178>:
                                                to_leaf() <inline struct critnib_leaf *to_leaf (struct critnib_node *n) at libpmemobj/critnib.c:159>:
                                            Malloc()
                                            FATAL()
                                            critnib_insert() <int critnib_insert (struct critnib *c, uint64_t key, void *value) at libpmemobj/critnib.c:340>:
                                                util_mutex_lock()
                                                alloc_leaf() <struct critnib_leaf *alloc_leaf (struct critnib *__restrict c) at libpmemobj/critnib.c:311>:
                                                    Malloc()
                                                    ERR()
                                                    VALGRIND_ANNOTATE_NEW_MEMORY()
                                                util_mutex_unlock()
                                                VALGRIND_HG_DRD_DISABLE_CHECKING()
                                                is_leaf() <inline bool is_leaf (struct critnib_node *n) at libpmemobj/critnib.c:150>:
                                                path_mask() <inline uint64_t path_mask (sh_t shift) at libpmemobj/critnib.c:169>:
                                                slice_index() <inline unsigned slice_index (uint64_t key, sh_t shift) at libpmemobj/critnib.c:178>:
                                                store() <void store (void *dst, void *src) at libpmemobj/critnib.c:140>:
                                                    util_atomic_store_explicit64()
                                                to_leaf() <inline struct critnib_leaf *to_leaf (struct critnib_node *n) at libpmemobj/critnib.c:159>:
                                                ASSERT()
                                                free_leaf() <void free_leaf (struct critnib *__restrict c, struct critnib_leaf *__restrict k) at libpmemobj/critnib.c:298>
                                                util_mssb_index64()
                                                alloc_node() <struct critnib_node *alloc_node (struct critnib *__restrict c) at libpmemobj/critnib.c:274>:
                                                    Malloc()
                                                    ERR()
                                                    VALGRIND_ANNOTATE_NEW_MEMORY()
                                        ASSERTne()
                                        unlikely()
                                        FATAL()
                                        util_bool_compare_and_swap64()
                            lane_undo_extend() <int lane_undo_extend (void *base, uint64_t *redo, uint64_t gen_num) at libpmemobj/lane.c:179>:
                                SIZEOF_ALIGNED_ULOG()
                                pmalloc_construct() <int pmalloc_construct (PMEMobjpool *pop, uint64_t *off, size_t size, palloc_constr constructor, void *arg, uint64_t extra_field, uint16_t object_flags, uint16_t class_id) at libpmemobj/pmalloc.c:119>:
                                    pmalloc_operation_hold_type() <struct operation_context *pmalloc_operation_hold_type (PMEMobjpool *pop, enum pmalloc_operation_type type, int start) at libpmemobj/pmalloc.c:45>:
                                        lane_hold() <unsigned lane_hold (PMEMobjpool *pop, struct lane **lanep) at libpmemobj/lane.c:510>:
                                            get_lane_info_record() <inline struct lane_info *get_lane_info_record (PMEMobjpool *pop) at libpmemobj/lane.c:466>:
                                                likely()
                                                unlikely()
                                                lane_info_ht_boot() <inline void lane_info_ht_boot (void) at libpmemobj/lane.c:74>:
                                                    lane_info_create() <inline void lane_info_create (void) at libpmemobj/lane.c:39>:
                                                        critnib_new() <struct critnib *critnib_new (void) at libpmemobj/critnib.c:187>:
                                                            Zalloc() <void *Zalloc (size_t sz) at core/alloc.c:98>:
                                                                Malloc()
                                                                memset()
                                                            util_mutex_init()
                                                            VALGRIND_HG_DRD_DISABLE_CHECKING()
                                                        FATAL()
                                                    os_tls_set() <int os_tls_set (os_tls_key_t key, const void *value) at core/os_thread_posix.c:53>:
                                                        pthread_setspecific()
                                                    FATAL()
                                                critnib_get() <void *critnib_get (struct critnib *c, uint64_t key) at libpmemobj/critnib.c:515>:
                                                    load() <void load (void *src, void *dst) at libpmemobj/critnib.c:130>:
                                                        util_atomic_load_explicit64()
                                                    is_leaf() <inline bool is_leaf (struct critnib_node *n) at libpmemobj/critnib.c:150>:
                                                    slice_index() <inline unsigned slice_index (uint64_t key, sh_t shift) at libpmemobj/critnib.c:178>:
                                                    to_leaf() <inline struct critnib_leaf *to_leaf (struct critnib_node *n) at libpmemobj/critnib.c:159>:
                                                Malloc()
                                                FATAL()
                                                critnib_insert() <int critnib_insert (struct critnib *c, uint64_t key, void *value) at libpmemobj/critnib.c:340>:
                                                    util_mutex_lock()
                                                    alloc_leaf() <struct critnib_leaf *alloc_leaf (struct critnib *__restrict c) at libpmemobj/critnib.c:311>:
                                                        Malloc()
                                                        ERR()
                                                        VALGRIND_ANNOTATE_NEW_MEMORY()
                                                    util_mutex_unlock()
                                                    VALGRIND_HG_DRD_DISABLE_CHECKING()
                                                    is_leaf() <inline bool is_leaf (struct critnib_node *n) at libpmemobj/critnib.c:150>:
                                                    path_mask() <inline uint64_t path_mask (sh_t shift) at libpmemobj/critnib.c:169>:
                                                    slice_index() <inline unsigned slice_index (uint64_t key, sh_t shift) at libpmemobj/critnib.c:178>:
                                                    store() <void store (void *dst, void *src) at libpmemobj/critnib.c:140>:
                                                        util_atomic_store_explicit64()
                                                    to_leaf() <inline struct critnib_leaf *to_leaf (struct critnib_node *n) at libpmemobj/critnib.c:159>:
                                                    ASSERT()
                                                    free_leaf() <void free_leaf (struct critnib *__restrict c, struct critnib_leaf *__restrict k) at libpmemobj/critnib.c:298>
                                                    util_mssb_index64()
                                                    alloc_node() <struct critnib_node *alloc_node (struct critnib *__restrict c) at libpmemobj/critnib.c:274>:
                                                        Malloc()
                                                        ERR()
                                                        VALGRIND_ANNOTATE_NEW_MEMORY()
                                            unlikely()
                                            util_fetch_and_add32()
                                            get_lane() <inline void get_lane (uint64_t *locks, struct lane_info *info, uint64_t nlocks) at libpmemobj/lane.c:430>:
                                                likely()
                                                util_bool_compare_and_swap64()
                                                sched_yield()
                                            VALGRIND_ANNOTATE_NEW_MEMORY()
                                            operation_init() <void operation_init (struct operation_context *ctx) at libpmemobj/memops.c:709>:
                                                VALGRIND_ANNOTATE_NEW_MEMORY()
                                                VECQ_REINIT()
                                        operation_start() <void operation_start (struct operation_context *ctx) at libpmemobj/memops.c:736>:
                                            operation_init() <void operation_init (struct operation_context *ctx) at libpmemobj/memops.c:709>:
                                                VALGRIND_ANNOTATE_NEW_MEMORY()
                                                VECQ_REINIT()
                                            ASSERTeq()
                                    palloc_operation() <int palloc_operation (struct palloc_heap *heap, uint64_t off, uint64_t *dest_off, size_t size, palloc_constr constructor, void *arg, uint64_t extra_field, uint16_t object_flags, uint16_t class_id, uint16_t arena_id, struct operation_context *ctx) at libpmemobj/palloc.c:705>:
                                        palloc_defer_free_create() <void palloc_defer_free_create (struct palloc_heap *heap, uint64_t off, struct pobj_action_internal *out) at libpmemobj/palloc.c:610>:
                                            COMPILE_ERROR_ON()
                                            memblock_from_offset() <struct memory_block memblock_from_offset (struct palloc_heap *heap, uint64_t off) at libpmemobj/memblock.c:1532>:
                                                memblock_from_offset_opt() <struct memory_block memblock_from_offset_opt (struct palloc_heap *heap, uint64_t off, int size) at libpmemobj/memblock.c:1476>:
                                                    HEAP_PTR_TO_OFF()
                                                    heap_get_chunk_hdr()
                                                    memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                                        heap_get_chunk_hdr()
                                                    ASSERTeq()
                                                    memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                                        heap_get_chunk_hdr()
                                                        FATAL()
                                                    run_get_data_offset() <size_t run_get_data_offset (const struct memory_block *m) at libpmemobj/memblock.c:572>:
                                                        heap_get_chunk_run()
                                                        run_get_data_start() <char *run_get_data_start (const struct memory_block *m) at libpmemobj/memblock.c:544>:
                                                            heap_get_chunk_hdr()
                                                            heap_get_chunk_run()
                                                            run_get_bitmap() <void run_get_bitmap (const struct memory_block *m, struct run_bitmap *b) at libpmemobj/memblock.c:488>:
                                                                heap_get_chunk_run()
                                                                heap_get_chunk_hdr()
                                                                memblock_run_bitmap() <void memblock_run_bitmap (uint32_t *size_idx, uint16_t flags, uint64_t unit_size, uint64_t alignment, void *content, struct run_bitmap *b) at libpmemobj/memblock.c:410>:
                                                                    ASSERTne()
                                                                    RUN_CONTENT_SIZE_BYTES()
                                                                    util_div_ceil()
                                                                    ALIGN_UP()
                                                                    memblock_run_default_nallocs() <unsigned memblock_run_default_nallocs (uint32_t *size_idx, uint16_t flags, uint64_t unit_size, uint64_t alignment) at libpmemobj/memblock.c:370>:
                                                                        SUPPRESS_UNUSED()
                                                                        RUN_DEFAULT_SIZE_BYTES()
                                                                        LOG()
                                                                ASSERTeq()
                                                            ALIGN_UP()
                                                    heap_alloc_classes() <struct alloc_class_collection *heap_alloc_classes (struct palloc_heap *heap) at libpmemobj/heap.c:160>:
                                                    alloc_class_by_run() <struct alloc_class *alloc_class_by_run (struct alloc_class_collection *ac, size_t unit_size, uint16_t flags, uint32_t size_idx) at libpmemobj/alloc_class.c:594>:
                                                        SIZE_TO_CLASS_MAP_INDEX()
                                                        ASSERT()
                                                        critnib_get() <void *critnib_get (struct critnib *c, uint64_t key) at libpmemobj/critnib.c:515>:
                                                            load() <void load (void *src, void *dst) at libpmemobj/critnib.c:130>:
                                                                util_atomic_load_explicit64()
                                                            is_leaf() <inline bool is_leaf (struct critnib_node *n) at libpmemobj/critnib.c:150>:
                                                            slice_index() <inline unsigned slice_index (uint64_t key, sh_t shift) at libpmemobj/critnib.c:178>:
                                                            to_leaf() <inline struct critnib_leaf *to_leaf (struct critnib_node *n) at libpmemobj/critnib.c:159>:
                                                        RUN_CLASS_KEY_PACK()
                                                    CALC_SIZE_IDX()
                                            heap_ensure_zone_reclaimed() <void heap_ensure_zone_reclaimed (struct palloc_heap *heap, uint32_t zone_id) at libpmemobj/heap.c:816>:
                                                util_atomic_load_explicit32()
                                                heap_bucket_acquire() <struct bucket *heap_bucket_acquire (struct palloc_heap *heap, uint8_t class_id, uint16_t arena_id) at libpmemobj/heap.c:470>:
                                                    out() <void out (const char *fmt, ...) at core/out.c:480>:
                                                        va_start()
                                                        out_common() <} void out_common (const char *file, int line, const char *func, int level, const char *suffix, const char *fmt, va_list ap) at core/out.c:334>
                                                        va_end()
                                                    heap_thread_arena() <struct arena *heap_thread_arena (struct palloc_heap *heap) at libpmemobj/heap.c:414>:
                                                        os_tls_get() <void *os_tls_get (os_tls_key_t key) at core/os_thread_posix.c:62>:
                                                            pthread_getspecific()
                                                        heap_thread_arena_assign() <struct arena *heap_thread_arena_assign (struct palloc_heap *heap) at libpmemobj/heap.c:381>:
                                                            util_mutex_lock()
                                                            ASSERTne()
                                                            VEC_SIZE()
                                                            VEC_FOREACH()
                                                            LOG()
                                                            heap_arena_thread_attach() <void heap_arena_thread_attach (struct palloc_heap *heap, struct arena *a) at libpmemobj/heap.c:249>:
                                                                ASSERTeq()
                                                                os_tls_get() <void *os_tls_get (os_tls_key_t key) at core/os_thread_posix.c:62>:
                                                                    pthread_getspecific()
                                                                heap_arena_thread_detach() <void heap_arena_thread_detach (struct arena *a) at libpmemobj/heap.c:232>:
                                                                    util_fetch_and_sub64()
                                                                ASSERTne()
                                                                util_fetch_and_add64()
                                                                os_tls_set() <int os_tls_set (os_tls_key_t key, const void *value) at core/os_thread_posix.c:53>:
                                                                    pthread_setspecific()
                                                            util_mutex_unlock()
                                                        heap_global_arena_assign() <struct arena *heap_global_arena_assign (struct palloc_heap *heap) at libpmemobj/heap.c:348>:
                                                            util_mutex_lock()
                                                            ASSERTne()
                                                            VEC_SIZE()
                                                            VEC_FOREACH()
                                                            LOG()
                                                            util_mutex_unlock()
                                                        ASSERT()
                                                        ASSERTne()
                                                    ASSERTne()
                                                    VEC_ARR()
                                                    bucket_acquire() <struct bucket *bucket_acquire (struct bucket_locked *b) at libpmemobj/bucket.c:117>:
                                                        util_mutex_lock()
                                                ZID_TO_ZONE()
                                                ASSERTeq()
                                                out() <void out (const char *fmt, ...) at core/out.c:480>:
                                                    va_start()
                                                    out_common() <} void out_common (const char *file, int line, const char *func, int level, const char *suffix, const char *fmt, va_list ap) at core/out.c:334>
                                                    va_end()
                                                util_atomic_store_explicit32()
                                                heap_reclaim_zone_garbage() <void heap_reclaim_zone_garbage (struct palloc_heap *heap, struct bucket *bucket, uint32_t zone_id) at libpmemobj/heap.c:775>:
                                                    ZID_TO_ZONE()
                                                    ASSERT()
                                                    memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                                        memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                                            heap_get_chunk_hdr()
                                                        memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                                            heap_get_chunk_hdr()
                                                            FATAL()
                                                    heap_reclaim_run() <int heap_reclaim_run (struct palloc_heap *heap, struct memory_block *m, int startup) at libpmemobj/heap.c:733>:
                                                        heap_get_chunk_run()
                                                        heap_get_chunk_hdr()
                                                        alloc_class_by_run() <struct alloc_class *alloc_class_by_run (struct alloc_class_collection *ac, size_t unit_size, uint16_t flags, uint32_t size_idx) at libpmemobj/alloc_class.c:594>:
                                                            SIZE_TO_CLASS_MAP_INDEX()
                                                            ASSERT()
                                                            critnib_get() <void *critnib_get (struct critnib *c, uint64_t key) at libpmemobj/critnib.c:515>:
                                                                load() <void load (void *src, void *dst) at libpmemobj/critnib.c:130>:
                                                                    util_atomic_load_explicit64()
                                                                is_leaf() <inline bool is_leaf (struct critnib_node *n) at libpmemobj/critnib.c:150>:
                                                                slice_index() <inline unsigned slice_index (uint64_t key, sh_t shift) at libpmemobj/critnib.c:178>:
                                                                to_leaf() <inline struct critnib_leaf *to_leaf (struct critnib_node *n) at libpmemobj/critnib.c:159>:
                                                            RUN_CLASS_KEY_PACK()
                                                        recycler_element_new() <struct recycler_element recycler_element_new (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/recycler.c:122>:
                                                            SUPPRESS_UNUSED()
                                                            util_mutex_lock()
                                                            util_mutex_unlock()
                                                        ASSERTeq()
                                                        STATS_INC()
                                                        heap_get_recycler() <struct recycler *heap_get_recycler (struct palloc_heap *heap, size_t id, size_t nallocs) at libpmemobj/heap.c:106> (R):
                                                            util_atomic_load_explicit64()
                                                            recycler_new() <struct recycler *recycler_new (struct palloc_heap *heap, size_t nallocs, size_t *peak_arenas) at libpmemobj/recycler.c:74>:
                                                                Malloc()
                                                                ravl_new_sized() <struct ravl *ravl_new_sized (ravl_compare *compare, size_t data_size) at core/ravl.c:45>:
                                                                    Malloc()
                                                                    ERR()
                                                                recycler_element_cmp() <int recycler_element_cmp (const void *lhs, const void *rhs) at libpmemobj/recycler.c:23>:
                                                                memset()
                                                                VEC_INIT()
                                                                util_mutex_init()
                                                                Free() <Free_func Free at core/alloc.c:91>
                                                            util_bool_compare_and_swap64()
                                                            recycler_delete() <void recycler_delete (struct recycler *r) at libpmemobj/recycler.c:107>:
                                                                VEC_DELETE()
                                                                util_mutex_destroy()
                                                                ravl_delete() <void ravl_delete (struct ravl *ravl) at core/ravl.c:112>:
                                                                    ravl_delete_cb() <void ravl_delete_cb (struct ravl *ravl, ravl_cb cb, void *arg) at core/ravl.c:102>:
                                                                        ravl_foreach_node() <void ravl_foreach_node (struct ravl_node *n, ravl_cb cb, void *arg, int free_node) at core/ravl.c:74> (R):
                                                                            ravl_foreach_node() <void ravl_foreach_node (struct ravl_node *n, ravl_cb cb, void *arg, int free_node) at core/ravl.c:74> (recursive: see 22540)
                                                                            Free() <Free_func Free at core/alloc.c:91>
                                                                        Free() <Free_func Free at core/alloc.c:91>
                                                                Free() <Free_func Free at core/alloc.c:91>
                                                            heap_get_recycler() <struct recycler *heap_get_recycler (struct palloc_heap *heap, size_t id, size_t nallocs) at libpmemobj/heap.c:106> (recursive: see 22522)
                                                        recycler_put() <int recycler_put (struct recycler *r, struct recycler_element element) at libpmemobj/recycler.c:154>:
                                                            util_mutex_lock()
                                                            ravl_emplace_copy() <int ravl_emplace_copy (struct ravl *ravl, const void *data) at core/ravl.c:384>:
                                                                ravl_emplace() <int ravl_emplace (struct ravl *ravl, ravl_constr constr, const void *arg) at core/ravl.c:393>:
                                                                    LOG()
                                                                    ravl_new_node() <struct ravl_node *ravl_new_node (struct ravl *ravl, ravl_constr constr, const void *arg) at core/ravl.c:161>:
                                                                        Malloc()
                                                                        ERR()
                                                                        ravl_node_insert_constructor() <void ravl_node_insert_constructor (void *data, size_t data_size, const void *arg) at core/ravl.c:139>:
                                                                            SUPPRESS_UNUSED()
                                                                            memcpy()
                                                                    ravl_data() <void *ravl_data (struct ravl_node *node) at core/ravl.c:571>:
                                                                        memcpy()
                                                                    ravl_balance() <void ravl_balance (struct ravl *ravl, struct ravl_node *n) at core/ravl.c:337>:
                                                                        ravl_node_is() <int ravl_node_is (struct ravl_node *n, int i, int j) at core/ravl.c:306>:
                                                                            ravl_node_is_i_j() <int ravl_node_is_i_j (struct ravl_node *n, int i, int j) at core/ravl.c:296>:
                                                                                ravl_node_rank_difference_parent() <int ravl_node_rank_difference_parent (struct ravl_node *p, struct ravl_node *n) at core/ravl.c:275>:
                                                                                    ravl_node_rank() <int ravl_node_rank (struct ravl_node *n) at core/ravl.c:261>:
                                                                        ravl_node_promote() <void ravl_node_promote (struct ravl_node *n) at core/ravl.c:315>
                                                                        ravl_node_sibling() <struct ravl_node *ravl_node_sibling (struct ravl_node *n) at core/ravl.c:209>:
                                                                            ravl_node_slot_type() <enum ravl_slot_type ravl_node_slot_type (struct ravl_node *n) at core/ravl.c:196>:
                                                                        ravl_node_rank_difference() <int ravl_node_rank_difference (struct ravl_node *n) at core/ravl.c:287>:
                                                                            ravl_node_rank_difference_parent() <int ravl_node_rank_difference_parent (struct ravl_node *p, struct ravl_node *n) at core/ravl.c:275>:
                                                                                ravl_node_rank() <int ravl_node_rank (struct ravl_node *n) at core/ravl.c:261>:
                                                                        ravl_node_rank_difference_parent() <int ravl_node_rank_difference_parent (struct ravl_node *p, struct ravl_node *n) at core/ravl.c:275>:
                                                                            ravl_node_rank() <int ravl_node_rank (struct ravl_node *n) at core/ravl.c:261>:
                                                                        ravl_slot_opposite() <enum ravl_slot_type ravl_slot_opposite (enum ravl_slot_type t) at core/ravl.c:184>:
                                                                            ASSERTne()
                                                                        ravl_node_slot_type() <enum ravl_slot_type ravl_node_slot_type (struct ravl_node *n) at core/ravl.c:196>:
                                                                        ravl_rotate() <void ravl_rotate (struct ravl *ravl, struct ravl_node *n) at core/ravl.c:237>:
                                                                            ASSERTne()
                                                                            ravl_node_ref() <struct ravl_node **ravl_node_ref (struct ravl *ravl, struct ravl_node *n) at core/ravl.c:223>:
                                                                                ravl_node_slot_type() <enum ravl_slot_type ravl_node_slot_type (struct ravl_node *n) at core/ravl.c:196>:
                                                                            ravl_node_slot_type() <enum ravl_slot_type ravl_node_slot_type (struct ravl_node *n) at core/ravl.c:196>:
                                                                            ravl_slot_opposite() <enum ravl_slot_type ravl_slot_opposite (enum ravl_slot_type t) at core/ravl.c:184>:
                                                                                ASSERTne()
                                                                        ravl_node_demote() <void ravl_node_demote (struct ravl_node *n) at core/ravl.c:324>:
                                                                            ASSERT()
                                                                    Free() <Free_func Free at core/alloc.c:91>
                                                                ravl_node_copy_constructor() <void ravl_node_copy_constructor (void *data, size_t data_size, const void *arg) at core/ravl.c:152>:
                                                                    memcpy()
                                                            util_mutex_unlock()
                                                        ERR()
                                                    heap_run_into_free_chunk() <void heap_run_into_free_chunk (struct palloc_heap *heap, struct bucket *bucket, struct memory_block *m) at libpmemobj/heap.c:697>:
                                                        heap_get_chunk_hdr()
                                                        STATS_SUB()
                                                        util_mutex_lock()
                                                        memblock_huge_init() <struct memory_block memblock_huge_init (struct palloc_heap *heap, uint32_t chunk_id, uint32_t zone_id, uint32_t size_idx) at libpmemobj/memblock.c:1329>:
                                                            heap_get_chunk_hdr()
                                                            VALGRIND_DO_MAKE_MEM_UNDEFINED()
                                                            VALGRIND_ANNOTATE_NEW_MEMORY()
                                                            chunk_get_chunk_hdr_value() <uint64_t chunk_get_chunk_hdr_value (uint16_t type, uint16_t flags, uint32_t size_idx) at libpmemobj/memblock.c:604>:
                                                                COMPILE_ERROR_ON()
                                                                memcpy()
                                                            util_atomic_store_explicit64()
                                                            pmemops_persist()
                                                            huge_write_footer() <void huge_write_footer (struct chunk_header *hdr, uint32_t size_idx) at libpmemobj/memblock.c:1166>:
                                                                VALGRIND_DO_MAKE_MEM_UNDEFINED()
                                                                VALGRIND_SET_CLEAN()
                                                            memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                                                memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                                                    heap_get_chunk_hdr()
                                                                memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                                                    heap_get_chunk_hdr()
                                                                    FATAL()
                                                        heap_free_chunk_reuse() <int heap_free_chunk_reuse (struct palloc_heap *heap, struct bucket *bucket, struct memory_block *m) at libpmemobj/heap.c:674>:
                                                            heap_coalesce_huge() <struct memory_block heap_coalesce_huge (struct palloc_heap *heap, struct bucket *b, const struct memory_block *m) at libpmemobj/heap.c:650>:
                                                                heap_get_adjacent_free_block() <int heap_get_adjacent_free_block (struct palloc_heap *heap, const struct memory_block *in, struct memory_block *out, int prev) at libpmemobj/heap.c:582>:
                                                                    ZID_TO_ZONE()
                                                                    memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                                                        memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                                                            heap_get_chunk_hdr()
                                                                        memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                                                            heap_get_chunk_hdr()
                                                                            FATAL()
                                                                bucket_remove_block() <int bucket_remove_block (struct bucket *b, const struct memory_block *m) at libpmemobj/bucket.c:178>
                                                                heap_coalesce() <struct memory_block heap_coalesce (struct palloc_heap *heap, const struct memory_block *blocks[], int n) at libpmemobj/heap.c:621>:
                                                                    ASSERTne()
                                                                    memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                                                        memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                                                            heap_get_chunk_hdr()
                                                                        memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                                                            heap_get_chunk_hdr()
                                                                            FATAL()
                                                            bucket_insert_block() <int bucket_insert_block (struct bucket *b, const struct memory_block *m) at libpmemobj/bucket.c:161>:
                                                                VALGRIND_DO_MAKE_MEM_NOACCESS()
                                                                VALGRIND_ANNOTATE_NEW_MEMORY()
                                                        util_mutex_unlock()
                                                    heap_free_chunk_reuse() <int heap_free_chunk_reuse (struct palloc_heap *heap, struct bucket *bucket, struct memory_block *m) at libpmemobj/heap.c:674>:
                                                        heap_coalesce_huge() <struct memory_block heap_coalesce_huge (struct palloc_heap *heap, struct bucket *b, const struct memory_block *m) at libpmemobj/heap.c:650>:
                                                            heap_get_adjacent_free_block() <int heap_get_adjacent_free_block (struct palloc_heap *heap, const struct memory_block *in, struct memory_block *out, int prev) at libpmemobj/heap.c:582>:
                                                                ZID_TO_ZONE()
                                                                memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                                                    memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                                                        heap_get_chunk_hdr()
                                                                    memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                                                        heap_get_chunk_hdr()
                                                                        FATAL()
                                                            bucket_remove_block() <int bucket_remove_block (struct bucket *b, const struct memory_block *m) at libpmemobj/bucket.c:178>
                                                            heap_coalesce() <struct memory_block heap_coalesce (struct palloc_heap *heap, const struct memory_block *blocks[], int n) at libpmemobj/heap.c:621>:
                                                                ASSERTne()
                                                                memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                                                    memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                                                        heap_get_chunk_hdr()
                                                                    memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                                                        heap_get_chunk_hdr()
                                                                        FATAL()
                                                        bucket_insert_block() <int bucket_insert_block (struct bucket *b, const struct memory_block *m) at libpmemobj/bucket.c:161>:
                                                            VALGRIND_DO_MAKE_MEM_NOACCESS()
                                                            VALGRIND_ANNOTATE_NEW_MEMORY()
                                                heap_bucket_release() <void heap_bucket_release (struct bucket *b) at libpmemobj/heap.c:498>:
                                                    bucket_release() <void bucket_release (struct bucket *b) at libpmemobj/bucket.c:127>:
                                                        util_mutex_unlock()
                                        operation_cancel() <void operation_cancel (struct operation_context *ctx) at libpmemobj/memops.c:761>:
                                            ASSERTeq()
                                        palloc_reservation_create() <int palloc_reservation_create (struct palloc_heap *heap, size_t size, palloc_constr constructor, void *arg, uint64_t extra_field, uint16_t object_flags, uint16_t class_id, uint16_t arena_id, struct pobj_action_internal *out) at libpmemobj/palloc.c:178>:
                                            ASSERT()
                                            heap_get_best_class() <struct alloc_class *heap_get_best_class (struct palloc_heap *heap, size_t size) at libpmemobj/heap.c:221>:
                                                alloc_class_by_alloc_size() <struct alloc_class *alloc_class_by_alloc_size (struct alloc_class_collection *ac, size_t size) at libpmemobj/alloc_class.c:568>:
                                                    SIZE_TO_CLASS_MAP_INDEX()
                                                    alloc_class_assign_by_size() <struct alloc_class *alloc_class_assign_by_size (struct alloc_class_collection *ac, size_t size) at libpmemobj/alloc_class.c:538>:
                                                        LOG()
                                                        SIZE_TO_CLASS_MAP_INDEX()
                                                        alloc_class_find_min_frag() <struct alloc_class *alloc_class_find_min_frag (struct alloc_class_collection *ac, size_t n) at libpmemobj/alloc_class.c:340>:
                                                            LOG()
                                                            ASSERTne()
                                                        ASSERTne()
                                                        util_bool_compare_and_swap64()
                                            alloc_class_by_id() <struct alloc_class *alloc_class_by_id (struct alloc_class_collection *ac, uint8_t id) at libpmemobj/alloc_class.c:612>
                                            heap_alloc_classes() <struct alloc_class_collection *heap_alloc_classes (struct palloc_heap *heap) at libpmemobj/heap.c:160>:
                                            ERR()
                                            alloc_class_calc_size_idx() <ssize_t alloc_class_calc_size_idx (struct alloc_class *c, size_t size) at libpmemobj/alloc_class.c:621>:
                                                CALC_SIZE_IDX()
                                            heap_bucket_acquire() <struct bucket *heap_bucket_acquire (struct palloc_heap *heap, uint8_t class_id, uint16_t arena_id) at libpmemobj/heap.c:470>:
                                                out() <void out (const char *fmt, ...) at core/out.c:480>:
                                                    va_start()
                                                    out_common() <} void out_common (const char *file, int line, const char *func, int level, const char *suffix, const char *fmt, va_list ap) at core/out.c:334>
                                                    va_end()
                                                heap_thread_arena() <struct arena *heap_thread_arena (struct palloc_heap *heap) at libpmemobj/heap.c:414>:
                                                    os_tls_get() <void *os_tls_get (os_tls_key_t key) at core/os_thread_posix.c:62>:
                                                        pthread_getspecific()
                                                    heap_thread_arena_assign() <struct arena *heap_thread_arena_assign (struct palloc_heap *heap) at libpmemobj/heap.c:381>:
                                                        util_mutex_lock()
                                                        ASSERTne()
                                                        VEC_SIZE()
                                                        VEC_FOREACH()
                                                        LOG()
                                                        heap_arena_thread_attach() <void heap_arena_thread_attach (struct palloc_heap *heap, struct arena *a) at libpmemobj/heap.c:249>:
                                                            ASSERTeq()
                                                            os_tls_get() <void *os_tls_get (os_tls_key_t key) at core/os_thread_posix.c:62>:
                                                                pthread_getspecific()
                                                            heap_arena_thread_detach() <void heap_arena_thread_detach (struct arena *a) at libpmemobj/heap.c:232>:
                                                                util_fetch_and_sub64()
                                                            ASSERTne()
                                                            util_fetch_and_add64()
                                                            os_tls_set() <int os_tls_set (os_tls_key_t key, const void *value) at core/os_thread_posix.c:53>:
                                                                pthread_setspecific()
                                                        util_mutex_unlock()
                                                    heap_global_arena_assign() <struct arena *heap_global_arena_assign (struct palloc_heap *heap) at libpmemobj/heap.c:348>:
                                                        util_mutex_lock()
                                                        ASSERTne()
                                                        VEC_SIZE()
                                                        VEC_FOREACH()
                                                        LOG()
                                                        util_mutex_unlock()
                                                    ASSERT()
                                                    ASSERTne()
                                                ASSERTne()
                                                VEC_ARR()
                                                bucket_acquire() <struct bucket *bucket_acquire (struct bucket_locked *b) at libpmemobj/bucket.c:117>:
                                                    util_mutex_lock()
                                            heap_get_bestfit_block() <int heap_get_bestfit_block (struct palloc_heap *heap, struct bucket *b, struct memory_block *m) at libpmemobj/heap.c:1210> (R):
                                                bucket_alloc_class() <struct alloc_class *bucket_alloc_class (struct bucket *b) at libpmemobj/bucket.c:152>
                                                bucket_alloc_block() <int bucket_alloc_block (struct bucket *b, struct memory_block *m_out) at libpmemobj/bucket.c:187>
                                                heap_ensure_huge_bucket_filled() <int heap_ensure_huge_bucket_filled (struct palloc_heap *heap, struct bucket *bucket) at libpmemobj/heap.c:943>:
                                                    heap_reclaim_garbage() <int heap_reclaim_garbage (struct palloc_heap *heap, struct bucket *bucket) at libpmemobj/heap.c:923>:
                                                        heap_recycle_unused() <int heap_recycle_unused (struct palloc_heap *heap, struct recycler *recycler, struct bucket *defb, int force) at libpmemobj/heap.c:894>:
                                                            recycler_recalc() <struct empty_runs recycler_recalc (struct recycler *r, int force) at libpmemobj/recycler.c:207>:
                                                                VEC_INIT()
                                                                util_atomic_load64()
                                                                util_mutex_trylock()
                                                                ravl_find() <struct ravl_node *ravl_find (struct ravl *ravl, const void *data, enum ravl_predicate flags) at core/ravl.c:524>:
                                                                    LOG()
                                                                    ravl_data() <void *ravl_data (struct ravl_node *node) at core/ravl.c:571>:
                                                                        memcpy()
                                                                    ravl_predicate_holds() <int ravl_predicate_holds (int result, struct ravl_node **ret, struct ravl_node *n, enum ravl_predicate flags) at core/ravl.c:489>:
                                                                        ravl_node_successor() <struct ravl_node *ravl_node_successor (struct ravl_node *n) at core/ravl.c:465>:
                                                                            ravl_node_cessor() <struct ravl_node *ravl_node_cessor (struct ravl_node *n, enum ravl_slot_type t) at core/ravl.c:443>:
                                                                                ravl_node_type_most() <struct ravl_node *ravl_node_type_most (struct ravl_node *n, enum ravl_slot_type t) at core/ravl.c:430>:
                                                                                ravl_slot_opposite() <enum ravl_slot_type ravl_slot_opposite (enum ravl_slot_type t) at core/ravl.c:184>:
                                                                                    ASSERTne()
                                                                        ravl_node_predecessor() <struct ravl_node *ravl_node_predecessor (struct ravl_node *n) at core/ravl.c:476>:
                                                                            ravl_node_cessor() <struct ravl_node *ravl_node_cessor (struct ravl_node *n, enum ravl_slot_type t) at core/ravl.c:443>:
                                                                                ravl_node_type_most() <struct ravl_node *ravl_node_type_most (struct ravl_node *n, enum ravl_slot_type t) at core/ravl.c:430>:
                                                                                ravl_slot_opposite() <enum ravl_slot_type ravl_slot_opposite (enum ravl_slot_type t) at core/ravl.c:184>:
                                                                                    ASSERTne()
                                                                ravl_data() <void *ravl_data (struct ravl_node *node) at core/ravl.c:571>:
                                                                    memcpy()
                                                                memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                                                    memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                                                        heap_get_chunk_hdr()
                                                                    memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                                                        heap_get_chunk_hdr()
                                                                        FATAL()
                                                                recycler_element_new() <struct recycler_element recycler_element_new (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/recycler.c:122>:
                                                                    SUPPRESS_UNUSED()
                                                                    util_mutex_lock()
                                                                    util_mutex_unlock()
                                                                ASSERT()
                                                                util_fetch_and_sub64()
                                                                MIN()
                                                                ravl_remove() <void ravl_remove (struct ravl *ravl, struct ravl_node *n) at core/ravl.c:545> (R):
                                                                    LOG()
                                                                    ravl_node_successor() <struct ravl_node *ravl_node_successor (struct ravl_node *n) at core/ravl.c:465>:
                                                                        ravl_node_cessor() <struct ravl_node *ravl_node_cessor (struct ravl_node *n, enum ravl_slot_type t) at core/ravl.c:443>:
                                                                            ravl_node_type_most() <struct ravl_node *ravl_node_type_most (struct ravl_node *n, enum ravl_slot_type t) at core/ravl.c:430>:
                                                                            ravl_slot_opposite() <enum ravl_slot_type ravl_slot_opposite (enum ravl_slot_type t) at core/ravl.c:184>:
                                                                                ASSERTne()
                                                                    memcpy()
                                                                    ravl_remove() <void ravl_remove (struct ravl *ravl, struct ravl_node *n) at core/ravl.c:545> (recursive: see 22757)
                                                                    ravl_node_ref() <struct ravl_node **ravl_node_ref (struct ravl *ravl, struct ravl_node *n) at core/ravl.c:223>:
                                                                        ravl_node_slot_type() <enum ravl_slot_type ravl_node_slot_type (struct ravl_node *n) at core/ravl.c:196>:
                                                                    Free() <Free_func Free at core/alloc.c:91>
                                                                VEC_PUSH_BACK()
                                                                VEC_FOREACH_BY_PTR()
                                                                ravl_emplace_copy() <int ravl_emplace_copy (struct ravl *ravl, const void *data) at core/ravl.c:384>:
                                                                    ravl_emplace() <int ravl_emplace (struct ravl *ravl, ravl_constr constr, const void *arg) at core/ravl.c:393>:
                                                                        LOG()
                                                                        ravl_new_node() <struct ravl_node *ravl_new_node (struct ravl *ravl, ravl_constr constr, const void *arg) at core/ravl.c:161>:
                                                                            Malloc()
                                                                            ERR()
                                                                            ravl_node_insert_constructor() <void ravl_node_insert_constructor (void *data, size_t data_size, const void *arg) at core/ravl.c:139>:
                                                                                SUPPRESS_UNUSED()
                                                                                memcpy()
                                                                        ravl_data() <void *ravl_data (struct ravl_node *node) at core/ravl.c:571>:
                                                                            memcpy()
                                                                        ravl_balance() <void ravl_balance (struct ravl *ravl, struct ravl_node *n) at core/ravl.c:337>:
                                                                            ravl_node_is() <int ravl_node_is (struct ravl_node *n, int i, int j) at core/ravl.c:306>:
                                                                                ravl_node_is_i_j() <int ravl_node_is_i_j (struct ravl_node *n, int i, int j) at core/ravl.c:296>:
                                                                                    ravl_node_rank_difference_parent() <int ravl_node_rank_difference_parent (struct ravl_node *p, struct ravl_node *n) at core/ravl.c:275>:
                                                                                        ravl_node_rank() <int ravl_node_rank (struct ravl_node *n) at core/ravl.c:261>:
                                                                            ravl_node_promote() <void ravl_node_promote (struct ravl_node *n) at core/ravl.c:315>
                                                                            ravl_node_sibling() <struct ravl_node *ravl_node_sibling (struct ravl_node *n) at core/ravl.c:209>:
                                                                                ravl_node_slot_type() <enum ravl_slot_type ravl_node_slot_type (struct ravl_node *n) at core/ravl.c:196>:
                                                                            ravl_node_rank_difference() <int ravl_node_rank_difference (struct ravl_node *n) at core/ravl.c:287>:
                                                                                ravl_node_rank_difference_parent() <int ravl_node_rank_difference_parent (struct ravl_node *p, struct ravl_node *n) at core/ravl.c:275>:
                                                                                    ravl_node_rank() <int ravl_node_rank (struct ravl_node *n) at core/ravl.c:261>:
                                                                            ravl_node_rank_difference_parent() <int ravl_node_rank_difference_parent (struct ravl_node *p, struct ravl_node *n) at core/ravl.c:275>:
                                                                                ravl_node_rank() <int ravl_node_rank (struct ravl_node *n) at core/ravl.c:261>:
                                                                            ravl_slot_opposite() <enum ravl_slot_type ravl_slot_opposite (enum ravl_slot_type t) at core/ravl.c:184>:
                                                                                ASSERTne()
                                                                            ravl_node_slot_type() <enum ravl_slot_type ravl_node_slot_type (struct ravl_node *n) at core/ravl.c:196>:
                                                                            ravl_rotate() <void ravl_rotate (struct ravl *ravl, struct ravl_node *n) at core/ravl.c:237>:
                                                                                ASSERTne()
                                                                                ravl_node_ref() <struct ravl_node **ravl_node_ref (struct ravl *ravl, struct ravl_node *n) at core/ravl.c:223>:
                                                                                    ravl_node_slot_type() <enum ravl_slot_type ravl_node_slot_type (struct ravl_node *n) at core/ravl.c:196>:
                                                                                ravl_node_slot_type() <enum ravl_slot_type ravl_node_slot_type (struct ravl_node *n) at core/ravl.c:196>:
                                                                                ravl_slot_opposite() <enum ravl_slot_type ravl_slot_opposite (enum ravl_slot_type t) at core/ravl.c:184>:
                                                                                    ASSERTne()
                                                                            ravl_node_demote() <void ravl_node_demote (struct ravl_node *n) at core/ravl.c:324>:
                                                                                ASSERT()
                                                                        Free() <Free_func Free at core/alloc.c:91>
                                                                    ravl_node_copy_constructor() <void ravl_node_copy_constructor (void *data, size_t data_size, const void *arg) at core/ravl.c:152>:
                                                                        memcpy()
                                                                VEC_CLEAR()
                                                                util_mutex_unlock()
                                                            VEC_SIZE()
                                                            heap_bucket_acquire() <struct bucket *heap_bucket_acquire (struct palloc_heap *heap, uint8_t class_id, uint16_t arena_id) at libpmemobj/heap.c:470>:
                                                                out() <void out (const char *fmt, ...) at core/out.c:480>:
                                                                    va_start()
                                                                    out_common() <} void out_common (const char *file, int line, const char *func, int level, const char *suffix, const char *fmt, va_list ap) at core/out.c:334>
                                                                    va_end()
                                                                heap_thread_arena() <struct arena *heap_thread_arena (struct palloc_heap *heap) at libpmemobj/heap.c:414>:
                                                                    os_tls_get() <void *os_tls_get (os_tls_key_t key) at core/os_thread_posix.c:62>:
                                                                        pthread_getspecific()
                                                                    heap_thread_arena_assign() <struct arena *heap_thread_arena_assign (struct palloc_heap *heap) at libpmemobj/heap.c:381>:
                                                                        util_mutex_lock()
                                                                        ASSERTne()
                                                                        VEC_SIZE()
                                                                        VEC_FOREACH()
                                                                        LOG()
                                                                        heap_arena_thread_attach() <void heap_arena_thread_attach (struct palloc_heap *heap, struct arena *a) at libpmemobj/heap.c:249>:
                                                                            ASSERTeq()
                                                                            os_tls_get() <void *os_tls_get (os_tls_key_t key) at core/os_thread_posix.c:62>:
                                                                                pthread_getspecific()
                                                                            heap_arena_thread_detach() <void heap_arena_thread_detach (struct arena *a) at libpmemobj/heap.c:232>:
                                                                                util_fetch_and_sub64()
                                                                            ASSERTne()
                                                                            util_fetch_and_add64()
                                                                            os_tls_set() <int os_tls_set (os_tls_key_t key, const void *value) at core/os_thread_posix.c:53>:
                                                                                pthread_setspecific()
                                                                        util_mutex_unlock()
                                                                    heap_global_arena_assign() <struct arena *heap_global_arena_assign (struct palloc_heap *heap) at libpmemobj/heap.c:348>:
                                                                        util_mutex_lock()
                                                                        ASSERTne()
                                                                        VEC_SIZE()
                                                                        VEC_FOREACH()
                                                                        LOG()
                                                                        util_mutex_unlock()
                                                                    ASSERT()
                                                                    ASSERTne()
                                                                ASSERTne()
                                                                VEC_ARR()
                                                                bucket_acquire() <struct bucket *bucket_acquire (struct bucket_locked *b) at libpmemobj/bucket.c:117>:
                                                                    util_mutex_lock()
                                                            ASSERT()
                                                            VEC_FOREACH_BY_PTR()
                                                            heap_run_into_free_chunk() <void heap_run_into_free_chunk (struct palloc_heap *heap, struct bucket *bucket, struct memory_block *m) at libpmemobj/heap.c:697>:
                                                                heap_get_chunk_hdr()
                                                                STATS_SUB()
                                                                util_mutex_lock()
                                                                memblock_huge_init() <struct memory_block memblock_huge_init (struct palloc_heap *heap, uint32_t chunk_id, uint32_t zone_id, uint32_t size_idx) at libpmemobj/memblock.c:1329>:
                                                                    heap_get_chunk_hdr()
                                                                    VALGRIND_DO_MAKE_MEM_UNDEFINED()
                                                                    VALGRIND_ANNOTATE_NEW_MEMORY()
                                                                    chunk_get_chunk_hdr_value() <uint64_t chunk_get_chunk_hdr_value (uint16_t type, uint16_t flags, uint32_t size_idx) at libpmemobj/memblock.c:604>:
                                                                        COMPILE_ERROR_ON()
                                                                        memcpy()
                                                                    util_atomic_store_explicit64()
                                                                    pmemops_persist()
                                                                    huge_write_footer() <void huge_write_footer (struct chunk_header *hdr, uint32_t size_idx) at libpmemobj/memblock.c:1166>:
                                                                        VALGRIND_DO_MAKE_MEM_UNDEFINED()
                                                                        VALGRIND_SET_CLEAN()
                                                                    memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                                                        memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                                                            heap_get_chunk_hdr()
                                                                        memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                                                            heap_get_chunk_hdr()
                                                                            FATAL()
                                                                heap_free_chunk_reuse() <int heap_free_chunk_reuse (struct palloc_heap *heap, struct bucket *bucket, struct memory_block *m) at libpmemobj/heap.c:674>:
                                                                    heap_coalesce_huge() <struct memory_block heap_coalesce_huge (struct palloc_heap *heap, struct bucket *b, const struct memory_block *m) at libpmemobj/heap.c:650>:
                                                                        heap_get_adjacent_free_block() <int heap_get_adjacent_free_block (struct palloc_heap *heap, const struct memory_block *in, struct memory_block *out, int prev) at libpmemobj/heap.c:582>:
                                                                            ZID_TO_ZONE()
                                                                            memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                                                                memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                                                                    heap_get_chunk_hdr()
                                                                                memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                                                                    heap_get_chunk_hdr()
                                                                                    FATAL()
                                                                        bucket_remove_block() <int bucket_remove_block (struct bucket *b, const struct memory_block *m) at libpmemobj/bucket.c:178>
                                                                        heap_coalesce() <struct memory_block heap_coalesce (struct palloc_heap *heap, const struct memory_block *blocks[], int n) at libpmemobj/heap.c:621>:
                                                                            ASSERTne()
                                                                            memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                                                                memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                                                                    heap_get_chunk_hdr()
                                                                                memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                                                                    heap_get_chunk_hdr()
                                                                                    FATAL()
                                                                    bucket_insert_block() <int bucket_insert_block (struct bucket *b, const struct memory_block *m) at libpmemobj/bucket.c:161>:
                                                                        VALGRIND_DO_MAKE_MEM_NOACCESS()
                                                                        VALGRIND_ANNOTATE_NEW_MEMORY()
                                                                util_mutex_unlock()
                                                            heap_bucket_release() <void heap_bucket_release (struct bucket *b) at libpmemobj/heap.c:498>:
                                                                bucket_release() <void bucket_release (struct bucket *b) at libpmemobj/bucket.c:127>:
                                                                    util_mutex_unlock()
                                                            VEC_DELETE()
                                                    heap_populate_bucket() <int heap_populate_bucket (struct palloc_heap *heap, struct bucket *bucket) at libpmemobj/heap.c:850>:
                                                        util_atomic_store_explicit32()
                                                        ZID_TO_ZONE()
                                                        VALGRIND_ADD_TO_GLOBAL_TX_IGNORE()
                                                        heap_zone_init() <void heap_zone_init (struct palloc_heap *heap, uint32_t zone_id, uint32_t first_chunk_id) at libpmemobj/heap.c:559>:
                                                            ZID_TO_ZONE()
                                                            zone_calc_size_idx() <uint32_t zone_calc_size_idx (uint32_t zone_id, unsigned max_zone, size_t heap_size) at libpmemobj/heap.c:533>:
                                                                ASSERT()
                                                            ASSERT()
                                                            memblock_huge_init() <struct memory_block memblock_huge_init (struct palloc_heap *heap, uint32_t chunk_id, uint32_t zone_id, uint32_t size_idx) at libpmemobj/memblock.c:1329>:
                                                                heap_get_chunk_hdr()
                                                                VALGRIND_DO_MAKE_MEM_UNDEFINED()
                                                                VALGRIND_ANNOTATE_NEW_MEMORY()
                                                                chunk_get_chunk_hdr_value() <uint64_t chunk_get_chunk_hdr_value (uint16_t type, uint16_t flags, uint32_t size_idx) at libpmemobj/memblock.c:604>:
                                                                    COMPILE_ERROR_ON()
                                                                    memcpy()
                                                                util_atomic_store_explicit64()
                                                                pmemops_persist()
                                                                huge_write_footer() <void huge_write_footer (struct chunk_header *hdr, uint32_t size_idx) at libpmemobj/memblock.c:1166>:
                                                                    VALGRIND_DO_MAKE_MEM_UNDEFINED()
                                                                    VALGRIND_SET_CLEAN()
                                                                memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                                                    memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                                                        heap_get_chunk_hdr()
                                                                    memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                                                        heap_get_chunk_hdr()
                                                                        FATAL()
                                                            pmemops_persist()
                                                        heap_reclaim_zone_garbage() <void heap_reclaim_zone_garbage (struct palloc_heap *heap, struct bucket *bucket, uint32_t zone_id) at libpmemobj/heap.c:775>:
                                                            ZID_TO_ZONE()
                                                            ASSERT()
                                                            memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                                                memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                                                    heap_get_chunk_hdr()
                                                                memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                                                    heap_get_chunk_hdr()
                                                                    FATAL()
                                                            heap_reclaim_run() <int heap_reclaim_run (struct palloc_heap *heap, struct memory_block *m, int startup) at libpmemobj/heap.c:733>:
                                                                heap_get_chunk_run()
                                                                heap_get_chunk_hdr()
                                                                alloc_class_by_run() <struct alloc_class *alloc_class_by_run (struct alloc_class_collection *ac, size_t unit_size, uint16_t flags, uint32_t size_idx) at libpmemobj/alloc_class.c:594>:
                                                                    SIZE_TO_CLASS_MAP_INDEX()
                                                                    ASSERT()
                                                                    critnib_get() <void *critnib_get (struct critnib *c, uint64_t key) at libpmemobj/critnib.c:515>:
                                                                        load() <void load (void *src, void *dst) at libpmemobj/critnib.c:130>:
                                                                            util_atomic_load_explicit64()
                                                                        is_leaf() <inline bool is_leaf (struct critnib_node *n) at libpmemobj/critnib.c:150>:
                                                                        slice_index() <inline unsigned slice_index (uint64_t key, sh_t shift) at libpmemobj/critnib.c:178>:
                                                                        to_leaf() <inline struct critnib_leaf *to_leaf (struct critnib_node *n) at libpmemobj/critnib.c:159>:
                                                                    RUN_CLASS_KEY_PACK()
                                                                recycler_element_new() <struct recycler_element recycler_element_new (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/recycler.c:122>:
                                                                    SUPPRESS_UNUSED()
                                                                    util_mutex_lock()
                                                                    util_mutex_unlock()
                                                                ASSERTeq()
                                                                STATS_INC()
                                                                heap_get_recycler() <struct recycler *heap_get_recycler (struct palloc_heap *heap, size_t id, size_t nallocs) at libpmemobj/heap.c:106> (R):
                                                                    util_atomic_load_explicit64()
                                                                    recycler_new() <struct recycler *recycler_new (struct palloc_heap *heap, size_t nallocs, size_t *peak_arenas) at libpmemobj/recycler.c:74>:
                                                                        Malloc()
                                                                        ravl_new_sized() <struct ravl *ravl_new_sized (ravl_compare *compare, size_t data_size) at core/ravl.c:45>:
                                                                            Malloc()
                                                                            ERR()
                                                                        recycler_element_cmp() <int recycler_element_cmp (const void *lhs, const void *rhs) at libpmemobj/recycler.c:23>:
                                                                        memset()
                                                                        VEC_INIT()
                                                                        util_mutex_init()
                                                                        Free() <Free_func Free at core/alloc.c:91>
                                                                    util_bool_compare_and_swap64()
                                                                    recycler_delete() <void recycler_delete (struct recycler *r) at libpmemobj/recycler.c:107>:
                                                                        VEC_DELETE()
                                                                        util_mutex_destroy()
                                                                        ravl_delete() <void ravl_delete (struct ravl *ravl) at core/ravl.c:112>:
                                                                            ravl_delete_cb() <void ravl_delete_cb (struct ravl *ravl, ravl_cb cb, void *arg) at core/ravl.c:102>:
                                                                                ravl_foreach_node() <void ravl_foreach_node (struct ravl_node *n, ravl_cb cb, void *arg, int free_node) at core/ravl.c:74> (R):
                                                                                    ravl_foreach_node() <void ravl_foreach_node (struct ravl_node *n, ravl_cb cb, void *arg, int free_node) at core/ravl.c:74> (recursive: see 22976)
                                                                                    Free() <Free_func Free at core/alloc.c:91>
                                                                                Free() <Free_func Free at core/alloc.c:91>
                                                                        Free() <Free_func Free at core/alloc.c:91>
                                                                    heap_get_recycler() <struct recycler *heap_get_recycler (struct palloc_heap *heap, size_t id, size_t nallocs) at libpmemobj/heap.c:106> (recursive: see 22958)
                                                                recycler_put() <int recycler_put (struct recycler *r, struct recycler_element element) at libpmemobj/recycler.c:154>:
                                                                    util_mutex_lock()
                                                                    ravl_emplace_copy() <int ravl_emplace_copy (struct ravl *ravl, const void *data) at core/ravl.c:384>:
                                                                        ravl_emplace() <int ravl_emplace (struct ravl *ravl, ravl_constr constr, const void *arg) at core/ravl.c:393>:
                                                                            LOG()
                                                                            ravl_new_node() <struct ravl_node *ravl_new_node (struct ravl *ravl, ravl_constr constr, const void *arg) at core/ravl.c:161>:
                                                                                Malloc()
                                                                                ERR()
                                                                                ravl_node_insert_constructor() <void ravl_node_insert_constructor (void *data, size_t data_size, const void *arg) at core/ravl.c:139>:
                                                                                    SUPPRESS_UNUSED()
                                                                                    memcpy()
                                                                            ravl_data() <void *ravl_data (struct ravl_node *node) at core/ravl.c:571>:
                                                                                memcpy()
                                                                            ravl_balance() <void ravl_balance (struct ravl *ravl, struct ravl_node *n) at core/ravl.c:337>:
                                                                                ravl_node_is() <int ravl_node_is (struct ravl_node *n, int i, int j) at core/ravl.c:306>:
                                                                                    ravl_node_is_i_j() <int ravl_node_is_i_j (struct ravl_node *n, int i, int j) at core/ravl.c:296>:
                                                                                        ravl_node_rank_difference_parent() <int ravl_node_rank_difference_parent (struct ravl_node *p, struct ravl_node *n) at core/ravl.c:275>:
                                                                                            ravl_node_rank() <int ravl_node_rank (struct ravl_node *n) at core/ravl.c:261>:
                                                                                ravl_node_promote() <void ravl_node_promote (struct ravl_node *n) at core/ravl.c:315>
                                                                                ravl_node_sibling() <struct ravl_node *ravl_node_sibling (struct ravl_node *n) at core/ravl.c:209>:
                                                                                    ravl_node_slot_type() <enum ravl_slot_type ravl_node_slot_type (struct ravl_node *n) at core/ravl.c:196>:
                                                                                ravl_node_rank_difference() <int ravl_node_rank_difference (struct ravl_node *n) at core/ravl.c:287>:
                                                                                    ravl_node_rank_difference_parent() <int ravl_node_rank_difference_parent (struct ravl_node *p, struct ravl_node *n) at core/ravl.c:275>:
                                                                                        ravl_node_rank() <int ravl_node_rank (struct ravl_node *n) at core/ravl.c:261>:
                                                                                ravl_node_rank_difference_parent() <int ravl_node_rank_difference_parent (struct ravl_node *p, struct ravl_node *n) at core/ravl.c:275>:
                                                                                    ravl_node_rank() <int ravl_node_rank (struct ravl_node *n) at core/ravl.c:261>:
                                                                                ravl_slot_opposite() <enum ravl_slot_type ravl_slot_opposite (enum ravl_slot_type t) at core/ravl.c:184>:
                                                                                    ASSERTne()
                                                                                ravl_node_slot_type() <enum ravl_slot_type ravl_node_slot_type (struct ravl_node *n) at core/ravl.c:196>:
                                                                                ravl_rotate() <void ravl_rotate (struct ravl *ravl, struct ravl_node *n) at core/ravl.c:237>:
                                                                                    ASSERTne()
                                                                                    ravl_node_ref() <struct ravl_node **ravl_node_ref (struct ravl *ravl, struct ravl_node *n) at core/ravl.c:223>:
                                                                                        ravl_node_slot_type() <enum ravl_slot_type ravl_node_slot_type (struct ravl_node *n) at core/ravl.c:196>:
                                                                                    ravl_node_slot_type() <enum ravl_slot_type ravl_node_slot_type (struct ravl_node *n) at core/ravl.c:196>:
                                                                                    ravl_slot_opposite() <enum ravl_slot_type ravl_slot_opposite (enum ravl_slot_type t) at core/ravl.c:184>:
                                                                                        ASSERTne()
                                                                                ravl_node_demote() <void ravl_node_demote (struct ravl_node *n) at core/ravl.c:324>:
                                                                                    ASSERT()
                                                                            Free() <Free_func Free at core/alloc.c:91>
                                                                        ravl_node_copy_constructor() <void ravl_node_copy_constructor (void *data, size_t data_size, const void *arg) at core/ravl.c:152>:
                                                                            memcpy()
                                                                    util_mutex_unlock()
                                                                ERR()
                                                            heap_run_into_free_chunk() <void heap_run_into_free_chunk (struct palloc_heap *heap, struct bucket *bucket, struct memory_block *m) at libpmemobj/heap.c:697>:
                                                                heap_get_chunk_hdr()
                                                                STATS_SUB()
                                                                util_mutex_lock()
                                                                memblock_huge_init() <struct memory_block memblock_huge_init (struct palloc_heap *heap, uint32_t chunk_id, uint32_t zone_id, uint32_t size_idx) at libpmemobj/memblock.c:1329>:
                                                                    heap_get_chunk_hdr()
                                                                    VALGRIND_DO_MAKE_MEM_UNDEFINED()
                                                                    VALGRIND_ANNOTATE_NEW_MEMORY()
                                                                    chunk_get_chunk_hdr_value() <uint64_t chunk_get_chunk_hdr_value (uint16_t type, uint16_t flags, uint32_t size_idx) at libpmemobj/memblock.c:604>:
                                                                        COMPILE_ERROR_ON()
                                                                        memcpy()
                                                                    util_atomic_store_explicit64()
                                                                    pmemops_persist()
                                                                    huge_write_footer() <void huge_write_footer (struct chunk_header *hdr, uint32_t size_idx) at libpmemobj/memblock.c:1166>:
                                                                        VALGRIND_DO_MAKE_MEM_UNDEFINED()
                                                                        VALGRIND_SET_CLEAN()
                                                                    memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                                                        memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                                                            heap_get_chunk_hdr()
                                                                        memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                                                            heap_get_chunk_hdr()
                                                                            FATAL()
                                                                heap_free_chunk_reuse() <int heap_free_chunk_reuse (struct palloc_heap *heap, struct bucket *bucket, struct memory_block *m) at libpmemobj/heap.c:674>:
                                                                    heap_coalesce_huge() <struct memory_block heap_coalesce_huge (struct palloc_heap *heap, struct bucket *b, const struct memory_block *m) at libpmemobj/heap.c:650>:
                                                                        heap_get_adjacent_free_block() <int heap_get_adjacent_free_block (struct palloc_heap *heap, const struct memory_block *in, struct memory_block *out, int prev) at libpmemobj/heap.c:582>:
                                                                            ZID_TO_ZONE()
                                                                            memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                                                                memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                                                                    heap_get_chunk_hdr()
                                                                                memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                                                                    heap_get_chunk_hdr()
                                                                                    FATAL()
                                                                        bucket_remove_block() <int bucket_remove_block (struct bucket *b, const struct memory_block *m) at libpmemobj/bucket.c:178>
                                                                        heap_coalesce() <struct memory_block heap_coalesce (struct palloc_heap *heap, const struct memory_block *blocks[], int n) at libpmemobj/heap.c:621>:
                                                                            ASSERTne()
                                                                            memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                                                                memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                                                                    heap_get_chunk_hdr()
                                                                                memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                                                                    heap_get_chunk_hdr()
                                                                                    FATAL()
                                                                    bucket_insert_block() <int bucket_insert_block (struct bucket *b, const struct memory_block *m) at libpmemobj/bucket.c:161>:
                                                                        VALGRIND_DO_MAKE_MEM_NOACCESS()
                                                                        VALGRIND_ANNOTATE_NEW_MEMORY()
                                                                util_mutex_unlock()
                                                            heap_free_chunk_reuse() <int heap_free_chunk_reuse (struct palloc_heap *heap, struct bucket *bucket, struct memory_block *m) at libpmemobj/heap.c:674>:
                                                                heap_coalesce_huge() <struct memory_block heap_coalesce_huge (struct palloc_heap *heap, struct bucket *b, const struct memory_block *m) at libpmemobj/heap.c:650>:
                                                                    heap_get_adjacent_free_block() <int heap_get_adjacent_free_block (struct palloc_heap *heap, const struct memory_block *in, struct memory_block *out, int prev) at libpmemobj/heap.c:582>:
                                                                        ZID_TO_ZONE()
                                                                        memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                                                            memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                                                                heap_get_chunk_hdr()
                                                                            memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                                                                heap_get_chunk_hdr()
                                                                                FATAL()
                                                                    bucket_remove_block() <int bucket_remove_block (struct bucket *b, const struct memory_block *m) at libpmemobj/bucket.c:178>
                                                                    heap_coalesce() <struct memory_block heap_coalesce (struct palloc_heap *heap, const struct memory_block *blocks[], int n) at libpmemobj/heap.c:621>:
                                                                        ASSERTne()
                                                                        memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                                                            memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                                                                heap_get_chunk_hdr()
                                                                            memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                                                                heap_get_chunk_hdr()
                                                                                FATAL()
                                                                bucket_insert_block() <int bucket_insert_block (struct bucket *b, const struct memory_block *m) at libpmemobj/bucket.c:161>:
                                                                    VALGRIND_DO_MAKE_MEM_NOACCESS()
                                                                    VALGRIND_ANNOTATE_NEW_MEMORY()
                                                    heap_extend() <int heap_extend (struct palloc_heap *heap, struct bucket *b, size_t size) at libpmemobj/heap.c:1515>:
                                                        util_pool_extend() <void *util_pool_extend (struct pool_set *set, size_t *size, size_t minpartsize) at common/set.c:2231>:
                                                            LOG()
                                                            ERR()
                                                            util_poolset_append_new_part() <int util_poolset_append_new_part (struct pool_set *set, size_t size) at common/set.c:2174>:
                                                                LOG()
                                                                VEC_SIZE()
                                                                VEC_GET()
                                                                strlen()
                                                                Malloc()
                                                                ERR()
                                                                snprintf()
                                                                util_replica_add_part() <int util_replica_add_part (struct pool_replica **repp, const char *path, size_t filesize) at common/set.c:708>:
                                                                    LOG()
                                                                    util_replica_add_part_by_idx() <int util_replica_add_part_by_idx (struct pool_replica **repp, const char *path, size_t filesize, unsigned p) at common/set.c:662>:
                                                                        LOG()
                                                                        util_replica_reserve() <int util_replica_reserve (struct pool_replica **repp, unsigned n) at common/set.c:633>:
                                                                            LOG()
                                                                            Realloc()
                                                                            ERR()
                                                                            memset()
                                                                        ASSERTne()
                                                                        util_file_get_type() <enum file_type util_file_get_type (const char *path) at common/file.c:106>:
                                                                            LOG()
                                                                            ERR()
                                                                            util_file_exists() <int util_file_exists (const char *path) at common/file.c:32>:
                                                                                LOG()
                                                                                os_access() <int os_access (const char *pathname, int mode) at core/os_posix.c:97>:
                                                                                    access()
                                                                                ERR()
                                                                            os_stat() <int os_stat (const char *pathname, os_stat_t *buf) at core/os_posix.c:79>:
                                                                                stat()
                                                                            util_stat_get_type() <enum file_type util_stat_get_type (const os_stat_t *st) at common/file.c:62>:
                                                                                pmem2_get_type_from_stat() <int pmem2_get_type_from_stat (const os_stat_t *st, enum pmem2_file_type *type) at libpmem2/pmem2_utils_linux.c:23>:
                                                                                    S_ISREG()
                                                                                    S_ISDIR()
                                                                                    S_ISCHR()
                                                                                    ERR()
                                                                                    util_snprintf() <int util_snprintf (char *str, size_t size, const char *format, ...) at core/util.c:434>:
                                                                                        va_start()
                                                                                        vsnprintf()
                                                                                        va_end()
                                                                                    os_major()
                                                                                    os_minor()
                                                                                    ASSERTinfo()
                                                                                    LOG()
                                                                                    realpath()
                                                                                    strrchr()
                                                                                    strcmp()
                                                                                pmem2_err_to_errno() <int pmem2_err_to_errno (int err) at libpmem2/pmem2_utils.c:67>:
                                                                                    FATAL()
                                                                                ASSERTinfo()
                                                                        util_file_device_dax_alignment() <size_t util_file_device_dax_alignment (const char *path) at common/file_posix.c:139>:
                                                                            LOG()
                                                                            device_dax_alignment() <size_t device_dax_alignment (const char *path) at common/file_posix.c:105>:
                                                                                LOG()
                                                                                os_open() <int os_open (const char *pathname, int flags, ...) at core/os_posix.c:29>:
                                                                                    va_start()
                                                                                    va_arg()
                                                                                    va_end()
                                                                                    open()
                                                                                pmem2_source_from_fd() <int pmem2_source_from_fd (struct pmem2_source **src, int fd) at libpmem2/source_posix.c:19>:
                                                                                    PMEM2_ERR_CLR()
                                                                                    fcntl()
                                                                                    ERR()
                                                                                    os_fstat()
                                                                                    pmem2_get_type_from_stat() <int pmem2_get_type_from_stat (const os_stat_t *st, enum pmem2_file_type *type) at libpmem2/pmem2_utils_linux.c:23>:
                                                                                        S_ISREG()
                                                                                        S_ISDIR()
                                                                                        S_ISCHR()
                                                                                        ERR()
                                                                                        util_snprintf() <int util_snprintf (char *str, size_t size, const char *format, ...) at core/util.c:434>:
                                                                                            va_start()
                                                                                            vsnprintf()
                                                                                            va_end()
                                                                                        os_major()
                                                                                        os_minor()
                                                                                        ASSERTinfo()
                                                                                        LOG()
                                                                                        realpath()
                                                                                        strrchr()
                                                                                        strcmp()
                                                                                    pmem2_malloc() <void *pmem2_malloc (size_t size, int *err) at libpmem2/pmem2_utils.c:19>:
                                                                                        Malloc()
                                                                                        ERR()
                                                                                    ASSERTne()
                                                                                pmem2_device_dax_alignment() <int pmem2_device_dax_alignment (const struct pmem2_source *src, size_t *alignment) at libpmem2/pmem2_utils_ndctl.c:18>:
                                                                                    ndctl_new()
                                                                                    ERR()
                                                                                    pmem2_region_namespace() <int pmem2_region_namespace (struct ndctl_ctx *ctx, const struct pmem2_source *src, struct ndctl_region **pregion, struct ndctl_namespace **pndns) at libpmem2/region_namespace_ndctl.c:131>:
                                                                                        LOG()
                                                                                        ERR()
                                                                                        FOREACH_BUS_REGION_NAMESPACE()
                                                                                        ndctl_namespace_get_dax()
                                                                                        ASSERTeq()
                                                                                        ndctl_dax_get_daxctl_region()
                                                                                        daxctl_dev_foreach()
                                                                                        daxctl_dev_get_devname()
                                                                                        ndctl_match_devdax() <int ndctl_match_devdax (dev_t st_rdev, const char *devname) at libpmem2/region_namespace_ndctl.c:26>:
                                                                                            LOG()
                                                                                            stat()
                                                                                            util_snprintf() <int util_snprintf (char *str, size_t size, const char *format, ...) at core/util.c:434>:
                                                                                                va_start()
                                                                                                vsnprintf()
                                                                                                va_end()
                                                                                            ERR()
                                                                                            os_stat() <int os_stat (const char *pathname, os_stat_t *buf) at core/os_posix.c:79>:
                                                                                                stat()
                                                                                        ndctl_namespace_get_btt()
                                                                                        ndctl_btt_get_block_device()
                                                                                        ndctl_namespace_get_pfn()
                                                                                        ndctl_pfn_get_block_device()
                                                                                        ndctl_namespace_get_block_device()
                                                                                        ndctl_match_fsdax() <int ndctl_match_fsdax (dev_t st_dev, const char *devname) at libpmem2/region_namespace_ndctl.c:64>:
                                                                                            LOG()
                                                                                            util_snprintf() <int util_snprintf (char *str, size_t size, const char *format, ...) at core/util.c:434>:
                                                                                                va_start()
                                                                                                vsnprintf()
                                                                                                va_end()
                                                                                            ERR()
                                                                                            major()
                                                                                            minor()
                                                                                            os_open() <int os_open (const char *pathname, int flags, ...) at core/os_posix.c:29>:
                                                                                                va_start()
                                                                                                va_arg()
                                                                                                va_end()
                                                                                                open()
                                                                                            read()
                                                                                            os_close()
                                                                                            strcmp()
                                                                                    LOG()
                                                                                    ndctl_namespace_get_dax()
                                                                                    ndctl_dax_get_align()
                                                                                    ndctl_unref()
                                                                                pmem2_source_delete() <int pmem2_source_delete (struct pmem2_source **src) at libpmem2/source.c:30>:
                                                                                    Free() <Free_func Free at core/alloc.c:91>
                                                                                os_close()
                                                                FATAL()
                                                                util_poolset_set_size() <void util_poolset_set_size (struct pool_set *set) at common/set.c:949>:
                                                                    LOG()
                                                                Free() <Free_func Free at core/alloc.c:91>
                                                            util_part_open() <int util_part_open (struct pool_set_part *part, size_t minsize, int create_part) at common/set.c:1459>:
                                                                LOG()
                                                                util_file_exists() <int util_file_exists (const char *path) at common/file.c:32>:
                                                                    LOG()
                                                                    os_access() <int os_access (const char *pathname, int mode) at core/os_posix.c:97>:
                                                                        access()
                                                                    ERR()
                                                                util_file_create() <int util_file_create (const char *path, size_t size, size_t minsize) at common/file.c:398>:
                                                                    LOG()
                                                                    ASSERTne()
                                                                    ERR()
                                                                    os_open() <int os_open (const char *pathname, int flags, ...) at core/os_posix.c:29>:
                                                                        va_start()
                                                                        va_arg()
                                                                        va_end()
                                                                        open()
                                                                    os_posix_fallocate() <int os_posix_fallocate (int fd, os_off_t offset, off_t len) at core/os_posix.c:142>:
                                                                        posix_fallocate()
                                                                    os_flock() <int os_flock (int fd, int operation) at core/os_posix.c:215>:
                                                                        flock()
                                                                    os_close()
                                                                    os_unlink() <int os_unlink (const char *pathname) at core/os_posix.c:88>:
                                                                        unlink()
                                                                util_file_open() <int util_file_open (const char *path, size_t *size, size_t minsize, int flags) at common/file.c:456>:
                                                                    LOG()
                                                                    os_open() <int os_open (const char *pathname, int flags, ...) at core/os_posix.c:29>:
                                                                        va_start()
                                                                        va_arg()
                                                                        va_end()
                                                                        open()
                                                                    ERR()
                                                                    os_flock() <int os_flock (int fd, int operation) at core/os_posix.c:215>:
                                                                        flock()
                                                                    os_close()
                                                                    ASSERTeq()
                                                                    util_fd_get_size() <ssize_t util_fd_get_size (int fd) at common/file.c:157>:
                                                                        LOG()
                                                                        pmem2_source_from_fd() <int pmem2_source_from_fd (struct pmem2_source **src, int fd) at libpmem2/source_posix.c:19>:
                                                                            PMEM2_ERR_CLR()
                                                                            fcntl()
                                                                            ERR()
                                                                            os_fstat()
                                                                            pmem2_get_type_from_stat() <int pmem2_get_type_from_stat (const os_stat_t *st, enum pmem2_file_type *type) at libpmem2/pmem2_utils_linux.c:23>:
                                                                                S_ISREG()
                                                                                S_ISDIR()
                                                                                S_ISCHR()
                                                                                ERR()
                                                                                util_snprintf() <int util_snprintf (char *str, size_t size, const char *format, ...) at core/util.c:434>:
                                                                                    va_start()
                                                                                    vsnprintf()
                                                                                    va_end()
                                                                                os_major()
                                                                                os_minor()
                                                                                ASSERTinfo()
                                                                                LOG()
                                                                                realpath()
                                                                                strrchr()
                                                                                strcmp()
                                                                            pmem2_malloc() <void *pmem2_malloc (size_t size, int *err) at libpmem2/pmem2_utils.c:19>:
                                                                                Malloc()
                                                                                ERR()
                                                                            ASSERTne()
                                                                        pmem2_err_to_errno() <int pmem2_err_to_errno (int err) at libpmem2/pmem2_utils.c:67>:
                                                                            FATAL()
                                                                        pmem2_source_size() <int pmem2_source_size (const struct pmem2_source *src, size_t *size) at libpmem2/source_posix.c:90>:
                                                                            LOG()
                                                                            PMEM2_ERR_CLR()
                                                                            ASSERT()
                                                                            os_fstat()
                                                                            ERR()
                                                                            pmem2_device_dax_size() <int pmem2_device_dax_size (const struct pmem2_source *src, size_t *size) at libpmem2/pmem2_utils_ndctl.c:58>:
                                                                                ndctl_new()
                                                                                ERR()
                                                                                pmem2_region_namespace() <int pmem2_region_namespace (struct ndctl_ctx *ctx, const struct pmem2_source *src, struct ndctl_region **pregion, struct ndctl_namespace **pndns) at libpmem2/region_namespace_ndctl.c:131>:
                                                                                    LOG()
                                                                                    ERR()
                                                                                    FOREACH_BUS_REGION_NAMESPACE()
                                                                                    ndctl_namespace_get_dax()
                                                                                    ASSERTeq()
                                                                                    ndctl_dax_get_daxctl_region()
                                                                                    daxctl_dev_foreach()
                                                                                    daxctl_dev_get_devname()
                                                                                    ndctl_match_devdax() <int ndctl_match_devdax (dev_t st_rdev, const char *devname) at libpmem2/region_namespace_ndctl.c:26>:
                                                                                        LOG()
                                                                                        stat()
                                                                                        util_snprintf() <int util_snprintf (char *str, size_t size, const char *format, ...) at core/util.c:434>:
                                                                                            va_start()
                                                                                            vsnprintf()
                                                                                            va_end()
                                                                                        ERR()
                                                                                        os_stat() <int os_stat (const char *pathname, os_stat_t *buf) at core/os_posix.c:79>:
                                                                                            stat()
                                                                                    ndctl_namespace_get_btt()
                                                                                    ndctl_btt_get_block_device()
                                                                                    ndctl_namespace_get_pfn()
                                                                                    ndctl_pfn_get_block_device()
                                                                                    ndctl_namespace_get_block_device()
                                                                                    ndctl_match_fsdax() <int ndctl_match_fsdax (dev_t st_dev, const char *devname) at libpmem2/region_namespace_ndctl.c:64>:
                                                                                        LOG()
                                                                                        util_snprintf() <int util_snprintf (char *str, size_t size, const char *format, ...) at core/util.c:434>:
                                                                                            va_start()
                                                                                            vsnprintf()
                                                                                            va_end()
                                                                                        ERR()
                                                                                        major()
                                                                                        minor()
                                                                                        os_open() <int os_open (const char *pathname, int flags, ...) at core/os_posix.c:29>:
                                                                                            va_start()
                                                                                            va_arg()
                                                                                            va_end()
                                                                                            open()
                                                                                        read()
                                                                                        os_close()
                                                                                        strcmp()
                                                                                LOG()
                                                                                ndctl_namespace_get_dax()
                                                                                ndctl_dax_get_size()
                                                                                ndctl_unref()
                                                                            FATAL()
                                                                        pmem2_source_delete() <int pmem2_source_delete (struct pmem2_source **src) at libpmem2/source.c:30>:
                                                                            Free() <Free_func Free at core/alloc.c:91>
                                                                        ERR()
                                                                os_posix_fallocate() <int os_posix_fallocate (int fd, os_off_t offset, off_t len) at core/os_posix.c:142>:
                                                                    posix_fallocate()
                                                                ERR()
                                                            util_map_part() <int util_map_part (struct pool_set_part *part, void *addr, size_t size, size_t offset, int flags, int rdonly) at common/set.c:229>:
                                                                LOG()
                                                                ASSERTeq()
                                                                ASSERT()
                                                                roundup()
                                                                util_map_sync() <void *util_map_sync (void *addr, size_t len, int proto, int flags, int fd, os_off_t offset, int *map_sync) at common/mmap_posix.c:159>:
                                                                    LOG()
                                                                    mmap()
                                                                ERR()
                                                                munmap()
                                                                VALGRIND_REGISTER_PMEM_MAPPING()
                                                                VALGRIND_REGISTER_PMEM_FILE()
                                                            util_poolset_chmod() <int util_poolset_chmod (struct pool_set *set, mode_t mode) at common/set.c:404>:
                                                                LOG()
                                                                os_fstat()
                                                                ERR()
                                                                os_chmod() <int os_chmod (const char *pathname, mode_t mode) at core/os_posix.c:124>:
                                                                    chmod()
                                                            util_poolset_fdclose() <void util_poolset_fdclose (struct pool_set *set) at common/set.c:457>:
                                                                util_poolset_fdclose_always() <void util_poolset_fdclose_always (struct pool_set *set) at common/set.c:445>:
                                                                    LOG()
                                                                    util_replica_fdclose() <void util_replica_fdclose (struct pool_replica *rep) at common/set.c:3232>:
                                                                        util_part_fdclose() <void util_part_fdclose (struct pool_set_part *part) at common/set.c:1517>:
                                                                            LOG()
                                                                            os_close()
                                                            os_close()
                                                            os_unlink() <int os_unlink (const char *pathname) at core/os_posix.c:88>:
                                                                unlink()
                                                            Free() <Free_func Free at core/alloc.c:91>
                                                            util_poolset_set_size() <void util_poolset_set_size (struct pool_set *set) at common/set.c:949>:
                                                                LOG()
                                                        pmemops_persist()
                                                        heap_max_zone() <unsigned heap_max_zone (size_t size) at libpmemobj/heap.c:516>:
                                                        ZID_TO_ZONE()
                                                        heap_zone_init() <void heap_zone_init (struct palloc_heap *heap, uint32_t zone_id, uint32_t first_chunk_id) at libpmemobj/heap.c:559>:
                                                            ZID_TO_ZONE()
                                                            zone_calc_size_idx() <uint32_t zone_calc_size_idx (uint32_t zone_id, unsigned max_zone, size_t heap_size) at libpmemobj/heap.c:533>:
                                                                ASSERT()
                                                            ASSERT()
                                                            memblock_huge_init() <struct memory_block memblock_huge_init (struct palloc_heap *heap, uint32_t chunk_id, uint32_t zone_id, uint32_t size_idx) at libpmemobj/memblock.c:1329>:
                                                                heap_get_chunk_hdr()
                                                                VALGRIND_DO_MAKE_MEM_UNDEFINED()
                                                                VALGRIND_ANNOTATE_NEW_MEMORY()
                                                                chunk_get_chunk_hdr_value() <uint64_t chunk_get_chunk_hdr_value (uint16_t type, uint16_t flags, uint32_t size_idx) at libpmemobj/memblock.c:604>:
                                                                    COMPILE_ERROR_ON()
                                                                    memcpy()
                                                                util_atomic_store_explicit64()
                                                                pmemops_persist()
                                                                huge_write_footer() <void huge_write_footer (struct chunk_header *hdr, uint32_t size_idx) at libpmemobj/memblock.c:1166>:
                                                                    VALGRIND_DO_MAKE_MEM_UNDEFINED()
                                                                    VALGRIND_SET_CLEAN()
                                                                memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                                                    memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                                                        heap_get_chunk_hdr()
                                                                    memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                                                        heap_get_chunk_hdr()
                                                                        FATAL()
                                                            pmemops_persist()
                                                        memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                                            memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                                                heap_get_chunk_hdr()
                                                            memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                                                heap_get_chunk_hdr()
                                                                FATAL()
                                                        heap_free_chunk_reuse() <int heap_free_chunk_reuse (struct palloc_heap *heap, struct bucket *bucket, struct memory_block *m) at libpmemobj/heap.c:674>:
                                                            heap_coalesce_huge() <struct memory_block heap_coalesce_huge (struct palloc_heap *heap, struct bucket *b, const struct memory_block *m) at libpmemobj/heap.c:650>:
                                                                heap_get_adjacent_free_block() <int heap_get_adjacent_free_block (struct palloc_heap *heap, const struct memory_block *in, struct memory_block *out, int prev) at libpmemobj/heap.c:582>:
                                                                    ZID_TO_ZONE()
                                                                    memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                                                        memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                                                            heap_get_chunk_hdr()
                                                                        memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                                                            heap_get_chunk_hdr()
                                                                            FATAL()
                                                                bucket_remove_block() <int bucket_remove_block (struct bucket *b, const struct memory_block *m) at libpmemobj/bucket.c:178>
                                                                heap_coalesce() <struct memory_block heap_coalesce (struct palloc_heap *heap, const struct memory_block *blocks[], int n) at libpmemobj/heap.c:621>:
                                                                    ASSERTne()
                                                                    memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                                                        memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                                                            heap_get_chunk_hdr()
                                                                        memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                                                            heap_get_chunk_hdr()
                                                                            FATAL()
                                                            bucket_insert_block() <int bucket_insert_block (struct bucket *b, const struct memory_block *m) at libpmemobj/bucket.c:161>:
                                                                VALGRIND_DO_MAKE_MEM_NOACCESS()
                                                                VALGRIND_ANNOTATE_NEW_MEMORY()
                                                heap_ensure_run_bucket_filled() <int heap_ensure_run_bucket_filled (struct palloc_heap *heap, struct bucket *b, uint32_t units) at libpmemobj/heap.c:1083> (R):
                                                    bucket_alloc_class() <struct alloc_class *bucket_alloc_class (struct bucket *b) at libpmemobj/bucket.c:152>
                                                    ASSERTeq()
                                                    heap_detach_and_try_discard_run() <int heap_detach_and_try_discard_run (struct palloc_heap *heap, struct bucket *b) at libpmemobj/heap.c:992>:
                                                        bucket_detach_run() <int bucket_detach_run (struct bucket *b, struct memory_block *m_out, int *empty) at libpmemobj/bucket.c:231>:
                                                            util_fetch_and_sub64()
                                                            VALGRIND_ANNOTATE_HAPPENS_AFTER()
                                                            VALGRIND_ANNOTATE_HAPPENS_BEFORE()
                                                            Zalloc() <void *Zalloc (size_t sz) at core/alloc.c:98>:
                                                                Malloc()
                                                                memset()
                                                        heap_discard_run() <void heap_discard_run (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/heap.c:974>:
                                                            heap_reclaim_run() <int heap_reclaim_run (struct palloc_heap *heap, struct memory_block *m, int startup) at libpmemobj/heap.c:733>:
                                                                heap_get_chunk_run()
                                                                heap_get_chunk_hdr()
                                                                alloc_class_by_run() <struct alloc_class *alloc_class_by_run (struct alloc_class_collection *ac, size_t unit_size, uint16_t flags, uint32_t size_idx) at libpmemobj/alloc_class.c:594>:
                                                                    SIZE_TO_CLASS_MAP_INDEX()
                                                                    ASSERT()
                                                                    critnib_get() <void *critnib_get (struct critnib *c, uint64_t key) at libpmemobj/critnib.c:515>:
                                                                        load() <void load (void *src, void *dst) at libpmemobj/critnib.c:130>:
                                                                            util_atomic_load_explicit64()
                                                                        is_leaf() <inline bool is_leaf (struct critnib_node *n) at libpmemobj/critnib.c:150>:
                                                                        slice_index() <inline unsigned slice_index (uint64_t key, sh_t shift) at libpmemobj/critnib.c:178>:
                                                                        to_leaf() <inline struct critnib_leaf *to_leaf (struct critnib_node *n) at libpmemobj/critnib.c:159>:
                                                                    RUN_CLASS_KEY_PACK()
                                                                recycler_element_new() <struct recycler_element recycler_element_new (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/recycler.c:122>:
                                                                    SUPPRESS_UNUSED()
                                                                    util_mutex_lock()
                                                                    util_mutex_unlock()
                                                                ASSERTeq()
                                                                STATS_INC()
                                                                heap_get_recycler() <struct recycler *heap_get_recycler (struct palloc_heap *heap, size_t id, size_t nallocs) at libpmemobj/heap.c:106> (R):
                                                                    util_atomic_load_explicit64()
                                                                    recycler_new() <struct recycler *recycler_new (struct palloc_heap *heap, size_t nallocs, size_t *peak_arenas) at libpmemobj/recycler.c:74>:
                                                                        Malloc()
                                                                        ravl_new_sized() <struct ravl *ravl_new_sized (ravl_compare *compare, size_t data_size) at core/ravl.c:45>:
                                                                            Malloc()
                                                                            ERR()
                                                                        recycler_element_cmp() <int recycler_element_cmp (const void *lhs, const void *rhs) at libpmemobj/recycler.c:23>:
                                                                        memset()
                                                                        VEC_INIT()
                                                                        util_mutex_init()
                                                                        Free() <Free_func Free at core/alloc.c:91>
                                                                    util_bool_compare_and_swap64()
                                                                    recycler_delete() <void recycler_delete (struct recycler *r) at libpmemobj/recycler.c:107>:
                                                                        VEC_DELETE()
                                                                        util_mutex_destroy()
                                                                        ravl_delete() <void ravl_delete (struct ravl *ravl) at core/ravl.c:112>:
                                                                            ravl_delete_cb() <void ravl_delete_cb (struct ravl *ravl, ravl_cb cb, void *arg) at core/ravl.c:102>:
                                                                                ravl_foreach_node() <void ravl_foreach_node (struct ravl_node *n, ravl_cb cb, void *arg, int free_node) at core/ravl.c:74> (R):
                                                                                    ravl_foreach_node() <void ravl_foreach_node (struct ravl_node *n, ravl_cb cb, void *arg, int free_node) at core/ravl.c:74> (recursive: see 23493)
                                                                                    Free() <Free_func Free at core/alloc.c:91>
                                                                                Free() <Free_func Free at core/alloc.c:91>
                                                                        Free() <Free_func Free at core/alloc.c:91>
                                                                    heap_get_recycler() <struct recycler *heap_get_recycler (struct palloc_heap *heap, size_t id, size_t nallocs) at libpmemobj/heap.c:106> (recursive: see 23475)
                                                                recycler_put() <int recycler_put (struct recycler *r, struct recycler_element element) at libpmemobj/recycler.c:154>:
                                                                    util_mutex_lock()
                                                                    ravl_emplace_copy() <int ravl_emplace_copy (struct ravl *ravl, const void *data) at core/ravl.c:384>:
                                                                        ravl_emplace() <int ravl_emplace (struct ravl *ravl, ravl_constr constr, const void *arg) at core/ravl.c:393>:
                                                                            LOG()
                                                                            ravl_new_node() <struct ravl_node *ravl_new_node (struct ravl *ravl, ravl_constr constr, const void *arg) at core/ravl.c:161>:
                                                                                Malloc()
                                                                                ERR()
                                                                                ravl_node_insert_constructor() <void ravl_node_insert_constructor (void *data, size_t data_size, const void *arg) at core/ravl.c:139>:
                                                                                    SUPPRESS_UNUSED()
                                                                                    memcpy()
                                                                            ravl_data() <void *ravl_data (struct ravl_node *node) at core/ravl.c:571>:
                                                                                memcpy()
                                                                            ravl_balance() <void ravl_balance (struct ravl *ravl, struct ravl_node *n) at core/ravl.c:337>:
                                                                                ravl_node_is() <int ravl_node_is (struct ravl_node *n, int i, int j) at core/ravl.c:306>:
                                                                                    ravl_node_is_i_j() <int ravl_node_is_i_j (struct ravl_node *n, int i, int j) at core/ravl.c:296>:
                                                                                        ravl_node_rank_difference_parent() <int ravl_node_rank_difference_parent (struct ravl_node *p, struct ravl_node *n) at core/ravl.c:275>:
                                                                                            ravl_node_rank() <int ravl_node_rank (struct ravl_node *n) at core/ravl.c:261>:
                                                                                ravl_node_promote() <void ravl_node_promote (struct ravl_node *n) at core/ravl.c:315>
                                                                                ravl_node_sibling() <struct ravl_node *ravl_node_sibling (struct ravl_node *n) at core/ravl.c:209>:
                                                                                    ravl_node_slot_type() <enum ravl_slot_type ravl_node_slot_type (struct ravl_node *n) at core/ravl.c:196>:
                                                                                ravl_node_rank_difference() <int ravl_node_rank_difference (struct ravl_node *n) at core/ravl.c:287>:
                                                                                    ravl_node_rank_difference_parent() <int ravl_node_rank_difference_parent (struct ravl_node *p, struct ravl_node *n) at core/ravl.c:275>:
                                                                                        ravl_node_rank() <int ravl_node_rank (struct ravl_node *n) at core/ravl.c:261>:
                                                                                ravl_node_rank_difference_parent() <int ravl_node_rank_difference_parent (struct ravl_node *p, struct ravl_node *n) at core/ravl.c:275>:
                                                                                    ravl_node_rank() <int ravl_node_rank (struct ravl_node *n) at core/ravl.c:261>:
                                                                                ravl_slot_opposite() <enum ravl_slot_type ravl_slot_opposite (enum ravl_slot_type t) at core/ravl.c:184>:
                                                                                    ASSERTne()
                                                                                ravl_node_slot_type() <enum ravl_slot_type ravl_node_slot_type (struct ravl_node *n) at core/ravl.c:196>:
                                                                                ravl_rotate() <void ravl_rotate (struct ravl *ravl, struct ravl_node *n) at core/ravl.c:237>:
                                                                                    ASSERTne()
                                                                                    ravl_node_ref() <struct ravl_node **ravl_node_ref (struct ravl *ravl, struct ravl_node *n) at core/ravl.c:223>:
                                                                                        ravl_node_slot_type() <enum ravl_slot_type ravl_node_slot_type (struct ravl_node *n) at core/ravl.c:196>:
                                                                                    ravl_node_slot_type() <enum ravl_slot_type ravl_node_slot_type (struct ravl_node *n) at core/ravl.c:196>:
                                                                                    ravl_slot_opposite() <enum ravl_slot_type ravl_slot_opposite (enum ravl_slot_type t) at core/ravl.c:184>:
                                                                                        ASSERTne()
                                                                                ravl_node_demote() <void ravl_node_demote (struct ravl_node *n) at core/ravl.c:324>:
                                                                                    ASSERT()
                                                                            Free() <Free_func Free at core/alloc.c:91>
                                                                        ravl_node_copy_constructor() <void ravl_node_copy_constructor (void *data, size_t data_size, const void *arg) at core/ravl.c:152>:
                                                                            memcpy()
                                                                    util_mutex_unlock()
                                                                ERR()
                                                            heap_bucket_acquire() <struct bucket *heap_bucket_acquire (struct palloc_heap *heap, uint8_t class_id, uint16_t arena_id) at libpmemobj/heap.c:470>:
                                                                out() <void out (const char *fmt, ...) at core/out.c:480>:
                                                                    va_start()
                                                                    out_common() <} void out_common (const char *file, int line, const char *func, int level, const char *suffix, const char *fmt, va_list ap) at core/out.c:334>
                                                                    va_end()
                                                                heap_thread_arena() <struct arena *heap_thread_arena (struct palloc_heap *heap) at libpmemobj/heap.c:414>:
                                                                    os_tls_get() <void *os_tls_get (os_tls_key_t key) at core/os_thread_posix.c:62>:
                                                                        pthread_getspecific()
                                                                    heap_thread_arena_assign() <struct arena *heap_thread_arena_assign (struct palloc_heap *heap) at libpmemobj/heap.c:381>:
                                                                        util_mutex_lock()
                                                                        ASSERTne()
                                                                        VEC_SIZE()
                                                                        VEC_FOREACH()
                                                                        LOG()
                                                                        heap_arena_thread_attach() <void heap_arena_thread_attach (struct palloc_heap *heap, struct arena *a) at libpmemobj/heap.c:249>:
                                                                            ASSERTeq()
                                                                            os_tls_get() <void *os_tls_get (os_tls_key_t key) at core/os_thread_posix.c:62>:
                                                                                pthread_getspecific()
                                                                            heap_arena_thread_detach() <void heap_arena_thread_detach (struct arena *a) at libpmemobj/heap.c:232>:
                                                                                util_fetch_and_sub64()
                                                                            ASSERTne()
                                                                            util_fetch_and_add64()
                                                                            os_tls_set() <int os_tls_set (os_tls_key_t key, const void *value) at core/os_thread_posix.c:53>:
                                                                                pthread_setspecific()
                                                                        util_mutex_unlock()
                                                                    heap_global_arena_assign() <struct arena *heap_global_arena_assign (struct palloc_heap *heap) at libpmemobj/heap.c:348>:
                                                                        util_mutex_lock()
                                                                        ASSERTne()
                                                                        VEC_SIZE()
                                                                        VEC_FOREACH()
                                                                        LOG()
                                                                        util_mutex_unlock()
                                                                    ASSERT()
                                                                    ASSERTne()
                                                                ASSERTne()
                                                                VEC_ARR()
                                                                bucket_acquire() <struct bucket *bucket_acquire (struct bucket_locked *b) at libpmemobj/bucket.c:117>:
                                                                    util_mutex_lock()
                                                            heap_run_into_free_chunk() <void heap_run_into_free_chunk (struct palloc_heap *heap, struct bucket *bucket, struct memory_block *m) at libpmemobj/heap.c:697>:
                                                                heap_get_chunk_hdr()
                                                                STATS_SUB()
                                                                util_mutex_lock()
                                                                memblock_huge_init() <struct memory_block memblock_huge_init (struct palloc_heap *heap, uint32_t chunk_id, uint32_t zone_id, uint32_t size_idx) at libpmemobj/memblock.c:1329>:
                                                                    heap_get_chunk_hdr()
                                                                    VALGRIND_DO_MAKE_MEM_UNDEFINED()
                                                                    VALGRIND_ANNOTATE_NEW_MEMORY()
                                                                    chunk_get_chunk_hdr_value() <uint64_t chunk_get_chunk_hdr_value (uint16_t type, uint16_t flags, uint32_t size_idx) at libpmemobj/memblock.c:604>:
                                                                        COMPILE_ERROR_ON()
                                                                        memcpy()
                                                                    util_atomic_store_explicit64()
                                                                    pmemops_persist()
                                                                    huge_write_footer() <void huge_write_footer (struct chunk_header *hdr, uint32_t size_idx) at libpmemobj/memblock.c:1166>:
                                                                        VALGRIND_DO_MAKE_MEM_UNDEFINED()
                                                                        VALGRIND_SET_CLEAN()
                                                                    memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                                                        memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                                                            heap_get_chunk_hdr()
                                                                        memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                                                            heap_get_chunk_hdr()
                                                                            FATAL()
                                                                heap_free_chunk_reuse() <int heap_free_chunk_reuse (struct palloc_heap *heap, struct bucket *bucket, struct memory_block *m) at libpmemobj/heap.c:674>:
                                                                    heap_coalesce_huge() <struct memory_block heap_coalesce_huge (struct palloc_heap *heap, struct bucket *b, const struct memory_block *m) at libpmemobj/heap.c:650>:
                                                                        heap_get_adjacent_free_block() <int heap_get_adjacent_free_block (struct palloc_heap *heap, const struct memory_block *in, struct memory_block *out, int prev) at libpmemobj/heap.c:582>:
                                                                            ZID_TO_ZONE()
                                                                            memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                                                                memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                                                                    heap_get_chunk_hdr()
                                                                                memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                                                                    heap_get_chunk_hdr()
                                                                                    FATAL()
                                                                        bucket_remove_block() <int bucket_remove_block (struct bucket *b, const struct memory_block *m) at libpmemobj/bucket.c:178>
                                                                        heap_coalesce() <struct memory_block heap_coalesce (struct palloc_heap *heap, const struct memory_block *blocks[], int n) at libpmemobj/heap.c:621>:
                                                                            ASSERTne()
                                                                            memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                                                                memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                                                                    heap_get_chunk_hdr()
                                                                                memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                                                                    heap_get_chunk_hdr()
                                                                                    FATAL()
                                                                    bucket_insert_block() <int bucket_insert_block (struct bucket *b, const struct memory_block *m) at libpmemobj/bucket.c:161>:
                                                                        VALGRIND_DO_MAKE_MEM_NOACCESS()
                                                                        VALGRIND_ANNOTATE_NEW_MEMORY()
                                                                util_mutex_unlock()
                                                            heap_bucket_release() <void heap_bucket_release (struct bucket *b) at libpmemobj/heap.c:498>:
                                                                bucket_release() <void bucket_release (struct bucket *b) at libpmemobj/bucket.c:127>:
                                                                    util_mutex_unlock()
                                                    heap_reuse_from_recycler() <int heap_reuse_from_recycler (struct palloc_heap *heap, struct bucket *b, uint32_t units, int force) at libpmemobj/heap.c:1034>:
                                                        bucket_alloc_class() <struct alloc_class *bucket_alloc_class (struct bucket *b) at libpmemobj/bucket.c:152>
                                                        heap_get_recycler() <struct recycler *heap_get_recycler (struct palloc_heap *heap, size_t id, size_t nallocs) at libpmemobj/heap.c:106> (R):
                                                            util_atomic_load_explicit64()
                                                            recycler_new() <struct recycler *recycler_new (struct palloc_heap *heap, size_t nallocs, size_t *peak_arenas) at libpmemobj/recycler.c:74>:
                                                                Malloc()
                                                                ravl_new_sized() <struct ravl *ravl_new_sized (ravl_compare *compare, size_t data_size) at core/ravl.c:45>:
                                                                    Malloc()
                                                                    ERR()
                                                                recycler_element_cmp() <int recycler_element_cmp (const void *lhs, const void *rhs) at libpmemobj/recycler.c:23>:
                                                                memset()
                                                                VEC_INIT()
                                                                util_mutex_init()
                                                                Free() <Free_func Free at core/alloc.c:91>
                                                            util_bool_compare_and_swap64()
                                                            recycler_delete() <void recycler_delete (struct recycler *r) at libpmemobj/recycler.c:107>:
                                                                VEC_DELETE()
                                                                util_mutex_destroy()
                                                                ravl_delete() <void ravl_delete (struct ravl *ravl) at core/ravl.c:112>:
                                                                    ravl_delete_cb() <void ravl_delete_cb (struct ravl *ravl, ravl_cb cb, void *arg) at core/ravl.c:102>:
                                                                        ravl_foreach_node() <void ravl_foreach_node (struct ravl_node *n, ravl_cb cb, void *arg, int free_node) at core/ravl.c:74> (R):
                                                                            ravl_foreach_node() <void ravl_foreach_node (struct ravl_node *n, ravl_cb cb, void *arg, int free_node) at core/ravl.c:74> (recursive: see 23648)
                                                                            Free() <Free_func Free at core/alloc.c:91>
                                                                        Free() <Free_func Free at core/alloc.c:91>
                                                                Free() <Free_func Free at core/alloc.c:91>
                                                            heap_get_recycler() <struct recycler *heap_get_recycler (struct palloc_heap *heap, size_t id, size_t nallocs) at libpmemobj/heap.c:106> (recursive: see 23630)
                                                        ERR()
                                                        recycler_get() <int recycler_get (struct recycler *r, struct memory_block *m) at libpmemobj/recycler.c:171>:
                                                            util_mutex_lock()
                                                            ravl_find() <struct ravl_node *ravl_find (struct ravl *ravl, const void *data, enum ravl_predicate flags) at core/ravl.c:524>:
                                                                LOG()
                                                                ravl_data() <void *ravl_data (struct ravl_node *node) at core/ravl.c:571>:
                                                                    memcpy()
                                                                ravl_predicate_holds() <int ravl_predicate_holds (int result, struct ravl_node **ret, struct ravl_node *n, enum ravl_predicate flags) at core/ravl.c:489>:
                                                                    ravl_node_successor() <struct ravl_node *ravl_node_successor (struct ravl_node *n) at core/ravl.c:465>:
                                                                        ravl_node_cessor() <struct ravl_node *ravl_node_cessor (struct ravl_node *n, enum ravl_slot_type t) at core/ravl.c:443>:
                                                                            ravl_node_type_most() <struct ravl_node *ravl_node_type_most (struct ravl_node *n, enum ravl_slot_type t) at core/ravl.c:430>:
                                                                            ravl_slot_opposite() <enum ravl_slot_type ravl_slot_opposite (enum ravl_slot_type t) at core/ravl.c:184>:
                                                                                ASSERTne()
                                                                    ravl_node_predecessor() <struct ravl_node *ravl_node_predecessor (struct ravl_node *n) at core/ravl.c:476>:
                                                                        ravl_node_cessor() <struct ravl_node *ravl_node_cessor (struct ravl_node *n, enum ravl_slot_type t) at core/ravl.c:443>:
                                                                            ravl_node_type_most() <struct ravl_node *ravl_node_type_most (struct ravl_node *n, enum ravl_slot_type t) at core/ravl.c:430>:
                                                                            ravl_slot_opposite() <enum ravl_slot_type ravl_slot_opposite (enum ravl_slot_type t) at core/ravl.c:184>:
                                                                                ASSERTne()
                                                            out() <void out (const char *fmt, ...) at core/out.c:480>:
                                                                va_start()
                                                                out_common() <} void out_common (const char *file, int line, const char *func, int level, const char *suffix, const char *fmt, va_list ap) at core/out.c:334>
                                                                va_end()
                                                            ravl_data() <void *ravl_data (struct ravl_node *node) at core/ravl.c:571>:
                                                                memcpy()
                                                            ravl_remove() <void ravl_remove (struct ravl *ravl, struct ravl_node *n) at core/ravl.c:545> (R):
                                                                LOG()
                                                                ravl_node_successor() <struct ravl_node *ravl_node_successor (struct ravl_node *n) at core/ravl.c:465>:
                                                                    ravl_node_cessor() <struct ravl_node *ravl_node_cessor (struct ravl_node *n, enum ravl_slot_type t) at core/ravl.c:443>:
                                                                        ravl_node_type_most() <struct ravl_node *ravl_node_type_most (struct ravl_node *n, enum ravl_slot_type t) at core/ravl.c:430>:
                                                                        ravl_slot_opposite() <enum ravl_slot_type ravl_slot_opposite (enum ravl_slot_type t) at core/ravl.c:184>:
                                                                            ASSERTne()
                                                                memcpy()
                                                                ravl_remove() <void ravl_remove (struct ravl *ravl, struct ravl_node *n) at core/ravl.c:545> (recursive: see 23678)
                                                                ravl_node_ref() <struct ravl_node **ravl_node_ref (struct ravl *ravl, struct ravl_node *n) at core/ravl.c:223>:
                                                                    ravl_node_slot_type() <enum ravl_slot_type ravl_node_slot_type (struct ravl_node *n) at core/ravl.c:196>:
                                                                Free() <Free_func Free at core/alloc.c:91>
                                                            heap_get_chunk_hdr()
                                                            memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                                                memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                                                    heap_get_chunk_hdr()
                                                                memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                                                    heap_get_chunk_hdr()
                                                                    FATAL()
                                                            util_mutex_unlock()
                                                        bucket_attach_run() <int bucket_attach_run (struct bucket *b, const struct memory_block *m) at libpmemobj/bucket.c:206>:
                                                            util_mutex_lock()
                                                            bucket_memblock_insert_block() <int bucket_memblock_insert_block (const struct memory_block *m, void *b) at libpmemobj/bucket.c:197>:
                                                                bucket_insert_block() <int bucket_insert_block (struct bucket *b, const struct memory_block *m) at libpmemobj/bucket.c:161>:
                                                                    VALGRIND_DO_MAKE_MEM_NOACCESS()
                                                                    VALGRIND_ANNOTATE_NEW_MEMORY()
                                                            util_mutex_unlock()
                                                            util_fetch_and_add64()
                                                        heap_recycle_unused() <int heap_recycle_unused (struct palloc_heap *heap, struct recycler *recycler, struct bucket *defb, int force) at libpmemobj/heap.c:894>:
                                                            recycler_recalc() <struct empty_runs recycler_recalc (struct recycler *r, int force) at libpmemobj/recycler.c:207>:
                                                                VEC_INIT()
                                                                util_atomic_load64()
                                                                util_mutex_trylock()
                                                                ravl_find() <struct ravl_node *ravl_find (struct ravl *ravl, const void *data, enum ravl_predicate flags) at core/ravl.c:524>:
                                                                    LOG()
                                                                    ravl_data() <void *ravl_data (struct ravl_node *node) at core/ravl.c:571>:
                                                                        memcpy()
                                                                    ravl_predicate_holds() <int ravl_predicate_holds (int result, struct ravl_node **ret, struct ravl_node *n, enum ravl_predicate flags) at core/ravl.c:489>:
                                                                        ravl_node_successor() <struct ravl_node *ravl_node_successor (struct ravl_node *n) at core/ravl.c:465>:
                                                                            ravl_node_cessor() <struct ravl_node *ravl_node_cessor (struct ravl_node *n, enum ravl_slot_type t) at core/ravl.c:443>:
                                                                                ravl_node_type_most() <struct ravl_node *ravl_node_type_most (struct ravl_node *n, enum ravl_slot_type t) at core/ravl.c:430>:
                                                                                ravl_slot_opposite() <enum ravl_slot_type ravl_slot_opposite (enum ravl_slot_type t) at core/ravl.c:184>:
                                                                                    ASSERTne()
                                                                        ravl_node_predecessor() <struct ravl_node *ravl_node_predecessor (struct ravl_node *n) at core/ravl.c:476>:
                                                                            ravl_node_cessor() <struct ravl_node *ravl_node_cessor (struct ravl_node *n, enum ravl_slot_type t) at core/ravl.c:443>:
                                                                                ravl_node_type_most() <struct ravl_node *ravl_node_type_most (struct ravl_node *n, enum ravl_slot_type t) at core/ravl.c:430>:
                                                                                ravl_slot_opposite() <enum ravl_slot_type ravl_slot_opposite (enum ravl_slot_type t) at core/ravl.c:184>:
                                                                                    ASSERTne()
                                                                ravl_data() <void *ravl_data (struct ravl_node *node) at core/ravl.c:571>:
                                                                    memcpy()
                                                                memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                                                    memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                                                        heap_get_chunk_hdr()
                                                                    memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                                                        heap_get_chunk_hdr()
                                                                        FATAL()
                                                                recycler_element_new() <struct recycler_element recycler_element_new (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/recycler.c:122>:
                                                                    SUPPRESS_UNUSED()
                                                                    util_mutex_lock()
                                                                    util_mutex_unlock()
                                                                ASSERT()
                                                                util_fetch_and_sub64()
                                                                MIN()
                                                                ravl_remove() <void ravl_remove (struct ravl *ravl, struct ravl_node *n) at core/ravl.c:545> (R):
                                                                    LOG()
                                                                    ravl_node_successor() <struct ravl_node *ravl_node_successor (struct ravl_node *n) at core/ravl.c:465>:
                                                                        ravl_node_cessor() <struct ravl_node *ravl_node_cessor (struct ravl_node *n, enum ravl_slot_type t) at core/ravl.c:443>:
                                                                            ravl_node_type_most() <struct ravl_node *ravl_node_type_most (struct ravl_node *n, enum ravl_slot_type t) at core/ravl.c:430>:
                                                                            ravl_slot_opposite() <enum ravl_slot_type ravl_slot_opposite (enum ravl_slot_type t) at core/ravl.c:184>:
                                                                                ASSERTne()
                                                                    memcpy()
                                                                    ravl_remove() <void ravl_remove (struct ravl *ravl, struct ravl_node *n) at core/ravl.c:545> (recursive: see 23741)
                                                                    ravl_node_ref() <struct ravl_node **ravl_node_ref (struct ravl *ravl, struct ravl_node *n) at core/ravl.c:223>:
                                                                        ravl_node_slot_type() <enum ravl_slot_type ravl_node_slot_type (struct ravl_node *n) at core/ravl.c:196>:
                                                                    Free() <Free_func Free at core/alloc.c:91>
                                                                VEC_PUSH_BACK()
                                                                VEC_FOREACH_BY_PTR()
                                                                ravl_emplace_copy() <int ravl_emplace_copy (struct ravl *ravl, const void *data) at core/ravl.c:384>:
                                                                    ravl_emplace() <int ravl_emplace (struct ravl *ravl, ravl_constr constr, const void *arg) at core/ravl.c:393>:
                                                                        LOG()
                                                                        ravl_new_node() <struct ravl_node *ravl_new_node (struct ravl *ravl, ravl_constr constr, const void *arg) at core/ravl.c:161>:
                                                                            Malloc()
                                                                            ERR()
                                                                            ravl_node_insert_constructor() <void ravl_node_insert_constructor (void *data, size_t data_size, const void *arg) at core/ravl.c:139>:
                                                                                SUPPRESS_UNUSED()
                                                                                memcpy()
                                                                        ravl_data() <void *ravl_data (struct ravl_node *node) at core/ravl.c:571>:
                                                                            memcpy()
                                                                        ravl_balance() <void ravl_balance (struct ravl *ravl, struct ravl_node *n) at core/ravl.c:337>:
                                                                            ravl_node_is() <int ravl_node_is (struct ravl_node *n, int i, int j) at core/ravl.c:306>:
                                                                                ravl_node_is_i_j() <int ravl_node_is_i_j (struct ravl_node *n, int i, int j) at core/ravl.c:296>:
                                                                                    ravl_node_rank_difference_parent() <int ravl_node_rank_difference_parent (struct ravl_node *p, struct ravl_node *n) at core/ravl.c:275>:
                                                                                        ravl_node_rank() <int ravl_node_rank (struct ravl_node *n) at core/ravl.c:261>:
                                                                            ravl_node_promote() <void ravl_node_promote (struct ravl_node *n) at core/ravl.c:315>
                                                                            ravl_node_sibling() <struct ravl_node *ravl_node_sibling (struct ravl_node *n) at core/ravl.c:209>:
                                                                                ravl_node_slot_type() <enum ravl_slot_type ravl_node_slot_type (struct ravl_node *n) at core/ravl.c:196>:
                                                                            ravl_node_rank_difference() <int ravl_node_rank_difference (struct ravl_node *n) at core/ravl.c:287>:
                                                                                ravl_node_rank_difference_parent() <int ravl_node_rank_difference_parent (struct ravl_node *p, struct ravl_node *n) at core/ravl.c:275>:
                                                                                    ravl_node_rank() <int ravl_node_rank (struct ravl_node *n) at core/ravl.c:261>:
                                                                            ravl_node_rank_difference_parent() <int ravl_node_rank_difference_parent (struct ravl_node *p, struct ravl_node *n) at core/ravl.c:275>:
                                                                                ravl_node_rank() <int ravl_node_rank (struct ravl_node *n) at core/ravl.c:261>:
                                                                            ravl_slot_opposite() <enum ravl_slot_type ravl_slot_opposite (enum ravl_slot_type t) at core/ravl.c:184>:
                                                                                ASSERTne()
                                                                            ravl_node_slot_type() <enum ravl_slot_type ravl_node_slot_type (struct ravl_node *n) at core/ravl.c:196>:
                                                                            ravl_rotate() <void ravl_rotate (struct ravl *ravl, struct ravl_node *n) at core/ravl.c:237>:
                                                                                ASSERTne()
                                                                                ravl_node_ref() <struct ravl_node **ravl_node_ref (struct ravl *ravl, struct ravl_node *n) at core/ravl.c:223>:
                                                                                    ravl_node_slot_type() <enum ravl_slot_type ravl_node_slot_type (struct ravl_node *n) at core/ravl.c:196>:
                                                                                ravl_node_slot_type() <enum ravl_slot_type ravl_node_slot_type (struct ravl_node *n) at core/ravl.c:196>:
                                                                                ravl_slot_opposite() <enum ravl_slot_type ravl_slot_opposite (enum ravl_slot_type t) at core/ravl.c:184>:
                                                                                    ASSERTne()
                                                                            ravl_node_demote() <void ravl_node_demote (struct ravl_node *n) at core/ravl.c:324>:
                                                                                ASSERT()
                                                                        Free() <Free_func Free at core/alloc.c:91>
                                                                    ravl_node_copy_constructor() <void ravl_node_copy_constructor (void *data, size_t data_size, const void *arg) at core/ravl.c:152>:
                                                                        memcpy()
                                                                VEC_CLEAR()
                                                                util_mutex_unlock()
                                                            VEC_SIZE()
                                                            heap_bucket_acquire() <struct bucket *heap_bucket_acquire (struct palloc_heap *heap, uint8_t class_id, uint16_t arena_id) at libpmemobj/heap.c:470>:
                                                                out() <void out (const char *fmt, ...) at core/out.c:480>:
                                                                    va_start()
                                                                    out_common() <} void out_common (const char *file, int line, const char *func, int level, const char *suffix, const char *fmt, va_list ap) at core/out.c:334>
                                                                    va_end()
                                                                heap_thread_arena() <struct arena *heap_thread_arena (struct palloc_heap *heap) at libpmemobj/heap.c:414>:
                                                                    os_tls_get() <void *os_tls_get (os_tls_key_t key) at core/os_thread_posix.c:62>:
                                                                        pthread_getspecific()
                                                                    heap_thread_arena_assign() <struct arena *heap_thread_arena_assign (struct palloc_heap *heap) at libpmemobj/heap.c:381>:
                                                                        util_mutex_lock()
                                                                        ASSERTne()
                                                                        VEC_SIZE()
                                                                        VEC_FOREACH()
                                                                        LOG()
                                                                        heap_arena_thread_attach() <void heap_arena_thread_attach (struct palloc_heap *heap, struct arena *a) at libpmemobj/heap.c:249>:
                                                                            ASSERTeq()
                                                                            os_tls_get() <void *os_tls_get (os_tls_key_t key) at core/os_thread_posix.c:62>:
                                                                                pthread_getspecific()
                                                                            heap_arena_thread_detach() <void heap_arena_thread_detach (struct arena *a) at libpmemobj/heap.c:232>:
                                                                                util_fetch_and_sub64()
                                                                            ASSERTne()
                                                                            util_fetch_and_add64()
                                                                            os_tls_set() <int os_tls_set (os_tls_key_t key, const void *value) at core/os_thread_posix.c:53>:
                                                                                pthread_setspecific()
                                                                        util_mutex_unlock()
                                                                    heap_global_arena_assign() <struct arena *heap_global_arena_assign (struct palloc_heap *heap) at libpmemobj/heap.c:348>:
                                                                        util_mutex_lock()
                                                                        ASSERTne()
                                                                        VEC_SIZE()
                                                                        VEC_FOREACH()
                                                                        LOG()
                                                                        util_mutex_unlock()
                                                                    ASSERT()
                                                                    ASSERTne()
                                                                ASSERTne()
                                                                VEC_ARR()
                                                                bucket_acquire() <struct bucket *bucket_acquire (struct bucket_locked *b) at libpmemobj/bucket.c:117>:
                                                                    util_mutex_lock()
                                                            ASSERT()
                                                            VEC_FOREACH_BY_PTR()
                                                            heap_run_into_free_chunk() <void heap_run_into_free_chunk (struct palloc_heap *heap, struct bucket *bucket, struct memory_block *m) at libpmemobj/heap.c:697>:
                                                                heap_get_chunk_hdr()
                                                                STATS_SUB()
                                                                util_mutex_lock()
                                                                memblock_huge_init() <struct memory_block memblock_huge_init (struct palloc_heap *heap, uint32_t chunk_id, uint32_t zone_id, uint32_t size_idx) at libpmemobj/memblock.c:1329>:
                                                                    heap_get_chunk_hdr()
                                                                    VALGRIND_DO_MAKE_MEM_UNDEFINED()
                                                                    VALGRIND_ANNOTATE_NEW_MEMORY()
                                                                    chunk_get_chunk_hdr_value() <uint64_t chunk_get_chunk_hdr_value (uint16_t type, uint16_t flags, uint32_t size_idx) at libpmemobj/memblock.c:604>:
                                                                        COMPILE_ERROR_ON()
                                                                        memcpy()
                                                                    util_atomic_store_explicit64()
                                                                    pmemops_persist()
                                                                    huge_write_footer() <void huge_write_footer (struct chunk_header *hdr, uint32_t size_idx) at libpmemobj/memblock.c:1166>:
                                                                        VALGRIND_DO_MAKE_MEM_UNDEFINED()
                                                                        VALGRIND_SET_CLEAN()
                                                                    memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                                                        memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                                                            heap_get_chunk_hdr()
                                                                        memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                                                            heap_get_chunk_hdr()
                                                                            FATAL()
                                                                heap_free_chunk_reuse() <int heap_free_chunk_reuse (struct palloc_heap *heap, struct bucket *bucket, struct memory_block *m) at libpmemobj/heap.c:674>:
                                                                    heap_coalesce_huge() <struct memory_block heap_coalesce_huge (struct palloc_heap *heap, struct bucket *b, const struct memory_block *m) at libpmemobj/heap.c:650>:
                                                                        heap_get_adjacent_free_block() <int heap_get_adjacent_free_block (struct palloc_heap *heap, const struct memory_block *in, struct memory_block *out, int prev) at libpmemobj/heap.c:582>:
                                                                            ZID_TO_ZONE()
                                                                            memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                                                                memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                                                                    heap_get_chunk_hdr()
                                                                                memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                                                                    heap_get_chunk_hdr()
                                                                                    FATAL()
                                                                        bucket_remove_block() <int bucket_remove_block (struct bucket *b, const struct memory_block *m) at libpmemobj/bucket.c:178>
                                                                        heap_coalesce() <struct memory_block heap_coalesce (struct palloc_heap *heap, const struct memory_block *blocks[], int n) at libpmemobj/heap.c:621>:
                                                                            ASSERTne()
                                                                            memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                                                                memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                                                                    heap_get_chunk_hdr()
                                                                                memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                                                                    heap_get_chunk_hdr()
                                                                                    FATAL()
                                                                    bucket_insert_block() <int bucket_insert_block (struct bucket *b, const struct memory_block *m) at libpmemobj/bucket.c:161>:
                                                                        VALGRIND_DO_MAKE_MEM_NOACCESS()
                                                                        VALGRIND_ANNOTATE_NEW_MEMORY()
                                                                util_mutex_unlock()
                                                            heap_bucket_release() <void heap_bucket_release (struct bucket *b) at libpmemobj/heap.c:498>:
                                                                bucket_release() <void bucket_release (struct bucket *b) at libpmemobj/bucket.c:127>:
                                                                    util_mutex_unlock()
                                                            VEC_DELETE()
                                                    out() <void out (const char *fmt, ...) at core/out.c:480>:
                                                        va_start()
                                                        out_common() <} void out_common (const char *file, int line, const char *func, int level, const char *suffix, const char *fmt, va_list ap) at core/out.c:334>
                                                        va_end()
                                                    heap_bucket_acquire() <struct bucket *heap_bucket_acquire (struct palloc_heap *heap, uint8_t class_id, uint16_t arena_id) at libpmemobj/heap.c:470>:
                                                        out() <void out (const char *fmt, ...) at core/out.c:480>:
                                                            va_start()
                                                            out_common() <} void out_common (const char *file, int line, const char *func, int level, const char *suffix, const char *fmt, va_list ap) at core/out.c:334>
                                                            va_end()
                                                        heap_thread_arena() <struct arena *heap_thread_arena (struct palloc_heap *heap) at libpmemobj/heap.c:414>:
                                                            os_tls_get() <void *os_tls_get (os_tls_key_t key) at core/os_thread_posix.c:62>:
                                                                pthread_getspecific()
                                                            heap_thread_arena_assign() <struct arena *heap_thread_arena_assign (struct palloc_heap *heap) at libpmemobj/heap.c:381>:
                                                                util_mutex_lock()
                                                                ASSERTne()
                                                                VEC_SIZE()
                                                                VEC_FOREACH()
                                                                LOG()
                                                                heap_arena_thread_attach() <void heap_arena_thread_attach (struct palloc_heap *heap, struct arena *a) at libpmemobj/heap.c:249>:
                                                                    ASSERTeq()
                                                                    os_tls_get() <void *os_tls_get (os_tls_key_t key) at core/os_thread_posix.c:62>:
                                                                        pthread_getspecific()
                                                                    heap_arena_thread_detach() <void heap_arena_thread_detach (struct arena *a) at libpmemobj/heap.c:232>:
                                                                        util_fetch_and_sub64()
                                                                    ASSERTne()
                                                                    util_fetch_and_add64()
                                                                    os_tls_set() <int os_tls_set (os_tls_key_t key, const void *value) at core/os_thread_posix.c:53>:
                                                                        pthread_setspecific()
                                                                util_mutex_unlock()
                                                            heap_global_arena_assign() <struct arena *heap_global_arena_assign (struct palloc_heap *heap) at libpmemobj/heap.c:348>:
                                                                util_mutex_lock()
                                                                ASSERTne()
                                                                VEC_SIZE()
                                                                VEC_FOREACH()
                                                                LOG()
                                                                util_mutex_unlock()
                                                            ASSERT()
                                                            ASSERTne()
                                                        ASSERTne()
                                                        VEC_ARR()
                                                        bucket_acquire() <struct bucket *bucket_acquire (struct bucket_locked *b) at libpmemobj/bucket.c:117>:
                                                            util_mutex_lock()
                                                    heap_populate_bucket() <int heap_populate_bucket (struct palloc_heap *heap, struct bucket *bucket) at libpmemobj/heap.c:850>:
                                                        util_atomic_store_explicit32()
                                                        ZID_TO_ZONE()
                                                        VALGRIND_ADD_TO_GLOBAL_TX_IGNORE()
                                                        heap_zone_init() <void heap_zone_init (struct palloc_heap *heap, uint32_t zone_id, uint32_t first_chunk_id) at libpmemobj/heap.c:559>:
                                                            ZID_TO_ZONE()
                                                            zone_calc_size_idx() <uint32_t zone_calc_size_idx (uint32_t zone_id, unsigned max_zone, size_t heap_size) at libpmemobj/heap.c:533>:
                                                                ASSERT()
                                                            ASSERT()
                                                            memblock_huge_init() <struct memory_block memblock_huge_init (struct palloc_heap *heap, uint32_t chunk_id, uint32_t zone_id, uint32_t size_idx) at libpmemobj/memblock.c:1329>:
                                                                heap_get_chunk_hdr()
                                                                VALGRIND_DO_MAKE_MEM_UNDEFINED()
                                                                VALGRIND_ANNOTATE_NEW_MEMORY()
                                                                chunk_get_chunk_hdr_value() <uint64_t chunk_get_chunk_hdr_value (uint16_t type, uint16_t flags, uint32_t size_idx) at libpmemobj/memblock.c:604>:
                                                                    COMPILE_ERROR_ON()
                                                                    memcpy()
                                                                util_atomic_store_explicit64()
                                                                pmemops_persist()
                                                                huge_write_footer() <void huge_write_footer (struct chunk_header *hdr, uint32_t size_idx) at libpmemobj/memblock.c:1166>:
                                                                    VALGRIND_DO_MAKE_MEM_UNDEFINED()
                                                                    VALGRIND_SET_CLEAN()
                                                                memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                                                    memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                                                        heap_get_chunk_hdr()
                                                                    memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                                                        heap_get_chunk_hdr()
                                                                        FATAL()
                                                            pmemops_persist()
                                                        heap_reclaim_zone_garbage() <void heap_reclaim_zone_garbage (struct palloc_heap *heap, struct bucket *bucket, uint32_t zone_id) at libpmemobj/heap.c:775>:
                                                            ZID_TO_ZONE()
                                                            ASSERT()
                                                            memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                                                memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                                                    heap_get_chunk_hdr()
                                                                memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                                                    heap_get_chunk_hdr()
                                                                    FATAL()
                                                            heap_reclaim_run() <int heap_reclaim_run (struct palloc_heap *heap, struct memory_block *m, int startup) at libpmemobj/heap.c:733>:
                                                                heap_get_chunk_run()
                                                                heap_get_chunk_hdr()
                                                                alloc_class_by_run() <struct alloc_class *alloc_class_by_run (struct alloc_class_collection *ac, size_t unit_size, uint16_t flags, uint32_t size_idx) at libpmemobj/alloc_class.c:594>:
                                                                    SIZE_TO_CLASS_MAP_INDEX()
                                                                    ASSERT()
                                                                    critnib_get() <void *critnib_get (struct critnib *c, uint64_t key) at libpmemobj/critnib.c:515>:
                                                                        load() <void load (void *src, void *dst) at libpmemobj/critnib.c:130>:
                                                                            util_atomic_load_explicit64()
                                                                        is_leaf() <inline bool is_leaf (struct critnib_node *n) at libpmemobj/critnib.c:150>:
                                                                        slice_index() <inline unsigned slice_index (uint64_t key, sh_t shift) at libpmemobj/critnib.c:178>:
                                                                        to_leaf() <inline struct critnib_leaf *to_leaf (struct critnib_node *n) at libpmemobj/critnib.c:159>:
                                                                    RUN_CLASS_KEY_PACK()
                                                                recycler_element_new() <struct recycler_element recycler_element_new (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/recycler.c:122>:
                                                                    SUPPRESS_UNUSED()
                                                                    util_mutex_lock()
                                                                    util_mutex_unlock()
                                                                ASSERTeq()
                                                                STATS_INC()
                                                                heap_get_recycler() <struct recycler *heap_get_recycler (struct palloc_heap *heap, size_t id, size_t nallocs) at libpmemobj/heap.c:106> (R):
                                                                    util_atomic_load_explicit64()
                                                                    recycler_new() <struct recycler *recycler_new (struct palloc_heap *heap, size_t nallocs, size_t *peak_arenas) at libpmemobj/recycler.c:74>:
                                                                        Malloc()
                                                                        ravl_new_sized() <struct ravl *ravl_new_sized (ravl_compare *compare, size_t data_size) at core/ravl.c:45>:
                                                                            Malloc()
                                                                            ERR()
                                                                        recycler_element_cmp() <int recycler_element_cmp (const void *lhs, const void *rhs) at libpmemobj/recycler.c:23>:
                                                                        memset()
                                                                        VEC_INIT()
                                                                        util_mutex_init()
                                                                        Free() <Free_func Free at core/alloc.c:91>
                                                                    util_bool_compare_and_swap64()
                                                                    recycler_delete() <void recycler_delete (struct recycler *r) at libpmemobj/recycler.c:107>:
                                                                        VEC_DELETE()
                                                                        util_mutex_destroy()
                                                                        ravl_delete() <void ravl_delete (struct ravl *ravl) at core/ravl.c:112>:
                                                                            ravl_delete_cb() <void ravl_delete_cb (struct ravl *ravl, ravl_cb cb, void *arg) at core/ravl.c:102>:
                                                                                ravl_foreach_node() <void ravl_foreach_node (struct ravl_node *n, ravl_cb cb, void *arg, int free_node) at core/ravl.c:74> (R):
                                                                                    ravl_foreach_node() <void ravl_foreach_node (struct ravl_node *n, ravl_cb cb, void *arg, int free_node) at core/ravl.c:74> (recursive: see 24002)
                                                                                    Free() <Free_func Free at core/alloc.c:91>
                                                                                Free() <Free_func Free at core/alloc.c:91>
                                                                        Free() <Free_func Free at core/alloc.c:91>
                                                                    heap_get_recycler() <struct recycler *heap_get_recycler (struct palloc_heap *heap, size_t id, size_t nallocs) at libpmemobj/heap.c:106> (recursive: see 23984)
                                                                recycler_put() <int recycler_put (struct recycler *r, struct recycler_element element) at libpmemobj/recycler.c:154>:
                                                                    util_mutex_lock()
                                                                    ravl_emplace_copy() <int ravl_emplace_copy (struct ravl *ravl, const void *data) at core/ravl.c:384>:
                                                                        ravl_emplace() <int ravl_emplace (struct ravl *ravl, ravl_constr constr, const void *arg) at core/ravl.c:393>:
                                                                            LOG()
                                                                            ravl_new_node() <struct ravl_node *ravl_new_node (struct ravl *ravl, ravl_constr constr, const void *arg) at core/ravl.c:161>:
                                                                                Malloc()
                                                                                ERR()
                                                                                ravl_node_insert_constructor() <void ravl_node_insert_constructor (void *data, size_t data_size, const void *arg) at core/ravl.c:139>:
                                                                                    SUPPRESS_UNUSED()
                                                                                    memcpy()
                                                                            ravl_data() <void *ravl_data (struct ravl_node *node) at core/ravl.c:571>:
                                                                                memcpy()
                                                                            ravl_balance() <void ravl_balance (struct ravl *ravl, struct ravl_node *n) at core/ravl.c:337>:
                                                                                ravl_node_is() <int ravl_node_is (struct ravl_node *n, int i, int j) at core/ravl.c:306>:
                                                                                    ravl_node_is_i_j() <int ravl_node_is_i_j (struct ravl_node *n, int i, int j) at core/ravl.c:296>:
                                                                                        ravl_node_rank_difference_parent() <int ravl_node_rank_difference_parent (struct ravl_node *p, struct ravl_node *n) at core/ravl.c:275>:
                                                                                            ravl_node_rank() <int ravl_node_rank (struct ravl_node *n) at core/ravl.c:261>:
                                                                                ravl_node_promote() <void ravl_node_promote (struct ravl_node *n) at core/ravl.c:315>
                                                                                ravl_node_sibling() <struct ravl_node *ravl_node_sibling (struct ravl_node *n) at core/ravl.c:209>:
                                                                                    ravl_node_slot_type() <enum ravl_slot_type ravl_node_slot_type (struct ravl_node *n) at core/ravl.c:196>:
                                                                                ravl_node_rank_difference() <int ravl_node_rank_difference (struct ravl_node *n) at core/ravl.c:287>:
                                                                                    ravl_node_rank_difference_parent() <int ravl_node_rank_difference_parent (struct ravl_node *p, struct ravl_node *n) at core/ravl.c:275>:
                                                                                        ravl_node_rank() <int ravl_node_rank (struct ravl_node *n) at core/ravl.c:261>:
                                                                                ravl_node_rank_difference_parent() <int ravl_node_rank_difference_parent (struct ravl_node *p, struct ravl_node *n) at core/ravl.c:275>:
                                                                                    ravl_node_rank() <int ravl_node_rank (struct ravl_node *n) at core/ravl.c:261>:
                                                                                ravl_slot_opposite() <enum ravl_slot_type ravl_slot_opposite (enum ravl_slot_type t) at core/ravl.c:184>:
                                                                                    ASSERTne()
                                                                                ravl_node_slot_type() <enum ravl_slot_type ravl_node_slot_type (struct ravl_node *n) at core/ravl.c:196>:
                                                                                ravl_rotate() <void ravl_rotate (struct ravl *ravl, struct ravl_node *n) at core/ravl.c:237>:
                                                                                    ASSERTne()
                                                                                    ravl_node_ref() <struct ravl_node **ravl_node_ref (struct ravl *ravl, struct ravl_node *n) at core/ravl.c:223>:
                                                                                        ravl_node_slot_type() <enum ravl_slot_type ravl_node_slot_type (struct ravl_node *n) at core/ravl.c:196>:
                                                                                    ravl_node_slot_type() <enum ravl_slot_type ravl_node_slot_type (struct ravl_node *n) at core/ravl.c:196>:
                                                                                    ravl_slot_opposite() <enum ravl_slot_type ravl_slot_opposite (enum ravl_slot_type t) at core/ravl.c:184>:
                                                                                        ASSERTne()
                                                                                ravl_node_demote() <void ravl_node_demote (struct ravl_node *n) at core/ravl.c:324>:
                                                                                    ASSERT()
                                                                            Free() <Free_func Free at core/alloc.c:91>
                                                                        ravl_node_copy_constructor() <void ravl_node_copy_constructor (void *data, size_t data_size, const void *arg) at core/ravl.c:152>:
                                                                            memcpy()
                                                                    util_mutex_unlock()
                                                                ERR()
                                                            heap_run_into_free_chunk() <void heap_run_into_free_chunk (struct palloc_heap *heap, struct bucket *bucket, struct memory_block *m) at libpmemobj/heap.c:697>:
                                                                heap_get_chunk_hdr()
                                                                STATS_SUB()
                                                                util_mutex_lock()
                                                                memblock_huge_init() <struct memory_block memblock_huge_init (struct palloc_heap *heap, uint32_t chunk_id, uint32_t zone_id, uint32_t size_idx) at libpmemobj/memblock.c:1329>:
                                                                    heap_get_chunk_hdr()
                                                                    VALGRIND_DO_MAKE_MEM_UNDEFINED()
                                                                    VALGRIND_ANNOTATE_NEW_MEMORY()
                                                                    chunk_get_chunk_hdr_value() <uint64_t chunk_get_chunk_hdr_value (uint16_t type, uint16_t flags, uint32_t size_idx) at libpmemobj/memblock.c:604>:
                                                                        COMPILE_ERROR_ON()
                                                                        memcpy()
                                                                    util_atomic_store_explicit64()
                                                                    pmemops_persist()
                                                                    huge_write_footer() <void huge_write_footer (struct chunk_header *hdr, uint32_t size_idx) at libpmemobj/memblock.c:1166>:
                                                                        VALGRIND_DO_MAKE_MEM_UNDEFINED()
                                                                        VALGRIND_SET_CLEAN()
                                                                    memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                                                        memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                                                            heap_get_chunk_hdr()
                                                                        memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                                                            heap_get_chunk_hdr()
                                                                            FATAL()
                                                                heap_free_chunk_reuse() <int heap_free_chunk_reuse (struct palloc_heap *heap, struct bucket *bucket, struct memory_block *m) at libpmemobj/heap.c:674>:
                                                                    heap_coalesce_huge() <struct memory_block heap_coalesce_huge (struct palloc_heap *heap, struct bucket *b, const struct memory_block *m) at libpmemobj/heap.c:650>:
                                                                        heap_get_adjacent_free_block() <int heap_get_adjacent_free_block (struct palloc_heap *heap, const struct memory_block *in, struct memory_block *out, int prev) at libpmemobj/heap.c:582>:
                                                                            ZID_TO_ZONE()
                                                                            memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                                                                memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                                                                    heap_get_chunk_hdr()
                                                                                memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                                                                    heap_get_chunk_hdr()
                                                                                    FATAL()
                                                                        bucket_remove_block() <int bucket_remove_block (struct bucket *b, const struct memory_block *m) at libpmemobj/bucket.c:178>
                                                                        heap_coalesce() <struct memory_block heap_coalesce (struct palloc_heap *heap, const struct memory_block *blocks[], int n) at libpmemobj/heap.c:621>:
                                                                            ASSERTne()
                                                                            memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                                                                memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                                                                    heap_get_chunk_hdr()
                                                                                memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                                                                    heap_get_chunk_hdr()
                                                                                    FATAL()
                                                                    bucket_insert_block() <int bucket_insert_block (struct bucket *b, const struct memory_block *m) at libpmemobj/bucket.c:161>:
                                                                        VALGRIND_DO_MAKE_MEM_NOACCESS()
                                                                        VALGRIND_ANNOTATE_NEW_MEMORY()
                                                                util_mutex_unlock()
                                                            heap_free_chunk_reuse() <int heap_free_chunk_reuse (struct palloc_heap *heap, struct bucket *bucket, struct memory_block *m) at libpmemobj/heap.c:674>:
                                                                heap_coalesce_huge() <struct memory_block heap_coalesce_huge (struct palloc_heap *heap, struct bucket *b, const struct memory_block *m) at libpmemobj/heap.c:650>:
                                                                    heap_get_adjacent_free_block() <int heap_get_adjacent_free_block (struct palloc_heap *heap, const struct memory_block *in, struct memory_block *out, int prev) at libpmemobj/heap.c:582>:
                                                                        ZID_TO_ZONE()
                                                                        memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                                                            memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                                                                heap_get_chunk_hdr()
                                                                            memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                                                                heap_get_chunk_hdr()
                                                                                FATAL()
                                                                    bucket_remove_block() <int bucket_remove_block (struct bucket *b, const struct memory_block *m) at libpmemobj/bucket.c:178>
                                                                    heap_coalesce() <struct memory_block heap_coalesce (struct palloc_heap *heap, const struct memory_block *blocks[], int n) at libpmemobj/heap.c:621>:
                                                                        ASSERTne()
                                                                        memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                                                            memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                                                                heap_get_chunk_hdr()
                                                                            memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                                                                heap_get_chunk_hdr()
                                                                                FATAL()
                                                                bucket_insert_block() <int bucket_insert_block (struct bucket *b, const struct memory_block *m) at libpmemobj/bucket.c:161>:
                                                                    VALGRIND_DO_MAKE_MEM_NOACCESS()
                                                                    VALGRIND_ANNOTATE_NEW_MEMORY()
                                                    heap_bucket_release() <void heap_bucket_release (struct bucket *b) at libpmemobj/heap.c:498>:
                                                        bucket_release() <void bucket_release (struct bucket *b) at libpmemobj/bucket.c:127>:
                                                            util_mutex_unlock()
                                                    heap_get_bestfit_block() <int heap_get_bestfit_block (struct palloc_heap *heap, struct bucket *b, struct memory_block *m) at libpmemobj/heap.c:1210> (recursive: see 22717)
                                                    heap_run_create() <int heap_run_create (struct palloc_heap *heap, struct bucket *b, struct memory_block *m) at libpmemobj/heap.c:1065>:
                                                        bucket_alloc_class() <struct alloc_class *bucket_alloc_class (struct bucket *b) at libpmemobj/bucket.c:152>
                                                        memblock_run_init() <struct memory_block memblock_run_init (struct palloc_heap *heap, uint32_t chunk_id, uint32_t zone_id, struct run_descriptor *rdsc) at libpmemobj/memblock.c:1361>:
                                                            ASSERTne()
                                                            ZID_TO_ZONE()
                                                            heap_get_chunk_run()
                                                            SIZEOF_RUN()
                                                            VALGRIND_DO_MAKE_MEM_UNDEFINED()
                                                            VALGRIND_ADD_TO_TX()
                                                            memset()
                                                            VALGRIND_REMOVE_FROM_TX()
                                                            pmemops_flush()
                                                            VALGRIND_ANNOTATE_NEW_MEMORY()
                                                            pmemops_persist()
                                                            ASSERT()
                                                            chunk_get_chunk_hdr_value() <uint64_t chunk_get_chunk_hdr_value (uint16_t type, uint16_t flags, uint32_t size_idx) at libpmemobj/memblock.c:604>:
                                                                COMPILE_ERROR_ON()
                                                                memcpy()
                                                            util_atomic_store_explicit64()
                                                            memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                                                memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                                                    heap_get_chunk_hdr()
                                                                memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                                                    heap_get_chunk_hdr()
                                                                    FATAL()
                                                        bucket_attach_run() <int bucket_attach_run (struct bucket *b, const struct memory_block *m) at libpmemobj/bucket.c:206>:
                                                            util_mutex_lock()
                                                            bucket_memblock_insert_block() <int bucket_memblock_insert_block (const struct memory_block *m, void *b) at libpmemobj/bucket.c:197>:
                                                                bucket_insert_block() <int bucket_insert_block (struct bucket *b, const struct memory_block *m) at libpmemobj/bucket.c:161>:
                                                                    VALGRIND_DO_MAKE_MEM_NOACCESS()
                                                                    VALGRIND_ANNOTATE_NEW_MEMORY()
                                                            util_mutex_unlock()
                                                            util_fetch_and_add64()
                                                        STATS_INC()
                                                ASSERT()
                                                heap_split_block() <void heap_split_block (struct palloc_heap *heap, struct bucket *b, struct memory_block *m, uint32_t units) at libpmemobj/heap.c:1172>:
                                                    bucket_alloc_class() <struct alloc_class *bucket_alloc_class (struct bucket *b) at libpmemobj/bucket.c:152>
                                                    ASSERT()
                                                    memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                                        memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                                            heap_get_chunk_hdr()
                                                        memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                                            heap_get_chunk_hdr()
                                                            FATAL()
                                                    bucket_insert_block() <int bucket_insert_block (struct bucket *b, const struct memory_block *m) at libpmemobj/bucket.c:161>:
                                                        VALGRIND_DO_MAKE_MEM_NOACCESS()
                                                        VALGRIND_ANNOTATE_NEW_MEMORY()
                                                    LOG()
                                                    memblock_huge_init() <struct memory_block memblock_huge_init (struct palloc_heap *heap, uint32_t chunk_id, uint32_t zone_id, uint32_t size_idx) at libpmemobj/memblock.c:1329>:
                                                        heap_get_chunk_hdr()
                                                        VALGRIND_DO_MAKE_MEM_UNDEFINED()
                                                        VALGRIND_ANNOTATE_NEW_MEMORY()
                                                        chunk_get_chunk_hdr_value() <uint64_t chunk_get_chunk_hdr_value (uint16_t type, uint16_t flags, uint32_t size_idx) at libpmemobj/memblock.c:604>:
                                                            COMPILE_ERROR_ON()
                                                            memcpy()
                                                        util_atomic_store_explicit64()
                                                        pmemops_persist()
                                                        huge_write_footer() <void huge_write_footer (struct chunk_header *hdr, uint32_t size_idx) at libpmemobj/memblock.c:1166>:
                                                            VALGRIND_DO_MAKE_MEM_UNDEFINED()
                                                            VALGRIND_SET_CLEAN()
                                                        memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                                            memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                                                heap_get_chunk_hdr()
                                                            memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                                                heap_get_chunk_hdr()
                                                                FATAL()
                                            alloc_prep_block() <int alloc_prep_block (struct palloc_heap *heap, const struct memory_block *m, palloc_constr constructor, void *arg, uint64_t extra_field, uint16_t object_flags, struct pobj_action_internal *out) at libpmemobj/palloc.c:112>:
                                                VALGRIND_DO_MEMPOOL_ALLOC()
                                                VALGRIND_DO_MAKE_MEM_UNDEFINED()
                                                VALGRIND_ANNOTATE_NEW_MEMORY()
                                                unlikely()
                                                pmemops_memset()
                                                VALGRIND_DO_MEMPOOL_FREE()
                                                HEAP_PTR_TO_OFF()
                                            bucket_insert_block() <int bucket_insert_block (struct bucket *b, const struct memory_block *m) at libpmemobj/bucket.c:161>:
                                                VALGRIND_DO_MAKE_MEM_NOACCESS()
                                                VALGRIND_ANNOTATE_NEW_MEMORY()
                                            bucket_active_block() <struct memory_block_reserved *bucket_active_block (struct bucket *b) at libpmemobj/bucket.c:265>:
                                            util_fetch_and_add64()
                                            heap_bucket_release() <void heap_bucket_release (struct bucket *b) at libpmemobj/heap.c:498>:
                                                bucket_release() <void bucket_release (struct bucket *b) at libpmemobj/bucket.c:127>:
                                                    util_mutex_unlock()
                                        VALGRIND_ADD_TO_TX()
                                        HEAP_OFF_TO_PTR()
                                        pmemops_memcpy()
                                        VALGRIND_REMOVE_FROM_TX()
                                        operation_add_entry() <int operation_add_entry (struct operation_context *ctx, void *ptr, uint64_t value, ulog_operation_type type) at libpmemobj/memops.c:411>:
                                            OBJ_OFF_IS_VALID()
                                            operation_add_typed_entry() <int operation_add_typed_entry (struct operation_context *ctx, void *ptr, uint64_t value, ulog_operation_type type, enum operation_log_type log_type) at libpmemobj/memops.c:362>:
                                                Realloc()
                                                SIZEOF_ULOG()
                                                VECQ_CLEAR()
                                                operation_try_merge_entry() <int operation_try_merge_entry (struct operation_context *ctx, void *ptr, uint64_t value, ulog_operation_type type) at libpmemobj/memops.c:318>:
                                                    OBJ_PTR_TO_OFF()
                                                    VECQ_FOREACH_REVERSE()
                                                    ulog_entry_offset() <uint64_t ulog_entry_offset (const struct ulog_entry_base *entry) at libpmemobj/ulog.c:68>:
                                                    ulog_entry_type() <ulog_operation_type ulog_entry_type (const struct ulog_entry_base *entry) at libpmemobj/ulog.c:59>:
                                                        ULOG_OPERATION_FROM_OFFSET()
                                                    operation_merge() <inline void operation_merge (struct ulog_entry_base *entry, uint64_t value, ulog_operation_type type) at libpmemobj/memops.c:288>:
                                                        ASSERT()
                                                ulog_entry_val_create() <struct ulog_entry_val *ulog_entry_val_create (struct ulog *ulog, size_t offset, uint64_t *dest, uint64_t value, ulog_operation_type type, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:372>:
                                                    COMPILE_ERROR_ON()
                                                    ULOG_OPERATION()
                                                    pmemops_memcpy()
                                                operation_merge_entry_add() <void operation_merge_entry_add (struct operation_context *ctx, struct ulog_entry_val *entry) at libpmemobj/memops.c:344>:
                                                    VECQ_SIZE()
                                                    VECQ_DEQUEUE()
                                                    VECQ_ENQUEUE()
                                                    LOG()
                                                ulog_entry_size() <size_t ulog_entry_size (const struct ulog_entry_base *entry) at libpmemobj/ulog.c:77>:
                                                    ulog_entry_type() <ulog_operation_type ulog_entry_type (const struct ulog_entry_base *entry) at libpmemobj/ulog.c:59>:
                                                        ULOG_OPERATION_FROM_OFFSET()
                                                    CACHELINE_ALIGN()
                                                    ASSERT()
                                        palloc_exec_actions() <void palloc_exec_actions (struct palloc_heap *heap, struct operation_context *ctx, struct pobj_action_internal *actv, size_t actvcnt) at libpmemobj/palloc.c:526>:
                                            qsort()
                                            palloc_action_compare() <int palloc_action_compare (const void *lhs, const void *rhs) at libpmemobj/palloc.c:507>:
                                            ASSERTeq()
                                            util_mutex_lock()
                                            pmemops_drain()
                                            operation_process() <void operation_process (struct operation_context *ctx) at libpmemobj/memops.c:776>:
                                                ulog_entry_type() <ulog_operation_type ulog_entry_type (const struct ulog_entry_base *entry) at libpmemobj/ulog.c:59>:
                                                    ULOG_OPERATION_FROM_OFFSET()
                                                ulog_entry_apply() <void ulog_entry_apply (const struct ulog_entry_base *e, int persist, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:526>:
                                                    ulog_entry_type() <ulog_operation_type ulog_entry_type (const struct ulog_entry_base *entry) at libpmemobj/ulog.c:59>:
                                                        ULOG_OPERATION_FROM_OFFSET()
                                                    ulog_entry_offset() <uint64_t ulog_entry_offset (const struct ulog_entry_base *entry) at libpmemobj/ulog.c:68>:
                                                    f()
                                                    VALGRIND_ADD_TO_TX()
                                                    pmemops_memset()
                                                    pmemops_memcpy()
                                                    ASSERT()
                                                    VALGRIND_REMOVE_FROM_TX()
                                                operation_process_persistent_redo() <void operation_process_persistent_redo (struct operation_context *ctx) at libpmemobj/memops.c:654>:
                                                    ASSERTeq()
                                                    ulog_store() <void ulog_store (struct ulog *dest, struct ulog *src, size_t nbytes, size_t ulog_base_nbytes, size_t ulog_total_capacity, struct ulog_next *next, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:288>:
                                                        MIN()
                                                        CACHELINE_ALIGN()
                                                        ASSERT()
                                                        ulog_by_offset() <struct ulog *ulog_by_offset (size_t offset, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:36>:
                                                            CACHELINE_ALIGN()
                                                        VEC_ARR()
                                                        ASSERTne()
                                                        IS_CACHELINE_ALIGNED()
                                                        VALGRIND_ADD_TO_TX()
                                                        pmemops_memcpy()
                                                        VALGRIND_REMOVE_FROM_TX()
                                                        pmemops_drain()
                                                        VEC_SIZE()
                                                        VEC_FRONT()
                                                        ulog_checksum() <int ulog_checksum (struct ulog *ulog, size_t ulog_base_bytes, int insert) at libpmemobj/ulog.c:275>:
                                                            util_checksum() <int util_checksum (void *addr, size_t len, uint64_t *csump, int insert, size_t skip_off) at core/util.c:178>:
                                                                util_checksum_compute() <uint64_t util_checksum_compute (void *addr, size_t len, uint64_t *csump, size_t skip_off) at core/util.c:134>:
                                                                    abort()
                                                                    le32toh()
                                                                htole64()
                                                            SIZEOF_ULOG()
                                                        SIZEOF_ULOG()
                                                    ulog_process() <void ulog_process (struct ulog *ulog, ulog_check_offset_fn check, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:786>:
                                                        SUPPRESS_UNUSED()
                                                        LOG()
                                                        ulog_check() <int ulog_check (struct ulog *ulog, ulog_check_offset_fn check, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:881>:
                                                            LOG()
                                                            ulog_foreach_entry() <int ulog_foreach_entry (struct ulog *ulog, ulog_entry_cb cb, void *arg, const struct pmem_ops *ops) at libpmemobj/ulog.c:180>
                                                            ulog_check_entry() <int ulog_check_entry (struct ulog_entry_base *e, void *arg, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:862>:
                                                                ulog_entry_offset() <uint64_t ulog_entry_offset (const struct ulog_entry_base *entry) at libpmemobj/ulog.c:68>:
                                                                check()
                                                                LOG()
                                                        ulog_foreach_entry() <int ulog_foreach_entry (struct ulog *ulog, ulog_entry_cb cb, void *arg, const struct pmem_ops *ops) at libpmemobj/ulog.c:180>
                                                        ulog_process_entry() <int ulog_process_entry (struct ulog_entry_base *e, void *arg, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:591>:
                                                            SUPPRESS_UNUSED()
                                                            ulog_entry_apply() <void ulog_entry_apply (const struct ulog_entry_base *e, int persist, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:526>:
                                                                ulog_entry_type() <ulog_operation_type ulog_entry_type (const struct ulog_entry_base *entry) at libpmemobj/ulog.c:59>:
                                                                    ULOG_OPERATION_FROM_OFFSET()
                                                                ulog_entry_offset() <uint64_t ulog_entry_offset (const struct ulog_entry_base *entry) at libpmemobj/ulog.c:68>:
                                                                f()
                                                                VALGRIND_ADD_TO_TX()
                                                                pmemops_memset()
                                                                pmemops_memcpy()
                                                                ASSERT()
                                                                VALGRIND_REMOVE_FROM_TX()
                                                        pmemops_drain()
                                                    ulog_clobber() <void ulog_clobber (struct ulog *dest, struct ulog_next *next, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:694>:
                                                        memset()
                                                        VEC_SIZE()
                                                        VEC_FRONT()
                                                        pmemops_memcpy()
                                                operation_process_persistent_undo() <void operation_process_persistent_undo (struct operation_context *ctx) at libpmemobj/memops.c:673>:
                                                    ASSERTeq()
                                                    ulog_process() <void ulog_process (struct ulog *ulog, ulog_check_offset_fn check, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:786>:
                                                        SUPPRESS_UNUSED()
                                                        LOG()
                                                        ulog_check() <int ulog_check (struct ulog *ulog, ulog_check_offset_fn check, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:881>:
                                                            LOG()
                                                            ulog_foreach_entry() <int ulog_foreach_entry (struct ulog *ulog, ulog_entry_cb cb, void *arg, const struct pmem_ops *ops) at libpmemobj/ulog.c:180>
                                                            ulog_check_entry() <int ulog_check_entry (struct ulog_entry_base *e, void *arg, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:862>:
                                                                ulog_entry_offset() <uint64_t ulog_entry_offset (const struct ulog_entry_base *entry) at libpmemobj/ulog.c:68>:
                                                                check()
                                                                LOG()
                                                        ulog_foreach_entry() <int ulog_foreach_entry (struct ulog *ulog, ulog_entry_cb cb, void *arg, const struct pmem_ops *ops) at libpmemobj/ulog.c:180>
                                                        ulog_process_entry() <int ulog_process_entry (struct ulog_entry_base *e, void *arg, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:591>:
                                                            SUPPRESS_UNUSED()
                                                            ulog_entry_apply() <void ulog_entry_apply (const struct ulog_entry_base *e, int persist, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:526>:
                                                                ulog_entry_type() <ulog_operation_type ulog_entry_type (const struct ulog_entry_base *entry) at libpmemobj/ulog.c:59>:
                                                                    ULOG_OPERATION_FROM_OFFSET()
                                                                ulog_entry_offset() <uint64_t ulog_entry_offset (const struct ulog_entry_base *entry) at libpmemobj/ulog.c:68>:
                                                                f()
                                                                VALGRIND_ADD_TO_TX()
                                                                pmemops_memset()
                                                                pmemops_memcpy()
                                                                ASSERT()
                                                                VALGRIND_REMOVE_FROM_TX()
                                                        pmemops_drain()
                                                ulog_process() <void ulog_process (struct ulog *ulog, ulog_check_offset_fn check, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:786>:
                                                    SUPPRESS_UNUSED()
                                                    LOG()
                                                    ulog_check() <int ulog_check (struct ulog *ulog, ulog_check_offset_fn check, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:881>:
                                                        LOG()
                                                        ulog_foreach_entry() <int ulog_foreach_entry (struct ulog *ulog, ulog_entry_cb cb, void *arg, const struct pmem_ops *ops) at libpmemobj/ulog.c:180>
                                                        ulog_check_entry() <int ulog_check_entry (struct ulog_entry_base *e, void *arg, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:862>:
                                                            ulog_entry_offset() <uint64_t ulog_entry_offset (const struct ulog_entry_base *entry) at libpmemobj/ulog.c:68>:
                                                            check()
                                                            LOG()
                                                    ulog_foreach_entry() <int ulog_foreach_entry (struct ulog *ulog, ulog_entry_cb cb, void *arg, const struct pmem_ops *ops) at libpmemobj/ulog.c:180>
                                                    ulog_process_entry() <int ulog_process_entry (struct ulog_entry_base *e, void *arg, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:591>:
                                                        SUPPRESS_UNUSED()
                                                        ulog_entry_apply() <void ulog_entry_apply (const struct ulog_entry_base *e, int persist, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:526>:
                                                            ulog_entry_type() <ulog_operation_type ulog_entry_type (const struct ulog_entry_base *entry) at libpmemobj/ulog.c:59>:
                                                                ULOG_OPERATION_FROM_OFFSET()
                                                            ulog_entry_offset() <uint64_t ulog_entry_offset (const struct ulog_entry_base *entry) at libpmemobj/ulog.c:68>:
                                                            f()
                                                            VALGRIND_ADD_TO_TX()
                                                            pmemops_memset()
                                                            pmemops_memcpy()
                                                            ASSERT()
                                                            VALGRIND_REMOVE_FROM_TX()
                                                    pmemops_drain()
                                            util_mutex_unlock()
                                            operation_finish() <void operation_finish (struct operation_context *ctx, unsigned flags) at libpmemobj/memops.c:814>:
                                                ASSERTne()
                                                out() <void out (const char *fmt, ...) at core/out.c:480>:
                                                    va_start()
                                                    out_common() <} void out_common (const char *file, int line, const char *func, int level, const char *suffix, const char *fmt, va_list ap) at core/out.c:334>
                                                    va_end()
                                                ulog_clobber_data() <int ulog_clobber_data (struct ulog *ulog_first, struct ulog_next *next, ulog_free_fn ulog_free, ulog_rm_user_buffer_fn user_buff_remove, const struct pmem_ops *p_ops, unsigned flags) at libpmemobj/ulog.c:713>:
                                                    ASSERTne()
                                                    ulog_inc_gen_num() <void ulog_inc_gen_num (struct ulog *ulog, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:605>:
                                                        VALGRIND_ADD_TO_TX()
                                                        pmemops_persist()
                                                        VALGRIND_SET_CLEAN()
                                                        VALGRIND_REMOVE_FROM_TX()
                                                    VEC_SIZE()
                                                    VEC_GET()
                                                    ulog_by_offset() <struct ulog *ulog_by_offset (size_t offset, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:36>:
                                                        CACHELINE_ALIGN()
                                                    ulog_free_next() <int ulog_free_next (struct ulog *u, const struct pmem_ops *p_ops, ulog_free_fn ulog_free, ulog_rm_user_buffer_fn user_buff_remove, uint64_t flags) at libpmemobj/ulog.c:625>:
                                                        VEC()
                                                        VEC_INIT()
                                                        ulog_by_offset() <struct ulog *ulog_by_offset (size_t offset, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:36>:
                                                            CACHELINE_ALIGN()
                                                        pmemops_persist()
                                                        VEC_PUSH_BACK()
                                                        LOG()
                                                        out() <void out (const char *fmt, ...) at core/out.c:480>:
                                                            va_start()
                                                            out_common() <} void out_common (const char *file, int line, const char *func, int level, const char *suffix, const char *fmt, va_list ap) at core/out.c:334>
                                                            va_end()
                                                        VEC_FOREACH_REVERSE()
                                                        VEC_DELETE()
                                                operation_user_buffer_remove() <int operation_user_buffer_remove (void *base, void *addr) at libpmemobj/memops.c:242>:
                                                    util_mutex_lock()
                                                    ravl_find() <struct ravl_node *ravl_find (struct ravl *ravl, const void *data, enum ravl_predicate flags) at core/ravl.c:524>:
                                                        LOG()
                                                        ravl_data() <void *ravl_data (struct ravl_node *node) at core/ravl.c:571>:
                                                            memcpy()
                                                        ravl_predicate_holds() <int ravl_predicate_holds (int result, struct ravl_node **ret, struct ravl_node *n, enum ravl_predicate flags) at core/ravl.c:489>:
                                                            ravl_node_successor() <struct ravl_node *ravl_node_successor (struct ravl_node *n) at core/ravl.c:465>:
                                                                ravl_node_cessor() <struct ravl_node *ravl_node_cessor (struct ravl_node *n, enum ravl_slot_type t) at core/ravl.c:443>:
                                                                    ravl_node_type_most() <struct ravl_node *ravl_node_type_most (struct ravl_node *n, enum ravl_slot_type t) at core/ravl.c:430>:
                                                                    ravl_slot_opposite() <enum ravl_slot_type ravl_slot_opposite (enum ravl_slot_type t) at core/ravl.c:184>:
                                                                        ASSERTne()
                                                            ravl_node_predecessor() <struct ravl_node *ravl_node_predecessor (struct ravl_node *n) at core/ravl.c:476>:
                                                                ravl_node_cessor() <struct ravl_node *ravl_node_cessor (struct ravl_node *n, enum ravl_slot_type t) at core/ravl.c:443>:
                                                                    ravl_node_type_most() <struct ravl_node *ravl_node_type_most (struct ravl_node *n, enum ravl_slot_type t) at core/ravl.c:430>:
                                                                    ravl_slot_opposite() <enum ravl_slot_type ravl_slot_opposite (enum ravl_slot_type t) at core/ravl.c:184>:
                                                                        ASSERTne()
                                                    ASSERTne()
                                                    ravl_remove() <void ravl_remove (struct ravl *ravl, struct ravl_node *n) at core/ravl.c:545> (R):
                                                        LOG()
                                                        ravl_node_successor() <struct ravl_node *ravl_node_successor (struct ravl_node *n) at core/ravl.c:465>:
                                                            ravl_node_cessor() <struct ravl_node *ravl_node_cessor (struct ravl_node *n, enum ravl_slot_type t) at core/ravl.c:443>:
                                                                ravl_node_type_most() <struct ravl_node *ravl_node_type_most (struct ravl_node *n, enum ravl_slot_type t) at core/ravl.c:430>:
                                                                ravl_slot_opposite() <enum ravl_slot_type ravl_slot_opposite (enum ravl_slot_type t) at core/ravl.c:184>:
                                                                    ASSERTne()
                                                        memcpy()
                                                        ravl_remove() <void ravl_remove (struct ravl *ravl, struct ravl_node *n) at core/ravl.c:545> (recursive: see 24409)
                                                        ravl_node_ref() <struct ravl_node **ravl_node_ref (struct ravl *ravl, struct ravl_node *n) at core/ravl.c:223>:
                                                            ravl_node_slot_type() <enum ravl_slot_type ravl_node_slot_type (struct ravl_node *n) at core/ravl.c:196>:
                                                        Free() <Free_func Free at core/alloc.c:91>
                                                    util_mutex_unlock()
                                                ulog_free_next() <int ulog_free_next (struct ulog *u, const struct pmem_ops *p_ops, ulog_free_fn ulog_free, ulog_rm_user_buffer_fn user_buff_remove, uint64_t flags) at libpmemobj/ulog.c:625>:
                                                    VEC()
                                                    VEC_INIT()
                                                    ulog_by_offset() <struct ulog *ulog_by_offset (size_t offset, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:36>:
                                                        CACHELINE_ALIGN()
                                                    pmemops_persist()
                                                    VEC_PUSH_BACK()
                                                    LOG()
                                                    out() <void out (const char *fmt, ...) at core/out.c:480>:
                                                        va_start()
                                                        out_common() <} void out_common (const char *file, int line, const char *func, int level, const char *suffix, const char *fmt, va_list ap) at core/out.c:334>
                                                        va_end()
                                                    VEC_FOREACH_REVERSE()
                                                    VEC_DELETE()
                                                ulog_capacity() <size_t ulog_capacity (struct ulog *ulog, size_t ulog_base_bytes, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:206>:
                                                    ulog_next() <struct ulog *ulog_next (struct ulog *ulog, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:50>:
                                                        ulog_by_offset() <struct ulog *ulog_by_offset (size_t offset, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:36>:
                                                            CACHELINE_ALIGN()
                                                VEC_CLEAR()
                                                ulog_rebuild_next_vec() <void ulog_rebuild_next_vec (struct ulog *ulog, struct ulog_next *next, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:223>:
                                                    VEC_PUSH_BACK()
                                                    ulog_next() <struct ulog *ulog_next (struct ulog *ulog, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:50>:
                                                        ulog_by_offset() <struct ulog *ulog_by_offset (size_t offset, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:36>:
                                                            CACHELINE_ALIGN()
                                    pmalloc_operation_release() <void pmalloc_operation_release (PMEMobjpool *pop) at libpmemobj/pmalloc.c:83>:
                                        lane_release() <void lane_release (PMEMobjpool *pop) at libpmemobj/lane.c:546>:
                                            get_lane_info_record() <inline struct lane_info *get_lane_info_record (PMEMobjpool *pop) at libpmemobj/lane.c:466>:
                                                likely()
                                                unlikely()
                                                lane_info_ht_boot() <inline void lane_info_ht_boot (void) at libpmemobj/lane.c:74>:
                                                    lane_info_create() <inline void lane_info_create (void) at libpmemobj/lane.c:39>:
                                                        critnib_new() <struct critnib *critnib_new (void) at libpmemobj/critnib.c:187>:
                                                            Zalloc() <void *Zalloc (size_t sz) at core/alloc.c:98>:
                                                                Malloc()
                                                                memset()
                                                            util_mutex_init()
                                                            VALGRIND_HG_DRD_DISABLE_CHECKING()
                                                        FATAL()
                                                    os_tls_set() <int os_tls_set (os_tls_key_t key, const void *value) at core/os_thread_posix.c:53>:
                                                        pthread_setspecific()
                                                    FATAL()
                                                critnib_get() <void *critnib_get (struct critnib *c, uint64_t key) at libpmemobj/critnib.c:515>:
                                                    load() <void load (void *src, void *dst) at libpmemobj/critnib.c:130>:
                                                        util_atomic_load_explicit64()
                                                    is_leaf() <inline bool is_leaf (struct critnib_node *n) at libpmemobj/critnib.c:150>:
                                                    slice_index() <inline unsigned slice_index (uint64_t key, sh_t shift) at libpmemobj/critnib.c:178>:
                                                    to_leaf() <inline struct critnib_leaf *to_leaf (struct critnib_node *n) at libpmemobj/critnib.c:159>:
                                                Malloc()
                                                FATAL()
                                                critnib_insert() <int critnib_insert (struct critnib *c, uint64_t key, void *value) at libpmemobj/critnib.c:340>:
                                                    util_mutex_lock()
                                                    alloc_leaf() <struct critnib_leaf *alloc_leaf (struct critnib *__restrict c) at libpmemobj/critnib.c:311>:
                                                        Malloc()
                                                        ERR()
                                                        VALGRIND_ANNOTATE_NEW_MEMORY()
                                                    util_mutex_unlock()
                                                    VALGRIND_HG_DRD_DISABLE_CHECKING()
                                                    is_leaf() <inline bool is_leaf (struct critnib_node *n) at libpmemobj/critnib.c:150>:
                                                    path_mask() <inline uint64_t path_mask (sh_t shift) at libpmemobj/critnib.c:169>:
                                                    slice_index() <inline unsigned slice_index (uint64_t key, sh_t shift) at libpmemobj/critnib.c:178>:
                                                    store() <void store (void *dst, void *src) at libpmemobj/critnib.c:140>:
                                                        util_atomic_store_explicit64()
                                                    to_leaf() <inline struct critnib_leaf *to_leaf (struct critnib_node *n) at libpmemobj/critnib.c:159>:
                                                    ASSERT()
                                                    free_leaf() <void free_leaf (struct critnib *__restrict c, struct critnib_leaf *__restrict k) at libpmemobj/critnib.c:298>
                                                    util_mssb_index64()
                                                    alloc_node() <struct critnib_node *alloc_node (struct critnib *__restrict c) at libpmemobj/critnib.c:274>:
                                                        Malloc()
                                                        ERR()
                                                        VALGRIND_ANNOTATE_NEW_MEMORY()
                                            ASSERTne()
                                            unlikely()
                                            FATAL()
                                            util_bool_compare_and_swap64()
                                lane_ulog_constructor() <int lane_ulog_constructor (void *base, void *ptr, size_t usable_size, void *arg) at libpmemobj/lane.c:160>:
                                    ALIGN_DOWN()
                                    ulog_construct() <void ulog_construct (uint64_t offset, size_t capacity, uint64_t gen_num, int flush, uint64_t flags, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:136>:
                                        ulog_by_offset() <struct ulog *ulog_by_offset (size_t offset, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:36>:
                                            CACHELINE_ALIGN()
                                        ASSERTne()
                                        OBJ_PTR_TO_OFF()
                                        ALIGN_DOWN()
                                        VALGRIND_ADD_TO_TX()
                                        SIZEOF_ULOG()
                                        memset()
                                        CACHELINE_ALIGN()
                                        pmemops_xflush()
                                        pmemops_memset()
                                        VALGRIND_REMOVE_FROM_TX()
                                    OBJ_PTR_TO_OFF()
                            operation_delete() <void operation_delete (struct operation_context *ctx) at libpmemobj/memops.c:229>:
                                VECQ_DELETE()
                                VEC_DELETE()
                                Free() <Free_func Free at core/alloc.c:91>
                        lane_destroy() <void lane_destroy (PMEMobjpool *pop, struct lane *lane) at libpmemobj/lane.c:246>:
                            SUPPRESS_UNUSED()
                            operation_delete() <void operation_delete (struct operation_context *ctx) at libpmemobj/memops.c:229>:
                                VECQ_DELETE()
                                VEC_DELETE()
                                Free() <Free_func Free at core/alloc.c:91>
                        Free() <Free_func Free at core/alloc.c:91>
                    ERR()
                    lane_recover_and_section_boot() <int lane_recover_and_section_boot (PMEMobjpool *pop) at libpmemobj/lane.c:353>:
                        COMPILE_ERROR_ON()
                        SIZEOF_ULOG()
                        lane_get_layout() <struct lane_layout *lane_get_layout (PMEMobjpool *pop, uint64_t lane_idx) at libpmemobj/lane.c:150>
                        ulog_recover() <void ulog_recover (struct ulog *ulog, ulog_check_offset_fn check, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:846>:
                            LOG()
                            ulog_recovery_needed() <int ulog_recovery_needed (struct ulog *ulog, int verify_checksum) at libpmemobj/ulog.c:828>:
                                MIN()
                                ulog_base_nbytes() <size_t ulog_base_nbytes (struct ulog *ulog) at libpmemobj/ulog.c:808>:
                                    ulog_entry_valid() <int ulog_entry_valid (struct ulog *ulog, const struct ulog_entry_base *entry) at libpmemobj/ulog.c:103>:
                                        ulog_entry_type() <ulog_operation_type ulog_entry_type (const struct ulog_entry_base *entry) at libpmemobj/ulog.c:59>:
                                            ULOG_OPERATION_FROM_OFFSET()
                                        ulog_entry_size() <size_t ulog_entry_size (const struct ulog_entry_base *entry) at libpmemobj/ulog.c:77>:
                                            ulog_entry_type() <ulog_operation_type ulog_entry_type (const struct ulog_entry_base *entry) at libpmemobj/ulog.c:59>:
                                                ULOG_OPERATION_FROM_OFFSET()
                                            CACHELINE_ALIGN()
                                            ASSERT()
                                        util_checksum_compute() <uint64_t util_checksum_compute (void *addr, size_t len, uint64_t *csump, size_t skip_off) at core/util.c:134>:
                                            abort()
                                            le32toh()
                                        util_checksum_seq() <uint64_t util_checksum_seq (const void *addr, size_t len, uint64_t csum) at core/util.c:197>:
                                            abort()
                                            le32toh()
                                    ulog_entry_size() <size_t ulog_entry_size (const struct ulog_entry_base *entry) at libpmemobj/ulog.c:77>:
                                        ulog_entry_type() <ulog_operation_type ulog_entry_type (const struct ulog_entry_base *entry) at libpmemobj/ulog.c:59>:
                                            ULOG_OPERATION_FROM_OFFSET()
                                        CACHELINE_ALIGN()
                                        ASSERT()
                                ulog_checksum() <int ulog_checksum (struct ulog *ulog, size_t ulog_base_bytes, int insert) at libpmemobj/ulog.c:275>:
                                    util_checksum() <int util_checksum (void *addr, size_t len, uint64_t *csump, int insert, size_t skip_off) at core/util.c:178>:
                                        util_checksum_compute() <uint64_t util_checksum_compute (void *addr, size_t len, uint64_t *csump, size_t skip_off) at core/util.c:134>:
                                            abort()
                                            le32toh()
                                        htole64()
                                    SIZEOF_ULOG()
                            ulog_process() <void ulog_process (struct ulog *ulog, ulog_check_offset_fn check, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:786>:
                                SUPPRESS_UNUSED()
                                LOG()
                                ulog_check() <int ulog_check (struct ulog *ulog, ulog_check_offset_fn check, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:881>:
                                    LOG()
                                    ulog_foreach_entry() <int ulog_foreach_entry (struct ulog *ulog, ulog_entry_cb cb, void *arg, const struct pmem_ops *ops) at libpmemobj/ulog.c:180>
                                    ulog_check_entry() <int ulog_check_entry (struct ulog_entry_base *e, void *arg, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:862>:
                                        ulog_entry_offset() <uint64_t ulog_entry_offset (const struct ulog_entry_base *entry) at libpmemobj/ulog.c:68>:
                                        check()
                                        LOG()
                                ulog_foreach_entry() <int ulog_foreach_entry (struct ulog *ulog, ulog_entry_cb cb, void *arg, const struct pmem_ops *ops) at libpmemobj/ulog.c:180>
                                ulog_process_entry() <int ulog_process_entry (struct ulog_entry_base *e, void *arg, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:591>:
                                    SUPPRESS_UNUSED()
                                    ulog_entry_apply() <void ulog_entry_apply (const struct ulog_entry_base *e, int persist, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:526>:
                                        ulog_entry_type() <ulog_operation_type ulog_entry_type (const struct ulog_entry_base *entry) at libpmemobj/ulog.c:59>:
                                            ULOG_OPERATION_FROM_OFFSET()
                                        ulog_entry_offset() <uint64_t ulog_entry_offset (const struct ulog_entry_base *entry) at libpmemobj/ulog.c:68>:
                                        f()
                                        VALGRIND_ADD_TO_TX()
                                        pmemops_memset()
                                        pmemops_memcpy()
                                        ASSERT()
                                        VALGRIND_REMOVE_FROM_TX()
                                pmemops_drain()
                            ulog_clobber() <void ulog_clobber (struct ulog *dest, struct ulog_next *next, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:694>:
                                memset()
                                VEC_SIZE()
                                VEC_FRONT()
                                pmemops_memcpy()
                        pmalloc_boot() <int pmalloc_boot (PMEMobjpool *pop) at libpmemobj/pmalloc.c:180>:
                            palloc_boot() <int palloc_boot (struct palloc_heap *heap, void *heap_start, uint64_t heap_size, uint64_t *sizep, void *base, struct pmem_ops *p_ops, struct stats *stats, struct pool_set *set) at libpmemobj/palloc.c:1249>:
                                heap_boot() <int heap_boot (struct palloc_heap *heap, void *heap_start, uint64_t heap_size, uint64_t *sizep, void *base, struct pmem_ops *p_ops, struct stats *stats, struct pool_set *set) at libpmemobj/heap.c:1584>:
                                    pmemops_persist()
                                    ERR()
                                    Malloc()
                                    heap_max_zone() <unsigned heap_max_zone (size_t size) at libpmemobj/heap.c:516>:
                                    Zalloc() <void *Zalloc (size_t sz) at core/alloc.c:98>:
                                        Malloc()
                                        memset()
                                    arena_thread_assignment_init() <int arena_thread_assignment_init (struct arenas_thread_assignment *assignment, enum pobj_arenas_assignment_type type) at libpmemobj/heap.c:290>:
                                        os_tls_key_create() <int os_tls_key_create (os_tls_key_t *key, void (*destructor) (void *)) at core/os_thread_posix.c:34>:
                                            COMPILE_ERROR_ON()
                                            pthread_key_create()
                                        heap_thread_arena_destructor() <void heap_thread_arena_destructor (void *arg) at libpmemobj/heap.c:277>:
                                            os_mutex_lock() <int os_mutex_lock (os_mutex_t *__restrict mutex) at core/os_thread_posix.c:90>:
                                                pthread_mutex_lock()
                                            heap_arena_thread_detach() <void heap_arena_thread_detach (struct arena *a) at libpmemobj/heap.c:232>:
                                                util_fetch_and_sub64()
                                            os_mutex_unlock() <int os_mutex_unlock (os_mutex_t *__restrict mutex) at core/os_thread_posix.c:108>:
                                                pthread_mutex_unlock()
                                        ASSERT()
                                    alloc_class_collection_new() <struct alloc_class_collection *alloc_class_collection_new () at libpmemobj/alloc_class.c:402>:
                                        LOG()
                                        Zalloc() <void *Zalloc (size_t sz) at core/alloc.c:98>:
                                            Malloc()
                                            memset()
                                        Malloc()
                                        critnib_new() <struct critnib *critnib_new (void) at libpmemobj/critnib.c:187>:
                                            Zalloc() <void *Zalloc (size_t sz) at core/alloc.c:98>:
                                                Malloc()
                                                memset()
                                            util_mutex_init()
                                            VALGRIND_HG_DRD_DISABLE_CHECKING()
                                        memset()
                                        alloc_class_new() <struct alloc_class *alloc_class_new (int id, struct alloc_class_collection *ac, enum alloc_class_type type, enum header_type htype, size_t unit_size, size_t alignment, uint32_t size_idx) at libpmemobj/alloc_class.c:179>:
                                            LOG()
                                            Malloc()
                                            memblock_run_bitmap() <void memblock_run_bitmap (uint32_t *size_idx, uint16_t flags, uint64_t unit_size, uint64_t alignment, void *content, struct run_bitmap *b) at libpmemobj/memblock.c:410>:
                                                ASSERTne()
                                                RUN_CONTENT_SIZE_BYTES()
                                                util_div_ceil()
                                                ALIGN_UP()
                                                memblock_run_default_nallocs() <unsigned memblock_run_default_nallocs (uint32_t *size_idx, uint16_t flags, uint64_t unit_size, uint64_t alignment) at libpmemobj/memblock.c:370>:
                                                    SUPPRESS_UNUSED()
                                                    RUN_DEFAULT_SIZE_BYTES()
                                                    LOG()
                                            alloc_class_find_first_free_slot() <int alloc_class_find_first_free_slot (struct alloc_class_collection *ac, uint8_t *slot) at libpmemobj/alloc_class.c:134>:
                                                LOG()
                                            SIZE_TO_CLASS_MAP_INDEX()
                                            ASSERT()
                                            RUN_CLASS_KEY_PACK()
                                            critnib_insert() <int critnib_insert (struct critnib *c, uint64_t key, void *value) at libpmemobj/critnib.c:340>:
                                                util_mutex_lock()
                                                alloc_leaf() <struct critnib_leaf *alloc_leaf (struct critnib *__restrict c) at libpmemobj/critnib.c:311>:
                                                    Malloc()
                                                    ERR()
                                                    VALGRIND_ANNOTATE_NEW_MEMORY()
                                                util_mutex_unlock()
                                                VALGRIND_HG_DRD_DISABLE_CHECKING()
                                                is_leaf() <inline bool is_leaf (struct critnib_node *n) at libpmemobj/critnib.c:150>:
                                                path_mask() <inline uint64_t path_mask (sh_t shift) at libpmemobj/critnib.c:169>:
                                                slice_index() <inline unsigned slice_index (uint64_t key, sh_t shift) at libpmemobj/critnib.c:178>:
                                                store() <void store (void *dst, void *src) at libpmemobj/critnib.c:140>:
                                                    util_atomic_store_explicit64()
                                                to_leaf() <inline struct critnib_leaf *to_leaf (struct critnib_node *n) at libpmemobj/critnib.c:159>:
                                                ASSERT()
                                                free_leaf() <void free_leaf (struct critnib *__restrict c, struct critnib_leaf *__restrict k) at libpmemobj/critnib.c:298>
                                                util_mssb_index64()
                                                alloc_node() <struct critnib_node *alloc_node (struct critnib *__restrict c) at libpmemobj/critnib.c:274>:
                                                    Malloc()
                                                    ERR()
                                                    VALGRIND_ANNOTATE_NEW_MEMORY()
                                            ERR()
                                            Free() <Free_func Free at core/alloc.c:91>
                                            alloc_class_reservation_clear() <void alloc_class_reservation_clear (struct alloc_class_collection *ac, int id) at libpmemobj/alloc_class.c:166>:
                                                LOG()
                                                util_bool_compare_and_swap64()
                                                ASSERT()
                                        ASSERTeq()
                                        alloc_class_by_run() <struct alloc_class *alloc_class_by_run (struct alloc_class_collection *ac, size_t unit_size, uint16_t flags, uint32_t size_idx) at libpmemobj/alloc_class.c:594>:
                                            SIZE_TO_CLASS_MAP_INDEX()
                                            ASSERT()
                                            critnib_get() <void *critnib_get (struct critnib *c, uint64_t key) at libpmemobj/critnib.c:515>:
                                                load() <void load (void *src, void *dst) at libpmemobj/critnib.c:130>:
                                                    util_atomic_load_explicit64()
                                                is_leaf() <inline bool is_leaf (struct critnib_node *n) at libpmemobj/critnib.c:150>:
                                                slice_index() <inline unsigned slice_index (uint64_t key, sh_t shift) at libpmemobj/critnib.c:178>:
                                                to_leaf() <inline struct critnib_leaf *to_leaf (struct critnib_node *n) at libpmemobj/critnib.c:159>:
                                            RUN_CLASS_KEY_PACK()
                                        alloc_class_collection_delete() <void alloc_class_collection_delete (struct alloc_class_collection *ac) at libpmemobj/alloc_class.c:516>:
                                            LOG()
                                            alloc_class_delete() <void alloc_class_delete (struct alloc_class_collection *ac, struct alloc_class *c) at libpmemobj/alloc_class.c:254>:
                                                LOG()
                                                Free() <Free_func Free at core/alloc.c:91>
                                            critnib_delete() <void critnib_delete (struct critnib *c) at libpmemobj/critnib.c:224>:
                                                delete_node() <void delete_node (struct critnib_node *__restrict n) at libpmemobj/critnib.c:206>:
                                                    is_leaf() <inline bool is_leaf (struct critnib_node *n) at libpmemobj/critnib.c:150>:
                                                    Free() <Free_func Free at core/alloc.c:91>
                                                    to_leaf() <inline struct critnib_leaf *to_leaf (struct critnib_node *n) at libpmemobj/critnib.c:159>:
                                                util_mutex_destroy()
                                                Free() <Free_func Free at core/alloc.c:91>
                                            Free() <Free_func Free at core/alloc.c:91>
                                    heap_get_procs() <unsigned heap_get_procs (void) at libpmemobj/heap.c:1430>:
                                        sysconf()
                                        LOG()
                                    heap_arenas_init() <int heap_arenas_init (struct arenas *arenas) at libpmemobj/heap.c:135>:
                                        util_mutex_init()
                                        VEC_INIT()
                                        VEC_RESERVE()
                                    util_mutex_init()
                                    VALGRIND_DO_CREATE_MEMPOOL()
                                    VEC_PUSH_BACK()
                                    heap_arena_new() <struct arena *heap_arena_new (struct palloc_heap *heap, int automatic) at libpmemobj/heap.c:181>:
                                        Zalloc() <void *Zalloc (size_t sz) at core/alloc.c:98>:
                                            Malloc()
                                            memset()
                                        ERR()
                                        COMPILE_ERROR_ON()
                                        alloc_class_by_id() <struct alloc_class *alloc_class_by_id (struct alloc_class_collection *ac, uint8_t id) at libpmemobj/alloc_class.c:612>
                                        bucket_locked_new() <struct bucket_locked *bucket_locked_new (struct block_container *c, struct alloc_class *aclass) at libpmemobj/bucket.c:81>:
                                            ASSERTne()
                                            Malloc()
                                            bucket_init() <int bucket_init (struct bucket *b, struct block_container *c, struct alloc_class *aclass) at libpmemobj/bucket.c:46>:
                                                Zalloc() <void *Zalloc (size_t sz) at core/alloc.c:98>:
                                                    Malloc()
                                                    memset()
                                            util_mutex_init()
                                            Free() <Free_func Free at core/alloc.c:91>
                                        container_new_seglists() <struct block_container *container_new_seglists (struct palloc_heap *heap) at libpmemobj/container_seglists.c:154>:
                                            Malloc()
                                            VECQ_INIT()
                                        heap_arena_delete() <void heap_arena_delete (struct arena *arena) at libpmemobj/heap.c:169>:
                                            bucket_locked_delete() <void bucket_locked_delete (struct bucket_locked *b) at libpmemobj/bucket.c:106>:
                                                bucket_fini() <void bucket_fini (struct bucket *b) at libpmemobj/bucket.c:70>:
                                                    Free() <Free_func Free at core/alloc.c:91>
                                                util_mutex_destroy()
                                                Free() <Free_func Free at core/alloc.c:91>
                                            Free() <Free_func Free at core/alloc.c:91>
                                    heap_zone_update_if_needed() <void heap_zone_update_if_needed (struct palloc_heap *heap) at libpmemobj/heap.c:1559>:
                                        ZID_TO_ZONE()
                                        zone_calc_size_idx() <uint32_t zone_calc_size_idx (uint32_t zone_id, unsigned max_zone, size_t heap_size) at libpmemobj/heap.c:533>:
                                            ASSERT()
                                        heap_zone_init() <void heap_zone_init (struct palloc_heap *heap, uint32_t zone_id, uint32_t first_chunk_id) at libpmemobj/heap.c:559>:
                                            ZID_TO_ZONE()
                                            zone_calc_size_idx() <uint32_t zone_calc_size_idx (uint32_t zone_id, unsigned max_zone, size_t heap_size) at libpmemobj/heap.c:533>:
                                                ASSERT()
                                            ASSERT()
                                            memblock_huge_init() <struct memory_block memblock_huge_init (struct palloc_heap *heap, uint32_t chunk_id, uint32_t zone_id, uint32_t size_idx) at libpmemobj/memblock.c:1329>:
                                                heap_get_chunk_hdr()
                                                VALGRIND_DO_MAKE_MEM_UNDEFINED()
                                                VALGRIND_ANNOTATE_NEW_MEMORY()
                                                chunk_get_chunk_hdr_value() <uint64_t chunk_get_chunk_hdr_value (uint16_t type, uint16_t flags, uint32_t size_idx) at libpmemobj/memblock.c:604>:
                                                    COMPILE_ERROR_ON()
                                                    memcpy()
                                                util_atomic_store_explicit64()
                                                pmemops_persist()
                                                huge_write_footer() <void huge_write_footer (struct chunk_header *hdr, uint32_t size_idx) at libpmemobj/memblock.c:1166>:
                                                    VALGRIND_DO_MAKE_MEM_UNDEFINED()
                                                    VALGRIND_SET_CLEAN()
                                                memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                                    memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                                        heap_get_chunk_hdr()
                                                    memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                                        heap_get_chunk_hdr()
                                                        FATAL()
                                            pmemops_persist()
                                    heap_arenas_fini() <void heap_arenas_fini (struct arenas *arenas) at libpmemobj/heap.c:150>:
                                        util_mutex_destroy()
                                        VEC_DELETE()
                                    alloc_class_collection_delete() <void alloc_class_collection_delete (struct alloc_class_collection *ac) at libpmemobj/alloc_class.c:516>:
                                        LOG()
                                        alloc_class_delete() <void alloc_class_delete (struct alloc_class_collection *ac, struct alloc_class *c) at libpmemobj/alloc_class.c:254>:
                                            LOG()
                                            Free() <Free_func Free at core/alloc.c:91>
                                        critnib_delete() <void critnib_delete (struct critnib *c) at libpmemobj/critnib.c:224>:
                                            delete_node() <void delete_node (struct critnib_node *__restrict n) at libpmemobj/critnib.c:206>:
                                                is_leaf() <inline bool is_leaf (struct critnib_node *n) at libpmemobj/critnib.c:150>:
                                                Free() <Free_func Free at core/alloc.c:91>
                                                to_leaf() <inline struct critnib_leaf *to_leaf (struct critnib_node *n) at libpmemobj/critnib.c:159>:
                                            util_mutex_destroy()
                                            Free() <Free_func Free at core/alloc.c:91>
                                        Free() <Free_func Free at core/alloc.c:91>
                                    arena_thread_assignment_fini() <void arena_thread_assignment_fini (struct arenas_thread_assignment *assignment) at libpmemobj/heap.c:318>:
                                        os_tls_key_delete() <int os_tls_key_delete (os_tls_key_t key) at core/os_thread_posix.c:44>:
                                            pthread_key_delete()
                                        ASSERT()
                                    Free() <Free_func Free at core/alloc.c:91>
                            palloc_heap_vg_open() <void palloc_heap_vg_open (struct palloc_heap *heap, int objects) at libpmemobj/palloc.c:1328>:
                                heap_vg_open() <void heap_vg_open (struct palloc_heap *heap, object_callback cb, void *arg, int objects) at libpmemobj/heap.c:1941>:
                                    ASSERTne()
                                    VALGRIND_DO_MAKE_MEM_UNDEFINED()
                                    VALGRIND_DO_MAKE_MEM_DEFINED()
                                    heap_max_zone() <unsigned heap_max_zone (size_t size) at libpmemobj/heap.c:516>:
                                    ZID_TO_ZONE()
                                    memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                        memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                            heap_get_chunk_hdr()
                                        memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                            heap_get_chunk_hdr()
                                            FATAL()
                                    ASSERT()
                                    VALGRIND_DO_MAKE_MEM_NOACCESS()
                                palloc_vg_register_alloc() <int palloc_vg_register_alloc (const struct memory_block *m, void *arg) at libpmemobj/palloc.c:1310>:
                                    VALGRIND_DO_MEMPOOL_ALLOC()
                                    VALGRIND_DO_MAKE_MEM_DEFINED()
                            palloc_buckets_init() <int palloc_buckets_init (struct palloc_heap *heap) at libpmemobj/palloc.c:1262>:
                                heap_buckets_init() <int heap_buckets_init (struct palloc_heap *heap) at libpmemobj/heap.c:1477>:
                                    alloc_class_by_id() <struct alloc_class *alloc_class_by_id (struct alloc_class_collection *ac, uint8_t id) at libpmemobj/alloc_class.c:612>
                                    heap_create_alloc_class_buckets() <int heap_create_alloc_class_buckets (struct palloc_heap *heap, struct alloc_class *c) at libpmemobj/heap.c:1448>:
                                        VEC_FOREACH_BY_POS()
                                        VEC_ARR()
                                        bucket_locked_new() <struct bucket_locked *bucket_locked_new (struct block_container *c, struct alloc_class *aclass) at libpmemobj/bucket.c:81>:
                                            ASSERTne()
                                            Malloc()
                                            bucket_init() <int bucket_init (struct bucket *b, struct block_container *c, struct alloc_class *aclass) at libpmemobj/bucket.c:46>:
                                                Zalloc() <void *Zalloc (size_t sz) at core/alloc.c:98>:
                                                    Malloc()
                                                    memset()
                                            util_mutex_init()
                                            Free() <Free_func Free at core/alloc.c:91>
                                        container_new_seglists() <struct block_container *container_new_seglists (struct palloc_heap *heap) at libpmemobj/container_seglists.c:154>:
                                            Malloc()
                                            VECQ_INIT()
                                        bucket_locked_delete() <void bucket_locked_delete (struct bucket_locked *b) at libpmemobj/bucket.c:106>:
                                            bucket_fini() <void bucket_fini (struct bucket *b) at libpmemobj/bucket.c:70>:
                                                Free() <Free_func Free at core/alloc.c:91>
                                            util_mutex_destroy()
                                            Free() <Free_func Free at core/alloc.c:91>
                                    bucket_locked_new() <struct bucket_locked *bucket_locked_new (struct block_container *c, struct alloc_class *aclass) at libpmemobj/bucket.c:81>:
                                        ASSERTne()
                                        Malloc()
                                        bucket_init() <int bucket_init (struct bucket *b, struct block_container *c, struct alloc_class *aclass) at libpmemobj/bucket.c:46>:
                                            Zalloc() <void *Zalloc (size_t sz) at core/alloc.c:98>:
                                                Malloc()
                                                memset()
                                        util_mutex_init()
                                        Free() <Free_func Free at core/alloc.c:91>
                                    container_new_ravl() <struct block_container *container_new_ravl (struct palloc_heap *heap) at libpmemobj/container_ravl.c:169>:
                                        Malloc()
                                        ravl_new() <struct ravl *ravl_new (ravl_compare *compare) at core/ravl.c:64>:
                                            ravl_new_sized() <struct ravl *ravl_new_sized (ravl_compare *compare, size_t data_size) at core/ravl.c:45>:
                                                Malloc()
                                                ERR()
                                        container_compare_memblocks() <int container_compare_memblocks (const void *lhs, const void *rhs) at libpmemobj/container_ravl.c:22>:
                                        Free() <Free_func Free at core/alloc.c:91>
                                    VEC_FOREACH()
                                    heap_arena_delete() <void heap_arena_delete (struct arena *arena) at libpmemobj/heap.c:169>:
                                        bucket_locked_delete() <void bucket_locked_delete (struct bucket_locked *b) at libpmemobj/bucket.c:106>:
                                            bucket_fini() <void bucket_fini (struct bucket *b) at libpmemobj/bucket.c:70>:
                                                Free() <Free_func Free at core/alloc.c:91>
                                            util_mutex_destroy()
                                            Free() <Free_func Free at core/alloc.c:91>
                                        Free() <Free_func Free at core/alloc.c:91>
                            palloc_heap_cleanup() <void palloc_heap_cleanup (struct palloc_heap *heap) at libpmemobj/palloc.c:1299>:
                                heap_cleanup() <void heap_cleanup (struct palloc_heap *heap) at libpmemobj/heap.c:1741>:
                                    alloc_class_collection_delete() <void alloc_class_collection_delete (struct alloc_class_collection *ac) at libpmemobj/alloc_class.c:516>:
                                        LOG()
                                        alloc_class_delete() <void alloc_class_delete (struct alloc_class_collection *ac, struct alloc_class *c) at libpmemobj/alloc_class.c:254>:
                                            LOG()
                                            Free() <Free_func Free at core/alloc.c:91>
                                        critnib_delete() <void critnib_delete (struct critnib *c) at libpmemobj/critnib.c:224>:
                                            delete_node() <void delete_node (struct critnib_node *__restrict n) at libpmemobj/critnib.c:206>:
                                                is_leaf() <inline bool is_leaf (struct critnib_node *n) at libpmemobj/critnib.c:150>:
                                                Free() <Free_func Free at core/alloc.c:91>
                                                to_leaf() <inline struct critnib_leaf *to_leaf (struct critnib_node *n) at libpmemobj/critnib.c:159>:
                                            util_mutex_destroy()
                                            Free() <Free_func Free at core/alloc.c:91>
                                        Free() <Free_func Free at core/alloc.c:91>
                                    arena_thread_assignment_fini() <void arena_thread_assignment_fini (struct arenas_thread_assignment *assignment) at libpmemobj/heap.c:318>:
                                        os_tls_key_delete() <int os_tls_key_delete (os_tls_key_t key) at core/os_thread_posix.c:44>:
                                            pthread_key_delete()
                                        ASSERT()
                                    bucket_locked_delete() <void bucket_locked_delete (struct bucket_locked *b) at libpmemobj/bucket.c:106>:
                                        bucket_fini() <void bucket_fini (struct bucket *b) at libpmemobj/bucket.c:70>:
                                            Free() <Free_func Free at core/alloc.c:91>
                                        util_mutex_destroy()
                                        Free() <Free_func Free at core/alloc.c:91>
                                    VEC_FOREACH()
                                    heap_arena_delete() <void heap_arena_delete (struct arena *arena) at libpmemobj/heap.c:169>:
                                        bucket_locked_delete() <void bucket_locked_delete (struct bucket_locked *b) at libpmemobj/bucket.c:106>:
                                            bucket_fini() <void bucket_fini (struct bucket *b) at libpmemobj/bucket.c:70>:
                                                Free() <Free_func Free at core/alloc.c:91>
                                            util_mutex_destroy()
                                            Free() <Free_func Free at core/alloc.c:91>
                                        Free() <Free_func Free at core/alloc.c:91>
                                    util_mutex_destroy()
                                    heap_arenas_fini() <void heap_arenas_fini (struct arenas *arenas) at libpmemobj/heap.c:150>:
                                        util_mutex_destroy()
                                        VEC_DELETE()
                                    VALGRIND_DO_DESTROY_MEMPOOL()
                                    Free() <Free_func Free at core/alloc.c:91>
                        operation_resume() <void operation_resume (struct operation_context *ctx) at libpmemobj/memops.c:744>:
                            operation_start() <void operation_start (struct operation_context *ctx) at libpmemobj/memops.c:736>:
                                operation_init() <void operation_init (struct operation_context *ctx) at libpmemobj/memops.c:709>:
                                    VALGRIND_ANNOTATE_NEW_MEMORY()
                                    VECQ_REINIT()
                                ASSERTeq()
                            ulog_base_nbytes() <size_t ulog_base_nbytes (struct ulog *ulog) at libpmemobj/ulog.c:808>:
                                ulog_entry_valid() <int ulog_entry_valid (struct ulog *ulog, const struct ulog_entry_base *entry) at libpmemobj/ulog.c:103>:
                                    ulog_entry_type() <ulog_operation_type ulog_entry_type (const struct ulog_entry_base *entry) at libpmemobj/ulog.c:59>:
                                        ULOG_OPERATION_FROM_OFFSET()
                                    ulog_entry_size() <size_t ulog_entry_size (const struct ulog_entry_base *entry) at libpmemobj/ulog.c:77>:
                                        ulog_entry_type() <ulog_operation_type ulog_entry_type (const struct ulog_entry_base *entry) at libpmemobj/ulog.c:59>:
                                            ULOG_OPERATION_FROM_OFFSET()
                                        CACHELINE_ALIGN()
                                        ASSERT()
                                    util_checksum_compute() <uint64_t util_checksum_compute (void *addr, size_t len, uint64_t *csump, size_t skip_off) at core/util.c:134>:
                                        abort()
                                        le32toh()
                                    util_checksum_seq() <uint64_t util_checksum_seq (const void *addr, size_t len, uint64_t csum) at core/util.c:197>:
                                        abort()
                                        le32toh()
                                ulog_entry_size() <size_t ulog_entry_size (const struct ulog_entry_base *entry) at libpmemobj/ulog.c:77>:
                                    ulog_entry_type() <ulog_operation_type ulog_entry_type (const struct ulog_entry_base *entry) at libpmemobj/ulog.c:59>:
                                        ULOG_OPERATION_FROM_OFFSET()
                                    CACHELINE_ALIGN()
                                    ASSERT()
                            ulog_next() <struct ulog *ulog_next (struct ulog *ulog, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:50>:
                                ulog_by_offset() <struct ulog *ulog_by_offset (size_t offset, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:36>:
                                    CACHELINE_ALIGN()
                        operation_process() <void operation_process (struct operation_context *ctx) at libpmemobj/memops.c:776>:
                            ulog_entry_type() <ulog_operation_type ulog_entry_type (const struct ulog_entry_base *entry) at libpmemobj/ulog.c:59>:
                                ULOG_OPERATION_FROM_OFFSET()
                            ulog_entry_apply() <void ulog_entry_apply (const struct ulog_entry_base *e, int persist, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:526>:
                                ulog_entry_type() <ulog_operation_type ulog_entry_type (const struct ulog_entry_base *entry) at libpmemobj/ulog.c:59>:
                                    ULOG_OPERATION_FROM_OFFSET()
                                ulog_entry_offset() <uint64_t ulog_entry_offset (const struct ulog_entry_base *entry) at libpmemobj/ulog.c:68>:
                                f()
                                VALGRIND_ADD_TO_TX()
                                pmemops_memset()
                                pmemops_memcpy()
                                ASSERT()
                                VALGRIND_REMOVE_FROM_TX()
                            operation_process_persistent_redo() <void operation_process_persistent_redo (struct operation_context *ctx) at libpmemobj/memops.c:654>:
                                ASSERTeq()
                                ulog_store() <void ulog_store (struct ulog *dest, struct ulog *src, size_t nbytes, size_t ulog_base_nbytes, size_t ulog_total_capacity, struct ulog_next *next, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:288>:
                                    MIN()
                                    CACHELINE_ALIGN()
                                    ASSERT()
                                    ulog_by_offset() <struct ulog *ulog_by_offset (size_t offset, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:36>:
                                        CACHELINE_ALIGN()
                                    VEC_ARR()
                                    ASSERTne()
                                    IS_CACHELINE_ALIGNED()
                                    VALGRIND_ADD_TO_TX()
                                    pmemops_memcpy()
                                    VALGRIND_REMOVE_FROM_TX()
                                    pmemops_drain()
                                    VEC_SIZE()
                                    VEC_FRONT()
                                    ulog_checksum() <int ulog_checksum (struct ulog *ulog, size_t ulog_base_bytes, int insert) at libpmemobj/ulog.c:275>:
                                        util_checksum() <int util_checksum (void *addr, size_t len, uint64_t *csump, int insert, size_t skip_off) at core/util.c:178>:
                                            util_checksum_compute() <uint64_t util_checksum_compute (void *addr, size_t len, uint64_t *csump, size_t skip_off) at core/util.c:134>:
                                                abort()
                                                le32toh()
                                            htole64()
                                        SIZEOF_ULOG()
                                    SIZEOF_ULOG()
                                ulog_process() <void ulog_process (struct ulog *ulog, ulog_check_offset_fn check, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:786>:
                                    SUPPRESS_UNUSED()
                                    LOG()
                                    ulog_check() <int ulog_check (struct ulog *ulog, ulog_check_offset_fn check, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:881>:
                                        LOG()
                                        ulog_foreach_entry() <int ulog_foreach_entry (struct ulog *ulog, ulog_entry_cb cb, void *arg, const struct pmem_ops *ops) at libpmemobj/ulog.c:180>
                                        ulog_check_entry() <int ulog_check_entry (struct ulog_entry_base *e, void *arg, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:862>:
                                            ulog_entry_offset() <uint64_t ulog_entry_offset (const struct ulog_entry_base *entry) at libpmemobj/ulog.c:68>:
                                            check()
                                            LOG()
                                    ulog_foreach_entry() <int ulog_foreach_entry (struct ulog *ulog, ulog_entry_cb cb, void *arg, const struct pmem_ops *ops) at libpmemobj/ulog.c:180>
                                    ulog_process_entry() <int ulog_process_entry (struct ulog_entry_base *e, void *arg, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:591>:
                                        SUPPRESS_UNUSED()
                                        ulog_entry_apply() <void ulog_entry_apply (const struct ulog_entry_base *e, int persist, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:526>:
                                            ulog_entry_type() <ulog_operation_type ulog_entry_type (const struct ulog_entry_base *entry) at libpmemobj/ulog.c:59>:
                                                ULOG_OPERATION_FROM_OFFSET()
                                            ulog_entry_offset() <uint64_t ulog_entry_offset (const struct ulog_entry_base *entry) at libpmemobj/ulog.c:68>:
                                            f()
                                            VALGRIND_ADD_TO_TX()
                                            pmemops_memset()
                                            pmemops_memcpy()
                                            ASSERT()
                                            VALGRIND_REMOVE_FROM_TX()
                                    pmemops_drain()
                                ulog_clobber() <void ulog_clobber (struct ulog *dest, struct ulog_next *next, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:694>:
                                    memset()
                                    VEC_SIZE()
                                    VEC_FRONT()
                                    pmemops_memcpy()
                            operation_process_persistent_undo() <void operation_process_persistent_undo (struct operation_context *ctx) at libpmemobj/memops.c:673>:
                                ASSERTeq()
                                ulog_process() <void ulog_process (struct ulog *ulog, ulog_check_offset_fn check, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:786>:
                                    SUPPRESS_UNUSED()
                                    LOG()
                                    ulog_check() <int ulog_check (struct ulog *ulog, ulog_check_offset_fn check, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:881>:
                                        LOG()
                                        ulog_foreach_entry() <int ulog_foreach_entry (struct ulog *ulog, ulog_entry_cb cb, void *arg, const struct pmem_ops *ops) at libpmemobj/ulog.c:180>
                                        ulog_check_entry() <int ulog_check_entry (struct ulog_entry_base *e, void *arg, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:862>:
                                            ulog_entry_offset() <uint64_t ulog_entry_offset (const struct ulog_entry_base *entry) at libpmemobj/ulog.c:68>:
                                            check()
                                            LOG()
                                    ulog_foreach_entry() <int ulog_foreach_entry (struct ulog *ulog, ulog_entry_cb cb, void *arg, const struct pmem_ops *ops) at libpmemobj/ulog.c:180>
                                    ulog_process_entry() <int ulog_process_entry (struct ulog_entry_base *e, void *arg, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:591>:
                                        SUPPRESS_UNUSED()
                                        ulog_entry_apply() <void ulog_entry_apply (const struct ulog_entry_base *e, int persist, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:526>:
                                            ulog_entry_type() <ulog_operation_type ulog_entry_type (const struct ulog_entry_base *entry) at libpmemobj/ulog.c:59>:
                                                ULOG_OPERATION_FROM_OFFSET()
                                            ulog_entry_offset() <uint64_t ulog_entry_offset (const struct ulog_entry_base *entry) at libpmemobj/ulog.c:68>:
                                            f()
                                            VALGRIND_ADD_TO_TX()
                                            pmemops_memset()
                                            pmemops_memcpy()
                                            ASSERT()
                                            VALGRIND_REMOVE_FROM_TX()
                                    pmemops_drain()
                            ulog_process() <void ulog_process (struct ulog *ulog, ulog_check_offset_fn check, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:786>:
                                SUPPRESS_UNUSED()
                                LOG()
                                ulog_check() <int ulog_check (struct ulog *ulog, ulog_check_offset_fn check, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:881>:
                                    LOG()
                                    ulog_foreach_entry() <int ulog_foreach_entry (struct ulog *ulog, ulog_entry_cb cb, void *arg, const struct pmem_ops *ops) at libpmemobj/ulog.c:180>
                                    ulog_check_entry() <int ulog_check_entry (struct ulog_entry_base *e, void *arg, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:862>:
                                        ulog_entry_offset() <uint64_t ulog_entry_offset (const struct ulog_entry_base *entry) at libpmemobj/ulog.c:68>:
                                        check()
                                        LOG()
                                ulog_foreach_entry() <int ulog_foreach_entry (struct ulog *ulog, ulog_entry_cb cb, void *arg, const struct pmem_ops *ops) at libpmemobj/ulog.c:180>
                                ulog_process_entry() <int ulog_process_entry (struct ulog_entry_base *e, void *arg, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:591>:
                                    SUPPRESS_UNUSED()
                                    ulog_entry_apply() <void ulog_entry_apply (const struct ulog_entry_base *e, int persist, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:526>:
                                        ulog_entry_type() <ulog_operation_type ulog_entry_type (const struct ulog_entry_base *entry) at libpmemobj/ulog.c:59>:
                                            ULOG_OPERATION_FROM_OFFSET()
                                        ulog_entry_offset() <uint64_t ulog_entry_offset (const struct ulog_entry_base *entry) at libpmemobj/ulog.c:68>:
                                        f()
                                        VALGRIND_ADD_TO_TX()
                                        pmemops_memset()
                                        pmemops_memcpy()
                                        ASSERT()
                                        VALGRIND_REMOVE_FROM_TX()
                                pmemops_drain()
                        operation_finish() <void operation_finish (struct operation_context *ctx, unsigned flags) at libpmemobj/memops.c:814>:
                            ASSERTne()
                            out() <void out (const char *fmt, ...) at core/out.c:480>:
                                va_start()
                                out_common() <} void out_common (const char *file, int line, const char *func, int level, const char *suffix, const char *fmt, va_list ap) at core/out.c:334>
                                va_end()
                            ulog_clobber_data() <int ulog_clobber_data (struct ulog *ulog_first, struct ulog_next *next, ulog_free_fn ulog_free, ulog_rm_user_buffer_fn user_buff_remove, const struct pmem_ops *p_ops, unsigned flags) at libpmemobj/ulog.c:713>:
                                ASSERTne()
                                ulog_inc_gen_num() <void ulog_inc_gen_num (struct ulog *ulog, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:605>:
                                    VALGRIND_ADD_TO_TX()
                                    pmemops_persist()
                                    VALGRIND_SET_CLEAN()
                                    VALGRIND_REMOVE_FROM_TX()
                                VEC_SIZE()
                                VEC_GET()
                                ulog_by_offset() <struct ulog *ulog_by_offset (size_t offset, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:36>:
                                    CACHELINE_ALIGN()
                                ulog_free_next() <int ulog_free_next (struct ulog *u, const struct pmem_ops *p_ops, ulog_free_fn ulog_free, ulog_rm_user_buffer_fn user_buff_remove, uint64_t flags) at libpmemobj/ulog.c:625>:
                                    VEC()
                                    VEC_INIT()
                                    ulog_by_offset() <struct ulog *ulog_by_offset (size_t offset, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:36>:
                                        CACHELINE_ALIGN()
                                    pmemops_persist()
                                    VEC_PUSH_BACK()
                                    LOG()
                                    out() <void out (const char *fmt, ...) at core/out.c:480>:
                                        va_start()
                                        out_common() <} void out_common (const char *file, int line, const char *func, int level, const char *suffix, const char *fmt, va_list ap) at core/out.c:334>
                                        va_end()
                                    VEC_FOREACH_REVERSE()
                                    VEC_DELETE()
                            operation_user_buffer_remove() <int operation_user_buffer_remove (void *base, void *addr) at libpmemobj/memops.c:242>:
                                util_mutex_lock()
                                ravl_find() <struct ravl_node *ravl_find (struct ravl *ravl, const void *data, enum ravl_predicate flags) at core/ravl.c:524>:
                                    LOG()
                                    ravl_data() <void *ravl_data (struct ravl_node *node) at core/ravl.c:571>:
                                        memcpy()
                                    ravl_predicate_holds() <int ravl_predicate_holds (int result, struct ravl_node **ret, struct ravl_node *n, enum ravl_predicate flags) at core/ravl.c:489>:
                                        ravl_node_successor() <struct ravl_node *ravl_node_successor (struct ravl_node *n) at core/ravl.c:465>:
                                            ravl_node_cessor() <struct ravl_node *ravl_node_cessor (struct ravl_node *n, enum ravl_slot_type t) at core/ravl.c:443>:
                                                ravl_node_type_most() <struct ravl_node *ravl_node_type_most (struct ravl_node *n, enum ravl_slot_type t) at core/ravl.c:430>:
                                                ravl_slot_opposite() <enum ravl_slot_type ravl_slot_opposite (enum ravl_slot_type t) at core/ravl.c:184>:
                                                    ASSERTne()
                                        ravl_node_predecessor() <struct ravl_node *ravl_node_predecessor (struct ravl_node *n) at core/ravl.c:476>:
                                            ravl_node_cessor() <struct ravl_node *ravl_node_cessor (struct ravl_node *n, enum ravl_slot_type t) at core/ravl.c:443>:
                                                ravl_node_type_most() <struct ravl_node *ravl_node_type_most (struct ravl_node *n, enum ravl_slot_type t) at core/ravl.c:430>:
                                                ravl_slot_opposite() <enum ravl_slot_type ravl_slot_opposite (enum ravl_slot_type t) at core/ravl.c:184>:
                                                    ASSERTne()
                                ASSERTne()
                                ravl_remove() <void ravl_remove (struct ravl *ravl, struct ravl_node *n) at core/ravl.c:545> (R):
                                    LOG()
                                    ravl_node_successor() <struct ravl_node *ravl_node_successor (struct ravl_node *n) at core/ravl.c:465>:
                                        ravl_node_cessor() <struct ravl_node *ravl_node_cessor (struct ravl_node *n, enum ravl_slot_type t) at core/ravl.c:443>:
                                            ravl_node_type_most() <struct ravl_node *ravl_node_type_most (struct ravl_node *n, enum ravl_slot_type t) at core/ravl.c:430>:
                                            ravl_slot_opposite() <enum ravl_slot_type ravl_slot_opposite (enum ravl_slot_type t) at core/ravl.c:184>:
                                                ASSERTne()
                                    memcpy()
                                    ravl_remove() <void ravl_remove (struct ravl *ravl, struct ravl_node *n) at core/ravl.c:545> (recursive: see 25075)
                                    ravl_node_ref() <struct ravl_node **ravl_node_ref (struct ravl *ravl, struct ravl_node *n) at core/ravl.c:223>:
                                        ravl_node_slot_type() <enum ravl_slot_type ravl_node_slot_type (struct ravl_node *n) at core/ravl.c:196>:
                                    Free() <Free_func Free at core/alloc.c:91>
                                util_mutex_unlock()
                            ulog_free_next() <int ulog_free_next (struct ulog *u, const struct pmem_ops *p_ops, ulog_free_fn ulog_free, ulog_rm_user_buffer_fn user_buff_remove, uint64_t flags) at libpmemobj/ulog.c:625>:
                                VEC()
                                VEC_INIT()
                                ulog_by_offset() <struct ulog *ulog_by_offset (size_t offset, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:36>:
                                    CACHELINE_ALIGN()
                                pmemops_persist()
                                VEC_PUSH_BACK()
                                LOG()
                                out() <void out (const char *fmt, ...) at core/out.c:480>:
                                    va_start()
                                    out_common() <} void out_common (const char *file, int line, const char *func, int level, const char *suffix, const char *fmt, va_list ap) at core/out.c:334>
                                    va_end()
                                VEC_FOREACH_REVERSE()
                                VEC_DELETE()
                            ulog_capacity() <size_t ulog_capacity (struct ulog *ulog, size_t ulog_base_bytes, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:206>:
                                ulog_next() <struct ulog *ulog_next (struct ulog *ulog, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:50>:
                                    ulog_by_offset() <struct ulog *ulog_by_offset (size_t offset, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:36>:
                                        CACHELINE_ALIGN()
                            VEC_CLEAR()
                            ulog_rebuild_next_vec() <void ulog_rebuild_next_vec (struct ulog *ulog, struct ulog_next *next, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:223>:
                                VEC_PUSH_BACK()
                                ulog_next() <struct ulog *ulog_next (struct ulog *ulog, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:50>:
                                    ulog_by_offset() <struct ulog *ulog_by_offset (size_t offset, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:36>:
                                        CACHELINE_ALIGN()
                    pmemops_persist()
                palloc_heap_end() <void *palloc_heap_end (struct palloc_heap *h) at libpmemobj/palloc.c:1281>:
                    heap_end() <void *heap_end (struct palloc_heap *h) at libpmemobj/heap.c:1241>:
                        ASSERT()
                        ZID_TO_ZONE()
                VALGRIND_DO_MAKE_MEM_NOACCESS()
                obj_pool_init() <void obj_pool_init (void) at libpmemobj/obj.c:140>:
                    LOG()
                    critnib_new() <struct critnib *critnib_new (void) at libpmemobj/critnib.c:187>:
                        Zalloc() <void *Zalloc (size_t sz) at core/alloc.c:98>:
                            Malloc()
                            memset()
                        util_mutex_init()
                        VALGRIND_HG_DRD_DISABLE_CHECKING()
                    FATAL()
                    util_bool_compare_and_swap64()
                    critnib_delete() <void critnib_delete (struct critnib *c) at libpmemobj/critnib.c:224>:
                        delete_node() <void delete_node (struct critnib_node *__restrict n) at libpmemobj/critnib.c:206>:
                            is_leaf() <inline bool is_leaf (struct critnib_node *n) at libpmemobj/critnib.c:150>:
                            Free() <Free_func Free at core/alloc.c:91>
                            to_leaf() <inline struct critnib_leaf *to_leaf (struct critnib_node *n) at libpmemobj/critnib.c:159>:
                        util_mutex_destroy()
                        Free() <Free_func Free at core/alloc.c:91>
                critnib_insert() <int critnib_insert (struct critnib *c, uint64_t key, void *value) at libpmemobj/critnib.c:340>:
                    util_mutex_lock()
                    alloc_leaf() <struct critnib_leaf *alloc_leaf (struct critnib *__restrict c) at libpmemobj/critnib.c:311>:
                        Malloc()
                        ERR()
                        VALGRIND_ANNOTATE_NEW_MEMORY()
                    util_mutex_unlock()
                    VALGRIND_HG_DRD_DISABLE_CHECKING()
                    is_leaf() <inline bool is_leaf (struct critnib_node *n) at libpmemobj/critnib.c:150>:
                    path_mask() <inline uint64_t path_mask (sh_t shift) at libpmemobj/critnib.c:169>:
                    slice_index() <inline unsigned slice_index (uint64_t key, sh_t shift) at libpmemobj/critnib.c:178>:
                    store() <void store (void *dst, void *src) at libpmemobj/critnib.c:140>:
                        util_atomic_store_explicit64()
                    to_leaf() <inline struct critnib_leaf *to_leaf (struct critnib_node *n) at libpmemobj/critnib.c:159>:
                    ASSERT()
                    free_leaf() <void free_leaf (struct critnib *__restrict c, struct critnib_leaf *__restrict k) at libpmemobj/critnib.c:298>
                    util_mssb_index64()
                    alloc_node() <struct critnib_node *alloc_node (struct critnib *__restrict c) at libpmemobj/critnib.c:274>:
                        Malloc()
                        ERR()
                        VALGRIND_ANNOTATE_NEW_MEMORY()
                ERR()
                obj_ctl_init_and_load() <int obj_ctl_init_and_load (PMEMobjpool *pop) at libpmemobj/obj.c:85>:
                    LOG()
                    ctl_new() <struct ctl *ctl_new (void) at common/ctl.c:474>:
                        Zalloc() <void *Zalloc (size_t sz) at core/alloc.c:98>:
                            Malloc()
                            memset()
                        ERR()
                    tx_ctl_register() <void tx_ctl_register (PMEMobjpool *pop) at libpmemobj/tx.c:2421>:
                        CTL_REGISTER_MODULE()
                    pmalloc_ctl_register() <void pmalloc_ctl_register (PMEMobjpool *pop) at libpmemobj/pmalloc.c:848>:
                        CTL_REGISTER_MODULE()
                    stats_ctl_register() <void stats_ctl_register (PMEMobjpool *pop) at libpmemobj/stats.c:154>:
                        CTL_REGISTER_MODULE()
                    debug_ctl_register()
                    os_getenv() <char *os_getenv (const char *name) at core/os_posix.c:279>:
                        secure_getenv()
                    ctl_load_config_from_string() <int ctl_load_config_from_string (struct ctl *ctl, void *ctx, const char *cfg_string) at common/ctl.c:393>:
                        LOG()
                        Strdup() <Strdup_func Strdup at core/alloc.c:92>
                        ERR()
                        ctl_load_config() <int ctl_load_config (struct ctl *ctl, void *ctx, char *buf) at common/ctl.c:360>:
                            ASSERTne()
                            strtok_r()
                            ctl_parse_query() <int ctl_parse_query (char *qbuf, char **name, char **value) at common/ctl.c:334>:
                                strtok_r()
                            ERR()
                            ctl_query() <int ctl_query (struct ctl *ctl, void *ctx, enum ctl_query_source source, const char *name, enum ctl_query_type type, void *arg) at common/ctl.c:270>:
                                LOG()
                                ERR()
                                PMDK_SLIST_INIT()
                                ctl_find_node() <const struct ctl_node *ctl_find_node (const struct ctl_node *nodes, const char *name, struct ctl_indexes *indexes) at common/ctl.c:47>:
                                    LOG()
                                    Strdup() <Strdup_func Strdup at core/alloc.c:92>
                                    strtok_r()
                                    strtol()
                                    Malloc()
                                    PMDK_SLIST_INSERT_HEAD()
                                    strcmp()
                                    Free() <Free_func Free at core/alloc.c:91>
                                CTL_NODE():
                                    CTL_LEAF_RW()
                                    CTL_LEAF_WO()
                                    CTL_INDEXED()
                                    CTL_LEAF_RUNNABLE()
                                    CTL_LEAF_RO()
                                    CTL_CHILD()
                                    STATS_CTL_LEAF()
                                ctl_delete_indexes() <void ctl_delete_indexes (struct ctl_indexes *indexes) at common/ctl.c:111>:
                                    PMDK_SLIST_EMPTY()
                                    PMDK_SLIST_FIRST()
                                    PMDK_SLIST_REMOVE_HEAD()
                                    Free() <Free_func Free at core/alloc.c:91>
                                out() <void out (const char *fmt, ...) at core/out.c:480>:
                                    va_start()
                                    out_common() <} void out_common (const char *file, int line, const char *func, int level, const char *suffix, const char *fmt, va_list ap) at core/out.c:334>
                                    va_end()
                        Free() <Free_func Free at core/alloc.c:91>
                    ctl_load_config_from_file() <int ctl_load_config_from_file (struct ctl *ctl, void *ctx, const char *cfg_file) at common/ctl.c:416>:
                        LOG()
                        os_fopen() <FILE *os_fopen (const char *pathname, const char *mode) at core/os_posix.c:106>:
                            fopen()
                        fseek()
                        ftell()
                        ERR()
                        Zalloc() <void *Zalloc (size_t sz) at core/alloc.c:98>:
                            Malloc()
                            memset()
                        fgetc()
                        isspace()
                        ctl_load_config() <int ctl_load_config (struct ctl *ctl, void *ctx, char *buf) at common/ctl.c:360>:
                            ASSERTne()
                            strtok_r()
                            ctl_parse_query() <int ctl_parse_query (char *qbuf, char **name, char **value) at common/ctl.c:334>:
                                strtok_r()
                            ERR()
                            ctl_query() <int ctl_query (struct ctl *ctl, void *ctx, enum ctl_query_source source, const char *name, enum ctl_query_type type, void *arg) at common/ctl.c:270>:
                                LOG()
                                ERR()
                                PMDK_SLIST_INIT()
                                ctl_find_node() <const struct ctl_node *ctl_find_node (const struct ctl_node *nodes, const char *name, struct ctl_indexes *indexes) at common/ctl.c:47>:
                                    LOG()
                                    Strdup() <Strdup_func Strdup at core/alloc.c:92>
                                    strtok_r()
                                    strtol()
                                    Malloc()
                                    PMDK_SLIST_INSERT_HEAD()
                                    strcmp()
                                    Free() <Free_func Free at core/alloc.c:91>
                                CTL_NODE():
                                    CTL_LEAF_RW()
                                    CTL_LEAF_WO()
                                    CTL_INDEXED()
                                    CTL_LEAF_RUNNABLE()
                                    CTL_LEAF_RO()
                                    CTL_CHILD()
                                    STATS_CTL_LEAF()
                                ctl_delete_indexes() <void ctl_delete_indexes (struct ctl_indexes *indexes) at common/ctl.c:111>:
                                    PMDK_SLIST_EMPTY()
                                    PMDK_SLIST_FIRST()
                                    PMDK_SLIST_REMOVE_HEAD()
                                    Free() <Free_func Free at core/alloc.c:91>
                                out() <void out (const char *fmt, ...) at core/out.c:480>:
                                    va_start()
                                    out_common() <} void out_common (const char *file, int line, const char *func, int level, const char *suffix, const char *fmt, va_list ap) at core/out.c:334>
                                    va_end()
                        Free() <Free_func Free at core/alloc.c:91>
                        fclose()
                    ctl_delete() <void ctl_delete (struct ctl *c) at common/ctl.c:490>:
                        Free() <Free_func Free at core/alloc.c:91>
                util_mutex_init()
                ravl_new_sized() <struct ravl *ravl_new_sized (ravl_compare *compare, size_t data_size) at core/ravl.c:45>:
                    Malloc()
                    ERR()
                operation_user_buffer_range_cmp() <int operation_user_buffer_range_cmp (const void *lhs, const void *rhs) at libpmemobj/memops.c:496>:
                RANGE_NONE()
                util_mutex_destroy()
                ctl_delete() <void ctl_delete (struct ctl *c) at common/ctl.c:490>:
                    Free() <Free_func Free at core/alloc.c:91>
                critnib_remove() <void *critnib_remove (struct critnib *c, uint64_t key) at libpmemobj/critnib.c:429>:
                    util_mutex_lock()
                    util_fetch_and_add64()
                    free_node() <void free_node (struct critnib *__restrict c, struct critnib_node *__restrict n) at libpmemobj/critnib.c:260>:
                        ASSERT()
                        is_leaf() <inline bool is_leaf (struct critnib_node *n) at libpmemobj/critnib.c:150>:
                    free_leaf() <void free_leaf (struct critnib *__restrict c, struct critnib_leaf *__restrict k) at libpmemobj/critnib.c:298>
                    is_leaf() <inline bool is_leaf (struct critnib_node *n) at libpmemobj/critnib.c:150>:
                    to_leaf() <inline struct critnib_leaf *to_leaf (struct critnib_node *n) at libpmemobj/critnib.c:159>:
                    store() <void store (void *dst, void *src) at libpmemobj/critnib.c:140>:
                        util_atomic_store_explicit64()
                    slice_index() <inline unsigned slice_index (uint64_t key, sh_t shift) at libpmemobj/critnib.c:178>:
                    ASSERTne()
                    util_mutex_unlock()
                ASSERTne()
                obj_runtime_cleanup_common() <void obj_runtime_cleanup_common (PMEMobjpool *pop) at libpmemobj/obj.c:685>:
                    lane_section_cleanup() <int lane_section_cleanup (PMEMobjpool *pop) at libpmemobj/lane.c:398>:
                        pmalloc_cleanup() <int pmalloc_cleanup (PMEMobjpool *pop) at libpmemobj/pmalloc.c:205>:
                            palloc_heap_cleanup() <void palloc_heap_cleanup (struct palloc_heap *heap) at libpmemobj/palloc.c:1299>:
                                heap_cleanup() <void heap_cleanup (struct palloc_heap *heap) at libpmemobj/heap.c:1741>:
                                    alloc_class_collection_delete() <void alloc_class_collection_delete (struct alloc_class_collection *ac) at libpmemobj/alloc_class.c:516>:
                                        LOG()
                                        alloc_class_delete() <void alloc_class_delete (struct alloc_class_collection *ac, struct alloc_class *c) at libpmemobj/alloc_class.c:254>:
                                            LOG()
                                            Free() <Free_func Free at core/alloc.c:91>
                                        critnib_delete() <void critnib_delete (struct critnib *c) at libpmemobj/critnib.c:224>:
                                            delete_node() <void delete_node (struct critnib_node *__restrict n) at libpmemobj/critnib.c:206>:
                                                is_leaf() <inline bool is_leaf (struct critnib_node *n) at libpmemobj/critnib.c:150>:
                                                Free() <Free_func Free at core/alloc.c:91>
                                                to_leaf() <inline struct critnib_leaf *to_leaf (struct critnib_node *n) at libpmemobj/critnib.c:159>:
                                            util_mutex_destroy()
                                            Free() <Free_func Free at core/alloc.c:91>
                                        Free() <Free_func Free at core/alloc.c:91>
                                    arena_thread_assignment_fini() <void arena_thread_assignment_fini (struct arenas_thread_assignment *assignment) at libpmemobj/heap.c:318>:
                                        os_tls_key_delete() <int os_tls_key_delete (os_tls_key_t key) at core/os_thread_posix.c:44>:
                                            pthread_key_delete()
                                        ASSERT()
                                    bucket_locked_delete() <void bucket_locked_delete (struct bucket_locked *b) at libpmemobj/bucket.c:106>:
                                        bucket_fini() <void bucket_fini (struct bucket *b) at libpmemobj/bucket.c:70>:
                                            Free() <Free_func Free at core/alloc.c:91>
                                        util_mutex_destroy()
                                        Free() <Free_func Free at core/alloc.c:91>
                                    VEC_FOREACH()
                                    heap_arena_delete() <void heap_arena_delete (struct arena *arena) at libpmemobj/heap.c:169>:
                                        bucket_locked_delete() <void bucket_locked_delete (struct bucket_locked *b) at libpmemobj/bucket.c:106>:
                                            bucket_fini() <void bucket_fini (struct bucket *b) at libpmemobj/bucket.c:70>:
                                                Free() <Free_func Free at core/alloc.c:91>
                                            util_mutex_destroy()
                                            Free() <Free_func Free at core/alloc.c:91>
                                        Free() <Free_func Free at core/alloc.c:91>
                                    util_mutex_destroy()
                                    heap_arenas_fini() <void heap_arenas_fini (struct arenas *arenas) at libpmemobj/heap.c:150>:
                                        util_mutex_destroy()
                                        VEC_DELETE()
                                    VALGRIND_DO_DESTROY_MEMPOOL()
                                    Free() <Free_func Free at core/alloc.c:91>
                    lane_cleanup() <void lane_cleanup (PMEMobjpool *pop) at libpmemobj/lane.c:335>:
                        lane_destroy() <void lane_destroy (PMEMobjpool *pop, struct lane *lane) at libpmemobj/lane.c:246>:
                            SUPPRESS_UNUSED()
                            operation_delete() <void operation_delete (struct operation_context *ctx) at libpmemobj/memops.c:229>:
                                VECQ_DELETE()
                                VEC_DELETE()
                                Free() <Free_func Free at core/alloc.c:91>
                        Free() <Free_func Free at core/alloc.c:91>
                        lane_info_cleanup() <inline void lane_info_cleanup (PMEMobjpool *pop) at libpmemobj/lane.c:123>:
                            unlikely()
                            critnib_remove() <void *critnib_remove (struct critnib *c, uint64_t key) at libpmemobj/critnib.c:429>:
                                util_mutex_lock()
                                util_fetch_and_add64()
                                free_node() <void free_node (struct critnib *__restrict c, struct critnib_node *__restrict n) at libpmemobj/critnib.c:260>:
                                    ASSERT()
                                    is_leaf() <inline bool is_leaf (struct critnib_node *n) at libpmemobj/critnib.c:150>:
                                free_leaf() <void free_leaf (struct critnib *__restrict c, struct critnib_leaf *__restrict k) at libpmemobj/critnib.c:298>
                                is_leaf() <inline bool is_leaf (struct critnib_node *n) at libpmemobj/critnib.c:150>:
                                to_leaf() <inline struct critnib_leaf *to_leaf (struct critnib_node *n) at libpmemobj/critnib.c:159>:
                                store() <void store (void *dst, void *src) at libpmemobj/critnib.c:140>:
                                    util_atomic_store_explicit64()
                                slice_index() <inline unsigned slice_index (uint64_t key, sh_t shift) at libpmemobj/critnib.c:178>:
                                ASSERTne()
                                util_mutex_unlock()
                            likely()
                            Free() <Free_func Free at core/alloc.c:91>
                stats_delete() <void stats_delete (PMEMobjpool *pop, struct stats *s) at libpmemobj/stats.c:142>:
                    pmemops_persist()
                    Free() <Free_func Free at core/alloc.c:91>
                tx_params_delete() <void tx_params_delete (struct tx_parameters *tx_params) at libpmemobj/tx.c:124>:
                    Free() <Free_func Free at core/alloc.c:91>
            ERR()
            obj_vg_boot() <void obj_vg_boot (struct pmemobjpool *pop) at libpmemobj/obj.c:639>:
                LOG()
                os_getenv() <char *os_getenv (const char *name) at core/os_posix.c:279>:
                    secure_getenv()
                obj_vg_check_no_undef() <void obj_vg_check_no_undef (struct pmemobjpool *pop) at libpmemobj/obj.c:549>:
                    LOG()
                    VALGRIND_CHECK_MEM_IS_ADDRESSABLE()
                    VALGRIND_CHECK_MEM_IS_DEFINED()
                    VALGRIND_CHECK_MEM_IS_UNDEFINED()
                    VALGRIND_CHECK_MEM_IS_UNADDRESSABLE()
                    VALGRIND_PRINTF()
            util_poolset_fdclose() <void util_poolset_fdclose (struct pool_set *set) at common/set.c:457>:
                util_poolset_fdclose_always() <void util_poolset_fdclose_always (struct pool_set *set) at common/set.c:445>:
                    LOG()
                    util_replica_fdclose() <void util_replica_fdclose (struct pool_replica *rep) at common/set.c:3232>:
                        util_part_fdclose() <void util_part_fdclose (struct pool_set_part *part) at common/set.c:1517>:
                            LOG()
                            os_close()
            obj_replicas_fini() <void obj_replicas_fini (struct pool_set *set) at libpmemobj/obj.c:1298>:
                obj_replica_fini() <void obj_replica_fini (struct pool_replica *repset) at libpmemobj/obj.c:898>:
                    LOG()
            obj_pool_close() <void obj_pool_close (struct pool_set *set) at libpmemobj/obj.c:1220>:
                util_poolset_close() <void util_poolset_close (struct pool_set *set, enum del_parts_mode del) at common/set.c:383>:
                    LOG()
                    util_replica_close() <int util_replica_close (struct pool_set *set, unsigned repidx) at common/set.c:2136>:
                        LOG()
                        PART()
                        RANGE_RW()
                        util_replica_deep_drain() <int util_replica_deep_drain (const void *addr, size_t len, struct pool_set *set, unsigned replica_id) at common/set.c:3314>:
                            LOG()
                            util_replica_deep_common() <int util_replica_deep_common (const void *addr, size_t len, struct pool_set *set, unsigned replica_id, int flush) at common/set.c:3247>:
                                LOG()
                                ASSERT()
                                os_part_deep_common() <int os_part_deep_common (struct pool_replica *rep, unsigned partidx, void *addr, size_t len, int flush) at common/os_deep_linux.c:108>:
                                    LOG()
                                    pmem_msync()
                                    pmem_deep_flush()
                                    pmem_drain()
                                    util_ddax_region_find() <int util_ddax_region_find (const char *path, unsigned *region_id) at common/file_posix.c:150>:
                                        LOG()
                                        os_stat() <int os_stat (const char *pathname, os_stat_t *buf) at core/os_posix.c:79>:
                                            stat()
                                        ERR()
                                        pmem2_get_type_from_stat() <int pmem2_get_type_from_stat (const os_stat_t *st, enum pmem2_file_type *type) at libpmem2/pmem2_utils_linux.c:23>:
                                            S_ISREG()
                                            S_ISDIR()
                                            S_ISCHR()
                                            ERR()
                                            util_snprintf() <int util_snprintf (char *str, size_t size, const char *format, ...) at core/util.c:434>:
                                                va_start()
                                                vsnprintf()
                                                va_end()
                                            os_major()
                                            os_minor()
                                            ASSERTinfo()
                                            LOG()
                                            realpath()
                                            strrchr()
                                            strcmp()
                                        pmem2_err_to_errno() <int pmem2_err_to_errno (int err) at libpmem2/pmem2_utils.c:67>:
                                            FATAL()
                                        pmem2_get_region_id() <int pmem2_get_region_id (const struct pmem2_source *src, unsigned *region_id) at libpmem2/region_namespace_ndctl.c:227>:
                                            LOG()
                                            ndctl_new()
                                            ERR()
                                            pmem2_region_namespace() <int pmem2_region_namespace (struct ndctl_ctx *ctx, const struct pmem2_source *src, struct ndctl_region **pregion, struct ndctl_namespace **pndns) at libpmem2/region_namespace_ndctl.c:131>:
                                                LOG()
                                                ERR()
                                                FOREACH_BUS_REGION_NAMESPACE()
                                                ndctl_namespace_get_dax()
                                                ASSERTeq()
                                                ndctl_dax_get_daxctl_region()
                                                daxctl_dev_foreach()
                                                daxctl_dev_get_devname()
                                                ndctl_match_devdax() <int ndctl_match_devdax (dev_t st_rdev, const char *devname) at libpmem2/region_namespace_ndctl.c:26>:
                                                    LOG()
                                                    stat()
                                                    util_snprintf() <int util_snprintf (char *str, size_t size, const char *format, ...) at core/util.c:434>:
                                                        va_start()
                                                        vsnprintf()
                                                        va_end()
                                                    ERR()
                                                    os_stat() <int os_stat (const char *pathname, os_stat_t *buf) at core/os_posix.c:79>:
                                                        stat()
                                                ndctl_namespace_get_btt()
                                                ndctl_btt_get_block_device()
                                                ndctl_namespace_get_pfn()
                                                ndctl_pfn_get_block_device()
                                                ndctl_namespace_get_block_device()
                                                ndctl_match_fsdax() <int ndctl_match_fsdax (dev_t st_dev, const char *devname) at libpmem2/region_namespace_ndctl.c:64>:
                                                    LOG()
                                                    util_snprintf() <int util_snprintf (char *str, size_t size, const char *format, ...) at core/util.c:434>:
                                                        va_start()
                                                        vsnprintf()
                                                        va_end()
                                                    ERR()
                                                    major()
                                                    minor()
                                                    os_open() <int os_open (const char *pathname, int flags, ...) at core/os_posix.c:29>:
                                                        va_start()
                                                        va_arg()
                                                        va_end()
                                                        open()
                                                    read()
                                                    os_close()
                                                    strcmp()
                                            ndctl_region_get_id()
                                            ndctl_unref()
                                    pmem2_deep_flush_write() <int pmem2_deep_flush_write (unsigned region_id) at libpmem2/deep_flush_linux.c:27>:
                                        LOG()
                                        util_snprintf() <int util_snprintf (char *str, size_t size, const char *format, ...) at core/util.c:434>:
                                            va_start()
                                            vsnprintf()
                                            va_end()
                                        ERR()
                                        os_open() <int os_open (const char *pathname, int flags, ...) at core/os_posix.c:29>:
                                            va_start()
                                            va_arg()
                                            va_end()
                                            open()
                                        read()
                                        os_close()
                                    MIN()
                        shutdown_state_clear_dirty() <void shutdown_state_clear_dirty (struct shutdown_state *sds, struct pool_replica *rep) at common/shutdown_state.c:143>:
                            LOG()
                            FLUSH_SDS()
                            shutdown_state_checksum() <void shutdown_state_checksum (struct shutdown_state *sds, struct pool_replica *rep) at common/shutdown_state.c:27>:
                                LOG()
                                util_checksum() <int util_checksum (void *addr, size_t len, uint64_t *csump, int insert, size_t skip_off) at core/util.c:178>:
                                    util_checksum_compute() <uint64_t util_checksum_compute (void *addr, size_t len, uint64_t *csump, size_t skip_off) at core/util.c:134>:
                                        abort()
                                        le32toh()
                                    htole64()
                                FLUSH_SDS()
                        util_unmap_hdr() <void util_unmap_hdr (struct pool_set_part *part) at common/set.c:211>:
                            LOG()
                            VALGRIND_REMOVE_PMEM_MAPPING()
                            munmap()
                            FATAL()
                        util_unmap_part() <int util_unmap_part (struct pool_set_part *part) at common/set.c:274>:
                            LOG()
                            VALGRIND_REMOVE_PMEM_MAPPING()
                            munmap()
                            ERR()
                    util_replica_close_local() <int util_replica_close_local (struct pool_replica *rep, unsigned repn, enum del_parts_mode del) at common/set.c:356>:
                        os_close()
                        LOG()
                        util_unlink() <int util_unlink (const char *path) at common/file.c:513>:
                            LOG()
                            util_file_get_type() <enum file_type util_file_get_type (const char *path) at common/file.c:106>:
                                LOG()
                                ERR()
                                util_file_exists() <int util_file_exists (const char *path) at common/file.c:32>:
                                    LOG()
                                    os_access() <int os_access (const char *pathname, int mode) at core/os_posix.c:97>:
                                        access()
                                    ERR()
                                os_stat() <int os_stat (const char *pathname, os_stat_t *buf) at core/os_posix.c:79>:
                                    stat()
                                util_stat_get_type() <enum file_type util_stat_get_type (const os_stat_t *st) at common/file.c:62>:
                                    pmem2_get_type_from_stat() <int pmem2_get_type_from_stat (const os_stat_t *st, enum pmem2_file_type *type) at libpmem2/pmem2_utils_linux.c:23>:
                                        S_ISREG()
                                        S_ISDIR()
                                        S_ISCHR()
                                        ERR()
                                        util_snprintf() <int util_snprintf (char *str, size_t size, const char *format, ...) at core/util.c:434>:
                                            va_start()
                                            vsnprintf()
                                            va_end()
                                        os_major()
                                        os_minor()
                                        ASSERTinfo()
                                        LOG()
                                        realpath()
                                        strrchr()
                                        strcmp()
                                    pmem2_err_to_errno() <int pmem2_err_to_errno (int err) at libpmem2/pmem2_utils.c:67>:
                                        FATAL()
                                    ASSERTinfo()
                            util_file_zero() <int util_file_zero (const char *path, os_off_t off, size_t len) at common/file.c:234>:
                                LOG()
                                os_open() <int os_open (const char *pathname, int flags, ...) at core/os_posix.c:29>:
                                    va_start()
                                    va_arg()
                                    va_end()
                                    open()
                                ERR()
                                util_fd_get_size() <ssize_t util_fd_get_size (int fd) at common/file.c:157>:
                                    LOG()
                                    pmem2_source_from_fd() <int pmem2_source_from_fd (struct pmem2_source **src, int fd) at libpmem2/source_posix.c:19>:
                                        PMEM2_ERR_CLR()
                                        fcntl()
                                        ERR()
                                        os_fstat()
                                        pmem2_get_type_from_stat() <int pmem2_get_type_from_stat (const os_stat_t *st, enum pmem2_file_type *type) at libpmem2/pmem2_utils_linux.c:23>:
                                            S_ISREG()
                                            S_ISDIR()
                                            S_ISCHR()
                                            ERR()
                                            util_snprintf() <int util_snprintf (char *str, size_t size, const char *format, ...) at core/util.c:434>:
                                                va_start()
                                                vsnprintf()
                                                va_end()
                                            os_major()
                                            os_minor()
                                            ASSERTinfo()
                                            LOG()
                                            realpath()
                                            strrchr()
                                            strcmp()
                                        pmem2_malloc() <void *pmem2_malloc (size_t size, int *err) at libpmem2/pmem2_utils.c:19>:
                                            Malloc()
                                            ERR()
                                        ASSERTne()
                                    pmem2_err_to_errno() <int pmem2_err_to_errno (int err) at libpmem2/pmem2_utils.c:67>:
                                        FATAL()
                                    pmem2_source_size() <int pmem2_source_size (const struct pmem2_source *src, size_t *size) at libpmem2/source_posix.c:90>:
                                        LOG()
                                        PMEM2_ERR_CLR()
                                        ASSERT()
                                        os_fstat()
                                        ERR()
                                        pmem2_device_dax_size() <int pmem2_device_dax_size (const struct pmem2_source *src, size_t *size) at libpmem2/pmem2_utils_ndctl.c:58>:
                                            ndctl_new()
                                            ERR()
                                            pmem2_region_namespace() <int pmem2_region_namespace (struct ndctl_ctx *ctx, const struct pmem2_source *src, struct ndctl_region **pregion, struct ndctl_namespace **pndns) at libpmem2/region_namespace_ndctl.c:131>:
                                                LOG()
                                                ERR()
                                                FOREACH_BUS_REGION_NAMESPACE()
                                                ndctl_namespace_get_dax()
                                                ASSERTeq()
                                                ndctl_dax_get_daxctl_region()
                                                daxctl_dev_foreach()
                                                daxctl_dev_get_devname()
                                                ndctl_match_devdax() <int ndctl_match_devdax (dev_t st_rdev, const char *devname) at libpmem2/region_namespace_ndctl.c:26>:
                                                    LOG()
                                                    stat()
                                                    util_snprintf() <int util_snprintf (char *str, size_t size, const char *format, ...) at core/util.c:434>:
                                                        va_start()
                                                        vsnprintf()
                                                        va_end()
                                                    ERR()
                                                    os_stat() <int os_stat (const char *pathname, os_stat_t *buf) at core/os_posix.c:79>:
                                                        stat()
                                                ndctl_namespace_get_btt()
                                                ndctl_btt_get_block_device()
                                                ndctl_namespace_get_pfn()
                                                ndctl_pfn_get_block_device()
                                                ndctl_namespace_get_block_device()
                                                ndctl_match_fsdax() <int ndctl_match_fsdax (dev_t st_dev, const char *devname) at libpmem2/region_namespace_ndctl.c:64>:
                                                    LOG()
                                                    util_snprintf() <int util_snprintf (char *str, size_t size, const char *format, ...) at core/util.c:434>:
                                                        va_start()
                                                        vsnprintf()
                                                        va_end()
                                                    ERR()
                                                    major()
                                                    minor()
                                                    os_open() <int os_open (const char *pathname, int flags, ...) at core/os_posix.c:29>:
                                                        va_start()
                                                        va_arg()
                                                        va_end()
                                                        open()
                                                    read()
                                                    os_close()
                                                    strcmp()
                                            LOG()
                                            ndctl_namespace_get_dax()
                                            ndctl_dax_get_size()
                                            ndctl_unref()
                                        FATAL()
                                    pmem2_source_delete() <int pmem2_source_delete (struct pmem2_source **src) at libpmem2/source.c:30>:
                                        Free() <Free_func Free at core/alloc.c:91>
                                    ERR()
                                out() <void out (const char *fmt, ...) at core/out.c:480>:
                                    va_start()
                                    out_common() <} void out_common (const char *file, int line, const char *func, int level, const char *suffix, const char *fmt, va_list ap) at core/out.c:334>
                                    va_end()
                                util_map() <void *util_map (int fd, os_off_t off, size_t len, int flags, int rdonly, size_t req_align, int *map_sync) at common/mmap.c:85>:
                                    LOG()
                                    util_map_hint() <char *util_map_hint (size_t len, size_t req_align) at common/mmap_posix.c:118>:
                                        LOG()
                                        util_map_hint_align()
                                        util_map_hint_unused() <char *util_map_hint_unused (void *minaddr, size_t len, size_t align) at common/mmap_posix.c:36>:
                                            LOG()
                                            ASSERT()
                                            os_fopen() <FILE *os_fopen (const char *pathname, const char *mode) at core/os_posix.c:106>:
                                                fopen()
                                            ERR()
                                            roundup()
                                            fgets()
                                            sscanf()
                                            fclose()
                                        mmap()
                                        ERR()
                                        roundup()
                                        munmap()
                                    ASSERTeq()
                                    util_map_sync() <void *util_map_sync (void *addr, size_t len, int proto, int flags, int fd, os_off_t offset, int *map_sync) at common/mmap_posix.c:159>:
                                        LOG()
                                        mmap()
                                    ERR()
                                memset()
                                util_unmap() <int util_unmap (void *addr, size_t len) at common/mmap.c:120>:
                                    LOG()
                                    munmap()
                                    ERR()
                                os_close()
                            os_unlink() <int os_unlink (const char *pathname) at core/os_posix.c:88>:
                                unlink()
                        ERR()
                    util_poolset_free() <void util_poolset_free (struct pool_set *set) at common/set.c:312>:
                        LOG()
                        Free() <Free_func Free at core/alloc.c:91>
                        VEC_FOREACH_BY_PTR()
                        VEC_DELETE()
    PMEMOBJ_API_END()
pmemobj_reserve() <PMEMoid pmemobj_reserve (PMEMobjpool *pop, struct pobj_action *act, size_t size, uint64_t type_num) at libpmemobj/obj.c:2520>:
    LOG()
    PMEMOBJ_API_START()
    palloc_reserve() <int palloc_reserve (struct palloc_heap *heap, size_t size, palloc_constr constructor, void *arg, uint64_t extra_field, uint16_t object_flags, uint16_t class_id, uint16_t arena_id, struct pobj_action *act) at libpmemobj/palloc.c:592>:
        COMPILE_ERROR_ON()
        palloc_reservation_create() <int palloc_reservation_create (struct palloc_heap *heap, size_t size, palloc_constr constructor, void *arg, uint64_t extra_field, uint16_t object_flags, uint16_t class_id, uint16_t arena_id, struct pobj_action_internal *out) at libpmemobj/palloc.c:178>:
            ASSERT()
            heap_get_best_class() <struct alloc_class *heap_get_best_class (struct palloc_heap *heap, size_t size) at libpmemobj/heap.c:221>:
                alloc_class_by_alloc_size() <struct alloc_class *alloc_class_by_alloc_size (struct alloc_class_collection *ac, size_t size) at libpmemobj/alloc_class.c:568>:
                    SIZE_TO_CLASS_MAP_INDEX()
                    alloc_class_assign_by_size() <struct alloc_class *alloc_class_assign_by_size (struct alloc_class_collection *ac, size_t size) at libpmemobj/alloc_class.c:538>:
                        LOG()
                        SIZE_TO_CLASS_MAP_INDEX()
                        alloc_class_find_min_frag() <struct alloc_class *alloc_class_find_min_frag (struct alloc_class_collection *ac, size_t n) at libpmemobj/alloc_class.c:340>:
                            LOG()
                            ASSERTne()
                        ASSERTne()
                        util_bool_compare_and_swap64()
            alloc_class_by_id() <struct alloc_class *alloc_class_by_id (struct alloc_class_collection *ac, uint8_t id) at libpmemobj/alloc_class.c:612>
            heap_alloc_classes() <struct alloc_class_collection *heap_alloc_classes (struct palloc_heap *heap) at libpmemobj/heap.c:160>:
            ERR()
            alloc_class_calc_size_idx() <ssize_t alloc_class_calc_size_idx (struct alloc_class *c, size_t size) at libpmemobj/alloc_class.c:621>:
                CALC_SIZE_IDX()
            heap_bucket_acquire() <struct bucket *heap_bucket_acquire (struct palloc_heap *heap, uint8_t class_id, uint16_t arena_id) at libpmemobj/heap.c:470>:
                out() <void out (const char *fmt, ...) at core/out.c:480>:
                    va_start()
                    out_common() <} void out_common (const char *file, int line, const char *func, int level, const char *suffix, const char *fmt, va_list ap) at core/out.c:334>
                    va_end()
                heap_thread_arena() <struct arena *heap_thread_arena (struct palloc_heap *heap) at libpmemobj/heap.c:414>:
                    os_tls_get() <void *os_tls_get (os_tls_key_t key) at core/os_thread_posix.c:62>:
                        pthread_getspecific()
                    heap_thread_arena_assign() <struct arena *heap_thread_arena_assign (struct palloc_heap *heap) at libpmemobj/heap.c:381>:
                        util_mutex_lock()
                        ASSERTne()
                        VEC_SIZE()
                        VEC_FOREACH()
                        LOG()
                        heap_arena_thread_attach() <void heap_arena_thread_attach (struct palloc_heap *heap, struct arena *a) at libpmemobj/heap.c:249>:
                            ASSERTeq()
                            os_tls_get() <void *os_tls_get (os_tls_key_t key) at core/os_thread_posix.c:62>:
                                pthread_getspecific()
                            heap_arena_thread_detach() <void heap_arena_thread_detach (struct arena *a) at libpmemobj/heap.c:232>:
                                util_fetch_and_sub64()
                            ASSERTne()
                            util_fetch_and_add64()
                            os_tls_set() <int os_tls_set (os_tls_key_t key, const void *value) at core/os_thread_posix.c:53>:
                                pthread_setspecific()
                        util_mutex_unlock()
                    heap_global_arena_assign() <struct arena *heap_global_arena_assign (struct palloc_heap *heap) at libpmemobj/heap.c:348>:
                        util_mutex_lock()
                        ASSERTne()
                        VEC_SIZE()
                        VEC_FOREACH()
                        LOG()
                        util_mutex_unlock()
                    ASSERT()
                    ASSERTne()
                ASSERTne()
                VEC_ARR()
                bucket_acquire() <struct bucket *bucket_acquire (struct bucket_locked *b) at libpmemobj/bucket.c:117>:
                    util_mutex_lock()
            heap_get_bestfit_block() <int heap_get_bestfit_block (struct palloc_heap *heap, struct bucket *b, struct memory_block *m) at libpmemobj/heap.c:1210> (R):
                bucket_alloc_class() <struct alloc_class *bucket_alloc_class (struct bucket *b) at libpmemobj/bucket.c:152>
                bucket_alloc_block() <int bucket_alloc_block (struct bucket *b, struct memory_block *m_out) at libpmemobj/bucket.c:187>
                heap_ensure_huge_bucket_filled() <int heap_ensure_huge_bucket_filled (struct palloc_heap *heap, struct bucket *bucket) at libpmemobj/heap.c:943>:
                    heap_reclaim_garbage() <int heap_reclaim_garbage (struct palloc_heap *heap, struct bucket *bucket) at libpmemobj/heap.c:923>:
                        heap_recycle_unused() <int heap_recycle_unused (struct palloc_heap *heap, struct recycler *recycler, struct bucket *defb, int force) at libpmemobj/heap.c:894>:
                            recycler_recalc() <struct empty_runs recycler_recalc (struct recycler *r, int force) at libpmemobj/recycler.c:207>:
                                VEC_INIT()
                                util_atomic_load64()
                                util_mutex_trylock()
                                ravl_find() <struct ravl_node *ravl_find (struct ravl *ravl, const void *data, enum ravl_predicate flags) at core/ravl.c:524>:
                                    LOG()
                                    ravl_data() <void *ravl_data (struct ravl_node *node) at core/ravl.c:571>:
                                        memcpy()
                                    ravl_predicate_holds() <int ravl_predicate_holds (int result, struct ravl_node **ret, struct ravl_node *n, enum ravl_predicate flags) at core/ravl.c:489>:
                                        ravl_node_successor() <struct ravl_node *ravl_node_successor (struct ravl_node *n) at core/ravl.c:465>:
                                            ravl_node_cessor() <struct ravl_node *ravl_node_cessor (struct ravl_node *n, enum ravl_slot_type t) at core/ravl.c:443>:
                                                ravl_node_type_most() <struct ravl_node *ravl_node_type_most (struct ravl_node *n, enum ravl_slot_type t) at core/ravl.c:430>:
                                                ravl_slot_opposite() <enum ravl_slot_type ravl_slot_opposite (enum ravl_slot_type t) at core/ravl.c:184>:
                                                    ASSERTne()
                                        ravl_node_predecessor() <struct ravl_node *ravl_node_predecessor (struct ravl_node *n) at core/ravl.c:476>:
                                            ravl_node_cessor() <struct ravl_node *ravl_node_cessor (struct ravl_node *n, enum ravl_slot_type t) at core/ravl.c:443>:
                                                ravl_node_type_most() <struct ravl_node *ravl_node_type_most (struct ravl_node *n, enum ravl_slot_type t) at core/ravl.c:430>:
                                                ravl_slot_opposite() <enum ravl_slot_type ravl_slot_opposite (enum ravl_slot_type t) at core/ravl.c:184>:
                                                    ASSERTne()
                                ravl_data() <void *ravl_data (struct ravl_node *node) at core/ravl.c:571>:
                                    memcpy()
                                memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                    memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                        heap_get_chunk_hdr()
                                    memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                        heap_get_chunk_hdr()
                                        FATAL()
                                recycler_element_new() <struct recycler_element recycler_element_new (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/recycler.c:122>:
                                    SUPPRESS_UNUSED()
                                    util_mutex_lock()
                                    util_mutex_unlock()
                                ASSERT()
                                util_fetch_and_sub64()
                                MIN()
                                ravl_remove() <void ravl_remove (struct ravl *ravl, struct ravl_node *n) at core/ravl.c:545> (R):
                                    LOG()
                                    ravl_node_successor() <struct ravl_node *ravl_node_successor (struct ravl_node *n) at core/ravl.c:465>:
                                        ravl_node_cessor() <struct ravl_node *ravl_node_cessor (struct ravl_node *n, enum ravl_slot_type t) at core/ravl.c:443>:
                                            ravl_node_type_most() <struct ravl_node *ravl_node_type_most (struct ravl_node *n, enum ravl_slot_type t) at core/ravl.c:430>:
                                            ravl_slot_opposite() <enum ravl_slot_type ravl_slot_opposite (enum ravl_slot_type t) at core/ravl.c:184>:
                                                ASSERTne()
                                    memcpy()
                                    ravl_remove() <void ravl_remove (struct ravl *ravl, struct ravl_node *n) at core/ravl.c:545> (recursive: see 25781)
                                    ravl_node_ref() <struct ravl_node **ravl_node_ref (struct ravl *ravl, struct ravl_node *n) at core/ravl.c:223>:
                                        ravl_node_slot_type() <enum ravl_slot_type ravl_node_slot_type (struct ravl_node *n) at core/ravl.c:196>:
                                    Free() <Free_func Free at core/alloc.c:91>
                                VEC_PUSH_BACK()
                                VEC_FOREACH_BY_PTR()
                                ravl_emplace_copy() <int ravl_emplace_copy (struct ravl *ravl, const void *data) at core/ravl.c:384>:
                                    ravl_emplace() <int ravl_emplace (struct ravl *ravl, ravl_constr constr, const void *arg) at core/ravl.c:393>:
                                        LOG()
                                        ravl_new_node() <struct ravl_node *ravl_new_node (struct ravl *ravl, ravl_constr constr, const void *arg) at core/ravl.c:161>:
                                            Malloc()
                                            ERR()
                                            ravl_node_insert_constructor() <void ravl_node_insert_constructor (void *data, size_t data_size, const void *arg) at core/ravl.c:139>:
                                                SUPPRESS_UNUSED()
                                                memcpy()
                                        ravl_data() <void *ravl_data (struct ravl_node *node) at core/ravl.c:571>:
                                            memcpy()
                                        ravl_balance() <void ravl_balance (struct ravl *ravl, struct ravl_node *n) at core/ravl.c:337>:
                                            ravl_node_is() <int ravl_node_is (struct ravl_node *n, int i, int j) at core/ravl.c:306>:
                                                ravl_node_is_i_j() <int ravl_node_is_i_j (struct ravl_node *n, int i, int j) at core/ravl.c:296>:
                                                    ravl_node_rank_difference_parent() <int ravl_node_rank_difference_parent (struct ravl_node *p, struct ravl_node *n) at core/ravl.c:275>:
                                                        ravl_node_rank() <int ravl_node_rank (struct ravl_node *n) at core/ravl.c:261>:
                                            ravl_node_promote() <void ravl_node_promote (struct ravl_node *n) at core/ravl.c:315>
                                            ravl_node_sibling() <struct ravl_node *ravl_node_sibling (struct ravl_node *n) at core/ravl.c:209>:
                                                ravl_node_slot_type() <enum ravl_slot_type ravl_node_slot_type (struct ravl_node *n) at core/ravl.c:196>:
                                            ravl_node_rank_difference() <int ravl_node_rank_difference (struct ravl_node *n) at core/ravl.c:287>:
                                                ravl_node_rank_difference_parent() <int ravl_node_rank_difference_parent (struct ravl_node *p, struct ravl_node *n) at core/ravl.c:275>:
                                                    ravl_node_rank() <int ravl_node_rank (struct ravl_node *n) at core/ravl.c:261>:
                                            ravl_node_rank_difference_parent() <int ravl_node_rank_difference_parent (struct ravl_node *p, struct ravl_node *n) at core/ravl.c:275>:
                                                ravl_node_rank() <int ravl_node_rank (struct ravl_node *n) at core/ravl.c:261>:
                                            ravl_slot_opposite() <enum ravl_slot_type ravl_slot_opposite (enum ravl_slot_type t) at core/ravl.c:184>:
                                                ASSERTne()
                                            ravl_node_slot_type() <enum ravl_slot_type ravl_node_slot_type (struct ravl_node *n) at core/ravl.c:196>:
                                            ravl_rotate() <void ravl_rotate (struct ravl *ravl, struct ravl_node *n) at core/ravl.c:237>:
                                                ASSERTne()
                                                ravl_node_ref() <struct ravl_node **ravl_node_ref (struct ravl *ravl, struct ravl_node *n) at core/ravl.c:223>:
                                                    ravl_node_slot_type() <enum ravl_slot_type ravl_node_slot_type (struct ravl_node *n) at core/ravl.c:196>:
                                                ravl_node_slot_type() <enum ravl_slot_type ravl_node_slot_type (struct ravl_node *n) at core/ravl.c:196>:
                                                ravl_slot_opposite() <enum ravl_slot_type ravl_slot_opposite (enum ravl_slot_type t) at core/ravl.c:184>:
                                                    ASSERTne()
                                            ravl_node_demote() <void ravl_node_demote (struct ravl_node *n) at core/ravl.c:324>:
                                                ASSERT()
                                        Free() <Free_func Free at core/alloc.c:91>
                                    ravl_node_copy_constructor() <void ravl_node_copy_constructor (void *data, size_t data_size, const void *arg) at core/ravl.c:152>:
                                        memcpy()
                                VEC_CLEAR()
                                util_mutex_unlock()
                            VEC_SIZE()
                            heap_bucket_acquire() <struct bucket *heap_bucket_acquire (struct palloc_heap *heap, uint8_t class_id, uint16_t arena_id) at libpmemobj/heap.c:470>:
                                out() <void out (const char *fmt, ...) at core/out.c:480>:
                                    va_start()
                                    out_common() <} void out_common (const char *file, int line, const char *func, int level, const char *suffix, const char *fmt, va_list ap) at core/out.c:334>
                                    va_end()
                                heap_thread_arena() <struct arena *heap_thread_arena (struct palloc_heap *heap) at libpmemobj/heap.c:414>:
                                    os_tls_get() <void *os_tls_get (os_tls_key_t key) at core/os_thread_posix.c:62>:
                                        pthread_getspecific()
                                    heap_thread_arena_assign() <struct arena *heap_thread_arena_assign (struct palloc_heap *heap) at libpmemobj/heap.c:381>:
                                        util_mutex_lock()
                                        ASSERTne()
                                        VEC_SIZE()
                                        VEC_FOREACH()
                                        LOG()
                                        heap_arena_thread_attach() <void heap_arena_thread_attach (struct palloc_heap *heap, struct arena *a) at libpmemobj/heap.c:249>:
                                            ASSERTeq()
                                            os_tls_get() <void *os_tls_get (os_tls_key_t key) at core/os_thread_posix.c:62>:
                                                pthread_getspecific()
                                            heap_arena_thread_detach() <void heap_arena_thread_detach (struct arena *a) at libpmemobj/heap.c:232>:
                                                util_fetch_and_sub64()
                                            ASSERTne()
                                            util_fetch_and_add64()
                                            os_tls_set() <int os_tls_set (os_tls_key_t key, const void *value) at core/os_thread_posix.c:53>:
                                                pthread_setspecific()
                                        util_mutex_unlock()
                                    heap_global_arena_assign() <struct arena *heap_global_arena_assign (struct palloc_heap *heap) at libpmemobj/heap.c:348>:
                                        util_mutex_lock()
                                        ASSERTne()
                                        VEC_SIZE()
                                        VEC_FOREACH()
                                        LOG()
                                        util_mutex_unlock()
                                    ASSERT()
                                    ASSERTne()
                                ASSERTne()
                                VEC_ARR()
                                bucket_acquire() <struct bucket *bucket_acquire (struct bucket_locked *b) at libpmemobj/bucket.c:117>:
                                    util_mutex_lock()
                            ASSERT()
                            VEC_FOREACH_BY_PTR()
                            heap_run_into_free_chunk() <void heap_run_into_free_chunk (struct palloc_heap *heap, struct bucket *bucket, struct memory_block *m) at libpmemobj/heap.c:697>:
                                heap_get_chunk_hdr()
                                STATS_SUB()
                                util_mutex_lock()
                                memblock_huge_init() <struct memory_block memblock_huge_init (struct palloc_heap *heap, uint32_t chunk_id, uint32_t zone_id, uint32_t size_idx) at libpmemobj/memblock.c:1329>:
                                    heap_get_chunk_hdr()
                                    VALGRIND_DO_MAKE_MEM_UNDEFINED()
                                    VALGRIND_ANNOTATE_NEW_MEMORY()
                                    chunk_get_chunk_hdr_value() <uint64_t chunk_get_chunk_hdr_value (uint16_t type, uint16_t flags, uint32_t size_idx) at libpmemobj/memblock.c:604>:
                                        COMPILE_ERROR_ON()
                                        memcpy()
                                    util_atomic_store_explicit64()
                                    pmemops_persist()
                                    huge_write_footer() <void huge_write_footer (struct chunk_header *hdr, uint32_t size_idx) at libpmemobj/memblock.c:1166>:
                                        VALGRIND_DO_MAKE_MEM_UNDEFINED()
                                        VALGRIND_SET_CLEAN()
                                    memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                        memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                            heap_get_chunk_hdr()
                                        memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                            heap_get_chunk_hdr()
                                            FATAL()
                                heap_free_chunk_reuse() <int heap_free_chunk_reuse (struct palloc_heap *heap, struct bucket *bucket, struct memory_block *m) at libpmemobj/heap.c:674>:
                                    heap_coalesce_huge() <struct memory_block heap_coalesce_huge (struct palloc_heap *heap, struct bucket *b, const struct memory_block *m) at libpmemobj/heap.c:650>:
                                        heap_get_adjacent_free_block() <int heap_get_adjacent_free_block (struct palloc_heap *heap, const struct memory_block *in, struct memory_block *out, int prev) at libpmemobj/heap.c:582>:
                                            ZID_TO_ZONE()
                                            memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                                memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                                    heap_get_chunk_hdr()
                                                memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                                    heap_get_chunk_hdr()
                                                    FATAL()
                                        bucket_remove_block() <int bucket_remove_block (struct bucket *b, const struct memory_block *m) at libpmemobj/bucket.c:178>
                                        heap_coalesce() <struct memory_block heap_coalesce (struct palloc_heap *heap, const struct memory_block *blocks[], int n) at libpmemobj/heap.c:621>:
                                            ASSERTne()
                                            memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                                memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                                    heap_get_chunk_hdr()
                                                memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                                    heap_get_chunk_hdr()
                                                    FATAL()
                                    bucket_insert_block() <int bucket_insert_block (struct bucket *b, const struct memory_block *m) at libpmemobj/bucket.c:161>:
                                        VALGRIND_DO_MAKE_MEM_NOACCESS()
                                        VALGRIND_ANNOTATE_NEW_MEMORY()
                                util_mutex_unlock()
                            heap_bucket_release() <void heap_bucket_release (struct bucket *b) at libpmemobj/heap.c:498>:
                                bucket_release() <void bucket_release (struct bucket *b) at libpmemobj/bucket.c:127>:
                                    util_mutex_unlock()
                            VEC_DELETE()
                    heap_populate_bucket() <int heap_populate_bucket (struct palloc_heap *heap, struct bucket *bucket) at libpmemobj/heap.c:850>:
                        util_atomic_store_explicit32()
                        ZID_TO_ZONE()
                        VALGRIND_ADD_TO_GLOBAL_TX_IGNORE()
                        heap_zone_init() <void heap_zone_init (struct palloc_heap *heap, uint32_t zone_id, uint32_t first_chunk_id) at libpmemobj/heap.c:559>:
                            ZID_TO_ZONE()
                            zone_calc_size_idx() <uint32_t zone_calc_size_idx (uint32_t zone_id, unsigned max_zone, size_t heap_size) at libpmemobj/heap.c:533>:
                                ASSERT()
                            ASSERT()
                            memblock_huge_init() <struct memory_block memblock_huge_init (struct palloc_heap *heap, uint32_t chunk_id, uint32_t zone_id, uint32_t size_idx) at libpmemobj/memblock.c:1329>:
                                heap_get_chunk_hdr()
                                VALGRIND_DO_MAKE_MEM_UNDEFINED()
                                VALGRIND_ANNOTATE_NEW_MEMORY()
                                chunk_get_chunk_hdr_value() <uint64_t chunk_get_chunk_hdr_value (uint16_t type, uint16_t flags, uint32_t size_idx) at libpmemobj/memblock.c:604>:
                                    COMPILE_ERROR_ON()
                                    memcpy()
                                util_atomic_store_explicit64()
                                pmemops_persist()
                                huge_write_footer() <void huge_write_footer (struct chunk_header *hdr, uint32_t size_idx) at libpmemobj/memblock.c:1166>:
                                    VALGRIND_DO_MAKE_MEM_UNDEFINED()
                                    VALGRIND_SET_CLEAN()
                                memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                    memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                        heap_get_chunk_hdr()
                                    memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                        heap_get_chunk_hdr()
                                        FATAL()
                            pmemops_persist()
                        heap_reclaim_zone_garbage() <void heap_reclaim_zone_garbage (struct palloc_heap *heap, struct bucket *bucket, uint32_t zone_id) at libpmemobj/heap.c:775>:
                            ZID_TO_ZONE()
                            ASSERT()
                            memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                    heap_get_chunk_hdr()
                                memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                    heap_get_chunk_hdr()
                                    FATAL()
                            heap_reclaim_run() <int heap_reclaim_run (struct palloc_heap *heap, struct memory_block *m, int startup) at libpmemobj/heap.c:733>:
                                heap_get_chunk_run()
                                heap_get_chunk_hdr()
                                alloc_class_by_run() <struct alloc_class *alloc_class_by_run (struct alloc_class_collection *ac, size_t unit_size, uint16_t flags, uint32_t size_idx) at libpmemobj/alloc_class.c:594>:
                                    SIZE_TO_CLASS_MAP_INDEX()
                                    ASSERT()
                                    critnib_get() <void *critnib_get (struct critnib *c, uint64_t key) at libpmemobj/critnib.c:515>:
                                        load() <void load (void *src, void *dst) at libpmemobj/critnib.c:130>:
                                            util_atomic_load_explicit64()
                                        is_leaf() <inline bool is_leaf (struct critnib_node *n) at libpmemobj/critnib.c:150>:
                                        slice_index() <inline unsigned slice_index (uint64_t key, sh_t shift) at libpmemobj/critnib.c:178>:
                                        to_leaf() <inline struct critnib_leaf *to_leaf (struct critnib_node *n) at libpmemobj/critnib.c:159>:
                                    RUN_CLASS_KEY_PACK()
                                recycler_element_new() <struct recycler_element recycler_element_new (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/recycler.c:122>:
                                    SUPPRESS_UNUSED()
                                    util_mutex_lock()
                                    util_mutex_unlock()
                                ASSERTeq()
                                STATS_INC()
                                heap_get_recycler() <struct recycler *heap_get_recycler (struct palloc_heap *heap, size_t id, size_t nallocs) at libpmemobj/heap.c:106> (R):
                                    util_atomic_load_explicit64()
                                    recycler_new() <struct recycler *recycler_new (struct palloc_heap *heap, size_t nallocs, size_t *peak_arenas) at libpmemobj/recycler.c:74>:
                                        Malloc()
                                        ravl_new_sized() <struct ravl *ravl_new_sized (ravl_compare *compare, size_t data_size) at core/ravl.c:45>:
                                            Malloc()
                                            ERR()
                                        recycler_element_cmp() <int recycler_element_cmp (const void *lhs, const void *rhs) at libpmemobj/recycler.c:23>:
                                        memset()
                                        VEC_INIT()
                                        util_mutex_init()
                                        Free() <Free_func Free at core/alloc.c:91>
                                    util_bool_compare_and_swap64()
                                    recycler_delete() <void recycler_delete (struct recycler *r) at libpmemobj/recycler.c:107>:
                                        VEC_DELETE()
                                        util_mutex_destroy()
                                        ravl_delete() <void ravl_delete (struct ravl *ravl) at core/ravl.c:112>:
                                            ravl_delete_cb() <void ravl_delete_cb (struct ravl *ravl, ravl_cb cb, void *arg) at core/ravl.c:102>:
                                                ravl_foreach_node() <void ravl_foreach_node (struct ravl_node *n, ravl_cb cb, void *arg, int free_node) at core/ravl.c:74> (R):
                                                    ravl_foreach_node() <void ravl_foreach_node (struct ravl_node *n, ravl_cb cb, void *arg, int free_node) at core/ravl.c:74> (recursive: see 26000)
                                                    Free() <Free_func Free at core/alloc.c:91>
                                                Free() <Free_func Free at core/alloc.c:91>
                                        Free() <Free_func Free at core/alloc.c:91>
                                    heap_get_recycler() <struct recycler *heap_get_recycler (struct palloc_heap *heap, size_t id, size_t nallocs) at libpmemobj/heap.c:106> (recursive: see 25982)
                                recycler_put() <int recycler_put (struct recycler *r, struct recycler_element element) at libpmemobj/recycler.c:154>:
                                    util_mutex_lock()
                                    ravl_emplace_copy() <int ravl_emplace_copy (struct ravl *ravl, const void *data) at core/ravl.c:384>:
                                        ravl_emplace() <int ravl_emplace (struct ravl *ravl, ravl_constr constr, const void *arg) at core/ravl.c:393>:
                                            LOG()
                                            ravl_new_node() <struct ravl_node *ravl_new_node (struct ravl *ravl, ravl_constr constr, const void *arg) at core/ravl.c:161>:
                                                Malloc()
                                                ERR()
                                                ravl_node_insert_constructor() <void ravl_node_insert_constructor (void *data, size_t data_size, const void *arg) at core/ravl.c:139>:
                                                    SUPPRESS_UNUSED()
                                                    memcpy()
                                            ravl_data() <void *ravl_data (struct ravl_node *node) at core/ravl.c:571>:
                                                memcpy()
                                            ravl_balance() <void ravl_balance (struct ravl *ravl, struct ravl_node *n) at core/ravl.c:337>:
                                                ravl_node_is() <int ravl_node_is (struct ravl_node *n, int i, int j) at core/ravl.c:306>:
                                                    ravl_node_is_i_j() <int ravl_node_is_i_j (struct ravl_node *n, int i, int j) at core/ravl.c:296>:
                                                        ravl_node_rank_difference_parent() <int ravl_node_rank_difference_parent (struct ravl_node *p, struct ravl_node *n) at core/ravl.c:275>:
                                                            ravl_node_rank() <int ravl_node_rank (struct ravl_node *n) at core/ravl.c:261>:
                                                ravl_node_promote() <void ravl_node_promote (struct ravl_node *n) at core/ravl.c:315>
                                                ravl_node_sibling() <struct ravl_node *ravl_node_sibling (struct ravl_node *n) at core/ravl.c:209>:
                                                    ravl_node_slot_type() <enum ravl_slot_type ravl_node_slot_type (struct ravl_node *n) at core/ravl.c:196>:
                                                ravl_node_rank_difference() <int ravl_node_rank_difference (struct ravl_node *n) at core/ravl.c:287>:
                                                    ravl_node_rank_difference_parent() <int ravl_node_rank_difference_parent (struct ravl_node *p, struct ravl_node *n) at core/ravl.c:275>:
                                                        ravl_node_rank() <int ravl_node_rank (struct ravl_node *n) at core/ravl.c:261>:
                                                ravl_node_rank_difference_parent() <int ravl_node_rank_difference_parent (struct ravl_node *p, struct ravl_node *n) at core/ravl.c:275>:
                                                    ravl_node_rank() <int ravl_node_rank (struct ravl_node *n) at core/ravl.c:261>:
                                                ravl_slot_opposite() <enum ravl_slot_type ravl_slot_opposite (enum ravl_slot_type t) at core/ravl.c:184>:
                                                    ASSERTne()
                                                ravl_node_slot_type() <enum ravl_slot_type ravl_node_slot_type (struct ravl_node *n) at core/ravl.c:196>:
                                                ravl_rotate() <void ravl_rotate (struct ravl *ravl, struct ravl_node *n) at core/ravl.c:237>:
                                                    ASSERTne()
                                                    ravl_node_ref() <struct ravl_node **ravl_node_ref (struct ravl *ravl, struct ravl_node *n) at core/ravl.c:223>:
                                                        ravl_node_slot_type() <enum ravl_slot_type ravl_node_slot_type (struct ravl_node *n) at core/ravl.c:196>:
                                                    ravl_node_slot_type() <enum ravl_slot_type ravl_node_slot_type (struct ravl_node *n) at core/ravl.c:196>:
                                                    ravl_slot_opposite() <enum ravl_slot_type ravl_slot_opposite (enum ravl_slot_type t) at core/ravl.c:184>:
                                                        ASSERTne()
                                                ravl_node_demote() <void ravl_node_demote (struct ravl_node *n) at core/ravl.c:324>:
                                                    ASSERT()
                                            Free() <Free_func Free at core/alloc.c:91>
                                        ravl_node_copy_constructor() <void ravl_node_copy_constructor (void *data, size_t data_size, const void *arg) at core/ravl.c:152>:
                                            memcpy()
                                    util_mutex_unlock()
                                ERR()
                            heap_run_into_free_chunk() <void heap_run_into_free_chunk (struct palloc_heap *heap, struct bucket *bucket, struct memory_block *m) at libpmemobj/heap.c:697>:
                                heap_get_chunk_hdr()
                                STATS_SUB()
                                util_mutex_lock()
                                memblock_huge_init() <struct memory_block memblock_huge_init (struct palloc_heap *heap, uint32_t chunk_id, uint32_t zone_id, uint32_t size_idx) at libpmemobj/memblock.c:1329>:
                                    heap_get_chunk_hdr()
                                    VALGRIND_DO_MAKE_MEM_UNDEFINED()
                                    VALGRIND_ANNOTATE_NEW_MEMORY()
                                    chunk_get_chunk_hdr_value() <uint64_t chunk_get_chunk_hdr_value (uint16_t type, uint16_t flags, uint32_t size_idx) at libpmemobj/memblock.c:604>:
                                        COMPILE_ERROR_ON()
                                        memcpy()
                                    util_atomic_store_explicit64()
                                    pmemops_persist()
                                    huge_write_footer() <void huge_write_footer (struct chunk_header *hdr, uint32_t size_idx) at libpmemobj/memblock.c:1166>:
                                        VALGRIND_DO_MAKE_MEM_UNDEFINED()
                                        VALGRIND_SET_CLEAN()
                                    memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                        memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                            heap_get_chunk_hdr()
                                        memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                            heap_get_chunk_hdr()
                                            FATAL()
                                heap_free_chunk_reuse() <int heap_free_chunk_reuse (struct palloc_heap *heap, struct bucket *bucket, struct memory_block *m) at libpmemobj/heap.c:674>:
                                    heap_coalesce_huge() <struct memory_block heap_coalesce_huge (struct palloc_heap *heap, struct bucket *b, const struct memory_block *m) at libpmemobj/heap.c:650>:
                                        heap_get_adjacent_free_block() <int heap_get_adjacent_free_block (struct palloc_heap *heap, const struct memory_block *in, struct memory_block *out, int prev) at libpmemobj/heap.c:582>:
                                            ZID_TO_ZONE()
                                            memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                                memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                                    heap_get_chunk_hdr()
                                                memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                                    heap_get_chunk_hdr()
                                                    FATAL()
                                        bucket_remove_block() <int bucket_remove_block (struct bucket *b, const struct memory_block *m) at libpmemobj/bucket.c:178>
                                        heap_coalesce() <struct memory_block heap_coalesce (struct palloc_heap *heap, const struct memory_block *blocks[], int n) at libpmemobj/heap.c:621>:
                                            ASSERTne()
                                            memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                                memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                                    heap_get_chunk_hdr()
                                                memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                                    heap_get_chunk_hdr()
                                                    FATAL()
                                    bucket_insert_block() <int bucket_insert_block (struct bucket *b, const struct memory_block *m) at libpmemobj/bucket.c:161>:
                                        VALGRIND_DO_MAKE_MEM_NOACCESS()
                                        VALGRIND_ANNOTATE_NEW_MEMORY()
                                util_mutex_unlock()
                            heap_free_chunk_reuse() <int heap_free_chunk_reuse (struct palloc_heap *heap, struct bucket *bucket, struct memory_block *m) at libpmemobj/heap.c:674>:
                                heap_coalesce_huge() <struct memory_block heap_coalesce_huge (struct palloc_heap *heap, struct bucket *b, const struct memory_block *m) at libpmemobj/heap.c:650>:
                                    heap_get_adjacent_free_block() <int heap_get_adjacent_free_block (struct palloc_heap *heap, const struct memory_block *in, struct memory_block *out, int prev) at libpmemobj/heap.c:582>:
                                        ZID_TO_ZONE()
                                        memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                            memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                                heap_get_chunk_hdr()
                                            memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                                heap_get_chunk_hdr()
                                                FATAL()
                                    bucket_remove_block() <int bucket_remove_block (struct bucket *b, const struct memory_block *m) at libpmemobj/bucket.c:178>
                                    heap_coalesce() <struct memory_block heap_coalesce (struct palloc_heap *heap, const struct memory_block *blocks[], int n) at libpmemobj/heap.c:621>:
                                        ASSERTne()
                                        memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                            memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                                heap_get_chunk_hdr()
                                            memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                                heap_get_chunk_hdr()
                                                FATAL()
                                bucket_insert_block() <int bucket_insert_block (struct bucket *b, const struct memory_block *m) at libpmemobj/bucket.c:161>:
                                    VALGRIND_DO_MAKE_MEM_NOACCESS()
                                    VALGRIND_ANNOTATE_NEW_MEMORY()
                    heap_extend() <int heap_extend (struct palloc_heap *heap, struct bucket *b, size_t size) at libpmemobj/heap.c:1515>:
                        util_pool_extend() <void *util_pool_extend (struct pool_set *set, size_t *size, size_t minpartsize) at common/set.c:2231>:
                            LOG()
                            ERR()
                            util_poolset_append_new_part() <int util_poolset_append_new_part (struct pool_set *set, size_t size) at common/set.c:2174>:
                                LOG()
                                VEC_SIZE()
                                VEC_GET()
                                strlen()
                                Malloc()
                                ERR()
                                snprintf()
                                util_replica_add_part() <int util_replica_add_part (struct pool_replica **repp, const char *path, size_t filesize) at common/set.c:708>:
                                    LOG()
                                    util_replica_add_part_by_idx() <int util_replica_add_part_by_idx (struct pool_replica **repp, const char *path, size_t filesize, unsigned p) at common/set.c:662>:
                                        LOG()
                                        util_replica_reserve() <int util_replica_reserve (struct pool_replica **repp, unsigned n) at common/set.c:633>:
                                            LOG()
                                            Realloc()
                                            ERR()
                                            memset()
                                        ASSERTne()
                                        util_file_get_type() <enum file_type util_file_get_type (const char *path) at common/file.c:106>:
                                            LOG()
                                            ERR()
                                            util_file_exists() <int util_file_exists (const char *path) at common/file.c:32>:
                                                LOG()
                                                os_access() <int os_access (const char *pathname, int mode) at core/os_posix.c:97>:
                                                    access()
                                                ERR()
                                            os_stat() <int os_stat (const char *pathname, os_stat_t *buf) at core/os_posix.c:79>:
                                                stat()
                                            util_stat_get_type() <enum file_type util_stat_get_type (const os_stat_t *st) at common/file.c:62>:
                                                pmem2_get_type_from_stat() <int pmem2_get_type_from_stat (const os_stat_t *st, enum pmem2_file_type *type) at libpmem2/pmem2_utils_linux.c:23>:
                                                    S_ISREG()
                                                    S_ISDIR()
                                                    S_ISCHR()
                                                    ERR()
                                                    util_snprintf() <int util_snprintf (char *str, size_t size, const char *format, ...) at core/util.c:434>:
                                                        va_start()
                                                        vsnprintf()
                                                        va_end()
                                                    os_major()
                                                    os_minor()
                                                    ASSERTinfo()
                                                    LOG()
                                                    realpath()
                                                    strrchr()
                                                    strcmp()
                                                pmem2_err_to_errno() <int pmem2_err_to_errno (int err) at libpmem2/pmem2_utils.c:67>:
                                                    FATAL()
                                                ASSERTinfo()
                                        util_file_device_dax_alignment() <size_t util_file_device_dax_alignment (const char *path) at common/file_posix.c:139>:
                                            LOG()
                                            device_dax_alignment() <size_t device_dax_alignment (const char *path) at common/file_posix.c:105>:
                                                LOG()
                                                os_open() <int os_open (const char *pathname, int flags, ...) at core/os_posix.c:29>:
                                                    va_start()
                                                    va_arg()
                                                    va_end()
                                                    open()
                                                pmem2_source_from_fd() <int pmem2_source_from_fd (struct pmem2_source **src, int fd) at libpmem2/source_posix.c:19>:
                                                    PMEM2_ERR_CLR()
                                                    fcntl()
                                                    ERR()
                                                    os_fstat()
                                                    pmem2_get_type_from_stat() <int pmem2_get_type_from_stat (const os_stat_t *st, enum pmem2_file_type *type) at libpmem2/pmem2_utils_linux.c:23>:
                                                        S_ISREG()
                                                        S_ISDIR()
                                                        S_ISCHR()
                                                        ERR()
                                                        util_snprintf() <int util_snprintf (char *str, size_t size, const char *format, ...) at core/util.c:434>:
                                                            va_start()
                                                            vsnprintf()
                                                            va_end()
                                                        os_major()
                                                        os_minor()
                                                        ASSERTinfo()
                                                        LOG()
                                                        realpath()
                                                        strrchr()
                                                        strcmp()
                                                    pmem2_malloc() <void *pmem2_malloc (size_t size, int *err) at libpmem2/pmem2_utils.c:19>:
                                                        Malloc()
                                                        ERR()
                                                    ASSERTne()
                                                pmem2_device_dax_alignment() <int pmem2_device_dax_alignment (const struct pmem2_source *src, size_t *alignment) at libpmem2/pmem2_utils_ndctl.c:18>:
                                                    ndctl_new()
                                                    ERR()
                                                    pmem2_region_namespace() <int pmem2_region_namespace (struct ndctl_ctx *ctx, const struct pmem2_source *src, struct ndctl_region **pregion, struct ndctl_namespace **pndns) at libpmem2/region_namespace_ndctl.c:131>:
                                                        LOG()
                                                        ERR()
                                                        FOREACH_BUS_REGION_NAMESPACE()
                                                        ndctl_namespace_get_dax()
                                                        ASSERTeq()
                                                        ndctl_dax_get_daxctl_region()
                                                        daxctl_dev_foreach()
                                                        daxctl_dev_get_devname()
                                                        ndctl_match_devdax() <int ndctl_match_devdax (dev_t st_rdev, const char *devname) at libpmem2/region_namespace_ndctl.c:26>:
                                                            LOG()
                                                            stat()
                                                            util_snprintf() <int util_snprintf (char *str, size_t size, const char *format, ...) at core/util.c:434>:
                                                                va_start()
                                                                vsnprintf()
                                                                va_end()
                                                            ERR()
                                                            os_stat() <int os_stat (const char *pathname, os_stat_t *buf) at core/os_posix.c:79>:
                                                                stat()
                                                        ndctl_namespace_get_btt()
                                                        ndctl_btt_get_block_device()
                                                        ndctl_namespace_get_pfn()
                                                        ndctl_pfn_get_block_device()
                                                        ndctl_namespace_get_block_device()
                                                        ndctl_match_fsdax() <int ndctl_match_fsdax (dev_t st_dev, const char *devname) at libpmem2/region_namespace_ndctl.c:64>:
                                                            LOG()
                                                            util_snprintf() <int util_snprintf (char *str, size_t size, const char *format, ...) at core/util.c:434>:
                                                                va_start()
                                                                vsnprintf()
                                                                va_end()
                                                            ERR()
                                                            major()
                                                            minor()
                                                            os_open() <int os_open (const char *pathname, int flags, ...) at core/os_posix.c:29>:
                                                                va_start()
                                                                va_arg()
                                                                va_end()
                                                                open()
                                                            read()
                                                            os_close()
                                                            strcmp()
                                                    LOG()
                                                    ndctl_namespace_get_dax()
                                                    ndctl_dax_get_align()
                                                    ndctl_unref()
                                                pmem2_source_delete() <int pmem2_source_delete (struct pmem2_source **src) at libpmem2/source.c:30>:
                                                    Free() <Free_func Free at core/alloc.c:91>
                                                os_close()
                                FATAL()
                                util_poolset_set_size() <void util_poolset_set_size (struct pool_set *set) at common/set.c:949>:
                                    LOG()
                                Free() <Free_func Free at core/alloc.c:91>
                            util_part_open() <int util_part_open (struct pool_set_part *part, size_t minsize, int create_part) at common/set.c:1459>:
                                LOG()
                                util_file_exists() <int util_file_exists (const char *path) at common/file.c:32>:
                                    LOG()
                                    os_access() <int os_access (const char *pathname, int mode) at core/os_posix.c:97>:
                                        access()
                                    ERR()
                                util_file_create() <int util_file_create (const char *path, size_t size, size_t minsize) at common/file.c:398>:
                                    LOG()
                                    ASSERTne()
                                    ERR()
                                    os_open() <int os_open (const char *pathname, int flags, ...) at core/os_posix.c:29>:
                                        va_start()
                                        va_arg()
                                        va_end()
                                        open()
                                    os_posix_fallocate() <int os_posix_fallocate (int fd, os_off_t offset, off_t len) at core/os_posix.c:142>:
                                        posix_fallocate()
                                    os_flock() <int os_flock (int fd, int operation) at core/os_posix.c:215>:
                                        flock()
                                    os_close()
                                    os_unlink() <int os_unlink (const char *pathname) at core/os_posix.c:88>:
                                        unlink()
                                util_file_open() <int util_file_open (const char *path, size_t *size, size_t minsize, int flags) at common/file.c:456>:
                                    LOG()
                                    os_open() <int os_open (const char *pathname, int flags, ...) at core/os_posix.c:29>:
                                        va_start()
                                        va_arg()
                                        va_end()
                                        open()
                                    ERR()
                                    os_flock() <int os_flock (int fd, int operation) at core/os_posix.c:215>:
                                        flock()
                                    os_close()
                                    ASSERTeq()
                                    util_fd_get_size() <ssize_t util_fd_get_size (int fd) at common/file.c:157>:
                                        LOG()
                                        pmem2_source_from_fd() <int pmem2_source_from_fd (struct pmem2_source **src, int fd) at libpmem2/source_posix.c:19>:
                                            PMEM2_ERR_CLR()
                                            fcntl()
                                            ERR()
                                            os_fstat()
                                            pmem2_get_type_from_stat() <int pmem2_get_type_from_stat (const os_stat_t *st, enum pmem2_file_type *type) at libpmem2/pmem2_utils_linux.c:23>:
                                                S_ISREG()
                                                S_ISDIR()
                                                S_ISCHR()
                                                ERR()
                                                util_snprintf() <int util_snprintf (char *str, size_t size, const char *format, ...) at core/util.c:434>:
                                                    va_start()
                                                    vsnprintf()
                                                    va_end()
                                                os_major()
                                                os_minor()
                                                ASSERTinfo()
                                                LOG()
                                                realpath()
                                                strrchr()
                                                strcmp()
                                            pmem2_malloc() <void *pmem2_malloc (size_t size, int *err) at libpmem2/pmem2_utils.c:19>:
                                                Malloc()
                                                ERR()
                                            ASSERTne()
                                        pmem2_err_to_errno() <int pmem2_err_to_errno (int err) at libpmem2/pmem2_utils.c:67>:
                                            FATAL()
                                        pmem2_source_size() <int pmem2_source_size (const struct pmem2_source *src, size_t *size) at libpmem2/source_posix.c:90>:
                                            LOG()
                                            PMEM2_ERR_CLR()
                                            ASSERT()
                                            os_fstat()
                                            ERR()
                                            pmem2_device_dax_size() <int pmem2_device_dax_size (const struct pmem2_source *src, size_t *size) at libpmem2/pmem2_utils_ndctl.c:58>:
                                                ndctl_new()
                                                ERR()
                                                pmem2_region_namespace() <int pmem2_region_namespace (struct ndctl_ctx *ctx, const struct pmem2_source *src, struct ndctl_region **pregion, struct ndctl_namespace **pndns) at libpmem2/region_namespace_ndctl.c:131>:
                                                    LOG()
                                                    ERR()
                                                    FOREACH_BUS_REGION_NAMESPACE()
                                                    ndctl_namespace_get_dax()
                                                    ASSERTeq()
                                                    ndctl_dax_get_daxctl_region()
                                                    daxctl_dev_foreach()
                                                    daxctl_dev_get_devname()
                                                    ndctl_match_devdax() <int ndctl_match_devdax (dev_t st_rdev, const char *devname) at libpmem2/region_namespace_ndctl.c:26>:
                                                        LOG()
                                                        stat()
                                                        util_snprintf() <int util_snprintf (char *str, size_t size, const char *format, ...) at core/util.c:434>:
                                                            va_start()
                                                            vsnprintf()
                                                            va_end()
                                                        ERR()
                                                        os_stat() <int os_stat (const char *pathname, os_stat_t *buf) at core/os_posix.c:79>:
                                                            stat()
                                                    ndctl_namespace_get_btt()
                                                    ndctl_btt_get_block_device()
                                                    ndctl_namespace_get_pfn()
                                                    ndctl_pfn_get_block_device()
                                                    ndctl_namespace_get_block_device()
                                                    ndctl_match_fsdax() <int ndctl_match_fsdax (dev_t st_dev, const char *devname) at libpmem2/region_namespace_ndctl.c:64>:
                                                        LOG()
                                                        util_snprintf() <int util_snprintf (char *str, size_t size, const char *format, ...) at core/util.c:434>:
                                                            va_start()
                                                            vsnprintf()
                                                            va_end()
                                                        ERR()
                                                        major()
                                                        minor()
                                                        os_open() <int os_open (const char *pathname, int flags, ...) at core/os_posix.c:29>:
                                                            va_start()
                                                            va_arg()
                                                            va_end()
                                                            open()
                                                        read()
                                                        os_close()
                                                        strcmp()
                                                LOG()
                                                ndctl_namespace_get_dax()
                                                ndctl_dax_get_size()
                                                ndctl_unref()
                                            FATAL()
                                        pmem2_source_delete() <int pmem2_source_delete (struct pmem2_source **src) at libpmem2/source.c:30>:
                                            Free() <Free_func Free at core/alloc.c:91>
                                        ERR()
                                os_posix_fallocate() <int os_posix_fallocate (int fd, os_off_t offset, off_t len) at core/os_posix.c:142>:
                                    posix_fallocate()
                                ERR()
                            util_map_part() <int util_map_part (struct pool_set_part *part, void *addr, size_t size, size_t offset, int flags, int rdonly) at common/set.c:229>:
                                LOG()
                                ASSERTeq()
                                ASSERT()
                                roundup()
                                util_map_sync() <void *util_map_sync (void *addr, size_t len, int proto, int flags, int fd, os_off_t offset, int *map_sync) at common/mmap_posix.c:159>:
                                    LOG()
                                    mmap()
                                ERR()
                                munmap()
                                VALGRIND_REGISTER_PMEM_MAPPING()
                                VALGRIND_REGISTER_PMEM_FILE()
                            util_poolset_chmod() <int util_poolset_chmod (struct pool_set *set, mode_t mode) at common/set.c:404>:
                                LOG()
                                os_fstat()
                                ERR()
                                os_chmod() <int os_chmod (const char *pathname, mode_t mode) at core/os_posix.c:124>:
                                    chmod()
                            util_poolset_fdclose() <void util_poolset_fdclose (struct pool_set *set) at common/set.c:457>:
                                util_poolset_fdclose_always() <void util_poolset_fdclose_always (struct pool_set *set) at common/set.c:445>:
                                    LOG()
                                    util_replica_fdclose() <void util_replica_fdclose (struct pool_replica *rep) at common/set.c:3232>:
                                        util_part_fdclose() <void util_part_fdclose (struct pool_set_part *part) at common/set.c:1517>:
                                            LOG()
                                            os_close()
                            os_close()
                            os_unlink() <int os_unlink (const char *pathname) at core/os_posix.c:88>:
                                unlink()
                            Free() <Free_func Free at core/alloc.c:91>
                            util_poolset_set_size() <void util_poolset_set_size (struct pool_set *set) at common/set.c:949>:
                                LOG()
                        pmemops_persist()
                        heap_max_zone() <unsigned heap_max_zone (size_t size) at libpmemobj/heap.c:516>:
                        ZID_TO_ZONE()
                        heap_zone_init() <void heap_zone_init (struct palloc_heap *heap, uint32_t zone_id, uint32_t first_chunk_id) at libpmemobj/heap.c:559>:
                            ZID_TO_ZONE()
                            zone_calc_size_idx() <uint32_t zone_calc_size_idx (uint32_t zone_id, unsigned max_zone, size_t heap_size) at libpmemobj/heap.c:533>:
                                ASSERT()
                            ASSERT()
                            memblock_huge_init() <struct memory_block memblock_huge_init (struct palloc_heap *heap, uint32_t chunk_id, uint32_t zone_id, uint32_t size_idx) at libpmemobj/memblock.c:1329>:
                                heap_get_chunk_hdr()
                                VALGRIND_DO_MAKE_MEM_UNDEFINED()
                                VALGRIND_ANNOTATE_NEW_MEMORY()
                                chunk_get_chunk_hdr_value() <uint64_t chunk_get_chunk_hdr_value (uint16_t type, uint16_t flags, uint32_t size_idx) at libpmemobj/memblock.c:604>:
                                    COMPILE_ERROR_ON()
                                    memcpy()
                                util_atomic_store_explicit64()
                                pmemops_persist()
                                huge_write_footer() <void huge_write_footer (struct chunk_header *hdr, uint32_t size_idx) at libpmemobj/memblock.c:1166>:
                                    VALGRIND_DO_MAKE_MEM_UNDEFINED()
                                    VALGRIND_SET_CLEAN()
                                memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                    memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                        heap_get_chunk_hdr()
                                    memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                        heap_get_chunk_hdr()
                                        FATAL()
                            pmemops_persist()
                        memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                            memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                heap_get_chunk_hdr()
                            memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                heap_get_chunk_hdr()
                                FATAL()
                        heap_free_chunk_reuse() <int heap_free_chunk_reuse (struct palloc_heap *heap, struct bucket *bucket, struct memory_block *m) at libpmemobj/heap.c:674>:
                            heap_coalesce_huge() <struct memory_block heap_coalesce_huge (struct palloc_heap *heap, struct bucket *b, const struct memory_block *m) at libpmemobj/heap.c:650>:
                                heap_get_adjacent_free_block() <int heap_get_adjacent_free_block (struct palloc_heap *heap, const struct memory_block *in, struct memory_block *out, int prev) at libpmemobj/heap.c:582>:
                                    ZID_TO_ZONE()
                                    memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                        memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                            heap_get_chunk_hdr()
                                        memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                            heap_get_chunk_hdr()
                                            FATAL()
                                bucket_remove_block() <int bucket_remove_block (struct bucket *b, const struct memory_block *m) at libpmemobj/bucket.c:178>
                                heap_coalesce() <struct memory_block heap_coalesce (struct palloc_heap *heap, const struct memory_block *blocks[], int n) at libpmemobj/heap.c:621>:
                                    ASSERTne()
                                    memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                        memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                            heap_get_chunk_hdr()
                                        memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                            heap_get_chunk_hdr()
                                            FATAL()
                            bucket_insert_block() <int bucket_insert_block (struct bucket *b, const struct memory_block *m) at libpmemobj/bucket.c:161>:
                                VALGRIND_DO_MAKE_MEM_NOACCESS()
                                VALGRIND_ANNOTATE_NEW_MEMORY()
                heap_ensure_run_bucket_filled() <int heap_ensure_run_bucket_filled (struct palloc_heap *heap, struct bucket *b, uint32_t units) at libpmemobj/heap.c:1083> (R):
                    bucket_alloc_class() <struct alloc_class *bucket_alloc_class (struct bucket *b) at libpmemobj/bucket.c:152>
                    ASSERTeq()
                    heap_detach_and_try_discard_run() <int heap_detach_and_try_discard_run (struct palloc_heap *heap, struct bucket *b) at libpmemobj/heap.c:992>:
                        bucket_detach_run() <int bucket_detach_run (struct bucket *b, struct memory_block *m_out, int *empty) at libpmemobj/bucket.c:231>:
                            util_fetch_and_sub64()
                            VALGRIND_ANNOTATE_HAPPENS_AFTER()
                            VALGRIND_ANNOTATE_HAPPENS_BEFORE()
                            Zalloc() <void *Zalloc (size_t sz) at core/alloc.c:98>:
                                Malloc()
                                memset()
                        heap_discard_run() <void heap_discard_run (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/heap.c:974>:
                            heap_reclaim_run() <int heap_reclaim_run (struct palloc_heap *heap, struct memory_block *m, int startup) at libpmemobj/heap.c:733>:
                                heap_get_chunk_run()
                                heap_get_chunk_hdr()
                                alloc_class_by_run() <struct alloc_class *alloc_class_by_run (struct alloc_class_collection *ac, size_t unit_size, uint16_t flags, uint32_t size_idx) at libpmemobj/alloc_class.c:594>:
                                    SIZE_TO_CLASS_MAP_INDEX()
                                    ASSERT()
                                    critnib_get() <void *critnib_get (struct critnib *c, uint64_t key) at libpmemobj/critnib.c:515>:
                                        load() <void load (void *src, void *dst) at libpmemobj/critnib.c:130>:
                                            util_atomic_load_explicit64()
                                        is_leaf() <inline bool is_leaf (struct critnib_node *n) at libpmemobj/critnib.c:150>:
                                        slice_index() <inline unsigned slice_index (uint64_t key, sh_t shift) at libpmemobj/critnib.c:178>:
                                        to_leaf() <inline struct critnib_leaf *to_leaf (struct critnib_node *n) at libpmemobj/critnib.c:159>:
                                    RUN_CLASS_KEY_PACK()
                                recycler_element_new() <struct recycler_element recycler_element_new (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/recycler.c:122>:
                                    SUPPRESS_UNUSED()
                                    util_mutex_lock()
                                    util_mutex_unlock()
                                ASSERTeq()
                                STATS_INC()
                                heap_get_recycler() <struct recycler *heap_get_recycler (struct palloc_heap *heap, size_t id, size_t nallocs) at libpmemobj/heap.c:106> (R):
                                    util_atomic_load_explicit64()
                                    recycler_new() <struct recycler *recycler_new (struct palloc_heap *heap, size_t nallocs, size_t *peak_arenas) at libpmemobj/recycler.c:74>:
                                        Malloc()
                                        ravl_new_sized() <struct ravl *ravl_new_sized (ravl_compare *compare, size_t data_size) at core/ravl.c:45>:
                                            Malloc()
                                            ERR()
                                        recycler_element_cmp() <int recycler_element_cmp (const void *lhs, const void *rhs) at libpmemobj/recycler.c:23>:
                                        memset()
                                        VEC_INIT()
                                        util_mutex_init()
                                        Free() <Free_func Free at core/alloc.c:91>
                                    util_bool_compare_and_swap64()
                                    recycler_delete() <void recycler_delete (struct recycler *r) at libpmemobj/recycler.c:107>:
                                        VEC_DELETE()
                                        util_mutex_destroy()
                                        ravl_delete() <void ravl_delete (struct ravl *ravl) at core/ravl.c:112>:
                                            ravl_delete_cb() <void ravl_delete_cb (struct ravl *ravl, ravl_cb cb, void *arg) at core/ravl.c:102>:
                                                ravl_foreach_node() <void ravl_foreach_node (struct ravl_node *n, ravl_cb cb, void *arg, int free_node) at core/ravl.c:74> (R):
                                                    ravl_foreach_node() <void ravl_foreach_node (struct ravl_node *n, ravl_cb cb, void *arg, int free_node) at core/ravl.c:74> (recursive: see 26517)
                                                    Free() <Free_func Free at core/alloc.c:91>
                                                Free() <Free_func Free at core/alloc.c:91>
                                        Free() <Free_func Free at core/alloc.c:91>
                                    heap_get_recycler() <struct recycler *heap_get_recycler (struct palloc_heap *heap, size_t id, size_t nallocs) at libpmemobj/heap.c:106> (recursive: see 26499)
                                recycler_put() <int recycler_put (struct recycler *r, struct recycler_element element) at libpmemobj/recycler.c:154>:
                                    util_mutex_lock()
                                    ravl_emplace_copy() <int ravl_emplace_copy (struct ravl *ravl, const void *data) at core/ravl.c:384>:
                                        ravl_emplace() <int ravl_emplace (struct ravl *ravl, ravl_constr constr, const void *arg) at core/ravl.c:393>:
                                            LOG()
                                            ravl_new_node() <struct ravl_node *ravl_new_node (struct ravl *ravl, ravl_constr constr, const void *arg) at core/ravl.c:161>:
                                                Malloc()
                                                ERR()
                                                ravl_node_insert_constructor() <void ravl_node_insert_constructor (void *data, size_t data_size, const void *arg) at core/ravl.c:139>:
                                                    SUPPRESS_UNUSED()
                                                    memcpy()
                                            ravl_data() <void *ravl_data (struct ravl_node *node) at core/ravl.c:571>:
                                                memcpy()
                                            ravl_balance() <void ravl_balance (struct ravl *ravl, struct ravl_node *n) at core/ravl.c:337>:
                                                ravl_node_is() <int ravl_node_is (struct ravl_node *n, int i, int j) at core/ravl.c:306>:
                                                    ravl_node_is_i_j() <int ravl_node_is_i_j (struct ravl_node *n, int i, int j) at core/ravl.c:296>:
                                                        ravl_node_rank_difference_parent() <int ravl_node_rank_difference_parent (struct ravl_node *p, struct ravl_node *n) at core/ravl.c:275>:
                                                            ravl_node_rank() <int ravl_node_rank (struct ravl_node *n) at core/ravl.c:261>:
                                                ravl_node_promote() <void ravl_node_promote (struct ravl_node *n) at core/ravl.c:315>
                                                ravl_node_sibling() <struct ravl_node *ravl_node_sibling (struct ravl_node *n) at core/ravl.c:209>:
                                                    ravl_node_slot_type() <enum ravl_slot_type ravl_node_slot_type (struct ravl_node *n) at core/ravl.c:196>:
                                                ravl_node_rank_difference() <int ravl_node_rank_difference (struct ravl_node *n) at core/ravl.c:287>:
                                                    ravl_node_rank_difference_parent() <int ravl_node_rank_difference_parent (struct ravl_node *p, struct ravl_node *n) at core/ravl.c:275>:
                                                        ravl_node_rank() <int ravl_node_rank (struct ravl_node *n) at core/ravl.c:261>:
                                                ravl_node_rank_difference_parent() <int ravl_node_rank_difference_parent (struct ravl_node *p, struct ravl_node *n) at core/ravl.c:275>:
                                                    ravl_node_rank() <int ravl_node_rank (struct ravl_node *n) at core/ravl.c:261>:
                                                ravl_slot_opposite() <enum ravl_slot_type ravl_slot_opposite (enum ravl_slot_type t) at core/ravl.c:184>:
                                                    ASSERTne()
                                                ravl_node_slot_type() <enum ravl_slot_type ravl_node_slot_type (struct ravl_node *n) at core/ravl.c:196>:
                                                ravl_rotate() <void ravl_rotate (struct ravl *ravl, struct ravl_node *n) at core/ravl.c:237>:
                                                    ASSERTne()
                                                    ravl_node_ref() <struct ravl_node **ravl_node_ref (struct ravl *ravl, struct ravl_node *n) at core/ravl.c:223>:
                                                        ravl_node_slot_type() <enum ravl_slot_type ravl_node_slot_type (struct ravl_node *n) at core/ravl.c:196>:
                                                    ravl_node_slot_type() <enum ravl_slot_type ravl_node_slot_type (struct ravl_node *n) at core/ravl.c:196>:
                                                    ravl_slot_opposite() <enum ravl_slot_type ravl_slot_opposite (enum ravl_slot_type t) at core/ravl.c:184>:
                                                        ASSERTne()
                                                ravl_node_demote() <void ravl_node_demote (struct ravl_node *n) at core/ravl.c:324>:
                                                    ASSERT()
                                            Free() <Free_func Free at core/alloc.c:91>
                                        ravl_node_copy_constructor() <void ravl_node_copy_constructor (void *data, size_t data_size, const void *arg) at core/ravl.c:152>:
                                            memcpy()
                                    util_mutex_unlock()
                                ERR()
                            heap_bucket_acquire() <struct bucket *heap_bucket_acquire (struct palloc_heap *heap, uint8_t class_id, uint16_t arena_id) at libpmemobj/heap.c:470>:
                                out() <void out (const char *fmt, ...) at core/out.c:480>:
                                    va_start()
                                    out_common() <} void out_common (const char *file, int line, const char *func, int level, const char *suffix, const char *fmt, va_list ap) at core/out.c:334>
                                    va_end()
                                heap_thread_arena() <struct arena *heap_thread_arena (struct palloc_heap *heap) at libpmemobj/heap.c:414>:
                                    os_tls_get() <void *os_tls_get (os_tls_key_t key) at core/os_thread_posix.c:62>:
                                        pthread_getspecific()
                                    heap_thread_arena_assign() <struct arena *heap_thread_arena_assign (struct palloc_heap *heap) at libpmemobj/heap.c:381>:
                                        util_mutex_lock()
                                        ASSERTne()
                                        VEC_SIZE()
                                        VEC_FOREACH()
                                        LOG()
                                        heap_arena_thread_attach() <void heap_arena_thread_attach (struct palloc_heap *heap, struct arena *a) at libpmemobj/heap.c:249>:
                                            ASSERTeq()
                                            os_tls_get() <void *os_tls_get (os_tls_key_t key) at core/os_thread_posix.c:62>:
                                                pthread_getspecific()
                                            heap_arena_thread_detach() <void heap_arena_thread_detach (struct arena *a) at libpmemobj/heap.c:232>:
                                                util_fetch_and_sub64()
                                            ASSERTne()
                                            util_fetch_and_add64()
                                            os_tls_set() <int os_tls_set (os_tls_key_t key, const void *value) at core/os_thread_posix.c:53>:
                                                pthread_setspecific()
                                        util_mutex_unlock()
                                    heap_global_arena_assign() <struct arena *heap_global_arena_assign (struct palloc_heap *heap) at libpmemobj/heap.c:348>:
                                        util_mutex_lock()
                                        ASSERTne()
                                        VEC_SIZE()
                                        VEC_FOREACH()
                                        LOG()
                                        util_mutex_unlock()
                                    ASSERT()
                                    ASSERTne()
                                ASSERTne()
                                VEC_ARR()
                                bucket_acquire() <struct bucket *bucket_acquire (struct bucket_locked *b) at libpmemobj/bucket.c:117>:
                                    util_mutex_lock()
                            heap_run_into_free_chunk() <void heap_run_into_free_chunk (struct palloc_heap *heap, struct bucket *bucket, struct memory_block *m) at libpmemobj/heap.c:697>:
                                heap_get_chunk_hdr()
                                STATS_SUB()
                                util_mutex_lock()
                                memblock_huge_init() <struct memory_block memblock_huge_init (struct palloc_heap *heap, uint32_t chunk_id, uint32_t zone_id, uint32_t size_idx) at libpmemobj/memblock.c:1329>:
                                    heap_get_chunk_hdr()
                                    VALGRIND_DO_MAKE_MEM_UNDEFINED()
                                    VALGRIND_ANNOTATE_NEW_MEMORY()
                                    chunk_get_chunk_hdr_value() <uint64_t chunk_get_chunk_hdr_value (uint16_t type, uint16_t flags, uint32_t size_idx) at libpmemobj/memblock.c:604>:
                                        COMPILE_ERROR_ON()
                                        memcpy()
                                    util_atomic_store_explicit64()
                                    pmemops_persist()
                                    huge_write_footer() <void huge_write_footer (struct chunk_header *hdr, uint32_t size_idx) at libpmemobj/memblock.c:1166>:
                                        VALGRIND_DO_MAKE_MEM_UNDEFINED()
                                        VALGRIND_SET_CLEAN()
                                    memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                        memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                            heap_get_chunk_hdr()
                                        memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                            heap_get_chunk_hdr()
                                            FATAL()
                                heap_free_chunk_reuse() <int heap_free_chunk_reuse (struct palloc_heap *heap, struct bucket *bucket, struct memory_block *m) at libpmemobj/heap.c:674>:
                                    heap_coalesce_huge() <struct memory_block heap_coalesce_huge (struct palloc_heap *heap, struct bucket *b, const struct memory_block *m) at libpmemobj/heap.c:650>:
                                        heap_get_adjacent_free_block() <int heap_get_adjacent_free_block (struct palloc_heap *heap, const struct memory_block *in, struct memory_block *out, int prev) at libpmemobj/heap.c:582>:
                                            ZID_TO_ZONE()
                                            memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                                memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                                    heap_get_chunk_hdr()
                                                memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                                    heap_get_chunk_hdr()
                                                    FATAL()
                                        bucket_remove_block() <int bucket_remove_block (struct bucket *b, const struct memory_block *m) at libpmemobj/bucket.c:178>
                                        heap_coalesce() <struct memory_block heap_coalesce (struct palloc_heap *heap, const struct memory_block *blocks[], int n) at libpmemobj/heap.c:621>:
                                            ASSERTne()
                                            memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                                memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                                    heap_get_chunk_hdr()
                                                memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                                    heap_get_chunk_hdr()
                                                    FATAL()
                                    bucket_insert_block() <int bucket_insert_block (struct bucket *b, const struct memory_block *m) at libpmemobj/bucket.c:161>:
                                        VALGRIND_DO_MAKE_MEM_NOACCESS()
                                        VALGRIND_ANNOTATE_NEW_MEMORY()
                                util_mutex_unlock()
                            heap_bucket_release() <void heap_bucket_release (struct bucket *b) at libpmemobj/heap.c:498>:
                                bucket_release() <void bucket_release (struct bucket *b) at libpmemobj/bucket.c:127>:
                                    util_mutex_unlock()
                    heap_reuse_from_recycler() <int heap_reuse_from_recycler (struct palloc_heap *heap, struct bucket *b, uint32_t units, int force) at libpmemobj/heap.c:1034>:
                        bucket_alloc_class() <struct alloc_class *bucket_alloc_class (struct bucket *b) at libpmemobj/bucket.c:152>
                        heap_get_recycler() <struct recycler *heap_get_recycler (struct palloc_heap *heap, size_t id, size_t nallocs) at libpmemobj/heap.c:106> (R):
                            util_atomic_load_explicit64()
                            recycler_new() <struct recycler *recycler_new (struct palloc_heap *heap, size_t nallocs, size_t *peak_arenas) at libpmemobj/recycler.c:74>:
                                Malloc()
                                ravl_new_sized() <struct ravl *ravl_new_sized (ravl_compare *compare, size_t data_size) at core/ravl.c:45>:
                                    Malloc()
                                    ERR()
                                recycler_element_cmp() <int recycler_element_cmp (const void *lhs, const void *rhs) at libpmemobj/recycler.c:23>:
                                memset()
                                VEC_INIT()
                                util_mutex_init()
                                Free() <Free_func Free at core/alloc.c:91>
                            util_bool_compare_and_swap64()
                            recycler_delete() <void recycler_delete (struct recycler *r) at libpmemobj/recycler.c:107>:
                                VEC_DELETE()
                                util_mutex_destroy()
                                ravl_delete() <void ravl_delete (struct ravl *ravl) at core/ravl.c:112>:
                                    ravl_delete_cb() <void ravl_delete_cb (struct ravl *ravl, ravl_cb cb, void *arg) at core/ravl.c:102>:
                                        ravl_foreach_node() <void ravl_foreach_node (struct ravl_node *n, ravl_cb cb, void *arg, int free_node) at core/ravl.c:74> (R):
                                            ravl_foreach_node() <void ravl_foreach_node (struct ravl_node *n, ravl_cb cb, void *arg, int free_node) at core/ravl.c:74> (recursive: see 26672)
                                            Free() <Free_func Free at core/alloc.c:91>
                                        Free() <Free_func Free at core/alloc.c:91>
                                Free() <Free_func Free at core/alloc.c:91>
                            heap_get_recycler() <struct recycler *heap_get_recycler (struct palloc_heap *heap, size_t id, size_t nallocs) at libpmemobj/heap.c:106> (recursive: see 26654)
                        ERR()
                        recycler_get() <int recycler_get (struct recycler *r, struct memory_block *m) at libpmemobj/recycler.c:171>:
                            util_mutex_lock()
                            ravl_find() <struct ravl_node *ravl_find (struct ravl *ravl, const void *data, enum ravl_predicate flags) at core/ravl.c:524>:
                                LOG()
                                ravl_data() <void *ravl_data (struct ravl_node *node) at core/ravl.c:571>:
                                    memcpy()
                                ravl_predicate_holds() <int ravl_predicate_holds (int result, struct ravl_node **ret, struct ravl_node *n, enum ravl_predicate flags) at core/ravl.c:489>:
                                    ravl_node_successor() <struct ravl_node *ravl_node_successor (struct ravl_node *n) at core/ravl.c:465>:
                                        ravl_node_cessor() <struct ravl_node *ravl_node_cessor (struct ravl_node *n, enum ravl_slot_type t) at core/ravl.c:443>:
                                            ravl_node_type_most() <struct ravl_node *ravl_node_type_most (struct ravl_node *n, enum ravl_slot_type t) at core/ravl.c:430>:
                                            ravl_slot_opposite() <enum ravl_slot_type ravl_slot_opposite (enum ravl_slot_type t) at core/ravl.c:184>:
                                                ASSERTne()
                                    ravl_node_predecessor() <struct ravl_node *ravl_node_predecessor (struct ravl_node *n) at core/ravl.c:476>:
                                        ravl_node_cessor() <struct ravl_node *ravl_node_cessor (struct ravl_node *n, enum ravl_slot_type t) at core/ravl.c:443>:
                                            ravl_node_type_most() <struct ravl_node *ravl_node_type_most (struct ravl_node *n, enum ravl_slot_type t) at core/ravl.c:430>:
                                            ravl_slot_opposite() <enum ravl_slot_type ravl_slot_opposite (enum ravl_slot_type t) at core/ravl.c:184>:
                                                ASSERTne()
                            out() <void out (const char *fmt, ...) at core/out.c:480>:
                                va_start()
                                out_common() <} void out_common (const char *file, int line, const char *func, int level, const char *suffix, const char *fmt, va_list ap) at core/out.c:334>
                                va_end()
                            ravl_data() <void *ravl_data (struct ravl_node *node) at core/ravl.c:571>:
                                memcpy()
                            ravl_remove() <void ravl_remove (struct ravl *ravl, struct ravl_node *n) at core/ravl.c:545> (R):
                                LOG()
                                ravl_node_successor() <struct ravl_node *ravl_node_successor (struct ravl_node *n) at core/ravl.c:465>:
                                    ravl_node_cessor() <struct ravl_node *ravl_node_cessor (struct ravl_node *n, enum ravl_slot_type t) at core/ravl.c:443>:
                                        ravl_node_type_most() <struct ravl_node *ravl_node_type_most (struct ravl_node *n, enum ravl_slot_type t) at core/ravl.c:430>:
                                        ravl_slot_opposite() <enum ravl_slot_type ravl_slot_opposite (enum ravl_slot_type t) at core/ravl.c:184>:
                                            ASSERTne()
                                memcpy()
                                ravl_remove() <void ravl_remove (struct ravl *ravl, struct ravl_node *n) at core/ravl.c:545> (recursive: see 26702)
                                ravl_node_ref() <struct ravl_node **ravl_node_ref (struct ravl *ravl, struct ravl_node *n) at core/ravl.c:223>:
                                    ravl_node_slot_type() <enum ravl_slot_type ravl_node_slot_type (struct ravl_node *n) at core/ravl.c:196>:
                                Free() <Free_func Free at core/alloc.c:91>
                            heap_get_chunk_hdr()
                            memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                    heap_get_chunk_hdr()
                                memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                    heap_get_chunk_hdr()
                                    FATAL()
                            util_mutex_unlock()
                        bucket_attach_run() <int bucket_attach_run (struct bucket *b, const struct memory_block *m) at libpmemobj/bucket.c:206>:
                            util_mutex_lock()
                            bucket_memblock_insert_block() <int bucket_memblock_insert_block (const struct memory_block *m, void *b) at libpmemobj/bucket.c:197>:
                                bucket_insert_block() <int bucket_insert_block (struct bucket *b, const struct memory_block *m) at libpmemobj/bucket.c:161>:
                                    VALGRIND_DO_MAKE_MEM_NOACCESS()
                                    VALGRIND_ANNOTATE_NEW_MEMORY()
                            util_mutex_unlock()
                            util_fetch_and_add64()
                        heap_recycle_unused() <int heap_recycle_unused (struct palloc_heap *heap, struct recycler *recycler, struct bucket *defb, int force) at libpmemobj/heap.c:894>:
                            recycler_recalc() <struct empty_runs recycler_recalc (struct recycler *r, int force) at libpmemobj/recycler.c:207>:
                                VEC_INIT()
                                util_atomic_load64()
                                util_mutex_trylock()
                                ravl_find() <struct ravl_node *ravl_find (struct ravl *ravl, const void *data, enum ravl_predicate flags) at core/ravl.c:524>:
                                    LOG()
                                    ravl_data() <void *ravl_data (struct ravl_node *node) at core/ravl.c:571>:
                                        memcpy()
                                    ravl_predicate_holds() <int ravl_predicate_holds (int result, struct ravl_node **ret, struct ravl_node *n, enum ravl_predicate flags) at core/ravl.c:489>:
                                        ravl_node_successor() <struct ravl_node *ravl_node_successor (struct ravl_node *n) at core/ravl.c:465>:
                                            ravl_node_cessor() <struct ravl_node *ravl_node_cessor (struct ravl_node *n, enum ravl_slot_type t) at core/ravl.c:443>:
                                                ravl_node_type_most() <struct ravl_node *ravl_node_type_most (struct ravl_node *n, enum ravl_slot_type t) at core/ravl.c:430>:
                                                ravl_slot_opposite() <enum ravl_slot_type ravl_slot_opposite (enum ravl_slot_type t) at core/ravl.c:184>:
                                                    ASSERTne()
                                        ravl_node_predecessor() <struct ravl_node *ravl_node_predecessor (struct ravl_node *n) at core/ravl.c:476>:
                                            ravl_node_cessor() <struct ravl_node *ravl_node_cessor (struct ravl_node *n, enum ravl_slot_type t) at core/ravl.c:443>:
                                                ravl_node_type_most() <struct ravl_node *ravl_node_type_most (struct ravl_node *n, enum ravl_slot_type t) at core/ravl.c:430>:
                                                ravl_slot_opposite() <enum ravl_slot_type ravl_slot_opposite (enum ravl_slot_type t) at core/ravl.c:184>:
                                                    ASSERTne()
                                ravl_data() <void *ravl_data (struct ravl_node *node) at core/ravl.c:571>:
                                    memcpy()
                                memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                    memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                        heap_get_chunk_hdr()
                                    memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                        heap_get_chunk_hdr()
                                        FATAL()
                                recycler_element_new() <struct recycler_element recycler_element_new (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/recycler.c:122>:
                                    SUPPRESS_UNUSED()
                                    util_mutex_lock()
                                    util_mutex_unlock()
                                ASSERT()
                                util_fetch_and_sub64()
                                MIN()
                                ravl_remove() <void ravl_remove (struct ravl *ravl, struct ravl_node *n) at core/ravl.c:545> (R):
                                    LOG()
                                    ravl_node_successor() <struct ravl_node *ravl_node_successor (struct ravl_node *n) at core/ravl.c:465>:
                                        ravl_node_cessor() <struct ravl_node *ravl_node_cessor (struct ravl_node *n, enum ravl_slot_type t) at core/ravl.c:443>:
                                            ravl_node_type_most() <struct ravl_node *ravl_node_type_most (struct ravl_node *n, enum ravl_slot_type t) at core/ravl.c:430>:
                                            ravl_slot_opposite() <enum ravl_slot_type ravl_slot_opposite (enum ravl_slot_type t) at core/ravl.c:184>:
                                                ASSERTne()
                                    memcpy()
                                    ravl_remove() <void ravl_remove (struct ravl *ravl, struct ravl_node *n) at core/ravl.c:545> (recursive: see 26765)
                                    ravl_node_ref() <struct ravl_node **ravl_node_ref (struct ravl *ravl, struct ravl_node *n) at core/ravl.c:223>:
                                        ravl_node_slot_type() <enum ravl_slot_type ravl_node_slot_type (struct ravl_node *n) at core/ravl.c:196>:
                                    Free() <Free_func Free at core/alloc.c:91>
                                VEC_PUSH_BACK()
                                VEC_FOREACH_BY_PTR()
                                ravl_emplace_copy() <int ravl_emplace_copy (struct ravl *ravl, const void *data) at core/ravl.c:384>:
                                    ravl_emplace() <int ravl_emplace (struct ravl *ravl, ravl_constr constr, const void *arg) at core/ravl.c:393>:
                                        LOG()
                                        ravl_new_node() <struct ravl_node *ravl_new_node (struct ravl *ravl, ravl_constr constr, const void *arg) at core/ravl.c:161>:
                                            Malloc()
                                            ERR()
                                            ravl_node_insert_constructor() <void ravl_node_insert_constructor (void *data, size_t data_size, const void *arg) at core/ravl.c:139>:
                                                SUPPRESS_UNUSED()
                                                memcpy()
                                        ravl_data() <void *ravl_data (struct ravl_node *node) at core/ravl.c:571>:
                                            memcpy()
                                        ravl_balance() <void ravl_balance (struct ravl *ravl, struct ravl_node *n) at core/ravl.c:337>:
                                            ravl_node_is() <int ravl_node_is (struct ravl_node *n, int i, int j) at core/ravl.c:306>:
                                                ravl_node_is_i_j() <int ravl_node_is_i_j (struct ravl_node *n, int i, int j) at core/ravl.c:296>:
                                                    ravl_node_rank_difference_parent() <int ravl_node_rank_difference_parent (struct ravl_node *p, struct ravl_node *n) at core/ravl.c:275>:
                                                        ravl_node_rank() <int ravl_node_rank (struct ravl_node *n) at core/ravl.c:261>:
                                            ravl_node_promote() <void ravl_node_promote (struct ravl_node *n) at core/ravl.c:315>
                                            ravl_node_sibling() <struct ravl_node *ravl_node_sibling (struct ravl_node *n) at core/ravl.c:209>:
                                                ravl_node_slot_type() <enum ravl_slot_type ravl_node_slot_type (struct ravl_node *n) at core/ravl.c:196>:
                                            ravl_node_rank_difference() <int ravl_node_rank_difference (struct ravl_node *n) at core/ravl.c:287>:
                                                ravl_node_rank_difference_parent() <int ravl_node_rank_difference_parent (struct ravl_node *p, struct ravl_node *n) at core/ravl.c:275>:
                                                    ravl_node_rank() <int ravl_node_rank (struct ravl_node *n) at core/ravl.c:261>:
                                            ravl_node_rank_difference_parent() <int ravl_node_rank_difference_parent (struct ravl_node *p, struct ravl_node *n) at core/ravl.c:275>:
                                                ravl_node_rank() <int ravl_node_rank (struct ravl_node *n) at core/ravl.c:261>:
                                            ravl_slot_opposite() <enum ravl_slot_type ravl_slot_opposite (enum ravl_slot_type t) at core/ravl.c:184>:
                                                ASSERTne()
                                            ravl_node_slot_type() <enum ravl_slot_type ravl_node_slot_type (struct ravl_node *n) at core/ravl.c:196>:
                                            ravl_rotate() <void ravl_rotate (struct ravl *ravl, struct ravl_node *n) at core/ravl.c:237>:
                                                ASSERTne()
                                                ravl_node_ref() <struct ravl_node **ravl_node_ref (struct ravl *ravl, struct ravl_node *n) at core/ravl.c:223>:
                                                    ravl_node_slot_type() <enum ravl_slot_type ravl_node_slot_type (struct ravl_node *n) at core/ravl.c:196>:
                                                ravl_node_slot_type() <enum ravl_slot_type ravl_node_slot_type (struct ravl_node *n) at core/ravl.c:196>:
                                                ravl_slot_opposite() <enum ravl_slot_type ravl_slot_opposite (enum ravl_slot_type t) at core/ravl.c:184>:
                                                    ASSERTne()
                                            ravl_node_demote() <void ravl_node_demote (struct ravl_node *n) at core/ravl.c:324>:
                                                ASSERT()
                                        Free() <Free_func Free at core/alloc.c:91>
                                    ravl_node_copy_constructor() <void ravl_node_copy_constructor (void *data, size_t data_size, const void *arg) at core/ravl.c:152>:
                                        memcpy()
                                VEC_CLEAR()
                                util_mutex_unlock()
                            VEC_SIZE()
                            heap_bucket_acquire() <struct bucket *heap_bucket_acquire (struct palloc_heap *heap, uint8_t class_id, uint16_t arena_id) at libpmemobj/heap.c:470>:
                                out() <void out (const char *fmt, ...) at core/out.c:480>:
                                    va_start()
                                    out_common() <} void out_common (const char *file, int line, const char *func, int level, const char *suffix, const char *fmt, va_list ap) at core/out.c:334>
                                    va_end()
                                heap_thread_arena() <struct arena *heap_thread_arena (struct palloc_heap *heap) at libpmemobj/heap.c:414>:
                                    os_tls_get() <void *os_tls_get (os_tls_key_t key) at core/os_thread_posix.c:62>:
                                        pthread_getspecific()
                                    heap_thread_arena_assign() <struct arena *heap_thread_arena_assign (struct palloc_heap *heap) at libpmemobj/heap.c:381>:
                                        util_mutex_lock()
                                        ASSERTne()
                                        VEC_SIZE()
                                        VEC_FOREACH()
                                        LOG()
                                        heap_arena_thread_attach() <void heap_arena_thread_attach (struct palloc_heap *heap, struct arena *a) at libpmemobj/heap.c:249>:
                                            ASSERTeq()
                                            os_tls_get() <void *os_tls_get (os_tls_key_t key) at core/os_thread_posix.c:62>:
                                                pthread_getspecific()
                                            heap_arena_thread_detach() <void heap_arena_thread_detach (struct arena *a) at libpmemobj/heap.c:232>:
                                                util_fetch_and_sub64()
                                            ASSERTne()
                                            util_fetch_and_add64()
                                            os_tls_set() <int os_tls_set (os_tls_key_t key, const void *value) at core/os_thread_posix.c:53>:
                                                pthread_setspecific()
                                        util_mutex_unlock()
                                    heap_global_arena_assign() <struct arena *heap_global_arena_assign (struct palloc_heap *heap) at libpmemobj/heap.c:348>:
                                        util_mutex_lock()
                                        ASSERTne()
                                        VEC_SIZE()
                                        VEC_FOREACH()
                                        LOG()
                                        util_mutex_unlock()
                                    ASSERT()
                                    ASSERTne()
                                ASSERTne()
                                VEC_ARR()
                                bucket_acquire() <struct bucket *bucket_acquire (struct bucket_locked *b) at libpmemobj/bucket.c:117>:
                                    util_mutex_lock()
                            ASSERT()
                            VEC_FOREACH_BY_PTR()
                            heap_run_into_free_chunk() <void heap_run_into_free_chunk (struct palloc_heap *heap, struct bucket *bucket, struct memory_block *m) at libpmemobj/heap.c:697>:
                                heap_get_chunk_hdr()
                                STATS_SUB()
                                util_mutex_lock()
                                memblock_huge_init() <struct memory_block memblock_huge_init (struct palloc_heap *heap, uint32_t chunk_id, uint32_t zone_id, uint32_t size_idx) at libpmemobj/memblock.c:1329>:
                                    heap_get_chunk_hdr()
                                    VALGRIND_DO_MAKE_MEM_UNDEFINED()
                                    VALGRIND_ANNOTATE_NEW_MEMORY()
                                    chunk_get_chunk_hdr_value() <uint64_t chunk_get_chunk_hdr_value (uint16_t type, uint16_t flags, uint32_t size_idx) at libpmemobj/memblock.c:604>:
                                        COMPILE_ERROR_ON()
                                        memcpy()
                                    util_atomic_store_explicit64()
                                    pmemops_persist()
                                    huge_write_footer() <void huge_write_footer (struct chunk_header *hdr, uint32_t size_idx) at libpmemobj/memblock.c:1166>:
                                        VALGRIND_DO_MAKE_MEM_UNDEFINED()
                                        VALGRIND_SET_CLEAN()
                                    memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                        memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                            heap_get_chunk_hdr()
                                        memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                            heap_get_chunk_hdr()
                                            FATAL()
                                heap_free_chunk_reuse() <int heap_free_chunk_reuse (struct palloc_heap *heap, struct bucket *bucket, struct memory_block *m) at libpmemobj/heap.c:674>:
                                    heap_coalesce_huge() <struct memory_block heap_coalesce_huge (struct palloc_heap *heap, struct bucket *b, const struct memory_block *m) at libpmemobj/heap.c:650>:
                                        heap_get_adjacent_free_block() <int heap_get_adjacent_free_block (struct palloc_heap *heap, const struct memory_block *in, struct memory_block *out, int prev) at libpmemobj/heap.c:582>:
                                            ZID_TO_ZONE()
                                            memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                                memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                                    heap_get_chunk_hdr()
                                                memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                                    heap_get_chunk_hdr()
                                                    FATAL()
                                        bucket_remove_block() <int bucket_remove_block (struct bucket *b, const struct memory_block *m) at libpmemobj/bucket.c:178>
                                        heap_coalesce() <struct memory_block heap_coalesce (struct palloc_heap *heap, const struct memory_block *blocks[], int n) at libpmemobj/heap.c:621>:
                                            ASSERTne()
                                            memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                                memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                                    heap_get_chunk_hdr()
                                                memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                                    heap_get_chunk_hdr()
                                                    FATAL()
                                    bucket_insert_block() <int bucket_insert_block (struct bucket *b, const struct memory_block *m) at libpmemobj/bucket.c:161>:
                                        VALGRIND_DO_MAKE_MEM_NOACCESS()
                                        VALGRIND_ANNOTATE_NEW_MEMORY()
                                util_mutex_unlock()
                            heap_bucket_release() <void heap_bucket_release (struct bucket *b) at libpmemobj/heap.c:498>:
                                bucket_release() <void bucket_release (struct bucket *b) at libpmemobj/bucket.c:127>:
                                    util_mutex_unlock()
                            VEC_DELETE()
                    out() <void out (const char *fmt, ...) at core/out.c:480>:
                        va_start()
                        out_common() <} void out_common (const char *file, int line, const char *func, int level, const char *suffix, const char *fmt, va_list ap) at core/out.c:334>
                        va_end()
                    heap_bucket_acquire() <struct bucket *heap_bucket_acquire (struct palloc_heap *heap, uint8_t class_id, uint16_t arena_id) at libpmemobj/heap.c:470>:
                        out() <void out (const char *fmt, ...) at core/out.c:480>:
                            va_start()
                            out_common() <} void out_common (const char *file, int line, const char *func, int level, const char *suffix, const char *fmt, va_list ap) at core/out.c:334>
                            va_end()
                        heap_thread_arena() <struct arena *heap_thread_arena (struct palloc_heap *heap) at libpmemobj/heap.c:414>:
                            os_tls_get() <void *os_tls_get (os_tls_key_t key) at core/os_thread_posix.c:62>:
                                pthread_getspecific()
                            heap_thread_arena_assign() <struct arena *heap_thread_arena_assign (struct palloc_heap *heap) at libpmemobj/heap.c:381>:
                                util_mutex_lock()
                                ASSERTne()
                                VEC_SIZE()
                                VEC_FOREACH()
                                LOG()
                                heap_arena_thread_attach() <void heap_arena_thread_attach (struct palloc_heap *heap, struct arena *a) at libpmemobj/heap.c:249>:
                                    ASSERTeq()
                                    os_tls_get() <void *os_tls_get (os_tls_key_t key) at core/os_thread_posix.c:62>:
                                        pthread_getspecific()
                                    heap_arena_thread_detach() <void heap_arena_thread_detach (struct arena *a) at libpmemobj/heap.c:232>:
                                        util_fetch_and_sub64()
                                    ASSERTne()
                                    util_fetch_and_add64()
                                    os_tls_set() <int os_tls_set (os_tls_key_t key, const void *value) at core/os_thread_posix.c:53>:
                                        pthread_setspecific()
                                util_mutex_unlock()
                            heap_global_arena_assign() <struct arena *heap_global_arena_assign (struct palloc_heap *heap) at libpmemobj/heap.c:348>:
                                util_mutex_lock()
                                ASSERTne()
                                VEC_SIZE()
                                VEC_FOREACH()
                                LOG()
                                util_mutex_unlock()
                            ASSERT()
                            ASSERTne()
                        ASSERTne()
                        VEC_ARR()
                        bucket_acquire() <struct bucket *bucket_acquire (struct bucket_locked *b) at libpmemobj/bucket.c:117>:
                            util_mutex_lock()
                    heap_populate_bucket() <int heap_populate_bucket (struct palloc_heap *heap, struct bucket *bucket) at libpmemobj/heap.c:850>:
                        util_atomic_store_explicit32()
                        ZID_TO_ZONE()
                        VALGRIND_ADD_TO_GLOBAL_TX_IGNORE()
                        heap_zone_init() <void heap_zone_init (struct palloc_heap *heap, uint32_t zone_id, uint32_t first_chunk_id) at libpmemobj/heap.c:559>:
                            ZID_TO_ZONE()
                            zone_calc_size_idx() <uint32_t zone_calc_size_idx (uint32_t zone_id, unsigned max_zone, size_t heap_size) at libpmemobj/heap.c:533>:
                                ASSERT()
                            ASSERT()
                            memblock_huge_init() <struct memory_block memblock_huge_init (struct palloc_heap *heap, uint32_t chunk_id, uint32_t zone_id, uint32_t size_idx) at libpmemobj/memblock.c:1329>:
                                heap_get_chunk_hdr()
                                VALGRIND_DO_MAKE_MEM_UNDEFINED()
                                VALGRIND_ANNOTATE_NEW_MEMORY()
                                chunk_get_chunk_hdr_value() <uint64_t chunk_get_chunk_hdr_value (uint16_t type, uint16_t flags, uint32_t size_idx) at libpmemobj/memblock.c:604>:
                                    COMPILE_ERROR_ON()
                                    memcpy()
                                util_atomic_store_explicit64()
                                pmemops_persist()
                                huge_write_footer() <void huge_write_footer (struct chunk_header *hdr, uint32_t size_idx) at libpmemobj/memblock.c:1166>:
                                    VALGRIND_DO_MAKE_MEM_UNDEFINED()
                                    VALGRIND_SET_CLEAN()
                                memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                    memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                        heap_get_chunk_hdr()
                                    memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                        heap_get_chunk_hdr()
                                        FATAL()
                            pmemops_persist()
                        heap_reclaim_zone_garbage() <void heap_reclaim_zone_garbage (struct palloc_heap *heap, struct bucket *bucket, uint32_t zone_id) at libpmemobj/heap.c:775>:
                            ZID_TO_ZONE()
                            ASSERT()
                            memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                    heap_get_chunk_hdr()
                                memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                    heap_get_chunk_hdr()
                                    FATAL()
                            heap_reclaim_run() <int heap_reclaim_run (struct palloc_heap *heap, struct memory_block *m, int startup) at libpmemobj/heap.c:733>:
                                heap_get_chunk_run()
                                heap_get_chunk_hdr()
                                alloc_class_by_run() <struct alloc_class *alloc_class_by_run (struct alloc_class_collection *ac, size_t unit_size, uint16_t flags, uint32_t size_idx) at libpmemobj/alloc_class.c:594>:
                                    SIZE_TO_CLASS_MAP_INDEX()
                                    ASSERT()
                                    critnib_get() <void *critnib_get (struct critnib *c, uint64_t key) at libpmemobj/critnib.c:515>:
                                        load() <void load (void *src, void *dst) at libpmemobj/critnib.c:130>:
                                            util_atomic_load_explicit64()
                                        is_leaf() <inline bool is_leaf (struct critnib_node *n) at libpmemobj/critnib.c:150>:
                                        slice_index() <inline unsigned slice_index (uint64_t key, sh_t shift) at libpmemobj/critnib.c:178>:
                                        to_leaf() <inline struct critnib_leaf *to_leaf (struct critnib_node *n) at libpmemobj/critnib.c:159>:
                                    RUN_CLASS_KEY_PACK()
                                recycler_element_new() <struct recycler_element recycler_element_new (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/recycler.c:122>:
                                    SUPPRESS_UNUSED()
                                    util_mutex_lock()
                                    util_mutex_unlock()
                                ASSERTeq()
                                STATS_INC()
                                heap_get_recycler() <struct recycler *heap_get_recycler (struct palloc_heap *heap, size_t id, size_t nallocs) at libpmemobj/heap.c:106> (R):
                                    util_atomic_load_explicit64()
                                    recycler_new() <struct recycler *recycler_new (struct palloc_heap *heap, size_t nallocs, size_t *peak_arenas) at libpmemobj/recycler.c:74>:
                                        Malloc()
                                        ravl_new_sized() <struct ravl *ravl_new_sized (ravl_compare *compare, size_t data_size) at core/ravl.c:45>:
                                            Malloc()
                                            ERR()
                                        recycler_element_cmp() <int recycler_element_cmp (const void *lhs, const void *rhs) at libpmemobj/recycler.c:23>:
                                        memset()
                                        VEC_INIT()
                                        util_mutex_init()
                                        Free() <Free_func Free at core/alloc.c:91>
                                    util_bool_compare_and_swap64()
                                    recycler_delete() <void recycler_delete (struct recycler *r) at libpmemobj/recycler.c:107>:
                                        VEC_DELETE()
                                        util_mutex_destroy()
                                        ravl_delete() <void ravl_delete (struct ravl *ravl) at core/ravl.c:112>:
                                            ravl_delete_cb() <void ravl_delete_cb (struct ravl *ravl, ravl_cb cb, void *arg) at core/ravl.c:102>:
                                                ravl_foreach_node() <void ravl_foreach_node (struct ravl_node *n, ravl_cb cb, void *arg, int free_node) at core/ravl.c:74> (R):
                                                    ravl_foreach_node() <void ravl_foreach_node (struct ravl_node *n, ravl_cb cb, void *arg, int free_node) at core/ravl.c:74> (recursive: see 27026)
                                                    Free() <Free_func Free at core/alloc.c:91>
                                                Free() <Free_func Free at core/alloc.c:91>
                                        Free() <Free_func Free at core/alloc.c:91>
                                    heap_get_recycler() <struct recycler *heap_get_recycler (struct palloc_heap *heap, size_t id, size_t nallocs) at libpmemobj/heap.c:106> (recursive: see 27008)
                                recycler_put() <int recycler_put (struct recycler *r, struct recycler_element element) at libpmemobj/recycler.c:154>:
                                    util_mutex_lock()
                                    ravl_emplace_copy() <int ravl_emplace_copy (struct ravl *ravl, const void *data) at core/ravl.c:384>:
                                        ravl_emplace() <int ravl_emplace (struct ravl *ravl, ravl_constr constr, const void *arg) at core/ravl.c:393>:
                                            LOG()
                                            ravl_new_node() <struct ravl_node *ravl_new_node (struct ravl *ravl, ravl_constr constr, const void *arg) at core/ravl.c:161>:
                                                Malloc()
                                                ERR()
                                                ravl_node_insert_constructor() <void ravl_node_insert_constructor (void *data, size_t data_size, const void *arg) at core/ravl.c:139>:
                                                    SUPPRESS_UNUSED()
                                                    memcpy()
                                            ravl_data() <void *ravl_data (struct ravl_node *node) at core/ravl.c:571>:
                                                memcpy()
                                            ravl_balance() <void ravl_balance (struct ravl *ravl, struct ravl_node *n) at core/ravl.c:337>:
                                                ravl_node_is() <int ravl_node_is (struct ravl_node *n, int i, int j) at core/ravl.c:306>:
                                                    ravl_node_is_i_j() <int ravl_node_is_i_j (struct ravl_node *n, int i, int j) at core/ravl.c:296>:
                                                        ravl_node_rank_difference_parent() <int ravl_node_rank_difference_parent (struct ravl_node *p, struct ravl_node *n) at core/ravl.c:275>:
                                                            ravl_node_rank() <int ravl_node_rank (struct ravl_node *n) at core/ravl.c:261>:
                                                ravl_node_promote() <void ravl_node_promote (struct ravl_node *n) at core/ravl.c:315>
                                                ravl_node_sibling() <struct ravl_node *ravl_node_sibling (struct ravl_node *n) at core/ravl.c:209>:
                                                    ravl_node_slot_type() <enum ravl_slot_type ravl_node_slot_type (struct ravl_node *n) at core/ravl.c:196>:
                                                ravl_node_rank_difference() <int ravl_node_rank_difference (struct ravl_node *n) at core/ravl.c:287>:
                                                    ravl_node_rank_difference_parent() <int ravl_node_rank_difference_parent (struct ravl_node *p, struct ravl_node *n) at core/ravl.c:275>:
                                                        ravl_node_rank() <int ravl_node_rank (struct ravl_node *n) at core/ravl.c:261>:
                                                ravl_node_rank_difference_parent() <int ravl_node_rank_difference_parent (struct ravl_node *p, struct ravl_node *n) at core/ravl.c:275>:
                                                    ravl_node_rank() <int ravl_node_rank (struct ravl_node *n) at core/ravl.c:261>:
                                                ravl_slot_opposite() <enum ravl_slot_type ravl_slot_opposite (enum ravl_slot_type t) at core/ravl.c:184>:
                                                    ASSERTne()
                                                ravl_node_slot_type() <enum ravl_slot_type ravl_node_slot_type (struct ravl_node *n) at core/ravl.c:196>:
                                                ravl_rotate() <void ravl_rotate (struct ravl *ravl, struct ravl_node *n) at core/ravl.c:237>:
                                                    ASSERTne()
                                                    ravl_node_ref() <struct ravl_node **ravl_node_ref (struct ravl *ravl, struct ravl_node *n) at core/ravl.c:223>:
                                                        ravl_node_slot_type() <enum ravl_slot_type ravl_node_slot_type (struct ravl_node *n) at core/ravl.c:196>:
                                                    ravl_node_slot_type() <enum ravl_slot_type ravl_node_slot_type (struct ravl_node *n) at core/ravl.c:196>:
                                                    ravl_slot_opposite() <enum ravl_slot_type ravl_slot_opposite (enum ravl_slot_type t) at core/ravl.c:184>:
                                                        ASSERTne()
                                                ravl_node_demote() <void ravl_node_demote (struct ravl_node *n) at core/ravl.c:324>:
                                                    ASSERT()
                                            Free() <Free_func Free at core/alloc.c:91>
                                        ravl_node_copy_constructor() <void ravl_node_copy_constructor (void *data, size_t data_size, const void *arg) at core/ravl.c:152>:
                                            memcpy()
                                    util_mutex_unlock()
                                ERR()
                            heap_run_into_free_chunk() <void heap_run_into_free_chunk (struct palloc_heap *heap, struct bucket *bucket, struct memory_block *m) at libpmemobj/heap.c:697>:
                                heap_get_chunk_hdr()
                                STATS_SUB()
                                util_mutex_lock()
                                memblock_huge_init() <struct memory_block memblock_huge_init (struct palloc_heap *heap, uint32_t chunk_id, uint32_t zone_id, uint32_t size_idx) at libpmemobj/memblock.c:1329>:
                                    heap_get_chunk_hdr()
                                    VALGRIND_DO_MAKE_MEM_UNDEFINED()
                                    VALGRIND_ANNOTATE_NEW_MEMORY()
                                    chunk_get_chunk_hdr_value() <uint64_t chunk_get_chunk_hdr_value (uint16_t type, uint16_t flags, uint32_t size_idx) at libpmemobj/memblock.c:604>:
                                        COMPILE_ERROR_ON()
                                        memcpy()
                                    util_atomic_store_explicit64()
                                    pmemops_persist()
                                    huge_write_footer() <void huge_write_footer (struct chunk_header *hdr, uint32_t size_idx) at libpmemobj/memblock.c:1166>:
                                        VALGRIND_DO_MAKE_MEM_UNDEFINED()
                                        VALGRIND_SET_CLEAN()
                                    memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                        memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                            heap_get_chunk_hdr()
                                        memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                            heap_get_chunk_hdr()
                                            FATAL()
                                heap_free_chunk_reuse() <int heap_free_chunk_reuse (struct palloc_heap *heap, struct bucket *bucket, struct memory_block *m) at libpmemobj/heap.c:674>:
                                    heap_coalesce_huge() <struct memory_block heap_coalesce_huge (struct palloc_heap *heap, struct bucket *b, const struct memory_block *m) at libpmemobj/heap.c:650>:
                                        heap_get_adjacent_free_block() <int heap_get_adjacent_free_block (struct palloc_heap *heap, const struct memory_block *in, struct memory_block *out, int prev) at libpmemobj/heap.c:582>:
                                            ZID_TO_ZONE()
                                            memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                                memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                                    heap_get_chunk_hdr()
                                                memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                                    heap_get_chunk_hdr()
                                                    FATAL()
                                        bucket_remove_block() <int bucket_remove_block (struct bucket *b, const struct memory_block *m) at libpmemobj/bucket.c:178>
                                        heap_coalesce() <struct memory_block heap_coalesce (struct palloc_heap *heap, const struct memory_block *blocks[], int n) at libpmemobj/heap.c:621>:
                                            ASSERTne()
                                            memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                                memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                                    heap_get_chunk_hdr()
                                                memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                                    heap_get_chunk_hdr()
                                                    FATAL()
                                    bucket_insert_block() <int bucket_insert_block (struct bucket *b, const struct memory_block *m) at libpmemobj/bucket.c:161>:
                                        VALGRIND_DO_MAKE_MEM_NOACCESS()
                                        VALGRIND_ANNOTATE_NEW_MEMORY()
                                util_mutex_unlock()
                            heap_free_chunk_reuse() <int heap_free_chunk_reuse (struct palloc_heap *heap, struct bucket *bucket, struct memory_block *m) at libpmemobj/heap.c:674>:
                                heap_coalesce_huge() <struct memory_block heap_coalesce_huge (struct palloc_heap *heap, struct bucket *b, const struct memory_block *m) at libpmemobj/heap.c:650>:
                                    heap_get_adjacent_free_block() <int heap_get_adjacent_free_block (struct palloc_heap *heap, const struct memory_block *in, struct memory_block *out, int prev) at libpmemobj/heap.c:582>:
                                        ZID_TO_ZONE()
                                        memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                            memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                                heap_get_chunk_hdr()
                                            memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                                heap_get_chunk_hdr()
                                                FATAL()
                                    bucket_remove_block() <int bucket_remove_block (struct bucket *b, const struct memory_block *m) at libpmemobj/bucket.c:178>
                                    heap_coalesce() <struct memory_block heap_coalesce (struct palloc_heap *heap, const struct memory_block *blocks[], int n) at libpmemobj/heap.c:621>:
                                        ASSERTne()
                                        memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                            memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                                heap_get_chunk_hdr()
                                            memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                                heap_get_chunk_hdr()
                                                FATAL()
                                bucket_insert_block() <int bucket_insert_block (struct bucket *b, const struct memory_block *m) at libpmemobj/bucket.c:161>:
                                    VALGRIND_DO_MAKE_MEM_NOACCESS()
                                    VALGRIND_ANNOTATE_NEW_MEMORY()
                    heap_bucket_release() <void heap_bucket_release (struct bucket *b) at libpmemobj/heap.c:498>:
                        bucket_release() <void bucket_release (struct bucket *b) at libpmemobj/bucket.c:127>:
                            util_mutex_unlock()
                    heap_get_bestfit_block() <int heap_get_bestfit_block (struct palloc_heap *heap, struct bucket *b, struct memory_block *m) at libpmemobj/heap.c:1210> (recursive: see 25741)
                    heap_run_create() <int heap_run_create (struct palloc_heap *heap, struct bucket *b, struct memory_block *m) at libpmemobj/heap.c:1065>:
                        bucket_alloc_class() <struct alloc_class *bucket_alloc_class (struct bucket *b) at libpmemobj/bucket.c:152>
                        memblock_run_init() <struct memory_block memblock_run_init (struct palloc_heap *heap, uint32_t chunk_id, uint32_t zone_id, struct run_descriptor *rdsc) at libpmemobj/memblock.c:1361>:
                            ASSERTne()
                            ZID_TO_ZONE()
                            heap_get_chunk_run()
                            SIZEOF_RUN()
                            VALGRIND_DO_MAKE_MEM_UNDEFINED()
                            VALGRIND_ADD_TO_TX()
                            memset()
                            VALGRIND_REMOVE_FROM_TX()
                            pmemops_flush()
                            VALGRIND_ANNOTATE_NEW_MEMORY()
                            pmemops_persist()
                            ASSERT()
                            chunk_get_chunk_hdr_value() <uint64_t chunk_get_chunk_hdr_value (uint16_t type, uint16_t flags, uint32_t size_idx) at libpmemobj/memblock.c:604>:
                                COMPILE_ERROR_ON()
                                memcpy()
                            util_atomic_store_explicit64()
                            memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                    heap_get_chunk_hdr()
                                memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                    heap_get_chunk_hdr()
                                    FATAL()
                        bucket_attach_run() <int bucket_attach_run (struct bucket *b, const struct memory_block *m) at libpmemobj/bucket.c:206>:
                            util_mutex_lock()
                            bucket_memblock_insert_block() <int bucket_memblock_insert_block (const struct memory_block *m, void *b) at libpmemobj/bucket.c:197>:
                                bucket_insert_block() <int bucket_insert_block (struct bucket *b, const struct memory_block *m) at libpmemobj/bucket.c:161>:
                                    VALGRIND_DO_MAKE_MEM_NOACCESS()
                                    VALGRIND_ANNOTATE_NEW_MEMORY()
                            util_mutex_unlock()
                            util_fetch_and_add64()
                        STATS_INC()
                ASSERT()
                heap_split_block() <void heap_split_block (struct palloc_heap *heap, struct bucket *b, struct memory_block *m, uint32_t units) at libpmemobj/heap.c:1172>:
                    bucket_alloc_class() <struct alloc_class *bucket_alloc_class (struct bucket *b) at libpmemobj/bucket.c:152>
                    ASSERT()
                    memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                        memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                            heap_get_chunk_hdr()
                        memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                            heap_get_chunk_hdr()
                            FATAL()
                    bucket_insert_block() <int bucket_insert_block (struct bucket *b, const struct memory_block *m) at libpmemobj/bucket.c:161>:
                        VALGRIND_DO_MAKE_MEM_NOACCESS()
                        VALGRIND_ANNOTATE_NEW_MEMORY()
                    LOG()
                    memblock_huge_init() <struct memory_block memblock_huge_init (struct palloc_heap *heap, uint32_t chunk_id, uint32_t zone_id, uint32_t size_idx) at libpmemobj/memblock.c:1329>:
                        heap_get_chunk_hdr()
                        VALGRIND_DO_MAKE_MEM_UNDEFINED()
                        VALGRIND_ANNOTATE_NEW_MEMORY()
                        chunk_get_chunk_hdr_value() <uint64_t chunk_get_chunk_hdr_value (uint16_t type, uint16_t flags, uint32_t size_idx) at libpmemobj/memblock.c:604>:
                            COMPILE_ERROR_ON()
                            memcpy()
                        util_atomic_store_explicit64()
                        pmemops_persist()
                        huge_write_footer() <void huge_write_footer (struct chunk_header *hdr, uint32_t size_idx) at libpmemobj/memblock.c:1166>:
                            VALGRIND_DO_MAKE_MEM_UNDEFINED()
                            VALGRIND_SET_CLEAN()
                        memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                            memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                heap_get_chunk_hdr()
                            memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                heap_get_chunk_hdr()
                                FATAL()
            alloc_prep_block() <int alloc_prep_block (struct palloc_heap *heap, const struct memory_block *m, palloc_constr constructor, void *arg, uint64_t extra_field, uint16_t object_flags, struct pobj_action_internal *out) at libpmemobj/palloc.c:112>:
                VALGRIND_DO_MEMPOOL_ALLOC()
                VALGRIND_DO_MAKE_MEM_UNDEFINED()
                VALGRIND_ANNOTATE_NEW_MEMORY()
                unlikely()
                pmemops_memset()
                VALGRIND_DO_MEMPOOL_FREE()
                HEAP_PTR_TO_OFF()
            bucket_insert_block() <int bucket_insert_block (struct bucket *b, const struct memory_block *m) at libpmemobj/bucket.c:161>:
                VALGRIND_DO_MAKE_MEM_NOACCESS()
                VALGRIND_ANNOTATE_NEW_MEMORY()
            bucket_active_block() <struct memory_block_reserved *bucket_active_block (struct bucket *b) at libpmemobj/bucket.c:265>:
            util_fetch_and_add64()
            heap_bucket_release() <void heap_bucket_release (struct bucket *b) at libpmemobj/heap.c:498>:
                bucket_release() <void bucket_release (struct bucket *b) at libpmemobj/bucket.c:127>:
                    util_mutex_unlock()
    PMEMOBJ_API_END()
pmemobj_root() <PMEMoid pmemobj_root (PMEMobjpool *pop, size_t size) at libpmemobj/obj.c:2453>:
    LOG()
    PMEMOBJ_API_START()
    pmemobj_root_construct() <PMEMoid pmemobj_root_construct (PMEMobjpool *pop, size_t size, pmemobj_constr constructor, void *arg) at libpmemobj/obj.c:2408>:
        LOG()
        ERR()
        PMEMOBJ_API_START()
        pmemobj_mutex_lock_nofail()
        obj_alloc_root() <int obj_alloc_root (PMEMobjpool *pop, size_t size, pmemobj_constr constructor, void *arg) at libpmemobj/obj.c:2360>:
            LOG()
            OBJ_OFF_TO_PTR()
            pmalloc_operation_hold() <struct operation_context *pmalloc_operation_hold (PMEMobjpool *pop) at libpmemobj/pmalloc.c:74>:
                pmalloc_operation_hold_type() <struct operation_context *pmalloc_operation_hold_type (PMEMobjpool *pop, enum pmalloc_operation_type type, int start) at libpmemobj/pmalloc.c:45>:
                    lane_hold() <unsigned lane_hold (PMEMobjpool *pop, struct lane **lanep) at libpmemobj/lane.c:510>:
                        get_lane_info_record() <inline struct lane_info *get_lane_info_record (PMEMobjpool *pop) at libpmemobj/lane.c:466>:
                            likely()
                            unlikely()
                            lane_info_ht_boot() <inline void lane_info_ht_boot (void) at libpmemobj/lane.c:74>:
                                lane_info_create() <inline void lane_info_create (void) at libpmemobj/lane.c:39>:
                                    critnib_new() <struct critnib *critnib_new (void) at libpmemobj/critnib.c:187>:
                                        Zalloc() <void *Zalloc (size_t sz) at core/alloc.c:98>:
                                            Malloc()
                                            memset()
                                        util_mutex_init()
                                        VALGRIND_HG_DRD_DISABLE_CHECKING()
                                    FATAL()
                                os_tls_set() <int os_tls_set (os_tls_key_t key, const void *value) at core/os_thread_posix.c:53>:
                                    pthread_setspecific()
                                FATAL()
                            critnib_get() <void *critnib_get (struct critnib *c, uint64_t key) at libpmemobj/critnib.c:515>:
                                load() <void load (void *src, void *dst) at libpmemobj/critnib.c:130>:
                                    util_atomic_load_explicit64()
                                is_leaf() <inline bool is_leaf (struct critnib_node *n) at libpmemobj/critnib.c:150>:
                                slice_index() <inline unsigned slice_index (uint64_t key, sh_t shift) at libpmemobj/critnib.c:178>:
                                to_leaf() <inline struct critnib_leaf *to_leaf (struct critnib_node *n) at libpmemobj/critnib.c:159>:
                            Malloc()
                            FATAL()
                            critnib_insert() <int critnib_insert (struct critnib *c, uint64_t key, void *value) at libpmemobj/critnib.c:340>:
                                util_mutex_lock()
                                alloc_leaf() <struct critnib_leaf *alloc_leaf (struct critnib *__restrict c) at libpmemobj/critnib.c:311>:
                                    Malloc()
                                    ERR()
                                    VALGRIND_ANNOTATE_NEW_MEMORY()
                                util_mutex_unlock()
                                VALGRIND_HG_DRD_DISABLE_CHECKING()
                                is_leaf() <inline bool is_leaf (struct critnib_node *n) at libpmemobj/critnib.c:150>:
                                path_mask() <inline uint64_t path_mask (sh_t shift) at libpmemobj/critnib.c:169>:
                                slice_index() <inline unsigned slice_index (uint64_t key, sh_t shift) at libpmemobj/critnib.c:178>:
                                store() <void store (void *dst, void *src) at libpmemobj/critnib.c:140>:
                                    util_atomic_store_explicit64()
                                to_leaf() <inline struct critnib_leaf *to_leaf (struct critnib_node *n) at libpmemobj/critnib.c:159>:
                                ASSERT()
                                free_leaf() <void free_leaf (struct critnib *__restrict c, struct critnib_leaf *__restrict k) at libpmemobj/critnib.c:298>
                                util_mssb_index64()
                                alloc_node() <struct critnib_node *alloc_node (struct critnib *__restrict c) at libpmemobj/critnib.c:274>:
                                    Malloc()
                                    ERR()
                                    VALGRIND_ANNOTATE_NEW_MEMORY()
                        unlikely()
                        util_fetch_and_add32()
                        get_lane() <inline void get_lane (uint64_t *locks, struct lane_info *info, uint64_t nlocks) at libpmemobj/lane.c:430>:
                            likely()
                            util_bool_compare_and_swap64()
                            sched_yield()
                        VALGRIND_ANNOTATE_NEW_MEMORY()
                        operation_init() <void operation_init (struct operation_context *ctx) at libpmemobj/memops.c:709>:
                            VALGRIND_ANNOTATE_NEW_MEMORY()
                            VECQ_REINIT()
                    operation_start() <void operation_start (struct operation_context *ctx) at libpmemobj/memops.c:736>:
                        operation_init() <void operation_init (struct operation_context *ctx) at libpmemobj/memops.c:709>:
                            VALGRIND_ANNOTATE_NEW_MEMORY()
                            VECQ_REINIT()
                        ASSERTeq()
            operation_add_entry() <int operation_add_entry (struct operation_context *ctx, void *ptr, uint64_t value, ulog_operation_type type) at libpmemobj/memops.c:411>:
                OBJ_OFF_IS_VALID()
                operation_add_typed_entry() <int operation_add_typed_entry (struct operation_context *ctx, void *ptr, uint64_t value, ulog_operation_type type, enum operation_log_type log_type) at libpmemobj/memops.c:362>:
                    Realloc()
                    SIZEOF_ULOG()
                    VECQ_CLEAR()
                    operation_try_merge_entry() <int operation_try_merge_entry (struct operation_context *ctx, void *ptr, uint64_t value, ulog_operation_type type) at libpmemobj/memops.c:318>:
                        OBJ_PTR_TO_OFF()
                        VECQ_FOREACH_REVERSE()
                        ulog_entry_offset() <uint64_t ulog_entry_offset (const struct ulog_entry_base *entry) at libpmemobj/ulog.c:68>:
                        ulog_entry_type() <ulog_operation_type ulog_entry_type (const struct ulog_entry_base *entry) at libpmemobj/ulog.c:59>:
                            ULOG_OPERATION_FROM_OFFSET()
                        operation_merge() <inline void operation_merge (struct ulog_entry_base *entry, uint64_t value, ulog_operation_type type) at libpmemobj/memops.c:288>:
                            ASSERT()
                    ulog_entry_val_create() <struct ulog_entry_val *ulog_entry_val_create (struct ulog *ulog, size_t offset, uint64_t *dest, uint64_t value, ulog_operation_type type, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:372>:
                        COMPILE_ERROR_ON()
                        ULOG_OPERATION()
                        pmemops_memcpy()
                    operation_merge_entry_add() <void operation_merge_entry_add (struct operation_context *ctx, struct ulog_entry_val *entry) at libpmemobj/memops.c:344>:
                        VECQ_SIZE()
                        VECQ_DEQUEUE()
                        VECQ_ENQUEUE()
                        LOG()
                    ulog_entry_size() <size_t ulog_entry_size (const struct ulog_entry_base *entry) at libpmemobj/ulog.c:77>:
                        ulog_entry_type() <ulog_operation_type ulog_entry_type (const struct ulog_entry_base *entry) at libpmemobj/ulog.c:59>:
                            ULOG_OPERATION_FROM_OFFSET()
                        CACHELINE_ALIGN()
                        ASSERT()
            palloc_operation() <int palloc_operation (struct palloc_heap *heap, uint64_t off, uint64_t *dest_off, size_t size, palloc_constr constructor, void *arg, uint64_t extra_field, uint16_t object_flags, uint16_t class_id, uint16_t arena_id, struct operation_context *ctx) at libpmemobj/palloc.c:705>:
                palloc_defer_free_create() <void palloc_defer_free_create (struct palloc_heap *heap, uint64_t off, struct pobj_action_internal *out) at libpmemobj/palloc.c:610>:
                    COMPILE_ERROR_ON()
                    memblock_from_offset() <struct memory_block memblock_from_offset (struct palloc_heap *heap, uint64_t off) at libpmemobj/memblock.c:1532>:
                        memblock_from_offset_opt() <struct memory_block memblock_from_offset_opt (struct palloc_heap *heap, uint64_t off, int size) at libpmemobj/memblock.c:1476>:
                            HEAP_PTR_TO_OFF()
                            heap_get_chunk_hdr()
                            memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                heap_get_chunk_hdr()
                            ASSERTeq()
                            memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                heap_get_chunk_hdr()
                                FATAL()
                            run_get_data_offset() <size_t run_get_data_offset (const struct memory_block *m) at libpmemobj/memblock.c:572>:
                                heap_get_chunk_run()
                                run_get_data_start() <char *run_get_data_start (const struct memory_block *m) at libpmemobj/memblock.c:544>:
                                    heap_get_chunk_hdr()
                                    heap_get_chunk_run()
                                    run_get_bitmap() <void run_get_bitmap (const struct memory_block *m, struct run_bitmap *b) at libpmemobj/memblock.c:488>:
                                        heap_get_chunk_run()
                                        heap_get_chunk_hdr()
                                        memblock_run_bitmap() <void memblock_run_bitmap (uint32_t *size_idx, uint16_t flags, uint64_t unit_size, uint64_t alignment, void *content, struct run_bitmap *b) at libpmemobj/memblock.c:410>:
                                            ASSERTne()
                                            RUN_CONTENT_SIZE_BYTES()
                                            util_div_ceil()
                                            ALIGN_UP()
                                            memblock_run_default_nallocs() <unsigned memblock_run_default_nallocs (uint32_t *size_idx, uint16_t flags, uint64_t unit_size, uint64_t alignment) at libpmemobj/memblock.c:370>:
                                                SUPPRESS_UNUSED()
                                                RUN_DEFAULT_SIZE_BYTES()
                                                LOG()
                                        ASSERTeq()
                                    ALIGN_UP()
                            heap_alloc_classes() <struct alloc_class_collection *heap_alloc_classes (struct palloc_heap *heap) at libpmemobj/heap.c:160>:
                            alloc_class_by_run() <struct alloc_class *alloc_class_by_run (struct alloc_class_collection *ac, size_t unit_size, uint16_t flags, uint32_t size_idx) at libpmemobj/alloc_class.c:594>:
                                SIZE_TO_CLASS_MAP_INDEX()
                                ASSERT()
                                critnib_get() <void *critnib_get (struct critnib *c, uint64_t key) at libpmemobj/critnib.c:515>:
                                    load() <void load (void *src, void *dst) at libpmemobj/critnib.c:130>:
                                        util_atomic_load_explicit64()
                                    is_leaf() <inline bool is_leaf (struct critnib_node *n) at libpmemobj/critnib.c:150>:
                                    slice_index() <inline unsigned slice_index (uint64_t key, sh_t shift) at libpmemobj/critnib.c:178>:
                                    to_leaf() <inline struct critnib_leaf *to_leaf (struct critnib_node *n) at libpmemobj/critnib.c:159>:
                                RUN_CLASS_KEY_PACK()
                            CALC_SIZE_IDX()
                    heap_ensure_zone_reclaimed() <void heap_ensure_zone_reclaimed (struct palloc_heap *heap, uint32_t zone_id) at libpmemobj/heap.c:816>:
                        util_atomic_load_explicit32()
                        heap_bucket_acquire() <struct bucket *heap_bucket_acquire (struct palloc_heap *heap, uint8_t class_id, uint16_t arena_id) at libpmemobj/heap.c:470>:
                            out() <void out (const char *fmt, ...) at core/out.c:480>:
                                va_start()
                                out_common() <} void out_common (const char *file, int line, const char *func, int level, const char *suffix, const char *fmt, va_list ap) at core/out.c:334>
                                va_end()
                            heap_thread_arena() <struct arena *heap_thread_arena (struct palloc_heap *heap) at libpmemobj/heap.c:414>:
                                os_tls_get() <void *os_tls_get (os_tls_key_t key) at core/os_thread_posix.c:62>:
                                    pthread_getspecific()
                                heap_thread_arena_assign() <struct arena *heap_thread_arena_assign (struct palloc_heap *heap) at libpmemobj/heap.c:381>:
                                    util_mutex_lock()
                                    ASSERTne()
                                    VEC_SIZE()
                                    VEC_FOREACH()
                                    LOG()
                                    heap_arena_thread_attach() <void heap_arena_thread_attach (struct palloc_heap *heap, struct arena *a) at libpmemobj/heap.c:249>:
                                        ASSERTeq()
                                        os_tls_get() <void *os_tls_get (os_tls_key_t key) at core/os_thread_posix.c:62>:
                                            pthread_getspecific()
                                        heap_arena_thread_detach() <void heap_arena_thread_detach (struct arena *a) at libpmemobj/heap.c:232>:
                                            util_fetch_and_sub64()
                                        ASSERTne()
                                        util_fetch_and_add64()
                                        os_tls_set() <int os_tls_set (os_tls_key_t key, const void *value) at core/os_thread_posix.c:53>:
                                            pthread_setspecific()
                                    util_mutex_unlock()
                                heap_global_arena_assign() <struct arena *heap_global_arena_assign (struct palloc_heap *heap) at libpmemobj/heap.c:348>:
                                    util_mutex_lock()
                                    ASSERTne()
                                    VEC_SIZE()
                                    VEC_FOREACH()
                                    LOG()
                                    util_mutex_unlock()
                                ASSERT()
                                ASSERTne()
                            ASSERTne()
                            VEC_ARR()
                            bucket_acquire() <struct bucket *bucket_acquire (struct bucket_locked *b) at libpmemobj/bucket.c:117>:
                                util_mutex_lock()
                        ZID_TO_ZONE()
                        ASSERTeq()
                        out() <void out (const char *fmt, ...) at core/out.c:480>:
                            va_start()
                            out_common() <} void out_common (const char *file, int line, const char *func, int level, const char *suffix, const char *fmt, va_list ap) at core/out.c:334>
                            va_end()
                        util_atomic_store_explicit32()
                        heap_reclaim_zone_garbage() <void heap_reclaim_zone_garbage (struct palloc_heap *heap, struct bucket *bucket, uint32_t zone_id) at libpmemobj/heap.c:775>:
                            ZID_TO_ZONE()
                            ASSERT()
                            memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                    heap_get_chunk_hdr()
                                memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                    heap_get_chunk_hdr()
                                    FATAL()
                            heap_reclaim_run() <int heap_reclaim_run (struct palloc_heap *heap, struct memory_block *m, int startup) at libpmemobj/heap.c:733>:
                                heap_get_chunk_run()
                                heap_get_chunk_hdr()
                                alloc_class_by_run() <struct alloc_class *alloc_class_by_run (struct alloc_class_collection *ac, size_t unit_size, uint16_t flags, uint32_t size_idx) at libpmemobj/alloc_class.c:594>:
                                    SIZE_TO_CLASS_MAP_INDEX()
                                    ASSERT()
                                    critnib_get() <void *critnib_get (struct critnib *c, uint64_t key) at libpmemobj/critnib.c:515>:
                                        load() <void load (void *src, void *dst) at libpmemobj/critnib.c:130>:
                                            util_atomic_load_explicit64()
                                        is_leaf() <inline bool is_leaf (struct critnib_node *n) at libpmemobj/critnib.c:150>:
                                        slice_index() <inline unsigned slice_index (uint64_t key, sh_t shift) at libpmemobj/critnib.c:178>:
                                        to_leaf() <inline struct critnib_leaf *to_leaf (struct critnib_node *n) at libpmemobj/critnib.c:159>:
                                    RUN_CLASS_KEY_PACK()
                                recycler_element_new() <struct recycler_element recycler_element_new (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/recycler.c:122>:
                                    SUPPRESS_UNUSED()
                                    util_mutex_lock()
                                    util_mutex_unlock()
                                ASSERTeq()
                                STATS_INC()
                                heap_get_recycler() <struct recycler *heap_get_recycler (struct palloc_heap *heap, size_t id, size_t nallocs) at libpmemobj/heap.c:106> (R):
                                    util_atomic_load_explicit64()
                                    recycler_new() <struct recycler *recycler_new (struct palloc_heap *heap, size_t nallocs, size_t *peak_arenas) at libpmemobj/recycler.c:74>:
                                        Malloc()
                                        ravl_new_sized() <struct ravl *ravl_new_sized (ravl_compare *compare, size_t data_size) at core/ravl.c:45>:
                                            Malloc()
                                            ERR()
                                        recycler_element_cmp() <int recycler_element_cmp (const void *lhs, const void *rhs) at libpmemobj/recycler.c:23>:
                                        memset()
                                        VEC_INIT()
                                        util_mutex_init()
                                        Free() <Free_func Free at core/alloc.c:91>
                                    util_bool_compare_and_swap64()
                                    recycler_delete() <void recycler_delete (struct recycler *r) at libpmemobj/recycler.c:107>:
                                        VEC_DELETE()
                                        util_mutex_destroy()
                                        ravl_delete() <void ravl_delete (struct ravl *ravl) at core/ravl.c:112>:
                                            ravl_delete_cb() <void ravl_delete_cb (struct ravl *ravl, ravl_cb cb, void *arg) at core/ravl.c:102>:
                                                ravl_foreach_node() <void ravl_foreach_node (struct ravl_node *n, ravl_cb cb, void *arg, int free_node) at core/ravl.c:74> (R):
                                                    ravl_foreach_node() <void ravl_foreach_node (struct ravl_node *n, ravl_cb cb, void *arg, int free_node) at core/ravl.c:74> (recursive: see 27467)
                                                    Free() <Free_func Free at core/alloc.c:91>
                                                Free() <Free_func Free at core/alloc.c:91>
                                        Free() <Free_func Free at core/alloc.c:91>
                                    heap_get_recycler() <struct recycler *heap_get_recycler (struct palloc_heap *heap, size_t id, size_t nallocs) at libpmemobj/heap.c:106> (recursive: see 27449)
                                recycler_put() <int recycler_put (struct recycler *r, struct recycler_element element) at libpmemobj/recycler.c:154>:
                                    util_mutex_lock()
                                    ravl_emplace_copy() <int ravl_emplace_copy (struct ravl *ravl, const void *data) at core/ravl.c:384>:
                                        ravl_emplace() <int ravl_emplace (struct ravl *ravl, ravl_constr constr, const void *arg) at core/ravl.c:393>:
                                            LOG()
                                            ravl_new_node() <struct ravl_node *ravl_new_node (struct ravl *ravl, ravl_constr constr, const void *arg) at core/ravl.c:161>:
                                                Malloc()
                                                ERR()
                                                ravl_node_insert_constructor() <void ravl_node_insert_constructor (void *data, size_t data_size, const void *arg) at core/ravl.c:139>:
                                                    SUPPRESS_UNUSED()
                                                    memcpy()
                                            ravl_data() <void *ravl_data (struct ravl_node *node) at core/ravl.c:571>:
                                                memcpy()
                                            ravl_balance() <void ravl_balance (struct ravl *ravl, struct ravl_node *n) at core/ravl.c:337>:
                                                ravl_node_is() <int ravl_node_is (struct ravl_node *n, int i, int j) at core/ravl.c:306>:
                                                    ravl_node_is_i_j() <int ravl_node_is_i_j (struct ravl_node *n, int i, int j) at core/ravl.c:296>:
                                                        ravl_node_rank_difference_parent() <int ravl_node_rank_difference_parent (struct ravl_node *p, struct ravl_node *n) at core/ravl.c:275>:
                                                            ravl_node_rank() <int ravl_node_rank (struct ravl_node *n) at core/ravl.c:261>:
                                                ravl_node_promote() <void ravl_node_promote (struct ravl_node *n) at core/ravl.c:315>
                                                ravl_node_sibling() <struct ravl_node *ravl_node_sibling (struct ravl_node *n) at core/ravl.c:209>:
                                                    ravl_node_slot_type() <enum ravl_slot_type ravl_node_slot_type (struct ravl_node *n) at core/ravl.c:196>:
                                                ravl_node_rank_difference() <int ravl_node_rank_difference (struct ravl_node *n) at core/ravl.c:287>:
                                                    ravl_node_rank_difference_parent() <int ravl_node_rank_difference_parent (struct ravl_node *p, struct ravl_node *n) at core/ravl.c:275>:
                                                        ravl_node_rank() <int ravl_node_rank (struct ravl_node *n) at core/ravl.c:261>:
                                                ravl_node_rank_difference_parent() <int ravl_node_rank_difference_parent (struct ravl_node *p, struct ravl_node *n) at core/ravl.c:275>:
                                                    ravl_node_rank() <int ravl_node_rank (struct ravl_node *n) at core/ravl.c:261>:
                                                ravl_slot_opposite() <enum ravl_slot_type ravl_slot_opposite (enum ravl_slot_type t) at core/ravl.c:184>:
                                                    ASSERTne()
                                                ravl_node_slot_type() <enum ravl_slot_type ravl_node_slot_type (struct ravl_node *n) at core/ravl.c:196>:
                                                ravl_rotate() <void ravl_rotate (struct ravl *ravl, struct ravl_node *n) at core/ravl.c:237>:
                                                    ASSERTne()
                                                    ravl_node_ref() <struct ravl_node **ravl_node_ref (struct ravl *ravl, struct ravl_node *n) at core/ravl.c:223>:
                                                        ravl_node_slot_type() <enum ravl_slot_type ravl_node_slot_type (struct ravl_node *n) at core/ravl.c:196>:
                                                    ravl_node_slot_type() <enum ravl_slot_type ravl_node_slot_type (struct ravl_node *n) at core/ravl.c:196>:
                                                    ravl_slot_opposite() <enum ravl_slot_type ravl_slot_opposite (enum ravl_slot_type t) at core/ravl.c:184>:
                                                        ASSERTne()
                                                ravl_node_demote() <void ravl_node_demote (struct ravl_node *n) at core/ravl.c:324>:
                                                    ASSERT()
                                            Free() <Free_func Free at core/alloc.c:91>
                                        ravl_node_copy_constructor() <void ravl_node_copy_constructor (void *data, size_t data_size, const void *arg) at core/ravl.c:152>:
                                            memcpy()
                                    util_mutex_unlock()
                                ERR()
                            heap_run_into_free_chunk() <void heap_run_into_free_chunk (struct palloc_heap *heap, struct bucket *bucket, struct memory_block *m) at libpmemobj/heap.c:697>:
                                heap_get_chunk_hdr()
                                STATS_SUB()
                                util_mutex_lock()
                                memblock_huge_init() <struct memory_block memblock_huge_init (struct palloc_heap *heap, uint32_t chunk_id, uint32_t zone_id, uint32_t size_idx) at libpmemobj/memblock.c:1329>:
                                    heap_get_chunk_hdr()
                                    VALGRIND_DO_MAKE_MEM_UNDEFINED()
                                    VALGRIND_ANNOTATE_NEW_MEMORY()
                                    chunk_get_chunk_hdr_value() <uint64_t chunk_get_chunk_hdr_value (uint16_t type, uint16_t flags, uint32_t size_idx) at libpmemobj/memblock.c:604>:
                                        COMPILE_ERROR_ON()
                                        memcpy()
                                    util_atomic_store_explicit64()
                                    pmemops_persist()
                                    huge_write_footer() <void huge_write_footer (struct chunk_header *hdr, uint32_t size_idx) at libpmemobj/memblock.c:1166>:
                                        VALGRIND_DO_MAKE_MEM_UNDEFINED()
                                        VALGRIND_SET_CLEAN()
                                    memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                        memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                            heap_get_chunk_hdr()
                                        memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                            heap_get_chunk_hdr()
                                            FATAL()
                                heap_free_chunk_reuse() <int heap_free_chunk_reuse (struct palloc_heap *heap, struct bucket *bucket, struct memory_block *m) at libpmemobj/heap.c:674>:
                                    heap_coalesce_huge() <struct memory_block heap_coalesce_huge (struct palloc_heap *heap, struct bucket *b, const struct memory_block *m) at libpmemobj/heap.c:650>:
                                        heap_get_adjacent_free_block() <int heap_get_adjacent_free_block (struct palloc_heap *heap, const struct memory_block *in, struct memory_block *out, int prev) at libpmemobj/heap.c:582>:
                                            ZID_TO_ZONE()
                                            memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                                memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                                    heap_get_chunk_hdr()
                                                memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                                    heap_get_chunk_hdr()
                                                    FATAL()
                                        bucket_remove_block() <int bucket_remove_block (struct bucket *b, const struct memory_block *m) at libpmemobj/bucket.c:178>
                                        heap_coalesce() <struct memory_block heap_coalesce (struct palloc_heap *heap, const struct memory_block *blocks[], int n) at libpmemobj/heap.c:621>:
                                            ASSERTne()
                                            memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                                memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                                    heap_get_chunk_hdr()
                                                memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                                    heap_get_chunk_hdr()
                                                    FATAL()
                                    bucket_insert_block() <int bucket_insert_block (struct bucket *b, const struct memory_block *m) at libpmemobj/bucket.c:161>:
                                        VALGRIND_DO_MAKE_MEM_NOACCESS()
                                        VALGRIND_ANNOTATE_NEW_MEMORY()
                                util_mutex_unlock()
                            heap_free_chunk_reuse() <int heap_free_chunk_reuse (struct palloc_heap *heap, struct bucket *bucket, struct memory_block *m) at libpmemobj/heap.c:674>:
                                heap_coalesce_huge() <struct memory_block heap_coalesce_huge (struct palloc_heap *heap, struct bucket *b, const struct memory_block *m) at libpmemobj/heap.c:650>:
                                    heap_get_adjacent_free_block() <int heap_get_adjacent_free_block (struct palloc_heap *heap, const struct memory_block *in, struct memory_block *out, int prev) at libpmemobj/heap.c:582>:
                                        ZID_TO_ZONE()
                                        memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                            memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                                heap_get_chunk_hdr()
                                            memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                                heap_get_chunk_hdr()
                                                FATAL()
                                    bucket_remove_block() <int bucket_remove_block (struct bucket *b, const struct memory_block *m) at libpmemobj/bucket.c:178>
                                    heap_coalesce() <struct memory_block heap_coalesce (struct palloc_heap *heap, const struct memory_block *blocks[], int n) at libpmemobj/heap.c:621>:
                                        ASSERTne()
                                        memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                            memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                                heap_get_chunk_hdr()
                                            memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                                heap_get_chunk_hdr()
                                                FATAL()
                                bucket_insert_block() <int bucket_insert_block (struct bucket *b, const struct memory_block *m) at libpmemobj/bucket.c:161>:
                                    VALGRIND_DO_MAKE_MEM_NOACCESS()
                                    VALGRIND_ANNOTATE_NEW_MEMORY()
                        heap_bucket_release() <void heap_bucket_release (struct bucket *b) at libpmemobj/heap.c:498>:
                            bucket_release() <void bucket_release (struct bucket *b) at libpmemobj/bucket.c:127>:
                                util_mutex_unlock()
                operation_cancel() <void operation_cancel (struct operation_context *ctx) at libpmemobj/memops.c:761>:
                    ASSERTeq()
                palloc_reservation_create() <int palloc_reservation_create (struct palloc_heap *heap, size_t size, palloc_constr constructor, void *arg, uint64_t extra_field, uint16_t object_flags, uint16_t class_id, uint16_t arena_id, struct pobj_action_internal *out) at libpmemobj/palloc.c:178>:
                    ASSERT()
                    heap_get_best_class() <struct alloc_class *heap_get_best_class (struct palloc_heap *heap, size_t size) at libpmemobj/heap.c:221>:
                        alloc_class_by_alloc_size() <struct alloc_class *alloc_class_by_alloc_size (struct alloc_class_collection *ac, size_t size) at libpmemobj/alloc_class.c:568>:
                            SIZE_TO_CLASS_MAP_INDEX()
                            alloc_class_assign_by_size() <struct alloc_class *alloc_class_assign_by_size (struct alloc_class_collection *ac, size_t size) at libpmemobj/alloc_class.c:538>:
                                LOG()
                                SIZE_TO_CLASS_MAP_INDEX()
                                alloc_class_find_min_frag() <struct alloc_class *alloc_class_find_min_frag (struct alloc_class_collection *ac, size_t n) at libpmemobj/alloc_class.c:340>:
                                    LOG()
                                    ASSERTne()
                                ASSERTne()
                                util_bool_compare_and_swap64()
                    alloc_class_by_id() <struct alloc_class *alloc_class_by_id (struct alloc_class_collection *ac, uint8_t id) at libpmemobj/alloc_class.c:612>
                    heap_alloc_classes() <struct alloc_class_collection *heap_alloc_classes (struct palloc_heap *heap) at libpmemobj/heap.c:160>:
                    ERR()
                    alloc_class_calc_size_idx() <ssize_t alloc_class_calc_size_idx (struct alloc_class *c, size_t size) at libpmemobj/alloc_class.c:621>:
                        CALC_SIZE_IDX()
                    heap_bucket_acquire() <struct bucket *heap_bucket_acquire (struct palloc_heap *heap, uint8_t class_id, uint16_t arena_id) at libpmemobj/heap.c:470>:
                        out() <void out (const char *fmt, ...) at core/out.c:480>:
                            va_start()
                            out_common() <} void out_common (const char *file, int line, const char *func, int level, const char *suffix, const char *fmt, va_list ap) at core/out.c:334>
                            va_end()
                        heap_thread_arena() <struct arena *heap_thread_arena (struct palloc_heap *heap) at libpmemobj/heap.c:414>:
                            os_tls_get() <void *os_tls_get (os_tls_key_t key) at core/os_thread_posix.c:62>:
                                pthread_getspecific()
                            heap_thread_arena_assign() <struct arena *heap_thread_arena_assign (struct palloc_heap *heap) at libpmemobj/heap.c:381>:
                                util_mutex_lock()
                                ASSERTne()
                                VEC_SIZE()
                                VEC_FOREACH()
                                LOG()
                                heap_arena_thread_attach() <void heap_arena_thread_attach (struct palloc_heap *heap, struct arena *a) at libpmemobj/heap.c:249>:
                                    ASSERTeq()
                                    os_tls_get() <void *os_tls_get (os_tls_key_t key) at core/os_thread_posix.c:62>:
                                        pthread_getspecific()
                                    heap_arena_thread_detach() <void heap_arena_thread_detach (struct arena *a) at libpmemobj/heap.c:232>:
                                        util_fetch_and_sub64()
                                    ASSERTne()
                                    util_fetch_and_add64()
                                    os_tls_set() <int os_tls_set (os_tls_key_t key, const void *value) at core/os_thread_posix.c:53>:
                                        pthread_setspecific()
                                util_mutex_unlock()
                            heap_global_arena_assign() <struct arena *heap_global_arena_assign (struct palloc_heap *heap) at libpmemobj/heap.c:348>:
                                util_mutex_lock()
                                ASSERTne()
                                VEC_SIZE()
                                VEC_FOREACH()
                                LOG()
                                util_mutex_unlock()
                            ASSERT()
                            ASSERTne()
                        ASSERTne()
                        VEC_ARR()
                        bucket_acquire() <struct bucket *bucket_acquire (struct bucket_locked *b) at libpmemobj/bucket.c:117>:
                            util_mutex_lock()
                    heap_get_bestfit_block() <int heap_get_bestfit_block (struct palloc_heap *heap, struct bucket *b, struct memory_block *m) at libpmemobj/heap.c:1210> (R):
                        bucket_alloc_class() <struct alloc_class *bucket_alloc_class (struct bucket *b) at libpmemobj/bucket.c:152>
                        bucket_alloc_block() <int bucket_alloc_block (struct bucket *b, struct memory_block *m_out) at libpmemobj/bucket.c:187>
                        heap_ensure_huge_bucket_filled() <int heap_ensure_huge_bucket_filled (struct palloc_heap *heap, struct bucket *bucket) at libpmemobj/heap.c:943>:
                            heap_reclaim_garbage() <int heap_reclaim_garbage (struct palloc_heap *heap, struct bucket *bucket) at libpmemobj/heap.c:923>:
                                heap_recycle_unused() <int heap_recycle_unused (struct palloc_heap *heap, struct recycler *recycler, struct bucket *defb, int force) at libpmemobj/heap.c:894>:
                                    recycler_recalc() <struct empty_runs recycler_recalc (struct recycler *r, int force) at libpmemobj/recycler.c:207>:
                                        VEC_INIT()
                                        util_atomic_load64()
                                        util_mutex_trylock()
                                        ravl_find() <struct ravl_node *ravl_find (struct ravl *ravl, const void *data, enum ravl_predicate flags) at core/ravl.c:524>:
                                            LOG()
                                            ravl_data() <void *ravl_data (struct ravl_node *node) at core/ravl.c:571>:
                                                memcpy()
                                            ravl_predicate_holds() <int ravl_predicate_holds (int result, struct ravl_node **ret, struct ravl_node *n, enum ravl_predicate flags) at core/ravl.c:489>:
                                                ravl_node_successor() <struct ravl_node *ravl_node_successor (struct ravl_node *n) at core/ravl.c:465>:
                                                    ravl_node_cessor() <struct ravl_node *ravl_node_cessor (struct ravl_node *n, enum ravl_slot_type t) at core/ravl.c:443>:
                                                        ravl_node_type_most() <struct ravl_node *ravl_node_type_most (struct ravl_node *n, enum ravl_slot_type t) at core/ravl.c:430>:
                                                        ravl_slot_opposite() <enum ravl_slot_type ravl_slot_opposite (enum ravl_slot_type t) at core/ravl.c:184>:
                                                            ASSERTne()
                                                ravl_node_predecessor() <struct ravl_node *ravl_node_predecessor (struct ravl_node *n) at core/ravl.c:476>:
                                                    ravl_node_cessor() <struct ravl_node *ravl_node_cessor (struct ravl_node *n, enum ravl_slot_type t) at core/ravl.c:443>:
                                                        ravl_node_type_most() <struct ravl_node *ravl_node_type_most (struct ravl_node *n, enum ravl_slot_type t) at core/ravl.c:430>:
                                                        ravl_slot_opposite() <enum ravl_slot_type ravl_slot_opposite (enum ravl_slot_type t) at core/ravl.c:184>:
                                                            ASSERTne()
                                        ravl_data() <void *ravl_data (struct ravl_node *node) at core/ravl.c:571>:
                                            memcpy()
                                        memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                            memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                                heap_get_chunk_hdr()
                                            memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                                heap_get_chunk_hdr()
                                                FATAL()
                                        recycler_element_new() <struct recycler_element recycler_element_new (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/recycler.c:122>:
                                            SUPPRESS_UNUSED()
                                            util_mutex_lock()
                                            util_mutex_unlock()
                                        ASSERT()
                                        util_fetch_and_sub64()
                                        MIN()
                                        ravl_remove() <void ravl_remove (struct ravl *ravl, struct ravl_node *n) at core/ravl.c:545> (R):
                                            LOG()
                                            ravl_node_successor() <struct ravl_node *ravl_node_successor (struct ravl_node *n) at core/ravl.c:465>:
                                                ravl_node_cessor() <struct ravl_node *ravl_node_cessor (struct ravl_node *n, enum ravl_slot_type t) at core/ravl.c:443>:
                                                    ravl_node_type_most() <struct ravl_node *ravl_node_type_most (struct ravl_node *n, enum ravl_slot_type t) at core/ravl.c:430>:
                                                    ravl_slot_opposite() <enum ravl_slot_type ravl_slot_opposite (enum ravl_slot_type t) at core/ravl.c:184>:
                                                        ASSERTne()
                                            memcpy()
                                            ravl_remove() <void ravl_remove (struct ravl *ravl, struct ravl_node *n) at core/ravl.c:545> (recursive: see 27684)
                                            ravl_node_ref() <struct ravl_node **ravl_node_ref (struct ravl *ravl, struct ravl_node *n) at core/ravl.c:223>:
                                                ravl_node_slot_type() <enum ravl_slot_type ravl_node_slot_type (struct ravl_node *n) at core/ravl.c:196>:
                                            Free() <Free_func Free at core/alloc.c:91>
                                        VEC_PUSH_BACK()
                                        VEC_FOREACH_BY_PTR()
                                        ravl_emplace_copy() <int ravl_emplace_copy (struct ravl *ravl, const void *data) at core/ravl.c:384>:
                                            ravl_emplace() <int ravl_emplace (struct ravl *ravl, ravl_constr constr, const void *arg) at core/ravl.c:393>:
                                                LOG()
                                                ravl_new_node() <struct ravl_node *ravl_new_node (struct ravl *ravl, ravl_constr constr, const void *arg) at core/ravl.c:161>:
                                                    Malloc()
                                                    ERR()
                                                    ravl_node_insert_constructor() <void ravl_node_insert_constructor (void *data, size_t data_size, const void *arg) at core/ravl.c:139>:
                                                        SUPPRESS_UNUSED()
                                                        memcpy()
                                                ravl_data() <void *ravl_data (struct ravl_node *node) at core/ravl.c:571>:
                                                    memcpy()
                                                ravl_balance() <void ravl_balance (struct ravl *ravl, struct ravl_node *n) at core/ravl.c:337>:
                                                    ravl_node_is() <int ravl_node_is (struct ravl_node *n, int i, int j) at core/ravl.c:306>:
                                                        ravl_node_is_i_j() <int ravl_node_is_i_j (struct ravl_node *n, int i, int j) at core/ravl.c:296>:
                                                            ravl_node_rank_difference_parent() <int ravl_node_rank_difference_parent (struct ravl_node *p, struct ravl_node *n) at core/ravl.c:275>:
                                                                ravl_node_rank() <int ravl_node_rank (struct ravl_node *n) at core/ravl.c:261>:
                                                    ravl_node_promote() <void ravl_node_promote (struct ravl_node *n) at core/ravl.c:315>
                                                    ravl_node_sibling() <struct ravl_node *ravl_node_sibling (struct ravl_node *n) at core/ravl.c:209>:
                                                        ravl_node_slot_type() <enum ravl_slot_type ravl_node_slot_type (struct ravl_node *n) at core/ravl.c:196>:
                                                    ravl_node_rank_difference() <int ravl_node_rank_difference (struct ravl_node *n) at core/ravl.c:287>:
                                                        ravl_node_rank_difference_parent() <int ravl_node_rank_difference_parent (struct ravl_node *p, struct ravl_node *n) at core/ravl.c:275>:
                                                            ravl_node_rank() <int ravl_node_rank (struct ravl_node *n) at core/ravl.c:261>:
                                                    ravl_node_rank_difference_parent() <int ravl_node_rank_difference_parent (struct ravl_node *p, struct ravl_node *n) at core/ravl.c:275>:
                                                        ravl_node_rank() <int ravl_node_rank (struct ravl_node *n) at core/ravl.c:261>:
                                                    ravl_slot_opposite() <enum ravl_slot_type ravl_slot_opposite (enum ravl_slot_type t) at core/ravl.c:184>:
                                                        ASSERTne()
                                                    ravl_node_slot_type() <enum ravl_slot_type ravl_node_slot_type (struct ravl_node *n) at core/ravl.c:196>:
                                                    ravl_rotate() <void ravl_rotate (struct ravl *ravl, struct ravl_node *n) at core/ravl.c:237>:
                                                        ASSERTne()
                                                        ravl_node_ref() <struct ravl_node **ravl_node_ref (struct ravl *ravl, struct ravl_node *n) at core/ravl.c:223>:
                                                            ravl_node_slot_type() <enum ravl_slot_type ravl_node_slot_type (struct ravl_node *n) at core/ravl.c:196>:
                                                        ravl_node_slot_type() <enum ravl_slot_type ravl_node_slot_type (struct ravl_node *n) at core/ravl.c:196>:
                                                        ravl_slot_opposite() <enum ravl_slot_type ravl_slot_opposite (enum ravl_slot_type t) at core/ravl.c:184>:
                                                            ASSERTne()
                                                    ravl_node_demote() <void ravl_node_demote (struct ravl_node *n) at core/ravl.c:324>:
                                                        ASSERT()
                                                Free() <Free_func Free at core/alloc.c:91>
                                            ravl_node_copy_constructor() <void ravl_node_copy_constructor (void *data, size_t data_size, const void *arg) at core/ravl.c:152>:
                                                memcpy()
                                        VEC_CLEAR()
                                        util_mutex_unlock()
                                    VEC_SIZE()
                                    heap_bucket_acquire() <struct bucket *heap_bucket_acquire (struct palloc_heap *heap, uint8_t class_id, uint16_t arena_id) at libpmemobj/heap.c:470>:
                                        out() <void out (const char *fmt, ...) at core/out.c:480>:
                                            va_start()
                                            out_common() <} void out_common (const char *file, int line, const char *func, int level, const char *suffix, const char *fmt, va_list ap) at core/out.c:334>
                                            va_end()
                                        heap_thread_arena() <struct arena *heap_thread_arena (struct palloc_heap *heap) at libpmemobj/heap.c:414>:
                                            os_tls_get() <void *os_tls_get (os_tls_key_t key) at core/os_thread_posix.c:62>:
                                                pthread_getspecific()
                                            heap_thread_arena_assign() <struct arena *heap_thread_arena_assign (struct palloc_heap *heap) at libpmemobj/heap.c:381>:
                                                util_mutex_lock()
                                                ASSERTne()
                                                VEC_SIZE()
                                                VEC_FOREACH()
                                                LOG()
                                                heap_arena_thread_attach() <void heap_arena_thread_attach (struct palloc_heap *heap, struct arena *a) at libpmemobj/heap.c:249>:
                                                    ASSERTeq()
                                                    os_tls_get() <void *os_tls_get (os_tls_key_t key) at core/os_thread_posix.c:62>:
                                                        pthread_getspecific()
                                                    heap_arena_thread_detach() <void heap_arena_thread_detach (struct arena *a) at libpmemobj/heap.c:232>:
                                                        util_fetch_and_sub64()
                                                    ASSERTne()
                                                    util_fetch_and_add64()
                                                    os_tls_set() <int os_tls_set (os_tls_key_t key, const void *value) at core/os_thread_posix.c:53>:
                                                        pthread_setspecific()
                                                util_mutex_unlock()
                                            heap_global_arena_assign() <struct arena *heap_global_arena_assign (struct palloc_heap *heap) at libpmemobj/heap.c:348>:
                                                util_mutex_lock()
                                                ASSERTne()
                                                VEC_SIZE()
                                                VEC_FOREACH()
                                                LOG()
                                                util_mutex_unlock()
                                            ASSERT()
                                            ASSERTne()
                                        ASSERTne()
                                        VEC_ARR()
                                        bucket_acquire() <struct bucket *bucket_acquire (struct bucket_locked *b) at libpmemobj/bucket.c:117>:
                                            util_mutex_lock()
                                    ASSERT()
                                    VEC_FOREACH_BY_PTR()
                                    heap_run_into_free_chunk() <void heap_run_into_free_chunk (struct palloc_heap *heap, struct bucket *bucket, struct memory_block *m) at libpmemobj/heap.c:697>:
                                        heap_get_chunk_hdr()
                                        STATS_SUB()
                                        util_mutex_lock()
                                        memblock_huge_init() <struct memory_block memblock_huge_init (struct palloc_heap *heap, uint32_t chunk_id, uint32_t zone_id, uint32_t size_idx) at libpmemobj/memblock.c:1329>:
                                            heap_get_chunk_hdr()
                                            VALGRIND_DO_MAKE_MEM_UNDEFINED()
                                            VALGRIND_ANNOTATE_NEW_MEMORY()
                                            chunk_get_chunk_hdr_value() <uint64_t chunk_get_chunk_hdr_value (uint16_t type, uint16_t flags, uint32_t size_idx) at libpmemobj/memblock.c:604>:
                                                COMPILE_ERROR_ON()
                                                memcpy()
                                            util_atomic_store_explicit64()
                                            pmemops_persist()
                                            huge_write_footer() <void huge_write_footer (struct chunk_header *hdr, uint32_t size_idx) at libpmemobj/memblock.c:1166>:
                                                VALGRIND_DO_MAKE_MEM_UNDEFINED()
                                                VALGRIND_SET_CLEAN()
                                            memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                                memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                                    heap_get_chunk_hdr()
                                                memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                                    heap_get_chunk_hdr()
                                                    FATAL()
                                        heap_free_chunk_reuse() <int heap_free_chunk_reuse (struct palloc_heap *heap, struct bucket *bucket, struct memory_block *m) at libpmemobj/heap.c:674>:
                                            heap_coalesce_huge() <struct memory_block heap_coalesce_huge (struct palloc_heap *heap, struct bucket *b, const struct memory_block *m) at libpmemobj/heap.c:650>:
                                                heap_get_adjacent_free_block() <int heap_get_adjacent_free_block (struct palloc_heap *heap, const struct memory_block *in, struct memory_block *out, int prev) at libpmemobj/heap.c:582>:
                                                    ZID_TO_ZONE()
                                                    memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                                        memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                                            heap_get_chunk_hdr()
                                                        memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                                            heap_get_chunk_hdr()
                                                            FATAL()
                                                bucket_remove_block() <int bucket_remove_block (struct bucket *b, const struct memory_block *m) at libpmemobj/bucket.c:178>
                                                heap_coalesce() <struct memory_block heap_coalesce (struct palloc_heap *heap, const struct memory_block *blocks[], int n) at libpmemobj/heap.c:621>:
                                                    ASSERTne()
                                                    memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                                        memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                                            heap_get_chunk_hdr()
                                                        memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                                            heap_get_chunk_hdr()
                                                            FATAL()
                                            bucket_insert_block() <int bucket_insert_block (struct bucket *b, const struct memory_block *m) at libpmemobj/bucket.c:161>:
                                                VALGRIND_DO_MAKE_MEM_NOACCESS()
                                                VALGRIND_ANNOTATE_NEW_MEMORY()
                                        util_mutex_unlock()
                                    heap_bucket_release() <void heap_bucket_release (struct bucket *b) at libpmemobj/heap.c:498>:
                                        bucket_release() <void bucket_release (struct bucket *b) at libpmemobj/bucket.c:127>:
                                            util_mutex_unlock()
                                    VEC_DELETE()
                            heap_populate_bucket() <int heap_populate_bucket (struct palloc_heap *heap, struct bucket *bucket) at libpmemobj/heap.c:850>:
                                util_atomic_store_explicit32()
                                ZID_TO_ZONE()
                                VALGRIND_ADD_TO_GLOBAL_TX_IGNORE()
                                heap_zone_init() <void heap_zone_init (struct palloc_heap *heap, uint32_t zone_id, uint32_t first_chunk_id) at libpmemobj/heap.c:559>:
                                    ZID_TO_ZONE()
                                    zone_calc_size_idx() <uint32_t zone_calc_size_idx (uint32_t zone_id, unsigned max_zone, size_t heap_size) at libpmemobj/heap.c:533>:
                                        ASSERT()
                                    ASSERT()
                                    memblock_huge_init() <struct memory_block memblock_huge_init (struct palloc_heap *heap, uint32_t chunk_id, uint32_t zone_id, uint32_t size_idx) at libpmemobj/memblock.c:1329>:
                                        heap_get_chunk_hdr()
                                        VALGRIND_DO_MAKE_MEM_UNDEFINED()
                                        VALGRIND_ANNOTATE_NEW_MEMORY()
                                        chunk_get_chunk_hdr_value() <uint64_t chunk_get_chunk_hdr_value (uint16_t type, uint16_t flags, uint32_t size_idx) at libpmemobj/memblock.c:604>:
                                            COMPILE_ERROR_ON()
                                            memcpy()
                                        util_atomic_store_explicit64()
                                        pmemops_persist()
                                        huge_write_footer() <void huge_write_footer (struct chunk_header *hdr, uint32_t size_idx) at libpmemobj/memblock.c:1166>:
                                            VALGRIND_DO_MAKE_MEM_UNDEFINED()
                                            VALGRIND_SET_CLEAN()
                                        memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                            memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                                heap_get_chunk_hdr()
                                            memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                                heap_get_chunk_hdr()
                                                FATAL()
                                    pmemops_persist()
                                heap_reclaim_zone_garbage() <void heap_reclaim_zone_garbage (struct palloc_heap *heap, struct bucket *bucket, uint32_t zone_id) at libpmemobj/heap.c:775>:
                                    ZID_TO_ZONE()
                                    ASSERT()
                                    memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                        memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                            heap_get_chunk_hdr()
                                        memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                            heap_get_chunk_hdr()
                                            FATAL()
                                    heap_reclaim_run() <int heap_reclaim_run (struct palloc_heap *heap, struct memory_block *m, int startup) at libpmemobj/heap.c:733>:
                                        heap_get_chunk_run()
                                        heap_get_chunk_hdr()
                                        alloc_class_by_run() <struct alloc_class *alloc_class_by_run (struct alloc_class_collection *ac, size_t unit_size, uint16_t flags, uint32_t size_idx) at libpmemobj/alloc_class.c:594>:
                                            SIZE_TO_CLASS_MAP_INDEX()
                                            ASSERT()
                                            critnib_get() <void *critnib_get (struct critnib *c, uint64_t key) at libpmemobj/critnib.c:515>:
                                                load() <void load (void *src, void *dst) at libpmemobj/critnib.c:130>:
                                                    util_atomic_load_explicit64()
                                                is_leaf() <inline bool is_leaf (struct critnib_node *n) at libpmemobj/critnib.c:150>:
                                                slice_index() <inline unsigned slice_index (uint64_t key, sh_t shift) at libpmemobj/critnib.c:178>:
                                                to_leaf() <inline struct critnib_leaf *to_leaf (struct critnib_node *n) at libpmemobj/critnib.c:159>:
                                            RUN_CLASS_KEY_PACK()
                                        recycler_element_new() <struct recycler_element recycler_element_new (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/recycler.c:122>:
                                            SUPPRESS_UNUSED()
                                            util_mutex_lock()
                                            util_mutex_unlock()
                                        ASSERTeq()
                                        STATS_INC()
                                        heap_get_recycler() <struct recycler *heap_get_recycler (struct palloc_heap *heap, size_t id, size_t nallocs) at libpmemobj/heap.c:106> (R):
                                            util_atomic_load_explicit64()
                                            recycler_new() <struct recycler *recycler_new (struct palloc_heap *heap, size_t nallocs, size_t *peak_arenas) at libpmemobj/recycler.c:74>:
                                                Malloc()
                                                ravl_new_sized() <struct ravl *ravl_new_sized (ravl_compare *compare, size_t data_size) at core/ravl.c:45>:
                                                    Malloc()
                                                    ERR()
                                                recycler_element_cmp() <int recycler_element_cmp (const void *lhs, const void *rhs) at libpmemobj/recycler.c:23>:
                                                memset()
                                                VEC_INIT()
                                                util_mutex_init()
                                                Free() <Free_func Free at core/alloc.c:91>
                                            util_bool_compare_and_swap64()
                                            recycler_delete() <void recycler_delete (struct recycler *r) at libpmemobj/recycler.c:107>:
                                                VEC_DELETE()
                                                util_mutex_destroy()
                                                ravl_delete() <void ravl_delete (struct ravl *ravl) at core/ravl.c:112>:
                                                    ravl_delete_cb() <void ravl_delete_cb (struct ravl *ravl, ravl_cb cb, void *arg) at core/ravl.c:102>:
                                                        ravl_foreach_node() <void ravl_foreach_node (struct ravl_node *n, ravl_cb cb, void *arg, int free_node) at core/ravl.c:74> (R):
                                                            ravl_foreach_node() <void ravl_foreach_node (struct ravl_node *n, ravl_cb cb, void *arg, int free_node) at core/ravl.c:74> (recursive: see 27903)
                                                            Free() <Free_func Free at core/alloc.c:91>
                                                        Free() <Free_func Free at core/alloc.c:91>
                                                Free() <Free_func Free at core/alloc.c:91>
                                            heap_get_recycler() <struct recycler *heap_get_recycler (struct palloc_heap *heap, size_t id, size_t nallocs) at libpmemobj/heap.c:106> (recursive: see 27885)
                                        recycler_put() <int recycler_put (struct recycler *r, struct recycler_element element) at libpmemobj/recycler.c:154>:
                                            util_mutex_lock()
                                            ravl_emplace_copy() <int ravl_emplace_copy (struct ravl *ravl, const void *data) at core/ravl.c:384>:
                                                ravl_emplace() <int ravl_emplace (struct ravl *ravl, ravl_constr constr, const void *arg) at core/ravl.c:393>:
                                                    LOG()
                                                    ravl_new_node() <struct ravl_node *ravl_new_node (struct ravl *ravl, ravl_constr constr, const void *arg) at core/ravl.c:161>:
                                                        Malloc()
                                                        ERR()
                                                        ravl_node_insert_constructor() <void ravl_node_insert_constructor (void *data, size_t data_size, const void *arg) at core/ravl.c:139>:
                                                            SUPPRESS_UNUSED()
                                                            memcpy()
                                                    ravl_data() <void *ravl_data (struct ravl_node *node) at core/ravl.c:571>:
                                                        memcpy()
                                                    ravl_balance() <void ravl_balance (struct ravl *ravl, struct ravl_node *n) at core/ravl.c:337>:
                                                        ravl_node_is() <int ravl_node_is (struct ravl_node *n, int i, int j) at core/ravl.c:306>:
                                                            ravl_node_is_i_j() <int ravl_node_is_i_j (struct ravl_node *n, int i, int j) at core/ravl.c:296>:
                                                                ravl_node_rank_difference_parent() <int ravl_node_rank_difference_parent (struct ravl_node *p, struct ravl_node *n) at core/ravl.c:275>:
                                                                    ravl_node_rank() <int ravl_node_rank (struct ravl_node *n) at core/ravl.c:261>:
                                                        ravl_node_promote() <void ravl_node_promote (struct ravl_node *n) at core/ravl.c:315>
                                                        ravl_node_sibling() <struct ravl_node *ravl_node_sibling (struct ravl_node *n) at core/ravl.c:209>:
                                                            ravl_node_slot_type() <enum ravl_slot_type ravl_node_slot_type (struct ravl_node *n) at core/ravl.c:196>:
                                                        ravl_node_rank_difference() <int ravl_node_rank_difference (struct ravl_node *n) at core/ravl.c:287>:
                                                            ravl_node_rank_difference_parent() <int ravl_node_rank_difference_parent (struct ravl_node *p, struct ravl_node *n) at core/ravl.c:275>:
                                                                ravl_node_rank() <int ravl_node_rank (struct ravl_node *n) at core/ravl.c:261>:
                                                        ravl_node_rank_difference_parent() <int ravl_node_rank_difference_parent (struct ravl_node *p, struct ravl_node *n) at core/ravl.c:275>:
                                                            ravl_node_rank() <int ravl_node_rank (struct ravl_node *n) at core/ravl.c:261>:
                                                        ravl_slot_opposite() <enum ravl_slot_type ravl_slot_opposite (enum ravl_slot_type t) at core/ravl.c:184>:
                                                            ASSERTne()
                                                        ravl_node_slot_type() <enum ravl_slot_type ravl_node_slot_type (struct ravl_node *n) at core/ravl.c:196>:
                                                        ravl_rotate() <void ravl_rotate (struct ravl *ravl, struct ravl_node *n) at core/ravl.c:237>:
                                                            ASSERTne()
                                                            ravl_node_ref() <struct ravl_node **ravl_node_ref (struct ravl *ravl, struct ravl_node *n) at core/ravl.c:223>:
                                                                ravl_node_slot_type() <enum ravl_slot_type ravl_node_slot_type (struct ravl_node *n) at core/ravl.c:196>:
                                                            ravl_node_slot_type() <enum ravl_slot_type ravl_node_slot_type (struct ravl_node *n) at core/ravl.c:196>:
                                                            ravl_slot_opposite() <enum ravl_slot_type ravl_slot_opposite (enum ravl_slot_type t) at core/ravl.c:184>:
                                                                ASSERTne()
                                                        ravl_node_demote() <void ravl_node_demote (struct ravl_node *n) at core/ravl.c:324>:
                                                            ASSERT()
                                                    Free() <Free_func Free at core/alloc.c:91>
                                                ravl_node_copy_constructor() <void ravl_node_copy_constructor (void *data, size_t data_size, const void *arg) at core/ravl.c:152>:
                                                    memcpy()
                                            util_mutex_unlock()
                                        ERR()
                                    heap_run_into_free_chunk() <void heap_run_into_free_chunk (struct palloc_heap *heap, struct bucket *bucket, struct memory_block *m) at libpmemobj/heap.c:697>:
                                        heap_get_chunk_hdr()
                                        STATS_SUB()
                                        util_mutex_lock()
                                        memblock_huge_init() <struct memory_block memblock_huge_init (struct palloc_heap *heap, uint32_t chunk_id, uint32_t zone_id, uint32_t size_idx) at libpmemobj/memblock.c:1329>:
                                            heap_get_chunk_hdr()
                                            VALGRIND_DO_MAKE_MEM_UNDEFINED()
                                            VALGRIND_ANNOTATE_NEW_MEMORY()
                                            chunk_get_chunk_hdr_value() <uint64_t chunk_get_chunk_hdr_value (uint16_t type, uint16_t flags, uint32_t size_idx) at libpmemobj/memblock.c:604>:
                                                COMPILE_ERROR_ON()
                                                memcpy()
                                            util_atomic_store_explicit64()
                                            pmemops_persist()
                                            huge_write_footer() <void huge_write_footer (struct chunk_header *hdr, uint32_t size_idx) at libpmemobj/memblock.c:1166>:
                                                VALGRIND_DO_MAKE_MEM_UNDEFINED()
                                                VALGRIND_SET_CLEAN()
                                            memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                                memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                                    heap_get_chunk_hdr()
                                                memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                                    heap_get_chunk_hdr()
                                                    FATAL()
                                        heap_free_chunk_reuse() <int heap_free_chunk_reuse (struct palloc_heap *heap, struct bucket *bucket, struct memory_block *m) at libpmemobj/heap.c:674>:
                                            heap_coalesce_huge() <struct memory_block heap_coalesce_huge (struct palloc_heap *heap, struct bucket *b, const struct memory_block *m) at libpmemobj/heap.c:650>:
                                                heap_get_adjacent_free_block() <int heap_get_adjacent_free_block (struct palloc_heap *heap, const struct memory_block *in, struct memory_block *out, int prev) at libpmemobj/heap.c:582>:
                                                    ZID_TO_ZONE()
                                                    memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                                        memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                                            heap_get_chunk_hdr()
                                                        memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                                            heap_get_chunk_hdr()
                                                            FATAL()
                                                bucket_remove_block() <int bucket_remove_block (struct bucket *b, const struct memory_block *m) at libpmemobj/bucket.c:178>
                                                heap_coalesce() <struct memory_block heap_coalesce (struct palloc_heap *heap, const struct memory_block *blocks[], int n) at libpmemobj/heap.c:621>:
                                                    ASSERTne()
                                                    memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                                        memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                                            heap_get_chunk_hdr()
                                                        memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                                            heap_get_chunk_hdr()
                                                            FATAL()
                                            bucket_insert_block() <int bucket_insert_block (struct bucket *b, const struct memory_block *m) at libpmemobj/bucket.c:161>:
                                                VALGRIND_DO_MAKE_MEM_NOACCESS()
                                                VALGRIND_ANNOTATE_NEW_MEMORY()
                                        util_mutex_unlock()
                                    heap_free_chunk_reuse() <int heap_free_chunk_reuse (struct palloc_heap *heap, struct bucket *bucket, struct memory_block *m) at libpmemobj/heap.c:674>:
                                        heap_coalesce_huge() <struct memory_block heap_coalesce_huge (struct palloc_heap *heap, struct bucket *b, const struct memory_block *m) at libpmemobj/heap.c:650>:
                                            heap_get_adjacent_free_block() <int heap_get_adjacent_free_block (struct palloc_heap *heap, const struct memory_block *in, struct memory_block *out, int prev) at libpmemobj/heap.c:582>:
                                                ZID_TO_ZONE()
                                                memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                                    memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                                        heap_get_chunk_hdr()
                                                    memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                                        heap_get_chunk_hdr()
                                                        FATAL()
                                            bucket_remove_block() <int bucket_remove_block (struct bucket *b, const struct memory_block *m) at libpmemobj/bucket.c:178>
                                            heap_coalesce() <struct memory_block heap_coalesce (struct palloc_heap *heap, const struct memory_block *blocks[], int n) at libpmemobj/heap.c:621>:
                                                ASSERTne()
                                                memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                                    memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                                        heap_get_chunk_hdr()
                                                    memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                                        heap_get_chunk_hdr()
                                                        FATAL()
                                        bucket_insert_block() <int bucket_insert_block (struct bucket *b, const struct memory_block *m) at libpmemobj/bucket.c:161>:
                                            VALGRIND_DO_MAKE_MEM_NOACCESS()
                                            VALGRIND_ANNOTATE_NEW_MEMORY()
                            heap_extend() <int heap_extend (struct palloc_heap *heap, struct bucket *b, size_t size) at libpmemobj/heap.c:1515>:
                                util_pool_extend() <void *util_pool_extend (struct pool_set *set, size_t *size, size_t minpartsize) at common/set.c:2231>:
                                    LOG()
                                    ERR()
                                    util_poolset_append_new_part() <int util_poolset_append_new_part (struct pool_set *set, size_t size) at common/set.c:2174>:
                                        LOG()
                                        VEC_SIZE()
                                        VEC_GET()
                                        strlen()
                                        Malloc()
                                        ERR()
                                        snprintf()
                                        util_replica_add_part() <int util_replica_add_part (struct pool_replica **repp, const char *path, size_t filesize) at common/set.c:708>:
                                            LOG()
                                            util_replica_add_part_by_idx() <int util_replica_add_part_by_idx (struct pool_replica **repp, const char *path, size_t filesize, unsigned p) at common/set.c:662>:
                                                LOG()
                                                util_replica_reserve() <int util_replica_reserve (struct pool_replica **repp, unsigned n) at common/set.c:633>:
                                                    LOG()
                                                    Realloc()
                                                    ERR()
                                                    memset()
                                                ASSERTne()
                                                util_file_get_type() <enum file_type util_file_get_type (const char *path) at common/file.c:106>:
                                                    LOG()
                                                    ERR()
                                                    util_file_exists() <int util_file_exists (const char *path) at common/file.c:32>:
                                                        LOG()
                                                        os_access() <int os_access (const char *pathname, int mode) at core/os_posix.c:97>:
                                                            access()
                                                        ERR()
                                                    os_stat() <int os_stat (const char *pathname, os_stat_t *buf) at core/os_posix.c:79>:
                                                        stat()
                                                    util_stat_get_type() <enum file_type util_stat_get_type (const os_stat_t *st) at common/file.c:62>:
                                                        pmem2_get_type_from_stat() <int pmem2_get_type_from_stat (const os_stat_t *st, enum pmem2_file_type *type) at libpmem2/pmem2_utils_linux.c:23>:
                                                            S_ISREG()
                                                            S_ISDIR()
                                                            S_ISCHR()
                                                            ERR()
                                                            util_snprintf() <int util_snprintf (char *str, size_t size, const char *format, ...) at core/util.c:434>:
                                                                va_start()
                                                                vsnprintf()
                                                                va_end()
                                                            os_major()
                                                            os_minor()
                                                            ASSERTinfo()
                                                            LOG()
                                                            realpath()
                                                            strrchr()
                                                            strcmp()
                                                        pmem2_err_to_errno() <int pmem2_err_to_errno (int err) at libpmem2/pmem2_utils.c:67>:
                                                            FATAL()
                                                        ASSERTinfo()
                                                util_file_device_dax_alignment() <size_t util_file_device_dax_alignment (const char *path) at common/file_posix.c:139>:
                                                    LOG()
                                                    device_dax_alignment() <size_t device_dax_alignment (const char *path) at common/file_posix.c:105>:
                                                        LOG()
                                                        os_open() <int os_open (const char *pathname, int flags, ...) at core/os_posix.c:29>:
                                                            va_start()
                                                            va_arg()
                                                            va_end()
                                                            open()
                                                        pmem2_source_from_fd() <int pmem2_source_from_fd (struct pmem2_source **src, int fd) at libpmem2/source_posix.c:19>:
                                                            PMEM2_ERR_CLR()
                                                            fcntl()
                                                            ERR()
                                                            os_fstat()
                                                            pmem2_get_type_from_stat() <int pmem2_get_type_from_stat (const os_stat_t *st, enum pmem2_file_type *type) at libpmem2/pmem2_utils_linux.c:23>:
                                                                S_ISREG()
                                                                S_ISDIR()
                                                                S_ISCHR()
                                                                ERR()
                                                                util_snprintf() <int util_snprintf (char *str, size_t size, const char *format, ...) at core/util.c:434>:
                                                                    va_start()
                                                                    vsnprintf()
                                                                    va_end()
                                                                os_major()
                                                                os_minor()
                                                                ASSERTinfo()
                                                                LOG()
                                                                realpath()
                                                                strrchr()
                                                                strcmp()
                                                            pmem2_malloc() <void *pmem2_malloc (size_t size, int *err) at libpmem2/pmem2_utils.c:19>:
                                                                Malloc()
                                                                ERR()
                                                            ASSERTne()
                                                        pmem2_device_dax_alignment() <int pmem2_device_dax_alignment (const struct pmem2_source *src, size_t *alignment) at libpmem2/pmem2_utils_ndctl.c:18>:
                                                            ndctl_new()
                                                            ERR()
                                                            pmem2_region_namespace() <int pmem2_region_namespace (struct ndctl_ctx *ctx, const struct pmem2_source *src, struct ndctl_region **pregion, struct ndctl_namespace **pndns) at libpmem2/region_namespace_ndctl.c:131>:
                                                                LOG()
                                                                ERR()
                                                                FOREACH_BUS_REGION_NAMESPACE()
                                                                ndctl_namespace_get_dax()
                                                                ASSERTeq()
                                                                ndctl_dax_get_daxctl_region()
                                                                daxctl_dev_foreach()
                                                                daxctl_dev_get_devname()
                                                                ndctl_match_devdax() <int ndctl_match_devdax (dev_t st_rdev, const char *devname) at libpmem2/region_namespace_ndctl.c:26>:
                                                                    LOG()
                                                                    stat()
                                                                    util_snprintf() <int util_snprintf (char *str, size_t size, const char *format, ...) at core/util.c:434>:
                                                                        va_start()
                                                                        vsnprintf()
                                                                        va_end()
                                                                    ERR()
                                                                    os_stat() <int os_stat (const char *pathname, os_stat_t *buf) at core/os_posix.c:79>:
                                                                        stat()
                                                                ndctl_namespace_get_btt()
                                                                ndctl_btt_get_block_device()
                                                                ndctl_namespace_get_pfn()
                                                                ndctl_pfn_get_block_device()
                                                                ndctl_namespace_get_block_device()
                                                                ndctl_match_fsdax() <int ndctl_match_fsdax (dev_t st_dev, const char *devname) at libpmem2/region_namespace_ndctl.c:64>:
                                                                    LOG()
                                                                    util_snprintf() <int util_snprintf (char *str, size_t size, const char *format, ...) at core/util.c:434>:
                                                                        va_start()
                                                                        vsnprintf()
                                                                        va_end()
                                                                    ERR()
                                                                    major()
                                                                    minor()
                                                                    os_open() <int os_open (const char *pathname, int flags, ...) at core/os_posix.c:29>:
                                                                        va_start()
                                                                        va_arg()
                                                                        va_end()
                                                                        open()
                                                                    read()
                                                                    os_close()
                                                                    strcmp()
                                                            LOG()
                                                            ndctl_namespace_get_dax()
                                                            ndctl_dax_get_align()
                                                            ndctl_unref()
                                                        pmem2_source_delete() <int pmem2_source_delete (struct pmem2_source **src) at libpmem2/source.c:30>:
                                                            Free() <Free_func Free at core/alloc.c:91>
                                                        os_close()
                                        FATAL()
                                        util_poolset_set_size() <void util_poolset_set_size (struct pool_set *set) at common/set.c:949>:
                                            LOG()
                                        Free() <Free_func Free at core/alloc.c:91>
                                    util_part_open() <int util_part_open (struct pool_set_part *part, size_t minsize, int create_part) at common/set.c:1459>:
                                        LOG()
                                        util_file_exists() <int util_file_exists (const char *path) at common/file.c:32>:
                                            LOG()
                                            os_access() <int os_access (const char *pathname, int mode) at core/os_posix.c:97>:
                                                access()
                                            ERR()
                                        util_file_create() <int util_file_create (const char *path, size_t size, size_t minsize) at common/file.c:398>:
                                            LOG()
                                            ASSERTne()
                                            ERR()
                                            os_open() <int os_open (const char *pathname, int flags, ...) at core/os_posix.c:29>:
                                                va_start()
                                                va_arg()
                                                va_end()
                                                open()
                                            os_posix_fallocate() <int os_posix_fallocate (int fd, os_off_t offset, off_t len) at core/os_posix.c:142>:
                                                posix_fallocate()
                                            os_flock() <int os_flock (int fd, int operation) at core/os_posix.c:215>:
                                                flock()
                                            os_close()
                                            os_unlink() <int os_unlink (const char *pathname) at core/os_posix.c:88>:
                                                unlink()
                                        util_file_open() <int util_file_open (const char *path, size_t *size, size_t minsize, int flags) at common/file.c:456>:
                                            LOG()
                                            os_open() <int os_open (const char *pathname, int flags, ...) at core/os_posix.c:29>:
                                                va_start()
                                                va_arg()
                                                va_end()
                                                open()
                                            ERR()
                                            os_flock() <int os_flock (int fd, int operation) at core/os_posix.c:215>:
                                                flock()
                                            os_close()
                                            ASSERTeq()
                                            util_fd_get_size() <ssize_t util_fd_get_size (int fd) at common/file.c:157>:
                                                LOG()
                                                pmem2_source_from_fd() <int pmem2_source_from_fd (struct pmem2_source **src, int fd) at libpmem2/source_posix.c:19>:
                                                    PMEM2_ERR_CLR()
                                                    fcntl()
                                                    ERR()
                                                    os_fstat()
                                                    pmem2_get_type_from_stat() <int pmem2_get_type_from_stat (const os_stat_t *st, enum pmem2_file_type *type) at libpmem2/pmem2_utils_linux.c:23>:
                                                        S_ISREG()
                                                        S_ISDIR()
                                                        S_ISCHR()
                                                        ERR()
                                                        util_snprintf() <int util_snprintf (char *str, size_t size, const char *format, ...) at core/util.c:434>:
                                                            va_start()
                                                            vsnprintf()
                                                            va_end()
                                                        os_major()
                                                        os_minor()
                                                        ASSERTinfo()
                                                        LOG()
                                                        realpath()
                                                        strrchr()
                                                        strcmp()
                                                    pmem2_malloc() <void *pmem2_malloc (size_t size, int *err) at libpmem2/pmem2_utils.c:19>:
                                                        Malloc()
                                                        ERR()
                                                    ASSERTne()
                                                pmem2_err_to_errno() <int pmem2_err_to_errno (int err) at libpmem2/pmem2_utils.c:67>:
                                                    FATAL()
                                                pmem2_source_size() <int pmem2_source_size (const struct pmem2_source *src, size_t *size) at libpmem2/source_posix.c:90>:
                                                    LOG()
                                                    PMEM2_ERR_CLR()
                                                    ASSERT()
                                                    os_fstat()
                                                    ERR()
                                                    pmem2_device_dax_size() <int pmem2_device_dax_size (const struct pmem2_source *src, size_t *size) at libpmem2/pmem2_utils_ndctl.c:58>:
                                                        ndctl_new()
                                                        ERR()
                                                        pmem2_region_namespace() <int pmem2_region_namespace (struct ndctl_ctx *ctx, const struct pmem2_source *src, struct ndctl_region **pregion, struct ndctl_namespace **pndns) at libpmem2/region_namespace_ndctl.c:131>:
                                                            LOG()
                                                            ERR()
                                                            FOREACH_BUS_REGION_NAMESPACE()
                                                            ndctl_namespace_get_dax()
                                                            ASSERTeq()
                                                            ndctl_dax_get_daxctl_region()
                                                            daxctl_dev_foreach()
                                                            daxctl_dev_get_devname()
                                                            ndctl_match_devdax() <int ndctl_match_devdax (dev_t st_rdev, const char *devname) at libpmem2/region_namespace_ndctl.c:26>:
                                                                LOG()
                                                                stat()
                                                                util_snprintf() <int util_snprintf (char *str, size_t size, const char *format, ...) at core/util.c:434>:
                                                                    va_start()
                                                                    vsnprintf()
                                                                    va_end()
                                                                ERR()
                                                                os_stat() <int os_stat (const char *pathname, os_stat_t *buf) at core/os_posix.c:79>:
                                                                    stat()
                                                            ndctl_namespace_get_btt()
                                                            ndctl_btt_get_block_device()
                                                            ndctl_namespace_get_pfn()
                                                            ndctl_pfn_get_block_device()
                                                            ndctl_namespace_get_block_device()
                                                            ndctl_match_fsdax() <int ndctl_match_fsdax (dev_t st_dev, const char *devname) at libpmem2/region_namespace_ndctl.c:64>:
                                                                LOG()
                                                                util_snprintf() <int util_snprintf (char *str, size_t size, const char *format, ...) at core/util.c:434>:
                                                                    va_start()
                                                                    vsnprintf()
                                                                    va_end()
                                                                ERR()
                                                                major()
                                                                minor()
                                                                os_open() <int os_open (const char *pathname, int flags, ...) at core/os_posix.c:29>:
                                                                    va_start()
                                                                    va_arg()
                                                                    va_end()
                                                                    open()
                                                                read()
                                                                os_close()
                                                                strcmp()
                                                        LOG()
                                                        ndctl_namespace_get_dax()
                                                        ndctl_dax_get_size()
                                                        ndctl_unref()
                                                    FATAL()
                                                pmem2_source_delete() <int pmem2_source_delete (struct pmem2_source **src) at libpmem2/source.c:30>:
                                                    Free() <Free_func Free at core/alloc.c:91>
                                                ERR()
                                        os_posix_fallocate() <int os_posix_fallocate (int fd, os_off_t offset, off_t len) at core/os_posix.c:142>:
                                            posix_fallocate()
                                        ERR()
                                    util_map_part() <int util_map_part (struct pool_set_part *part, void *addr, size_t size, size_t offset, int flags, int rdonly) at common/set.c:229>:
                                        LOG()
                                        ASSERTeq()
                                        ASSERT()
                                        roundup()
                                        util_map_sync() <void *util_map_sync (void *addr, size_t len, int proto, int flags, int fd, os_off_t offset, int *map_sync) at common/mmap_posix.c:159>:
                                            LOG()
                                            mmap()
                                        ERR()
                                        munmap()
                                        VALGRIND_REGISTER_PMEM_MAPPING()
                                        VALGRIND_REGISTER_PMEM_FILE()
                                    util_poolset_chmod() <int util_poolset_chmod (struct pool_set *set, mode_t mode) at common/set.c:404>:
                                        LOG()
                                        os_fstat()
                                        ERR()
                                        os_chmod() <int os_chmod (const char *pathname, mode_t mode) at core/os_posix.c:124>:
                                            chmod()
                                    util_poolset_fdclose() <void util_poolset_fdclose (struct pool_set *set) at common/set.c:457>:
                                        util_poolset_fdclose_always() <void util_poolset_fdclose_always (struct pool_set *set) at common/set.c:445>:
                                            LOG()
                                            util_replica_fdclose() <void util_replica_fdclose (struct pool_replica *rep) at common/set.c:3232>:
                                                util_part_fdclose() <void util_part_fdclose (struct pool_set_part *part) at common/set.c:1517>:
                                                    LOG()
                                                    os_close()
                                    os_close()
                                    os_unlink() <int os_unlink (const char *pathname) at core/os_posix.c:88>:
                                        unlink()
                                    Free() <Free_func Free at core/alloc.c:91>
                                    util_poolset_set_size() <void util_poolset_set_size (struct pool_set *set) at common/set.c:949>:
                                        LOG()
                                pmemops_persist()
                                heap_max_zone() <unsigned heap_max_zone (size_t size) at libpmemobj/heap.c:516>:
                                ZID_TO_ZONE()
                                heap_zone_init() <void heap_zone_init (struct palloc_heap *heap, uint32_t zone_id, uint32_t first_chunk_id) at libpmemobj/heap.c:559>:
                                    ZID_TO_ZONE()
                                    zone_calc_size_idx() <uint32_t zone_calc_size_idx (uint32_t zone_id, unsigned max_zone, size_t heap_size) at libpmemobj/heap.c:533>:
                                        ASSERT()
                                    ASSERT()
                                    memblock_huge_init() <struct memory_block memblock_huge_init (struct palloc_heap *heap, uint32_t chunk_id, uint32_t zone_id, uint32_t size_idx) at libpmemobj/memblock.c:1329>:
                                        heap_get_chunk_hdr()
                                        VALGRIND_DO_MAKE_MEM_UNDEFINED()
                                        VALGRIND_ANNOTATE_NEW_MEMORY()
                                        chunk_get_chunk_hdr_value() <uint64_t chunk_get_chunk_hdr_value (uint16_t type, uint16_t flags, uint32_t size_idx) at libpmemobj/memblock.c:604>:
                                            COMPILE_ERROR_ON()
                                            memcpy()
                                        util_atomic_store_explicit64()
                                        pmemops_persist()
                                        huge_write_footer() <void huge_write_footer (struct chunk_header *hdr, uint32_t size_idx) at libpmemobj/memblock.c:1166>:
                                            VALGRIND_DO_MAKE_MEM_UNDEFINED()
                                            VALGRIND_SET_CLEAN()
                                        memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                            memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                                heap_get_chunk_hdr()
                                            memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                                heap_get_chunk_hdr()
                                                FATAL()
                                    pmemops_persist()
                                memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                    memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                        heap_get_chunk_hdr()
                                    memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                        heap_get_chunk_hdr()
                                        FATAL()
                                heap_free_chunk_reuse() <int heap_free_chunk_reuse (struct palloc_heap *heap, struct bucket *bucket, struct memory_block *m) at libpmemobj/heap.c:674>:
                                    heap_coalesce_huge() <struct memory_block heap_coalesce_huge (struct palloc_heap *heap, struct bucket *b, const struct memory_block *m) at libpmemobj/heap.c:650>:
                                        heap_get_adjacent_free_block() <int heap_get_adjacent_free_block (struct palloc_heap *heap, const struct memory_block *in, struct memory_block *out, int prev) at libpmemobj/heap.c:582>:
                                            ZID_TO_ZONE()
                                            memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                                memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                                    heap_get_chunk_hdr()
                                                memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                                    heap_get_chunk_hdr()
                                                    FATAL()
                                        bucket_remove_block() <int bucket_remove_block (struct bucket *b, const struct memory_block *m) at libpmemobj/bucket.c:178>
                                        heap_coalesce() <struct memory_block heap_coalesce (struct palloc_heap *heap, const struct memory_block *blocks[], int n) at libpmemobj/heap.c:621>:
                                            ASSERTne()
                                            memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                                memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                                    heap_get_chunk_hdr()
                                                memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                                    heap_get_chunk_hdr()
                                                    FATAL()
                                    bucket_insert_block() <int bucket_insert_block (struct bucket *b, const struct memory_block *m) at libpmemobj/bucket.c:161>:
                                        VALGRIND_DO_MAKE_MEM_NOACCESS()
                                        VALGRIND_ANNOTATE_NEW_MEMORY()
                        heap_ensure_run_bucket_filled() <int heap_ensure_run_bucket_filled (struct palloc_heap *heap, struct bucket *b, uint32_t units) at libpmemobj/heap.c:1083> (R):
                            bucket_alloc_class() <struct alloc_class *bucket_alloc_class (struct bucket *b) at libpmemobj/bucket.c:152>
                            ASSERTeq()
                            heap_detach_and_try_discard_run() <int heap_detach_and_try_discard_run (struct palloc_heap *heap, struct bucket *b) at libpmemobj/heap.c:992>:
                                bucket_detach_run() <int bucket_detach_run (struct bucket *b, struct memory_block *m_out, int *empty) at libpmemobj/bucket.c:231>:
                                    util_fetch_and_sub64()
                                    VALGRIND_ANNOTATE_HAPPENS_AFTER()
                                    VALGRIND_ANNOTATE_HAPPENS_BEFORE()
                                    Zalloc() <void *Zalloc (size_t sz) at core/alloc.c:98>:
                                        Malloc()
                                        memset()
                                heap_discard_run() <void heap_discard_run (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/heap.c:974>:
                                    heap_reclaim_run() <int heap_reclaim_run (struct palloc_heap *heap, struct memory_block *m, int startup) at libpmemobj/heap.c:733>:
                                        heap_get_chunk_run()
                                        heap_get_chunk_hdr()
                                        alloc_class_by_run() <struct alloc_class *alloc_class_by_run (struct alloc_class_collection *ac, size_t unit_size, uint16_t flags, uint32_t size_idx) at libpmemobj/alloc_class.c:594>:
                                            SIZE_TO_CLASS_MAP_INDEX()
                                            ASSERT()
                                            critnib_get() <void *critnib_get (struct critnib *c, uint64_t key) at libpmemobj/critnib.c:515>:
                                                load() <void load (void *src, void *dst) at libpmemobj/critnib.c:130>:
                                                    util_atomic_load_explicit64()
                                                is_leaf() <inline bool is_leaf (struct critnib_node *n) at libpmemobj/critnib.c:150>:
                                                slice_index() <inline unsigned slice_index (uint64_t key, sh_t shift) at libpmemobj/critnib.c:178>:
                                                to_leaf() <inline struct critnib_leaf *to_leaf (struct critnib_node *n) at libpmemobj/critnib.c:159>:
                                            RUN_CLASS_KEY_PACK()
                                        recycler_element_new() <struct recycler_element recycler_element_new (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/recycler.c:122>:
                                            SUPPRESS_UNUSED()
                                            util_mutex_lock()
                                            util_mutex_unlock()
                                        ASSERTeq()
                                        STATS_INC()
                                        heap_get_recycler() <struct recycler *heap_get_recycler (struct palloc_heap *heap, size_t id, size_t nallocs) at libpmemobj/heap.c:106> (R):
                                            util_atomic_load_explicit64()
                                            recycler_new() <struct recycler *recycler_new (struct palloc_heap *heap, size_t nallocs, size_t *peak_arenas) at libpmemobj/recycler.c:74>:
                                                Malloc()
                                                ravl_new_sized() <struct ravl *ravl_new_sized (ravl_compare *compare, size_t data_size) at core/ravl.c:45>:
                                                    Malloc()
                                                    ERR()
                                                recycler_element_cmp() <int recycler_element_cmp (const void *lhs, const void *rhs) at libpmemobj/recycler.c:23>:
                                                memset()
                                                VEC_INIT()
                                                util_mutex_init()
                                                Free() <Free_func Free at core/alloc.c:91>
                                            util_bool_compare_and_swap64()
                                            recycler_delete() <void recycler_delete (struct recycler *r) at libpmemobj/recycler.c:107>:
                                                VEC_DELETE()
                                                util_mutex_destroy()
                                                ravl_delete() <void ravl_delete (struct ravl *ravl) at core/ravl.c:112>:
                                                    ravl_delete_cb() <void ravl_delete_cb (struct ravl *ravl, ravl_cb cb, void *arg) at core/ravl.c:102>:
                                                        ravl_foreach_node() <void ravl_foreach_node (struct ravl_node *n, ravl_cb cb, void *arg, int free_node) at core/ravl.c:74> (R):
                                                            ravl_foreach_node() <void ravl_foreach_node (struct ravl_node *n, ravl_cb cb, void *arg, int free_node) at core/ravl.c:74> (recursive: see 28420)
                                                            Free() <Free_func Free at core/alloc.c:91>
                                                        Free() <Free_func Free at core/alloc.c:91>
                                                Free() <Free_func Free at core/alloc.c:91>
                                            heap_get_recycler() <struct recycler *heap_get_recycler (struct palloc_heap *heap, size_t id, size_t nallocs) at libpmemobj/heap.c:106> (recursive: see 28402)
                                        recycler_put() <int recycler_put (struct recycler *r, struct recycler_element element) at libpmemobj/recycler.c:154>:
                                            util_mutex_lock()
                                            ravl_emplace_copy() <int ravl_emplace_copy (struct ravl *ravl, const void *data) at core/ravl.c:384>:
                                                ravl_emplace() <int ravl_emplace (struct ravl *ravl, ravl_constr constr, const void *arg) at core/ravl.c:393>:
                                                    LOG()
                                                    ravl_new_node() <struct ravl_node *ravl_new_node (struct ravl *ravl, ravl_constr constr, const void *arg) at core/ravl.c:161>:
                                                        Malloc()
                                                        ERR()
                                                        ravl_node_insert_constructor() <void ravl_node_insert_constructor (void *data, size_t data_size, const void *arg) at core/ravl.c:139>:
                                                            SUPPRESS_UNUSED()
                                                            memcpy()
                                                    ravl_data() <void *ravl_data (struct ravl_node *node) at core/ravl.c:571>:
                                                        memcpy()
                                                    ravl_balance() <void ravl_balance (struct ravl *ravl, struct ravl_node *n) at core/ravl.c:337>:
                                                        ravl_node_is() <int ravl_node_is (struct ravl_node *n, int i, int j) at core/ravl.c:306>:
                                                            ravl_node_is_i_j() <int ravl_node_is_i_j (struct ravl_node *n, int i, int j) at core/ravl.c:296>:
                                                                ravl_node_rank_difference_parent() <int ravl_node_rank_difference_parent (struct ravl_node *p, struct ravl_node *n) at core/ravl.c:275>:
                                                                    ravl_node_rank() <int ravl_node_rank (struct ravl_node *n) at core/ravl.c:261>:
                                                        ravl_node_promote() <void ravl_node_promote (struct ravl_node *n) at core/ravl.c:315>
                                                        ravl_node_sibling() <struct ravl_node *ravl_node_sibling (struct ravl_node *n) at core/ravl.c:209>:
                                                            ravl_node_slot_type() <enum ravl_slot_type ravl_node_slot_type (struct ravl_node *n) at core/ravl.c:196>:
                                                        ravl_node_rank_difference() <int ravl_node_rank_difference (struct ravl_node *n) at core/ravl.c:287>:
                                                            ravl_node_rank_difference_parent() <int ravl_node_rank_difference_parent (struct ravl_node *p, struct ravl_node *n) at core/ravl.c:275>:
                                                                ravl_node_rank() <int ravl_node_rank (struct ravl_node *n) at core/ravl.c:261>:
                                                        ravl_node_rank_difference_parent() <int ravl_node_rank_difference_parent (struct ravl_node *p, struct ravl_node *n) at core/ravl.c:275>:
                                                            ravl_node_rank() <int ravl_node_rank (struct ravl_node *n) at core/ravl.c:261>:
                                                        ravl_slot_opposite() <enum ravl_slot_type ravl_slot_opposite (enum ravl_slot_type t) at core/ravl.c:184>:
                                                            ASSERTne()
                                                        ravl_node_slot_type() <enum ravl_slot_type ravl_node_slot_type (struct ravl_node *n) at core/ravl.c:196>:
                                                        ravl_rotate() <void ravl_rotate (struct ravl *ravl, struct ravl_node *n) at core/ravl.c:237>:
                                                            ASSERTne()
                                                            ravl_node_ref() <struct ravl_node **ravl_node_ref (struct ravl *ravl, struct ravl_node *n) at core/ravl.c:223>:
                                                                ravl_node_slot_type() <enum ravl_slot_type ravl_node_slot_type (struct ravl_node *n) at core/ravl.c:196>:
                                                            ravl_node_slot_type() <enum ravl_slot_type ravl_node_slot_type (struct ravl_node *n) at core/ravl.c:196>:
                                                            ravl_slot_opposite() <enum ravl_slot_type ravl_slot_opposite (enum ravl_slot_type t) at core/ravl.c:184>:
                                                                ASSERTne()
                                                        ravl_node_demote() <void ravl_node_demote (struct ravl_node *n) at core/ravl.c:324>:
                                                            ASSERT()
                                                    Free() <Free_func Free at core/alloc.c:91>
                                                ravl_node_copy_constructor() <void ravl_node_copy_constructor (void *data, size_t data_size, const void *arg) at core/ravl.c:152>:
                                                    memcpy()
                                            util_mutex_unlock()
                                        ERR()
                                    heap_bucket_acquire() <struct bucket *heap_bucket_acquire (struct palloc_heap *heap, uint8_t class_id, uint16_t arena_id) at libpmemobj/heap.c:470>:
                                        out() <void out (const char *fmt, ...) at core/out.c:480>:
                                            va_start()
                                            out_common() <} void out_common (const char *file, int line, const char *func, int level, const char *suffix, const char *fmt, va_list ap) at core/out.c:334>
                                            va_end()
                                        heap_thread_arena() <struct arena *heap_thread_arena (struct palloc_heap *heap) at libpmemobj/heap.c:414>:
                                            os_tls_get() <void *os_tls_get (os_tls_key_t key) at core/os_thread_posix.c:62>:
                                                pthread_getspecific()
                                            heap_thread_arena_assign() <struct arena *heap_thread_arena_assign (struct palloc_heap *heap) at libpmemobj/heap.c:381>:
                                                util_mutex_lock()
                                                ASSERTne()
                                                VEC_SIZE()
                                                VEC_FOREACH()
                                                LOG()
                                                heap_arena_thread_attach() <void heap_arena_thread_attach (struct palloc_heap *heap, struct arena *a) at libpmemobj/heap.c:249>:
                                                    ASSERTeq()
                                                    os_tls_get() <void *os_tls_get (os_tls_key_t key) at core/os_thread_posix.c:62>:
                                                        pthread_getspecific()
                                                    heap_arena_thread_detach() <void heap_arena_thread_detach (struct arena *a) at libpmemobj/heap.c:232>:
                                                        util_fetch_and_sub64()
                                                    ASSERTne()
                                                    util_fetch_and_add64()
                                                    os_tls_set() <int os_tls_set (os_tls_key_t key, const void *value) at core/os_thread_posix.c:53>:
                                                        pthread_setspecific()
                                                util_mutex_unlock()
                                            heap_global_arena_assign() <struct arena *heap_global_arena_assign (struct palloc_heap *heap) at libpmemobj/heap.c:348>:
                                                util_mutex_lock()
                                                ASSERTne()
                                                VEC_SIZE()
                                                VEC_FOREACH()
                                                LOG()
                                                util_mutex_unlock()
                                            ASSERT()
                                            ASSERTne()
                                        ASSERTne()
                                        VEC_ARR()
                                        bucket_acquire() <struct bucket *bucket_acquire (struct bucket_locked *b) at libpmemobj/bucket.c:117>:
                                            util_mutex_lock()
                                    heap_run_into_free_chunk() <void heap_run_into_free_chunk (struct palloc_heap *heap, struct bucket *bucket, struct memory_block *m) at libpmemobj/heap.c:697>:
                                        heap_get_chunk_hdr()
                                        STATS_SUB()
                                        util_mutex_lock()
                                        memblock_huge_init() <struct memory_block memblock_huge_init (struct palloc_heap *heap, uint32_t chunk_id, uint32_t zone_id, uint32_t size_idx) at libpmemobj/memblock.c:1329>:
                                            heap_get_chunk_hdr()
                                            VALGRIND_DO_MAKE_MEM_UNDEFINED()
                                            VALGRIND_ANNOTATE_NEW_MEMORY()
                                            chunk_get_chunk_hdr_value() <uint64_t chunk_get_chunk_hdr_value (uint16_t type, uint16_t flags, uint32_t size_idx) at libpmemobj/memblock.c:604>:
                                                COMPILE_ERROR_ON()
                                                memcpy()
                                            util_atomic_store_explicit64()
                                            pmemops_persist()
                                            huge_write_footer() <void huge_write_footer (struct chunk_header *hdr, uint32_t size_idx) at libpmemobj/memblock.c:1166>:
                                                VALGRIND_DO_MAKE_MEM_UNDEFINED()
                                                VALGRIND_SET_CLEAN()
                                            memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                                memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                                    heap_get_chunk_hdr()
                                                memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                                    heap_get_chunk_hdr()
                                                    FATAL()
                                        heap_free_chunk_reuse() <int heap_free_chunk_reuse (struct palloc_heap *heap, struct bucket *bucket, struct memory_block *m) at libpmemobj/heap.c:674>:
                                            heap_coalesce_huge() <struct memory_block heap_coalesce_huge (struct palloc_heap *heap, struct bucket *b, const struct memory_block *m) at libpmemobj/heap.c:650>:
                                                heap_get_adjacent_free_block() <int heap_get_adjacent_free_block (struct palloc_heap *heap, const struct memory_block *in, struct memory_block *out, int prev) at libpmemobj/heap.c:582>:
                                                    ZID_TO_ZONE()
                                                    memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                                        memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                                            heap_get_chunk_hdr()
                                                        memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                                            heap_get_chunk_hdr()
                                                            FATAL()
                                                bucket_remove_block() <int bucket_remove_block (struct bucket *b, const struct memory_block *m) at libpmemobj/bucket.c:178>
                                                heap_coalesce() <struct memory_block heap_coalesce (struct palloc_heap *heap, const struct memory_block *blocks[], int n) at libpmemobj/heap.c:621>:
                                                    ASSERTne()
                                                    memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                                        memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                                            heap_get_chunk_hdr()
                                                        memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                                            heap_get_chunk_hdr()
                                                            FATAL()
                                            bucket_insert_block() <int bucket_insert_block (struct bucket *b, const struct memory_block *m) at libpmemobj/bucket.c:161>:
                                                VALGRIND_DO_MAKE_MEM_NOACCESS()
                                                VALGRIND_ANNOTATE_NEW_MEMORY()
                                        util_mutex_unlock()
                                    heap_bucket_release() <void heap_bucket_release (struct bucket *b) at libpmemobj/heap.c:498>:
                                        bucket_release() <void bucket_release (struct bucket *b) at libpmemobj/bucket.c:127>:
                                            util_mutex_unlock()
                            heap_reuse_from_recycler() <int heap_reuse_from_recycler (struct palloc_heap *heap, struct bucket *b, uint32_t units, int force) at libpmemobj/heap.c:1034>:
                                bucket_alloc_class() <struct alloc_class *bucket_alloc_class (struct bucket *b) at libpmemobj/bucket.c:152>
                                heap_get_recycler() <struct recycler *heap_get_recycler (struct palloc_heap *heap, size_t id, size_t nallocs) at libpmemobj/heap.c:106> (R):
                                    util_atomic_load_explicit64()
                                    recycler_new() <struct recycler *recycler_new (struct palloc_heap *heap, size_t nallocs, size_t *peak_arenas) at libpmemobj/recycler.c:74>:
                                        Malloc()
                                        ravl_new_sized() <struct ravl *ravl_new_sized (ravl_compare *compare, size_t data_size) at core/ravl.c:45>:
                                            Malloc()
                                            ERR()
                                        recycler_element_cmp() <int recycler_element_cmp (const void *lhs, const void *rhs) at libpmemobj/recycler.c:23>:
                                        memset()
                                        VEC_INIT()
                                        util_mutex_init()
                                        Free() <Free_func Free at core/alloc.c:91>
                                    util_bool_compare_and_swap64()
                                    recycler_delete() <void recycler_delete (struct recycler *r) at libpmemobj/recycler.c:107>:
                                        VEC_DELETE()
                                        util_mutex_destroy()
                                        ravl_delete() <void ravl_delete (struct ravl *ravl) at core/ravl.c:112>:
                                            ravl_delete_cb() <void ravl_delete_cb (struct ravl *ravl, ravl_cb cb, void *arg) at core/ravl.c:102>:
                                                ravl_foreach_node() <void ravl_foreach_node (struct ravl_node *n, ravl_cb cb, void *arg, int free_node) at core/ravl.c:74> (R):
                                                    ravl_foreach_node() <void ravl_foreach_node (struct ravl_node *n, ravl_cb cb, void *arg, int free_node) at core/ravl.c:74> (recursive: see 28575)
                                                    Free() <Free_func Free at core/alloc.c:91>
                                                Free() <Free_func Free at core/alloc.c:91>
                                        Free() <Free_func Free at core/alloc.c:91>
                                    heap_get_recycler() <struct recycler *heap_get_recycler (struct palloc_heap *heap, size_t id, size_t nallocs) at libpmemobj/heap.c:106> (recursive: see 28557)
                                ERR()
                                recycler_get() <int recycler_get (struct recycler *r, struct memory_block *m) at libpmemobj/recycler.c:171>:
                                    util_mutex_lock()
                                    ravl_find() <struct ravl_node *ravl_find (struct ravl *ravl, const void *data, enum ravl_predicate flags) at core/ravl.c:524>:
                                        LOG()
                                        ravl_data() <void *ravl_data (struct ravl_node *node) at core/ravl.c:571>:
                                            memcpy()
                                        ravl_predicate_holds() <int ravl_predicate_holds (int result, struct ravl_node **ret, struct ravl_node *n, enum ravl_predicate flags) at core/ravl.c:489>:
                                            ravl_node_successor() <struct ravl_node *ravl_node_successor (struct ravl_node *n) at core/ravl.c:465>:
                                                ravl_node_cessor() <struct ravl_node *ravl_node_cessor (struct ravl_node *n, enum ravl_slot_type t) at core/ravl.c:443>:
                                                    ravl_node_type_most() <struct ravl_node *ravl_node_type_most (struct ravl_node *n, enum ravl_slot_type t) at core/ravl.c:430>:
                                                    ravl_slot_opposite() <enum ravl_slot_type ravl_slot_opposite (enum ravl_slot_type t) at core/ravl.c:184>:
                                                        ASSERTne()
                                            ravl_node_predecessor() <struct ravl_node *ravl_node_predecessor (struct ravl_node *n) at core/ravl.c:476>:
                                                ravl_node_cessor() <struct ravl_node *ravl_node_cessor (struct ravl_node *n, enum ravl_slot_type t) at core/ravl.c:443>:
                                                    ravl_node_type_most() <struct ravl_node *ravl_node_type_most (struct ravl_node *n, enum ravl_slot_type t) at core/ravl.c:430>:
                                                    ravl_slot_opposite() <enum ravl_slot_type ravl_slot_opposite (enum ravl_slot_type t) at core/ravl.c:184>:
                                                        ASSERTne()
                                    out() <void out (const char *fmt, ...) at core/out.c:480>:
                                        va_start()
                                        out_common() <} void out_common (const char *file, int line, const char *func, int level, const char *suffix, const char *fmt, va_list ap) at core/out.c:334>
                                        va_end()
                                    ravl_data() <void *ravl_data (struct ravl_node *node) at core/ravl.c:571>:
                                        memcpy()
                                    ravl_remove() <void ravl_remove (struct ravl *ravl, struct ravl_node *n) at core/ravl.c:545> (R):
                                        LOG()
                                        ravl_node_successor() <struct ravl_node *ravl_node_successor (struct ravl_node *n) at core/ravl.c:465>:
                                            ravl_node_cessor() <struct ravl_node *ravl_node_cessor (struct ravl_node *n, enum ravl_slot_type t) at core/ravl.c:443>:
                                                ravl_node_type_most() <struct ravl_node *ravl_node_type_most (struct ravl_node *n, enum ravl_slot_type t) at core/ravl.c:430>:
                                                ravl_slot_opposite() <enum ravl_slot_type ravl_slot_opposite (enum ravl_slot_type t) at core/ravl.c:184>:
                                                    ASSERTne()
                                        memcpy()
                                        ravl_remove() <void ravl_remove (struct ravl *ravl, struct ravl_node *n) at core/ravl.c:545> (recursive: see 28605)
                                        ravl_node_ref() <struct ravl_node **ravl_node_ref (struct ravl *ravl, struct ravl_node *n) at core/ravl.c:223>:
                                            ravl_node_slot_type() <enum ravl_slot_type ravl_node_slot_type (struct ravl_node *n) at core/ravl.c:196>:
                                        Free() <Free_func Free at core/alloc.c:91>
                                    heap_get_chunk_hdr()
                                    memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                        memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                            heap_get_chunk_hdr()
                                        memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                            heap_get_chunk_hdr()
                                            FATAL()
                                    util_mutex_unlock()
                                bucket_attach_run() <int bucket_attach_run (struct bucket *b, const struct memory_block *m) at libpmemobj/bucket.c:206>:
                                    util_mutex_lock()
                                    bucket_memblock_insert_block() <int bucket_memblock_insert_block (const struct memory_block *m, void *b) at libpmemobj/bucket.c:197>:
                                        bucket_insert_block() <int bucket_insert_block (struct bucket *b, const struct memory_block *m) at libpmemobj/bucket.c:161>:
                                            VALGRIND_DO_MAKE_MEM_NOACCESS()
                                            VALGRIND_ANNOTATE_NEW_MEMORY()
                                    util_mutex_unlock()
                                    util_fetch_and_add64()
                                heap_recycle_unused() <int heap_recycle_unused (struct palloc_heap *heap, struct recycler *recycler, struct bucket *defb, int force) at libpmemobj/heap.c:894>:
                                    recycler_recalc() <struct empty_runs recycler_recalc (struct recycler *r, int force) at libpmemobj/recycler.c:207>:
                                        VEC_INIT()
                                        util_atomic_load64()
                                        util_mutex_trylock()
                                        ravl_find() <struct ravl_node *ravl_find (struct ravl *ravl, const void *data, enum ravl_predicate flags) at core/ravl.c:524>:
                                            LOG()
                                            ravl_data() <void *ravl_data (struct ravl_node *node) at core/ravl.c:571>:
                                                memcpy()
                                            ravl_predicate_holds() <int ravl_predicate_holds (int result, struct ravl_node **ret, struct ravl_node *n, enum ravl_predicate flags) at core/ravl.c:489>:
                                                ravl_node_successor() <struct ravl_node *ravl_node_successor (struct ravl_node *n) at core/ravl.c:465>:
                                                    ravl_node_cessor() <struct ravl_node *ravl_node_cessor (struct ravl_node *n, enum ravl_slot_type t) at core/ravl.c:443>:
                                                        ravl_node_type_most() <struct ravl_node *ravl_node_type_most (struct ravl_node *n, enum ravl_slot_type t) at core/ravl.c:430>:
                                                        ravl_slot_opposite() <enum ravl_slot_type ravl_slot_opposite (enum ravl_slot_type t) at core/ravl.c:184>:
                                                            ASSERTne()
                                                ravl_node_predecessor() <struct ravl_node *ravl_node_predecessor (struct ravl_node *n) at core/ravl.c:476>:
                                                    ravl_node_cessor() <struct ravl_node *ravl_node_cessor (struct ravl_node *n, enum ravl_slot_type t) at core/ravl.c:443>:
                                                        ravl_node_type_most() <struct ravl_node *ravl_node_type_most (struct ravl_node *n, enum ravl_slot_type t) at core/ravl.c:430>:
                                                        ravl_slot_opposite() <enum ravl_slot_type ravl_slot_opposite (enum ravl_slot_type t) at core/ravl.c:184>:
                                                            ASSERTne()
                                        ravl_data() <void *ravl_data (struct ravl_node *node) at core/ravl.c:571>:
                                            memcpy()
                                        memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                            memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                                heap_get_chunk_hdr()
                                            memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                                heap_get_chunk_hdr()
                                                FATAL()
                                        recycler_element_new() <struct recycler_element recycler_element_new (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/recycler.c:122>:
                                            SUPPRESS_UNUSED()
                                            util_mutex_lock()
                                            util_mutex_unlock()
                                        ASSERT()
                                        util_fetch_and_sub64()
                                        MIN()
                                        ravl_remove() <void ravl_remove (struct ravl *ravl, struct ravl_node *n) at core/ravl.c:545> (R):
                                            LOG()
                                            ravl_node_successor() <struct ravl_node *ravl_node_successor (struct ravl_node *n) at core/ravl.c:465>:
                                                ravl_node_cessor() <struct ravl_node *ravl_node_cessor (struct ravl_node *n, enum ravl_slot_type t) at core/ravl.c:443>:
                                                    ravl_node_type_most() <struct ravl_node *ravl_node_type_most (struct ravl_node *n, enum ravl_slot_type t) at core/ravl.c:430>:
                                                    ravl_slot_opposite() <enum ravl_slot_type ravl_slot_opposite (enum ravl_slot_type t) at core/ravl.c:184>:
                                                        ASSERTne()
                                            memcpy()
                                            ravl_remove() <void ravl_remove (struct ravl *ravl, struct ravl_node *n) at core/ravl.c:545> (recursive: see 28668)
                                            ravl_node_ref() <struct ravl_node **ravl_node_ref (struct ravl *ravl, struct ravl_node *n) at core/ravl.c:223>:
                                                ravl_node_slot_type() <enum ravl_slot_type ravl_node_slot_type (struct ravl_node *n) at core/ravl.c:196>:
                                            Free() <Free_func Free at core/alloc.c:91>
                                        VEC_PUSH_BACK()
                                        VEC_FOREACH_BY_PTR()
                                        ravl_emplace_copy() <int ravl_emplace_copy (struct ravl *ravl, const void *data) at core/ravl.c:384>:
                                            ravl_emplace() <int ravl_emplace (struct ravl *ravl, ravl_constr constr, const void *arg) at core/ravl.c:393>:
                                                LOG()
                                                ravl_new_node() <struct ravl_node *ravl_new_node (struct ravl *ravl, ravl_constr constr, const void *arg) at core/ravl.c:161>:
                                                    Malloc()
                                                    ERR()
                                                    ravl_node_insert_constructor() <void ravl_node_insert_constructor (void *data, size_t data_size, const void *arg) at core/ravl.c:139>:
                                                        SUPPRESS_UNUSED()
                                                        memcpy()
                                                ravl_data() <void *ravl_data (struct ravl_node *node) at core/ravl.c:571>:
                                                    memcpy()
                                                ravl_balance() <void ravl_balance (struct ravl *ravl, struct ravl_node *n) at core/ravl.c:337>:
                                                    ravl_node_is() <int ravl_node_is (struct ravl_node *n, int i, int j) at core/ravl.c:306>:
                                                        ravl_node_is_i_j() <int ravl_node_is_i_j (struct ravl_node *n, int i, int j) at core/ravl.c:296>:
                                                            ravl_node_rank_difference_parent() <int ravl_node_rank_difference_parent (struct ravl_node *p, struct ravl_node *n) at core/ravl.c:275>:
                                                                ravl_node_rank() <int ravl_node_rank (struct ravl_node *n) at core/ravl.c:261>:
                                                    ravl_node_promote() <void ravl_node_promote (struct ravl_node *n) at core/ravl.c:315>
                                                    ravl_node_sibling() <struct ravl_node *ravl_node_sibling (struct ravl_node *n) at core/ravl.c:209>:
                                                        ravl_node_slot_type() <enum ravl_slot_type ravl_node_slot_type (struct ravl_node *n) at core/ravl.c:196>:
                                                    ravl_node_rank_difference() <int ravl_node_rank_difference (struct ravl_node *n) at core/ravl.c:287>:
                                                        ravl_node_rank_difference_parent() <int ravl_node_rank_difference_parent (struct ravl_node *p, struct ravl_node *n) at core/ravl.c:275>:
                                                            ravl_node_rank() <int ravl_node_rank (struct ravl_node *n) at core/ravl.c:261>:
                                                    ravl_node_rank_difference_parent() <int ravl_node_rank_difference_parent (struct ravl_node *p, struct ravl_node *n) at core/ravl.c:275>:
                                                        ravl_node_rank() <int ravl_node_rank (struct ravl_node *n) at core/ravl.c:261>:
                                                    ravl_slot_opposite() <enum ravl_slot_type ravl_slot_opposite (enum ravl_slot_type t) at core/ravl.c:184>:
                                                        ASSERTne()
                                                    ravl_node_slot_type() <enum ravl_slot_type ravl_node_slot_type (struct ravl_node *n) at core/ravl.c:196>:
                                                    ravl_rotate() <void ravl_rotate (struct ravl *ravl, struct ravl_node *n) at core/ravl.c:237>:
                                                        ASSERTne()
                                                        ravl_node_ref() <struct ravl_node **ravl_node_ref (struct ravl *ravl, struct ravl_node *n) at core/ravl.c:223>:
                                                            ravl_node_slot_type() <enum ravl_slot_type ravl_node_slot_type (struct ravl_node *n) at core/ravl.c:196>:
                                                        ravl_node_slot_type() <enum ravl_slot_type ravl_node_slot_type (struct ravl_node *n) at core/ravl.c:196>:
                                                        ravl_slot_opposite() <enum ravl_slot_type ravl_slot_opposite (enum ravl_slot_type t) at core/ravl.c:184>:
                                                            ASSERTne()
                                                    ravl_node_demote() <void ravl_node_demote (struct ravl_node *n) at core/ravl.c:324>:
                                                        ASSERT()
                                                Free() <Free_func Free at core/alloc.c:91>
                                            ravl_node_copy_constructor() <void ravl_node_copy_constructor (void *data, size_t data_size, const void *arg) at core/ravl.c:152>:
                                                memcpy()
                                        VEC_CLEAR()
                                        util_mutex_unlock()
                                    VEC_SIZE()
                                    heap_bucket_acquire() <struct bucket *heap_bucket_acquire (struct palloc_heap *heap, uint8_t class_id, uint16_t arena_id) at libpmemobj/heap.c:470>:
                                        out() <void out (const char *fmt, ...) at core/out.c:480>:
                                            va_start()
                                            out_common() <} void out_common (const char *file, int line, const char *func, int level, const char *suffix, const char *fmt, va_list ap) at core/out.c:334>
                                            va_end()
                                        heap_thread_arena() <struct arena *heap_thread_arena (struct palloc_heap *heap) at libpmemobj/heap.c:414>:
                                            os_tls_get() <void *os_tls_get (os_tls_key_t key) at core/os_thread_posix.c:62>:
                                                pthread_getspecific()
                                            heap_thread_arena_assign() <struct arena *heap_thread_arena_assign (struct palloc_heap *heap) at libpmemobj/heap.c:381>:
                                                util_mutex_lock()
                                                ASSERTne()
                                                VEC_SIZE()
                                                VEC_FOREACH()
                                                LOG()
                                                heap_arena_thread_attach() <void heap_arena_thread_attach (struct palloc_heap *heap, struct arena *a) at libpmemobj/heap.c:249>:
                                                    ASSERTeq()
                                                    os_tls_get() <void *os_tls_get (os_tls_key_t key) at core/os_thread_posix.c:62>:
                                                        pthread_getspecific()
                                                    heap_arena_thread_detach() <void heap_arena_thread_detach (struct arena *a) at libpmemobj/heap.c:232>:
                                                        util_fetch_and_sub64()
                                                    ASSERTne()
                                                    util_fetch_and_add64()
                                                    os_tls_set() <int os_tls_set (os_tls_key_t key, const void *value) at core/os_thread_posix.c:53>:
                                                        pthread_setspecific()
                                                util_mutex_unlock()
                                            heap_global_arena_assign() <struct arena *heap_global_arena_assign (struct palloc_heap *heap) at libpmemobj/heap.c:348>:
                                                util_mutex_lock()
                                                ASSERTne()
                                                VEC_SIZE()
                                                VEC_FOREACH()
                                                LOG()
                                                util_mutex_unlock()
                                            ASSERT()
                                            ASSERTne()
                                        ASSERTne()
                                        VEC_ARR()
                                        bucket_acquire() <struct bucket *bucket_acquire (struct bucket_locked *b) at libpmemobj/bucket.c:117>:
                                            util_mutex_lock()
                                    ASSERT()
                                    VEC_FOREACH_BY_PTR()
                                    heap_run_into_free_chunk() <void heap_run_into_free_chunk (struct palloc_heap *heap, struct bucket *bucket, struct memory_block *m) at libpmemobj/heap.c:697>:
                                        heap_get_chunk_hdr()
                                        STATS_SUB()
                                        util_mutex_lock()
                                        memblock_huge_init() <struct memory_block memblock_huge_init (struct palloc_heap *heap, uint32_t chunk_id, uint32_t zone_id, uint32_t size_idx) at libpmemobj/memblock.c:1329>:
                                            heap_get_chunk_hdr()
                                            VALGRIND_DO_MAKE_MEM_UNDEFINED()
                                            VALGRIND_ANNOTATE_NEW_MEMORY()
                                            chunk_get_chunk_hdr_value() <uint64_t chunk_get_chunk_hdr_value (uint16_t type, uint16_t flags, uint32_t size_idx) at libpmemobj/memblock.c:604>:
                                                COMPILE_ERROR_ON()
                                                memcpy()
                                            util_atomic_store_explicit64()
                                            pmemops_persist()
                                            huge_write_footer() <void huge_write_footer (struct chunk_header *hdr, uint32_t size_idx) at libpmemobj/memblock.c:1166>:
                                                VALGRIND_DO_MAKE_MEM_UNDEFINED()
                                                VALGRIND_SET_CLEAN()
                                            memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                                memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                                    heap_get_chunk_hdr()
                                                memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                                    heap_get_chunk_hdr()
                                                    FATAL()
                                        heap_free_chunk_reuse() <int heap_free_chunk_reuse (struct palloc_heap *heap, struct bucket *bucket, struct memory_block *m) at libpmemobj/heap.c:674>:
                                            heap_coalesce_huge() <struct memory_block heap_coalesce_huge (struct palloc_heap *heap, struct bucket *b, const struct memory_block *m) at libpmemobj/heap.c:650>:
                                                heap_get_adjacent_free_block() <int heap_get_adjacent_free_block (struct palloc_heap *heap, const struct memory_block *in, struct memory_block *out, int prev) at libpmemobj/heap.c:582>:
                                                    ZID_TO_ZONE()
                                                    memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                                        memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                                            heap_get_chunk_hdr()
                                                        memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                                            heap_get_chunk_hdr()
                                                            FATAL()
                                                bucket_remove_block() <int bucket_remove_block (struct bucket *b, const struct memory_block *m) at libpmemobj/bucket.c:178>
                                                heap_coalesce() <struct memory_block heap_coalesce (struct palloc_heap *heap, const struct memory_block *blocks[], int n) at libpmemobj/heap.c:621>:
                                                    ASSERTne()
                                                    memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                                        memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                                            heap_get_chunk_hdr()
                                                        memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                                            heap_get_chunk_hdr()
                                                            FATAL()
                                            bucket_insert_block() <int bucket_insert_block (struct bucket *b, const struct memory_block *m) at libpmemobj/bucket.c:161>:
                                                VALGRIND_DO_MAKE_MEM_NOACCESS()
                                                VALGRIND_ANNOTATE_NEW_MEMORY()
                                        util_mutex_unlock()
                                    heap_bucket_release() <void heap_bucket_release (struct bucket *b) at libpmemobj/heap.c:498>:
                                        bucket_release() <void bucket_release (struct bucket *b) at libpmemobj/bucket.c:127>:
                                            util_mutex_unlock()
                                    VEC_DELETE()
                            out() <void out (const char *fmt, ...) at core/out.c:480>:
                                va_start()
                                out_common() <} void out_common (const char *file, int line, const char *func, int level, const char *suffix, const char *fmt, va_list ap) at core/out.c:334>
                                va_end()
                            heap_bucket_acquire() <struct bucket *heap_bucket_acquire (struct palloc_heap *heap, uint8_t class_id, uint16_t arena_id) at libpmemobj/heap.c:470>:
                                out() <void out (const char *fmt, ...) at core/out.c:480>:
                                    va_start()
                                    out_common() <} void out_common (const char *file, int line, const char *func, int level, const char *suffix, const char *fmt, va_list ap) at core/out.c:334>
                                    va_end()
                                heap_thread_arena() <struct arena *heap_thread_arena (struct palloc_heap *heap) at libpmemobj/heap.c:414>:
                                    os_tls_get() <void *os_tls_get (os_tls_key_t key) at core/os_thread_posix.c:62>:
                                        pthread_getspecific()
                                    heap_thread_arena_assign() <struct arena *heap_thread_arena_assign (struct palloc_heap *heap) at libpmemobj/heap.c:381>:
                                        util_mutex_lock()
                                        ASSERTne()
                                        VEC_SIZE()
                                        VEC_FOREACH()
                                        LOG()
                                        heap_arena_thread_attach() <void heap_arena_thread_attach (struct palloc_heap *heap, struct arena *a) at libpmemobj/heap.c:249>:
                                            ASSERTeq()
                                            os_tls_get() <void *os_tls_get (os_tls_key_t key) at core/os_thread_posix.c:62>:
                                                pthread_getspecific()
                                            heap_arena_thread_detach() <void heap_arena_thread_detach (struct arena *a) at libpmemobj/heap.c:232>:
                                                util_fetch_and_sub64()
                                            ASSERTne()
                                            util_fetch_and_add64()
                                            os_tls_set() <int os_tls_set (os_tls_key_t key, const void *value) at core/os_thread_posix.c:53>:
                                                pthread_setspecific()
                                        util_mutex_unlock()
                                    heap_global_arena_assign() <struct arena *heap_global_arena_assign (struct palloc_heap *heap) at libpmemobj/heap.c:348>:
                                        util_mutex_lock()
                                        ASSERTne()
                                        VEC_SIZE()
                                        VEC_FOREACH()
                                        LOG()
                                        util_mutex_unlock()
                                    ASSERT()
                                    ASSERTne()
                                ASSERTne()
                                VEC_ARR()
                                bucket_acquire() <struct bucket *bucket_acquire (struct bucket_locked *b) at libpmemobj/bucket.c:117>:
                                    util_mutex_lock()
                            heap_populate_bucket() <int heap_populate_bucket (struct palloc_heap *heap, struct bucket *bucket) at libpmemobj/heap.c:850>:
                                util_atomic_store_explicit32()
                                ZID_TO_ZONE()
                                VALGRIND_ADD_TO_GLOBAL_TX_IGNORE()
                                heap_zone_init() <void heap_zone_init (struct palloc_heap *heap, uint32_t zone_id, uint32_t first_chunk_id) at libpmemobj/heap.c:559>:
                                    ZID_TO_ZONE()
                                    zone_calc_size_idx() <uint32_t zone_calc_size_idx (uint32_t zone_id, unsigned max_zone, size_t heap_size) at libpmemobj/heap.c:533>:
                                        ASSERT()
                                    ASSERT()
                                    memblock_huge_init() <struct memory_block memblock_huge_init (struct palloc_heap *heap, uint32_t chunk_id, uint32_t zone_id, uint32_t size_idx) at libpmemobj/memblock.c:1329>:
                                        heap_get_chunk_hdr()
                                        VALGRIND_DO_MAKE_MEM_UNDEFINED()
                                        VALGRIND_ANNOTATE_NEW_MEMORY()
                                        chunk_get_chunk_hdr_value() <uint64_t chunk_get_chunk_hdr_value (uint16_t type, uint16_t flags, uint32_t size_idx) at libpmemobj/memblock.c:604>:
                                            COMPILE_ERROR_ON()
                                            memcpy()
                                        util_atomic_store_explicit64()
                                        pmemops_persist()
                                        huge_write_footer() <void huge_write_footer (struct chunk_header *hdr, uint32_t size_idx) at libpmemobj/memblock.c:1166>:
                                            VALGRIND_DO_MAKE_MEM_UNDEFINED()
                                            VALGRIND_SET_CLEAN()
                                        memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                            memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                                heap_get_chunk_hdr()
                                            memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                                heap_get_chunk_hdr()
                                                FATAL()
                                    pmemops_persist()
                                heap_reclaim_zone_garbage() <void heap_reclaim_zone_garbage (struct palloc_heap *heap, struct bucket *bucket, uint32_t zone_id) at libpmemobj/heap.c:775>:
                                    ZID_TO_ZONE()
                                    ASSERT()
                                    memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                        memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                            heap_get_chunk_hdr()
                                        memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                            heap_get_chunk_hdr()
                                            FATAL()
                                    heap_reclaim_run() <int heap_reclaim_run (struct palloc_heap *heap, struct memory_block *m, int startup) at libpmemobj/heap.c:733>:
                                        heap_get_chunk_run()
                                        heap_get_chunk_hdr()
                                        alloc_class_by_run() <struct alloc_class *alloc_class_by_run (struct alloc_class_collection *ac, size_t unit_size, uint16_t flags, uint32_t size_idx) at libpmemobj/alloc_class.c:594>:
                                            SIZE_TO_CLASS_MAP_INDEX()
                                            ASSERT()
                                            critnib_get() <void *critnib_get (struct critnib *c, uint64_t key) at libpmemobj/critnib.c:515>:
                                                load() <void load (void *src, void *dst) at libpmemobj/critnib.c:130>:
                                                    util_atomic_load_explicit64()
                                                is_leaf() <inline bool is_leaf (struct critnib_node *n) at libpmemobj/critnib.c:150>:
                                                slice_index() <inline unsigned slice_index (uint64_t key, sh_t shift) at libpmemobj/critnib.c:178>:
                                                to_leaf() <inline struct critnib_leaf *to_leaf (struct critnib_node *n) at libpmemobj/critnib.c:159>:
                                            RUN_CLASS_KEY_PACK()
                                        recycler_element_new() <struct recycler_element recycler_element_new (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/recycler.c:122>:
                                            SUPPRESS_UNUSED()
                                            util_mutex_lock()
                                            util_mutex_unlock()
                                        ASSERTeq()
                                        STATS_INC()
                                        heap_get_recycler() <struct recycler *heap_get_recycler (struct palloc_heap *heap, size_t id, size_t nallocs) at libpmemobj/heap.c:106> (R):
                                            util_atomic_load_explicit64()
                                            recycler_new() <struct recycler *recycler_new (struct palloc_heap *heap, size_t nallocs, size_t *peak_arenas) at libpmemobj/recycler.c:74>:
                                                Malloc()
                                                ravl_new_sized() <struct ravl *ravl_new_sized (ravl_compare *compare, size_t data_size) at core/ravl.c:45>:
                                                    Malloc()
                                                    ERR()
                                                recycler_element_cmp() <int recycler_element_cmp (const void *lhs, const void *rhs) at libpmemobj/recycler.c:23>:
                                                memset()
                                                VEC_INIT()
                                                util_mutex_init()
                                                Free() <Free_func Free at core/alloc.c:91>
                                            util_bool_compare_and_swap64()
                                            recycler_delete() <void recycler_delete (struct recycler *r) at libpmemobj/recycler.c:107>:
                                                VEC_DELETE()
                                                util_mutex_destroy()
                                                ravl_delete() <void ravl_delete (struct ravl *ravl) at core/ravl.c:112>:
                                                    ravl_delete_cb() <void ravl_delete_cb (struct ravl *ravl, ravl_cb cb, void *arg) at core/ravl.c:102>:
                                                        ravl_foreach_node() <void ravl_foreach_node (struct ravl_node *n, ravl_cb cb, void *arg, int free_node) at core/ravl.c:74> (R):
                                                            ravl_foreach_node() <void ravl_foreach_node (struct ravl_node *n, ravl_cb cb, void *arg, int free_node) at core/ravl.c:74> (recursive: see 28929)
                                                            Free() <Free_func Free at core/alloc.c:91>
                                                        Free() <Free_func Free at core/alloc.c:91>
                                                Free() <Free_func Free at core/alloc.c:91>
                                            heap_get_recycler() <struct recycler *heap_get_recycler (struct palloc_heap *heap, size_t id, size_t nallocs) at libpmemobj/heap.c:106> (recursive: see 28911)
                                        recycler_put() <int recycler_put (struct recycler *r, struct recycler_element element) at libpmemobj/recycler.c:154>:
                                            util_mutex_lock()
                                            ravl_emplace_copy() <int ravl_emplace_copy (struct ravl *ravl, const void *data) at core/ravl.c:384>:
                                                ravl_emplace() <int ravl_emplace (struct ravl *ravl, ravl_constr constr, const void *arg) at core/ravl.c:393>:
                                                    LOG()
                                                    ravl_new_node() <struct ravl_node *ravl_new_node (struct ravl *ravl, ravl_constr constr, const void *arg) at core/ravl.c:161>:
                                                        Malloc()
                                                        ERR()
                                                        ravl_node_insert_constructor() <void ravl_node_insert_constructor (void *data, size_t data_size, const void *arg) at core/ravl.c:139>:
                                                            SUPPRESS_UNUSED()
                                                            memcpy()
                                                    ravl_data() <void *ravl_data (struct ravl_node *node) at core/ravl.c:571>:
                                                        memcpy()
                                                    ravl_balance() <void ravl_balance (struct ravl *ravl, struct ravl_node *n) at core/ravl.c:337>:
                                                        ravl_node_is() <int ravl_node_is (struct ravl_node *n, int i, int j) at core/ravl.c:306>:
                                                            ravl_node_is_i_j() <int ravl_node_is_i_j (struct ravl_node *n, int i, int j) at core/ravl.c:296>:
                                                                ravl_node_rank_difference_parent() <int ravl_node_rank_difference_parent (struct ravl_node *p, struct ravl_node *n) at core/ravl.c:275>:
                                                                    ravl_node_rank() <int ravl_node_rank (struct ravl_node *n) at core/ravl.c:261>:
                                                        ravl_node_promote() <void ravl_node_promote (struct ravl_node *n) at core/ravl.c:315>
                                                        ravl_node_sibling() <struct ravl_node *ravl_node_sibling (struct ravl_node *n) at core/ravl.c:209>:
                                                            ravl_node_slot_type() <enum ravl_slot_type ravl_node_slot_type (struct ravl_node *n) at core/ravl.c:196>:
                                                        ravl_node_rank_difference() <int ravl_node_rank_difference (struct ravl_node *n) at core/ravl.c:287>:
                                                            ravl_node_rank_difference_parent() <int ravl_node_rank_difference_parent (struct ravl_node *p, struct ravl_node *n) at core/ravl.c:275>:
                                                                ravl_node_rank() <int ravl_node_rank (struct ravl_node *n) at core/ravl.c:261>:
                                                        ravl_node_rank_difference_parent() <int ravl_node_rank_difference_parent (struct ravl_node *p, struct ravl_node *n) at core/ravl.c:275>:
                                                            ravl_node_rank() <int ravl_node_rank (struct ravl_node *n) at core/ravl.c:261>:
                                                        ravl_slot_opposite() <enum ravl_slot_type ravl_slot_opposite (enum ravl_slot_type t) at core/ravl.c:184>:
                                                            ASSERTne()
                                                        ravl_node_slot_type() <enum ravl_slot_type ravl_node_slot_type (struct ravl_node *n) at core/ravl.c:196>:
                                                        ravl_rotate() <void ravl_rotate (struct ravl *ravl, struct ravl_node *n) at core/ravl.c:237>:
                                                            ASSERTne()
                                                            ravl_node_ref() <struct ravl_node **ravl_node_ref (struct ravl *ravl, struct ravl_node *n) at core/ravl.c:223>:
                                                                ravl_node_slot_type() <enum ravl_slot_type ravl_node_slot_type (struct ravl_node *n) at core/ravl.c:196>:
                                                            ravl_node_slot_type() <enum ravl_slot_type ravl_node_slot_type (struct ravl_node *n) at core/ravl.c:196>:
                                                            ravl_slot_opposite() <enum ravl_slot_type ravl_slot_opposite (enum ravl_slot_type t) at core/ravl.c:184>:
                                                                ASSERTne()
                                                        ravl_node_demote() <void ravl_node_demote (struct ravl_node *n) at core/ravl.c:324>:
                                                            ASSERT()
                                                    Free() <Free_func Free at core/alloc.c:91>
                                                ravl_node_copy_constructor() <void ravl_node_copy_constructor (void *data, size_t data_size, const void *arg) at core/ravl.c:152>:
                                                    memcpy()
                                            util_mutex_unlock()
                                        ERR()
                                    heap_run_into_free_chunk() <void heap_run_into_free_chunk (struct palloc_heap *heap, struct bucket *bucket, struct memory_block *m) at libpmemobj/heap.c:697>:
                                        heap_get_chunk_hdr()
                                        STATS_SUB()
                                        util_mutex_lock()
                                        memblock_huge_init() <struct memory_block memblock_huge_init (struct palloc_heap *heap, uint32_t chunk_id, uint32_t zone_id, uint32_t size_idx) at libpmemobj/memblock.c:1329>:
                                            heap_get_chunk_hdr()
                                            VALGRIND_DO_MAKE_MEM_UNDEFINED()
                                            VALGRIND_ANNOTATE_NEW_MEMORY()
                                            chunk_get_chunk_hdr_value() <uint64_t chunk_get_chunk_hdr_value (uint16_t type, uint16_t flags, uint32_t size_idx) at libpmemobj/memblock.c:604>:
                                                COMPILE_ERROR_ON()
                                                memcpy()
                                            util_atomic_store_explicit64()
                                            pmemops_persist()
                                            huge_write_footer() <void huge_write_footer (struct chunk_header *hdr, uint32_t size_idx) at libpmemobj/memblock.c:1166>:
                                                VALGRIND_DO_MAKE_MEM_UNDEFINED()
                                                VALGRIND_SET_CLEAN()
                                            memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                                memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                                    heap_get_chunk_hdr()
                                                memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                                    heap_get_chunk_hdr()
                                                    FATAL()
                                        heap_free_chunk_reuse() <int heap_free_chunk_reuse (struct palloc_heap *heap, struct bucket *bucket, struct memory_block *m) at libpmemobj/heap.c:674>:
                                            heap_coalesce_huge() <struct memory_block heap_coalesce_huge (struct palloc_heap *heap, struct bucket *b, const struct memory_block *m) at libpmemobj/heap.c:650>:
                                                heap_get_adjacent_free_block() <int heap_get_adjacent_free_block (struct palloc_heap *heap, const struct memory_block *in, struct memory_block *out, int prev) at libpmemobj/heap.c:582>:
                                                    ZID_TO_ZONE()
                                                    memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                                        memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                                            heap_get_chunk_hdr()
                                                        memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                                            heap_get_chunk_hdr()
                                                            FATAL()
                                                bucket_remove_block() <int bucket_remove_block (struct bucket *b, const struct memory_block *m) at libpmemobj/bucket.c:178>
                                                heap_coalesce() <struct memory_block heap_coalesce (struct palloc_heap *heap, const struct memory_block *blocks[], int n) at libpmemobj/heap.c:621>:
                                                    ASSERTne()
                                                    memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                                        memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                                            heap_get_chunk_hdr()
                                                        memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                                            heap_get_chunk_hdr()
                                                            FATAL()
                                            bucket_insert_block() <int bucket_insert_block (struct bucket *b, const struct memory_block *m) at libpmemobj/bucket.c:161>:
                                                VALGRIND_DO_MAKE_MEM_NOACCESS()
                                                VALGRIND_ANNOTATE_NEW_MEMORY()
                                        util_mutex_unlock()
                                    heap_free_chunk_reuse() <int heap_free_chunk_reuse (struct palloc_heap *heap, struct bucket *bucket, struct memory_block *m) at libpmemobj/heap.c:674>:
                                        heap_coalesce_huge() <struct memory_block heap_coalesce_huge (struct palloc_heap *heap, struct bucket *b, const struct memory_block *m) at libpmemobj/heap.c:650>:
                                            heap_get_adjacent_free_block() <int heap_get_adjacent_free_block (struct palloc_heap *heap, const struct memory_block *in, struct memory_block *out, int prev) at libpmemobj/heap.c:582>:
                                                ZID_TO_ZONE()
                                                memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                                    memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                                        heap_get_chunk_hdr()
                                                    memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                                        heap_get_chunk_hdr()
                                                        FATAL()
                                            bucket_remove_block() <int bucket_remove_block (struct bucket *b, const struct memory_block *m) at libpmemobj/bucket.c:178>
                                            heap_coalesce() <struct memory_block heap_coalesce (struct palloc_heap *heap, const struct memory_block *blocks[], int n) at libpmemobj/heap.c:621>:
                                                ASSERTne()
                                                memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                                    memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                                        heap_get_chunk_hdr()
                                                    memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                                        heap_get_chunk_hdr()
                                                        FATAL()
                                        bucket_insert_block() <int bucket_insert_block (struct bucket *b, const struct memory_block *m) at libpmemobj/bucket.c:161>:
                                            VALGRIND_DO_MAKE_MEM_NOACCESS()
                                            VALGRIND_ANNOTATE_NEW_MEMORY()
                            heap_bucket_release() <void heap_bucket_release (struct bucket *b) at libpmemobj/heap.c:498>:
                                bucket_release() <void bucket_release (struct bucket *b) at libpmemobj/bucket.c:127>:
                                    util_mutex_unlock()
                            heap_get_bestfit_block() <int heap_get_bestfit_block (struct palloc_heap *heap, struct bucket *b, struct memory_block *m) at libpmemobj/heap.c:1210> (recursive: see 27644)
                            heap_run_create() <int heap_run_create (struct palloc_heap *heap, struct bucket *b, struct memory_block *m) at libpmemobj/heap.c:1065>:
                                bucket_alloc_class() <struct alloc_class *bucket_alloc_class (struct bucket *b) at libpmemobj/bucket.c:152>
                                memblock_run_init() <struct memory_block memblock_run_init (struct palloc_heap *heap, uint32_t chunk_id, uint32_t zone_id, struct run_descriptor *rdsc) at libpmemobj/memblock.c:1361>:
                                    ASSERTne()
                                    ZID_TO_ZONE()
                                    heap_get_chunk_run()
                                    SIZEOF_RUN()
                                    VALGRIND_DO_MAKE_MEM_UNDEFINED()
                                    VALGRIND_ADD_TO_TX()
                                    memset()
                                    VALGRIND_REMOVE_FROM_TX()
                                    pmemops_flush()
                                    VALGRIND_ANNOTATE_NEW_MEMORY()
                                    pmemops_persist()
                                    ASSERT()
                                    chunk_get_chunk_hdr_value() <uint64_t chunk_get_chunk_hdr_value (uint16_t type, uint16_t flags, uint32_t size_idx) at libpmemobj/memblock.c:604>:
                                        COMPILE_ERROR_ON()
                                        memcpy()
                                    util_atomic_store_explicit64()
                                    memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                        memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                            heap_get_chunk_hdr()
                                        memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                            heap_get_chunk_hdr()
                                            FATAL()
                                bucket_attach_run() <int bucket_attach_run (struct bucket *b, const struct memory_block *m) at libpmemobj/bucket.c:206>:
                                    util_mutex_lock()
                                    bucket_memblock_insert_block() <int bucket_memblock_insert_block (const struct memory_block *m, void *b) at libpmemobj/bucket.c:197>:
                                        bucket_insert_block() <int bucket_insert_block (struct bucket *b, const struct memory_block *m) at libpmemobj/bucket.c:161>:
                                            VALGRIND_DO_MAKE_MEM_NOACCESS()
                                            VALGRIND_ANNOTATE_NEW_MEMORY()
                                    util_mutex_unlock()
                                    util_fetch_and_add64()
                                STATS_INC()
                        ASSERT()
                        heap_split_block() <void heap_split_block (struct palloc_heap *heap, struct bucket *b, struct memory_block *m, uint32_t units) at libpmemobj/heap.c:1172>:
                            bucket_alloc_class() <struct alloc_class *bucket_alloc_class (struct bucket *b) at libpmemobj/bucket.c:152>
                            ASSERT()
                            memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                    heap_get_chunk_hdr()
                                memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                    heap_get_chunk_hdr()
                                    FATAL()
                            bucket_insert_block() <int bucket_insert_block (struct bucket *b, const struct memory_block *m) at libpmemobj/bucket.c:161>:
                                VALGRIND_DO_MAKE_MEM_NOACCESS()
                                VALGRIND_ANNOTATE_NEW_MEMORY()
                            LOG()
                            memblock_huge_init() <struct memory_block memblock_huge_init (struct palloc_heap *heap, uint32_t chunk_id, uint32_t zone_id, uint32_t size_idx) at libpmemobj/memblock.c:1329>:
                                heap_get_chunk_hdr()
                                VALGRIND_DO_MAKE_MEM_UNDEFINED()
                                VALGRIND_ANNOTATE_NEW_MEMORY()
                                chunk_get_chunk_hdr_value() <uint64_t chunk_get_chunk_hdr_value (uint16_t type, uint16_t flags, uint32_t size_idx) at libpmemobj/memblock.c:604>:
                                    COMPILE_ERROR_ON()
                                    memcpy()
                                util_atomic_store_explicit64()
                                pmemops_persist()
                                huge_write_footer() <void huge_write_footer (struct chunk_header *hdr, uint32_t size_idx) at libpmemobj/memblock.c:1166>:
                                    VALGRIND_DO_MAKE_MEM_UNDEFINED()
                                    VALGRIND_SET_CLEAN()
                                memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                    memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                        heap_get_chunk_hdr()
                                    memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                        heap_get_chunk_hdr()
                                        FATAL()
                    alloc_prep_block() <int alloc_prep_block (struct palloc_heap *heap, const struct memory_block *m, palloc_constr constructor, void *arg, uint64_t extra_field, uint16_t object_flags, struct pobj_action_internal *out) at libpmemobj/palloc.c:112>:
                        VALGRIND_DO_MEMPOOL_ALLOC()
                        VALGRIND_DO_MAKE_MEM_UNDEFINED()
                        VALGRIND_ANNOTATE_NEW_MEMORY()
                        unlikely()
                        pmemops_memset()
                        VALGRIND_DO_MEMPOOL_FREE()
                        HEAP_PTR_TO_OFF()
                    bucket_insert_block() <int bucket_insert_block (struct bucket *b, const struct memory_block *m) at libpmemobj/bucket.c:161>:
                        VALGRIND_DO_MAKE_MEM_NOACCESS()
                        VALGRIND_ANNOTATE_NEW_MEMORY()
                    bucket_active_block() <struct memory_block_reserved *bucket_active_block (struct bucket *b) at libpmemobj/bucket.c:265>:
                    util_fetch_and_add64()
                    heap_bucket_release() <void heap_bucket_release (struct bucket *b) at libpmemobj/heap.c:498>:
                        bucket_release() <void bucket_release (struct bucket *b) at libpmemobj/bucket.c:127>:
                            util_mutex_unlock()
                VALGRIND_ADD_TO_TX()
                HEAP_OFF_TO_PTR()
                pmemops_memcpy()
                VALGRIND_REMOVE_FROM_TX()
                operation_add_entry() <int operation_add_entry (struct operation_context *ctx, void *ptr, uint64_t value, ulog_operation_type type) at libpmemobj/memops.c:411>:
                    OBJ_OFF_IS_VALID()
                    operation_add_typed_entry() <int operation_add_typed_entry (struct operation_context *ctx, void *ptr, uint64_t value, ulog_operation_type type, enum operation_log_type log_type) at libpmemobj/memops.c:362>:
                        Realloc()
                        SIZEOF_ULOG()
                        VECQ_CLEAR()
                        operation_try_merge_entry() <int operation_try_merge_entry (struct operation_context *ctx, void *ptr, uint64_t value, ulog_operation_type type) at libpmemobj/memops.c:318>:
                            OBJ_PTR_TO_OFF()
                            VECQ_FOREACH_REVERSE()
                            ulog_entry_offset() <uint64_t ulog_entry_offset (const struct ulog_entry_base *entry) at libpmemobj/ulog.c:68>:
                            ulog_entry_type() <ulog_operation_type ulog_entry_type (const struct ulog_entry_base *entry) at libpmemobj/ulog.c:59>:
                                ULOG_OPERATION_FROM_OFFSET()
                            operation_merge() <inline void operation_merge (struct ulog_entry_base *entry, uint64_t value, ulog_operation_type type) at libpmemobj/memops.c:288>:
                                ASSERT()
                        ulog_entry_val_create() <struct ulog_entry_val *ulog_entry_val_create (struct ulog *ulog, size_t offset, uint64_t *dest, uint64_t value, ulog_operation_type type, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:372>:
                            COMPILE_ERROR_ON()
                            ULOG_OPERATION()
                            pmemops_memcpy()
                        operation_merge_entry_add() <void operation_merge_entry_add (struct operation_context *ctx, struct ulog_entry_val *entry) at libpmemobj/memops.c:344>:
                            VECQ_SIZE()
                            VECQ_DEQUEUE()
                            VECQ_ENQUEUE()
                            LOG()
                        ulog_entry_size() <size_t ulog_entry_size (const struct ulog_entry_base *entry) at libpmemobj/ulog.c:77>:
                            ulog_entry_type() <ulog_operation_type ulog_entry_type (const struct ulog_entry_base *entry) at libpmemobj/ulog.c:59>:
                                ULOG_OPERATION_FROM_OFFSET()
                            CACHELINE_ALIGN()
                            ASSERT()
                palloc_exec_actions() <void palloc_exec_actions (struct palloc_heap *heap, struct operation_context *ctx, struct pobj_action_internal *actv, size_t actvcnt) at libpmemobj/palloc.c:526>:
                    qsort()
                    palloc_action_compare() <int palloc_action_compare (const void *lhs, const void *rhs) at libpmemobj/palloc.c:507>:
                    ASSERTeq()
                    util_mutex_lock()
                    pmemops_drain()
                    operation_process() <void operation_process (struct operation_context *ctx) at libpmemobj/memops.c:776>:
                        ulog_entry_type() <ulog_operation_type ulog_entry_type (const struct ulog_entry_base *entry) at libpmemobj/ulog.c:59>:
                            ULOG_OPERATION_FROM_OFFSET()
                        ulog_entry_apply() <void ulog_entry_apply (const struct ulog_entry_base *e, int persist, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:526>:
                            ulog_entry_type() <ulog_operation_type ulog_entry_type (const struct ulog_entry_base *entry) at libpmemobj/ulog.c:59>:
                                ULOG_OPERATION_FROM_OFFSET()
                            ulog_entry_offset() <uint64_t ulog_entry_offset (const struct ulog_entry_base *entry) at libpmemobj/ulog.c:68>:
                            f()
                            VALGRIND_ADD_TO_TX()
                            pmemops_memset()
                            pmemops_memcpy()
                            ASSERT()
                            VALGRIND_REMOVE_FROM_TX()
                        operation_process_persistent_redo() <void operation_process_persistent_redo (struct operation_context *ctx) at libpmemobj/memops.c:654>:
                            ASSERTeq()
                            ulog_store() <void ulog_store (struct ulog *dest, struct ulog *src, size_t nbytes, size_t ulog_base_nbytes, size_t ulog_total_capacity, struct ulog_next *next, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:288>:
                                MIN()
                                CACHELINE_ALIGN()
                                ASSERT()
                                ulog_by_offset() <struct ulog *ulog_by_offset (size_t offset, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:36>:
                                    CACHELINE_ALIGN()
                                VEC_ARR()
                                ASSERTne()
                                IS_CACHELINE_ALIGNED()
                                VALGRIND_ADD_TO_TX()
                                pmemops_memcpy()
                                VALGRIND_REMOVE_FROM_TX()
                                pmemops_drain()
                                VEC_SIZE()
                                VEC_FRONT()
                                ulog_checksum() <int ulog_checksum (struct ulog *ulog, size_t ulog_base_bytes, int insert) at libpmemobj/ulog.c:275>:
                                    util_checksum() <int util_checksum (void *addr, size_t len, uint64_t *csump, int insert, size_t skip_off) at core/util.c:178>:
                                        util_checksum_compute() <uint64_t util_checksum_compute (void *addr, size_t len, uint64_t *csump, size_t skip_off) at core/util.c:134>:
                                            abort()
                                            le32toh()
                                        htole64()
                                    SIZEOF_ULOG()
                                SIZEOF_ULOG()
                            ulog_process() <void ulog_process (struct ulog *ulog, ulog_check_offset_fn check, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:786>:
                                SUPPRESS_UNUSED()
                                LOG()
                                ulog_check() <int ulog_check (struct ulog *ulog, ulog_check_offset_fn check, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:881>:
                                    LOG()
                                    ulog_foreach_entry() <int ulog_foreach_entry (struct ulog *ulog, ulog_entry_cb cb, void *arg, const struct pmem_ops *ops) at libpmemobj/ulog.c:180>
                                    ulog_check_entry() <int ulog_check_entry (struct ulog_entry_base *e, void *arg, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:862>:
                                        ulog_entry_offset() <uint64_t ulog_entry_offset (const struct ulog_entry_base *entry) at libpmemobj/ulog.c:68>:
                                        check()
                                        LOG()
                                ulog_foreach_entry() <int ulog_foreach_entry (struct ulog *ulog, ulog_entry_cb cb, void *arg, const struct pmem_ops *ops) at libpmemobj/ulog.c:180>
                                ulog_process_entry() <int ulog_process_entry (struct ulog_entry_base *e, void *arg, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:591>:
                                    SUPPRESS_UNUSED()
                                    ulog_entry_apply() <void ulog_entry_apply (const struct ulog_entry_base *e, int persist, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:526>:
                                        ulog_entry_type() <ulog_operation_type ulog_entry_type (const struct ulog_entry_base *entry) at libpmemobj/ulog.c:59>:
                                            ULOG_OPERATION_FROM_OFFSET()
                                        ulog_entry_offset() <uint64_t ulog_entry_offset (const struct ulog_entry_base *entry) at libpmemobj/ulog.c:68>:
                                        f()
                                        VALGRIND_ADD_TO_TX()
                                        pmemops_memset()
                                        pmemops_memcpy()
                                        ASSERT()
                                        VALGRIND_REMOVE_FROM_TX()
                                pmemops_drain()
                            ulog_clobber() <void ulog_clobber (struct ulog *dest, struct ulog_next *next, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:694>:
                                memset()
                                VEC_SIZE()
                                VEC_FRONT()
                                pmemops_memcpy()
                        operation_process_persistent_undo() <void operation_process_persistent_undo (struct operation_context *ctx) at libpmemobj/memops.c:673>:
                            ASSERTeq()
                            ulog_process() <void ulog_process (struct ulog *ulog, ulog_check_offset_fn check, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:786>:
                                SUPPRESS_UNUSED()
                                LOG()
                                ulog_check() <int ulog_check (struct ulog *ulog, ulog_check_offset_fn check, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:881>:
                                    LOG()
                                    ulog_foreach_entry() <int ulog_foreach_entry (struct ulog *ulog, ulog_entry_cb cb, void *arg, const struct pmem_ops *ops) at libpmemobj/ulog.c:180>
                                    ulog_check_entry() <int ulog_check_entry (struct ulog_entry_base *e, void *arg, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:862>:
                                        ulog_entry_offset() <uint64_t ulog_entry_offset (const struct ulog_entry_base *entry) at libpmemobj/ulog.c:68>:
                                        check()
                                        LOG()
                                ulog_foreach_entry() <int ulog_foreach_entry (struct ulog *ulog, ulog_entry_cb cb, void *arg, const struct pmem_ops *ops) at libpmemobj/ulog.c:180>
                                ulog_process_entry() <int ulog_process_entry (struct ulog_entry_base *e, void *arg, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:591>:
                                    SUPPRESS_UNUSED()
                                    ulog_entry_apply() <void ulog_entry_apply (const struct ulog_entry_base *e, int persist, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:526>:
                                        ulog_entry_type() <ulog_operation_type ulog_entry_type (const struct ulog_entry_base *entry) at libpmemobj/ulog.c:59>:
                                            ULOG_OPERATION_FROM_OFFSET()
                                        ulog_entry_offset() <uint64_t ulog_entry_offset (const struct ulog_entry_base *entry) at libpmemobj/ulog.c:68>:
                                        f()
                                        VALGRIND_ADD_TO_TX()
                                        pmemops_memset()
                                        pmemops_memcpy()
                                        ASSERT()
                                        VALGRIND_REMOVE_FROM_TX()
                                pmemops_drain()
                        ulog_process() <void ulog_process (struct ulog *ulog, ulog_check_offset_fn check, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:786>:
                            SUPPRESS_UNUSED()
                            LOG()
                            ulog_check() <int ulog_check (struct ulog *ulog, ulog_check_offset_fn check, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:881>:
                                LOG()
                                ulog_foreach_entry() <int ulog_foreach_entry (struct ulog *ulog, ulog_entry_cb cb, void *arg, const struct pmem_ops *ops) at libpmemobj/ulog.c:180>
                                ulog_check_entry() <int ulog_check_entry (struct ulog_entry_base *e, void *arg, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:862>:
                                    ulog_entry_offset() <uint64_t ulog_entry_offset (const struct ulog_entry_base *entry) at libpmemobj/ulog.c:68>:
                                    check()
                                    LOG()
                            ulog_foreach_entry() <int ulog_foreach_entry (struct ulog *ulog, ulog_entry_cb cb, void *arg, const struct pmem_ops *ops) at libpmemobj/ulog.c:180>
                            ulog_process_entry() <int ulog_process_entry (struct ulog_entry_base *e, void *arg, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:591>:
                                SUPPRESS_UNUSED()
                                ulog_entry_apply() <void ulog_entry_apply (const struct ulog_entry_base *e, int persist, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:526>:
                                    ulog_entry_type() <ulog_operation_type ulog_entry_type (const struct ulog_entry_base *entry) at libpmemobj/ulog.c:59>:
                                        ULOG_OPERATION_FROM_OFFSET()
                                    ulog_entry_offset() <uint64_t ulog_entry_offset (const struct ulog_entry_base *entry) at libpmemobj/ulog.c:68>:
                                    f()
                                    VALGRIND_ADD_TO_TX()
                                    pmemops_memset()
                                    pmemops_memcpy()
                                    ASSERT()
                                    VALGRIND_REMOVE_FROM_TX()
                            pmemops_drain()
                    util_mutex_unlock()
                    operation_finish() <void operation_finish (struct operation_context *ctx, unsigned flags) at libpmemobj/memops.c:814>:
                        ASSERTne()
                        out() <void out (const char *fmt, ...) at core/out.c:480>:
                            va_start()
                            out_common() <} void out_common (const char *file, int line, const char *func, int level, const char *suffix, const char *fmt, va_list ap) at core/out.c:334>
                            va_end()
                        ulog_clobber_data() <int ulog_clobber_data (struct ulog *ulog_first, struct ulog_next *next, ulog_free_fn ulog_free, ulog_rm_user_buffer_fn user_buff_remove, const struct pmem_ops *p_ops, unsigned flags) at libpmemobj/ulog.c:713>:
                            ASSERTne()
                            ulog_inc_gen_num() <void ulog_inc_gen_num (struct ulog *ulog, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:605>:
                                VALGRIND_ADD_TO_TX()
                                pmemops_persist()
                                VALGRIND_SET_CLEAN()
                                VALGRIND_REMOVE_FROM_TX()
                            VEC_SIZE()
                            VEC_GET()
                            ulog_by_offset() <struct ulog *ulog_by_offset (size_t offset, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:36>:
                                CACHELINE_ALIGN()
                            ulog_free_next() <int ulog_free_next (struct ulog *u, const struct pmem_ops *p_ops, ulog_free_fn ulog_free, ulog_rm_user_buffer_fn user_buff_remove, uint64_t flags) at libpmemobj/ulog.c:625>:
                                VEC()
                                VEC_INIT()
                                ulog_by_offset() <struct ulog *ulog_by_offset (size_t offset, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:36>:
                                    CACHELINE_ALIGN()
                                pmemops_persist()
                                VEC_PUSH_BACK()
                                LOG()
                                out() <void out (const char *fmt, ...) at core/out.c:480>:
                                    va_start()
                                    out_common() <} void out_common (const char *file, int line, const char *func, int level, const char *suffix, const char *fmt, va_list ap) at core/out.c:334>
                                    va_end()
                                VEC_FOREACH_REVERSE()
                                VEC_DELETE()
                        operation_user_buffer_remove() <int operation_user_buffer_remove (void *base, void *addr) at libpmemobj/memops.c:242>:
                            util_mutex_lock()
                            ravl_find() <struct ravl_node *ravl_find (struct ravl *ravl, const void *data, enum ravl_predicate flags) at core/ravl.c:524>:
                                LOG()
                                ravl_data() <void *ravl_data (struct ravl_node *node) at core/ravl.c:571>:
                                    memcpy()
                                ravl_predicate_holds() <int ravl_predicate_holds (int result, struct ravl_node **ret, struct ravl_node *n, enum ravl_predicate flags) at core/ravl.c:489>:
                                    ravl_node_successor() <struct ravl_node *ravl_node_successor (struct ravl_node *n) at core/ravl.c:465>:
                                        ravl_node_cessor() <struct ravl_node *ravl_node_cessor (struct ravl_node *n, enum ravl_slot_type t) at core/ravl.c:443>:
                                            ravl_node_type_most() <struct ravl_node *ravl_node_type_most (struct ravl_node *n, enum ravl_slot_type t) at core/ravl.c:430>:
                                            ravl_slot_opposite() <enum ravl_slot_type ravl_slot_opposite (enum ravl_slot_type t) at core/ravl.c:184>:
                                                ASSERTne()
                                    ravl_node_predecessor() <struct ravl_node *ravl_node_predecessor (struct ravl_node *n) at core/ravl.c:476>:
                                        ravl_node_cessor() <struct ravl_node *ravl_node_cessor (struct ravl_node *n, enum ravl_slot_type t) at core/ravl.c:443>:
                                            ravl_node_type_most() <struct ravl_node *ravl_node_type_most (struct ravl_node *n, enum ravl_slot_type t) at core/ravl.c:430>:
                                            ravl_slot_opposite() <enum ravl_slot_type ravl_slot_opposite (enum ravl_slot_type t) at core/ravl.c:184>:
                                                ASSERTne()
                            ASSERTne()
                            ravl_remove() <void ravl_remove (struct ravl *ravl, struct ravl_node *n) at core/ravl.c:545> (R):
                                LOG()
                                ravl_node_successor() <struct ravl_node *ravl_node_successor (struct ravl_node *n) at core/ravl.c:465>:
                                    ravl_node_cessor() <struct ravl_node *ravl_node_cessor (struct ravl_node *n, enum ravl_slot_type t) at core/ravl.c:443>:
                                        ravl_node_type_most() <struct ravl_node *ravl_node_type_most (struct ravl_node *n, enum ravl_slot_type t) at core/ravl.c:430>:
                                        ravl_slot_opposite() <enum ravl_slot_type ravl_slot_opposite (enum ravl_slot_type t) at core/ravl.c:184>:
                                            ASSERTne()
                                memcpy()
                                ravl_remove() <void ravl_remove (struct ravl *ravl, struct ravl_node *n) at core/ravl.c:545> (recursive: see 29336)
                                ravl_node_ref() <struct ravl_node **ravl_node_ref (struct ravl *ravl, struct ravl_node *n) at core/ravl.c:223>:
                                    ravl_node_slot_type() <enum ravl_slot_type ravl_node_slot_type (struct ravl_node *n) at core/ravl.c:196>:
                                Free() <Free_func Free at core/alloc.c:91>
                            util_mutex_unlock()
                        ulog_free_next() <int ulog_free_next (struct ulog *u, const struct pmem_ops *p_ops, ulog_free_fn ulog_free, ulog_rm_user_buffer_fn user_buff_remove, uint64_t flags) at libpmemobj/ulog.c:625>:
                            VEC()
                            VEC_INIT()
                            ulog_by_offset() <struct ulog *ulog_by_offset (size_t offset, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:36>:
                                CACHELINE_ALIGN()
                            pmemops_persist()
                            VEC_PUSH_BACK()
                            LOG()
                            out() <void out (const char *fmt, ...) at core/out.c:480>:
                                va_start()
                                out_common() <} void out_common (const char *file, int line, const char *func, int level, const char *suffix, const char *fmt, va_list ap) at core/out.c:334>
                                va_end()
                            VEC_FOREACH_REVERSE()
                            VEC_DELETE()
                        ulog_capacity() <size_t ulog_capacity (struct ulog *ulog, size_t ulog_base_bytes, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:206>:
                            ulog_next() <struct ulog *ulog_next (struct ulog *ulog, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:50>:
                                ulog_by_offset() <struct ulog *ulog_by_offset (size_t offset, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:36>:
                                    CACHELINE_ALIGN()
                        VEC_CLEAR()
                        ulog_rebuild_next_vec() <void ulog_rebuild_next_vec (struct ulog *ulog, struct ulog_next *next, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:223>:
                            VEC_PUSH_BACK()
                            ulog_next() <struct ulog *ulog_next (struct ulog *ulog, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:50>:
                                ulog_by_offset() <struct ulog *ulog_by_offset (size_t offset, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:36>:
                                    CACHELINE_ALIGN()
            constructor_zrealloc_root() <int constructor_zrealloc_root (void *ctx, void *ptr, size_t usable_size, void *arg) at libpmemobj/obj.c:1953>:
                LOG()
                ASSERTne()
                VALGRIND_ADD_TO_TX()
                constructor_realloc() <int constructor_realloc (void *ctx, void *ptr, size_t usable_size, void *arg) at libpmemobj/obj.c:1875>:
                    LOG()
                    ASSERTne()
                    pmemops_memset()
                VALGRIND_REMOVE_FROM_TX()
            pmalloc_operation_release() <void pmalloc_operation_release (PMEMobjpool *pop) at libpmemobj/pmalloc.c:83>:
                lane_release() <void lane_release (PMEMobjpool *pop) at libpmemobj/lane.c:546>:
                    get_lane_info_record() <inline struct lane_info *get_lane_info_record (PMEMobjpool *pop) at libpmemobj/lane.c:466>:
                        likely()
                        unlikely()
                        lane_info_ht_boot() <inline void lane_info_ht_boot (void) at libpmemobj/lane.c:74>:
                            lane_info_create() <inline void lane_info_create (void) at libpmemobj/lane.c:39>:
                                critnib_new() <struct critnib *critnib_new (void) at libpmemobj/critnib.c:187>:
                                    Zalloc() <void *Zalloc (size_t sz) at core/alloc.c:98>:
                                        Malloc()
                                        memset()
                                    util_mutex_init()
                                    VALGRIND_HG_DRD_DISABLE_CHECKING()
                                FATAL()
                            os_tls_set() <int os_tls_set (os_tls_key_t key, const void *value) at core/os_thread_posix.c:53>:
                                pthread_setspecific()
                            FATAL()
                        critnib_get() <void *critnib_get (struct critnib *c, uint64_t key) at libpmemobj/critnib.c:515>:
                            load() <void load (void *src, void *dst) at libpmemobj/critnib.c:130>:
                                util_atomic_load_explicit64()
                            is_leaf() <inline bool is_leaf (struct critnib_node *n) at libpmemobj/critnib.c:150>:
                            slice_index() <inline unsigned slice_index (uint64_t key, sh_t shift) at libpmemobj/critnib.c:178>:
                            to_leaf() <inline struct critnib_leaf *to_leaf (struct critnib_node *n) at libpmemobj/critnib.c:159>:
                        Malloc()
                        FATAL()
                        critnib_insert() <int critnib_insert (struct critnib *c, uint64_t key, void *value) at libpmemobj/critnib.c:340>:
                            util_mutex_lock()
                            alloc_leaf() <struct critnib_leaf *alloc_leaf (struct critnib *__restrict c) at libpmemobj/critnib.c:311>:
                                Malloc()
                                ERR()
                                VALGRIND_ANNOTATE_NEW_MEMORY()
                            util_mutex_unlock()
                            VALGRIND_HG_DRD_DISABLE_CHECKING()
                            is_leaf() <inline bool is_leaf (struct critnib_node *n) at libpmemobj/critnib.c:150>:
                            path_mask() <inline uint64_t path_mask (sh_t shift) at libpmemobj/critnib.c:169>:
                            slice_index() <inline unsigned slice_index (uint64_t key, sh_t shift) at libpmemobj/critnib.c:178>:
                            store() <void store (void *dst, void *src) at libpmemobj/critnib.c:140>:
                                util_atomic_store_explicit64()
                            to_leaf() <inline struct critnib_leaf *to_leaf (struct critnib_node *n) at libpmemobj/critnib.c:159>:
                            ASSERT()
                            free_leaf() <void free_leaf (struct critnib *__restrict c, struct critnib_leaf *__restrict k) at libpmemobj/critnib.c:298>
                            util_mssb_index64()
                            alloc_node() <struct critnib_node *alloc_node (struct critnib *__restrict c) at libpmemobj/critnib.c:274>:
                                Malloc()
                                ERR()
                                VALGRIND_ANNOTATE_NEW_MEMORY()
                    ASSERTne()
                    unlikely()
                    FATAL()
                    util_bool_compare_and_swap64()
        pmemobj_mutex_unlock_nofail()
        PMEMOBJ_API_END()
    PMEMOBJ_API_END()
pmemobj_tx_abort() <void pmemobj_tx_abort (int errnum) at libpmemobj/tx.c:958>:
    PMEMOBJ_API_START()
    obj_tx_abort() <void obj_tx_abort (int errnum, int user) at libpmemobj/tx.c:914>:
        LOG()
        get_tx() <struct tx *get_tx () at libpmemobj/tx.c:54>:
        ASSERT_IN_TX()
        ASSERT_TX_STAGE_WORK()
        ASSERT()
        PMDK_SLIST_FIRST()
        PMDK_SLIST_NEXT()
        tx_abort() <void tx_abort (PMEMobjpool *pop, struct lane *lane) at libpmemobj/tx.c:447>:
            LOG()
            get_tx() <struct tx *get_tx () at libpmemobj/tx.c:54>:
            tx_abort_set() <void tx_abort_set (PMEMobjpool *pop, struct lane *lane) at libpmemobj/tx.c:391>:
                LOG()
                ulog_foreach_entry() <int ulog_foreach_entry (struct ulog *ulog, ulog_entry_cb cb, void *arg, const struct pmem_ops *ops) at libpmemobj/ulog.c:180>
                tx_undo_entry_apply() <int tx_undo_entry_apply (struct ulog_entry_base *e, void *arg, const struct pmem_ops *p_ops) at libpmemobj/tx.c:362>:
                    SUPPRESS_UNUSED()
                    ulog_entry_type() <ulog_operation_type ulog_entry_type (const struct ulog_entry_base *entry) at libpmemobj/ulog.c:59>:
                        ULOG_OPERATION_FROM_OFFSET()
                    tx_restore_range() <void tx_restore_range (PMEMobjpool *pop, struct tx *tx, struct ulog_entry_buf *range) at libpmemobj/tx.c:307>:
                        COMPILE_ERROR_ON()
                        PMDK_SLIST_INIT()
                        Malloc()
                        FATAL()
                        ulog_entry_offset() <uint64_t ulog_entry_offset (const struct ulog_entry_base *entry) at libpmemobj/ulog.c:68>:
                        OBJ_OFF_TO_PTR()
                        PMDK_SLIST_INSERT_HEAD()
                        PMDK_SLIST_FOREACH()
                        tx_remove_range() <void tx_remove_range (struct txr *tx_ranges, void *begin, void *end) at libpmemobj/tx.c:252>:
                            PMDK_SLIST_FIRST()
                            PMDK_SLIST_NEXT()
                            LOG()
                            Malloc()
                            FATAL()
                            PMDK_SLIST_INSERT_HEAD()
                            PMDK_SLIST_REMOVE()
                            Free() <Free_func Free at core/alloc.c:91>
                        ASSERT()
                        PMDK_SLIST_EMPTY()
                        PMDK_SLIST_FIRST()
                        PMDK_SLIST_REMOVE_HEAD()
                        pmemops_memcpy()
                        Free() <Free_func Free at core/alloc.c:91>
                    get_tx() <struct tx *get_tx () at libpmemobj/tx.c:54>:
                    ASSERT()
                pmemops_drain()
                operation_finish() <void operation_finish (struct operation_context *ctx, unsigned flags) at libpmemobj/memops.c:814>:
                    ASSERTne()
                    out() <void out (const char *fmt, ...) at core/out.c:480>:
                        va_start()
                        out_common() <} void out_common (const char *file, int line, const char *func, int level, const char *suffix, const char *fmt, va_list ap) at core/out.c:334>
                        va_end()
                    ulog_clobber_data() <int ulog_clobber_data (struct ulog *ulog_first, struct ulog_next *next, ulog_free_fn ulog_free, ulog_rm_user_buffer_fn user_buff_remove, const struct pmem_ops *p_ops, unsigned flags) at libpmemobj/ulog.c:713>:
                        ASSERTne()
                        ulog_inc_gen_num() <void ulog_inc_gen_num (struct ulog *ulog, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:605>:
                            VALGRIND_ADD_TO_TX()
                            pmemops_persist()
                            VALGRIND_SET_CLEAN()
                            VALGRIND_REMOVE_FROM_TX()
                        VEC_SIZE()
                        VEC_GET()
                        ulog_by_offset() <struct ulog *ulog_by_offset (size_t offset, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:36>:
                            CACHELINE_ALIGN()
                        ulog_free_next() <int ulog_free_next (struct ulog *u, const struct pmem_ops *p_ops, ulog_free_fn ulog_free, ulog_rm_user_buffer_fn user_buff_remove, uint64_t flags) at libpmemobj/ulog.c:625>:
                            VEC()
                            VEC_INIT()
                            ulog_by_offset() <struct ulog *ulog_by_offset (size_t offset, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:36>:
                                CACHELINE_ALIGN()
                            pmemops_persist()
                            VEC_PUSH_BACK()
                            LOG()
                            out() <void out (const char *fmt, ...) at core/out.c:480>:
                                va_start()
                                out_common() <} void out_common (const char *file, int line, const char *func, int level, const char *suffix, const char *fmt, va_list ap) at core/out.c:334>
                                va_end()
                            VEC_FOREACH_REVERSE()
                            VEC_DELETE()
                    operation_user_buffer_remove() <int operation_user_buffer_remove (void *base, void *addr) at libpmemobj/memops.c:242>:
                        util_mutex_lock()
                        ravl_find() <struct ravl_node *ravl_find (struct ravl *ravl, const void *data, enum ravl_predicate flags) at core/ravl.c:524>:
                            LOG()
                            ravl_data() <void *ravl_data (struct ravl_node *node) at core/ravl.c:571>:
                                memcpy()
                            ravl_predicate_holds() <int ravl_predicate_holds (int result, struct ravl_node **ret, struct ravl_node *n, enum ravl_predicate flags) at core/ravl.c:489>:
                                ravl_node_successor() <struct ravl_node *ravl_node_successor (struct ravl_node *n) at core/ravl.c:465>:
                                    ravl_node_cessor() <struct ravl_node *ravl_node_cessor (struct ravl_node *n, enum ravl_slot_type t) at core/ravl.c:443>:
                                        ravl_node_type_most() <struct ravl_node *ravl_node_type_most (struct ravl_node *n, enum ravl_slot_type t) at core/ravl.c:430>:
                                        ravl_slot_opposite() <enum ravl_slot_type ravl_slot_opposite (enum ravl_slot_type t) at core/ravl.c:184>:
                                            ASSERTne()
                                ravl_node_predecessor() <struct ravl_node *ravl_node_predecessor (struct ravl_node *n) at core/ravl.c:476>:
                                    ravl_node_cessor() <struct ravl_node *ravl_node_cessor (struct ravl_node *n, enum ravl_slot_type t) at core/ravl.c:443>:
                                        ravl_node_type_most() <struct ravl_node *ravl_node_type_most (struct ravl_node *n, enum ravl_slot_type t) at core/ravl.c:430>:
                                        ravl_slot_opposite() <enum ravl_slot_type ravl_slot_opposite (enum ravl_slot_type t) at core/ravl.c:184>:
                                            ASSERTne()
                        ASSERTne()
                        ravl_remove() <void ravl_remove (struct ravl *ravl, struct ravl_node *n) at core/ravl.c:545> (R):
                            LOG()
                            ravl_node_successor() <struct ravl_node *ravl_node_successor (struct ravl_node *n) at core/ravl.c:465>:
                                ravl_node_cessor() <struct ravl_node *ravl_node_cessor (struct ravl_node *n, enum ravl_slot_type t) at core/ravl.c:443>:
                                    ravl_node_type_most() <struct ravl_node *ravl_node_type_most (struct ravl_node *n, enum ravl_slot_type t) at core/ravl.c:430>:
                                    ravl_slot_opposite() <enum ravl_slot_type ravl_slot_opposite (enum ravl_slot_type t) at core/ravl.c:184>:
                                        ASSERTne()
                            memcpy()
                            ravl_remove() <void ravl_remove (struct ravl *ravl, struct ravl_node *n) at core/ravl.c:545> (recursive: see 29531)
                            ravl_node_ref() <struct ravl_node **ravl_node_ref (struct ravl *ravl, struct ravl_node *n) at core/ravl.c:223>:
                                ravl_node_slot_type() <enum ravl_slot_type ravl_node_slot_type (struct ravl_node *n) at core/ravl.c:196>:
                            Free() <Free_func Free at core/alloc.c:91>
                        util_mutex_unlock()
                    ulog_free_next() <int ulog_free_next (struct ulog *u, const struct pmem_ops *p_ops, ulog_free_fn ulog_free, ulog_rm_user_buffer_fn user_buff_remove, uint64_t flags) at libpmemobj/ulog.c:625>:
                        VEC()
                        VEC_INIT()
                        ulog_by_offset() <struct ulog *ulog_by_offset (size_t offset, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:36>:
                            CACHELINE_ALIGN()
                        pmemops_persist()
                        VEC_PUSH_BACK()
                        LOG()
                        out() <void out (const char *fmt, ...) at core/out.c:480>:
                            va_start()
                            out_common() <} void out_common (const char *file, int line, const char *func, int level, const char *suffix, const char *fmt, va_list ap) at core/out.c:334>
                            va_end()
                        VEC_FOREACH_REVERSE()
                        VEC_DELETE()
                    ulog_capacity() <size_t ulog_capacity (struct ulog *ulog, size_t ulog_base_bytes, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:206>:
                        ulog_next() <struct ulog *ulog_next (struct ulog *ulog, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:50>:
                            ulog_by_offset() <struct ulog *ulog_by_offset (size_t offset, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:36>:
                                CACHELINE_ALIGN()
                    VEC_CLEAR()
                    ulog_rebuild_next_vec() <void ulog_rebuild_next_vec (struct ulog *ulog, struct ulog_next *next, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:223>:
                        VEC_PUSH_BACK()
                        ulog_next() <struct ulog *ulog_next (struct ulog *ulog, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:50>:
                            ulog_by_offset() <struct ulog *ulog_by_offset (size_t offset, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:36>:
                                CACHELINE_ALIGN()
            ravl_delete_cb() <void ravl_delete_cb (struct ravl *ravl, ravl_cb cb, void *arg) at core/ravl.c:102>:
                ravl_foreach_node() <void ravl_foreach_node (struct ravl_node *n, ravl_cb cb, void *arg, int free_node) at core/ravl.c:74> (R):
                    ravl_foreach_node() <void ravl_foreach_node (struct ravl_node *n, ravl_cb cb, void *arg, int free_node) at core/ravl.c:74> (recursive: see 29569)
                    Free() <Free_func Free at core/alloc.c:91>
                Free() <Free_func Free at core/alloc.c:91>
            tx_clean_range() <void tx_clean_range (void *data, void *ctx) at libpmemobj/tx.c:421>:
                VALGRIND_REMOVE_FROM_TX()
                OBJ_OFF_TO_PTR()
                VALGRIND_SET_CLEAN()
            palloc_cancel() <void palloc_cancel (struct palloc_heap *heap, struct pobj_action *actv, size_t actvcnt) at libpmemobj/palloc.c:648>:
            VEC_ARR()
            VEC_SIZE()
        lane_release() <void lane_release (PMEMobjpool *pop) at libpmemobj/lane.c:546>:
            get_lane_info_record() <inline struct lane_info *get_lane_info_record (PMEMobjpool *pop) at libpmemobj/lane.c:466>:
                likely()
                unlikely()
                lane_info_ht_boot() <inline void lane_info_ht_boot (void) at libpmemobj/lane.c:74>:
                    lane_info_create() <inline void lane_info_create (void) at libpmemobj/lane.c:39>:
                        critnib_new() <struct critnib *critnib_new (void) at libpmemobj/critnib.c:187>:
                            Zalloc() <void *Zalloc (size_t sz) at core/alloc.c:98>:
                                Malloc()
                                memset()
                            util_mutex_init()
                            VALGRIND_HG_DRD_DISABLE_CHECKING()
                        FATAL()
                    os_tls_set() <int os_tls_set (os_tls_key_t key, const void *value) at core/os_thread_posix.c:53>:
                        pthread_setspecific()
                    FATAL()
                critnib_get() <void *critnib_get (struct critnib *c, uint64_t key) at libpmemobj/critnib.c:515>:
                    load() <void load (void *src, void *dst) at libpmemobj/critnib.c:130>:
                        util_atomic_load_explicit64()
                    is_leaf() <inline bool is_leaf (struct critnib_node *n) at libpmemobj/critnib.c:150>:
                    slice_index() <inline unsigned slice_index (uint64_t key, sh_t shift) at libpmemobj/critnib.c:178>:
                    to_leaf() <inline struct critnib_leaf *to_leaf (struct critnib_node *n) at libpmemobj/critnib.c:159>:
                Malloc()
                FATAL()
                critnib_insert() <int critnib_insert (struct critnib *c, uint64_t key, void *value) at libpmemobj/critnib.c:340>:
                    util_mutex_lock()
                    alloc_leaf() <struct critnib_leaf *alloc_leaf (struct critnib *__restrict c) at libpmemobj/critnib.c:311>:
                        Malloc()
                        ERR()
                        VALGRIND_ANNOTATE_NEW_MEMORY()
                    util_mutex_unlock()
                    VALGRIND_HG_DRD_DISABLE_CHECKING()
                    is_leaf() <inline bool is_leaf (struct critnib_node *n) at libpmemobj/critnib.c:150>:
                    path_mask() <inline uint64_t path_mask (sh_t shift) at libpmemobj/critnib.c:169>:
                    slice_index() <inline unsigned slice_index (uint64_t key, sh_t shift) at libpmemobj/critnib.c:178>:
                    store() <void store (void *dst, void *src) at libpmemobj/critnib.c:140>:
                        util_atomic_store_explicit64()
                    to_leaf() <inline struct critnib_leaf *to_leaf (struct critnib_node *n) at libpmemobj/critnib.c:159>:
                    ASSERT()
                    free_leaf() <void free_leaf (struct critnib *__restrict c, struct critnib_leaf *__restrict k) at libpmemobj/critnib.c:298>
                    util_mssb_index64()
                    alloc_node() <struct critnib_node *alloc_node (struct critnib *__restrict c) at libpmemobj/critnib.c:274>:
                        Malloc()
                        ERR()
                        VALGRIND_ANNOTATE_NEW_MEMORY()
            ASSERTne()
            unlikely()
            FATAL()
            util_bool_compare_and_swap64()
        ERR()
        obj_tx_callback() <void obj_tx_callback (struct tx *tx) at libpmemobj/tx.c:887>:
            PMDK_SLIST_FIRST()
            PMDK_SLIST_NEXT()
        util_is_zeroed() <int util_is_zeroed (const void *addr, size_t len) at core/util.c:113>:
            memcmp()
        longjmp()
    PMEMOBJ_API_END()
pmemobj_tx_add_range() <int pmemobj_tx_add_range (PMEMoid oid, uint64_t hoff, size_t size) at libpmemobj/tx.c:1474>:
    LOG()
    PMEMOBJ_API_START()
    get_tx() <struct tx *get_tx () at libpmemobj/tx.c:54>:
    ASSERT_IN_TX()
    ASSERT_TX_STAGE_WORK()
    tx_abort_on_failure_flag() <uint64_t tx_abort_on_failure_flag (struct tx *tx) at libpmemobj/tx.c:840>:
        PMDK_SLIST_FIRST()
    ERR()
    obj_tx_fail_err() <inline int obj_tx_fail_err (int errnum, uint64_t flags) at libpmemobj/tx.c:137>:
        obj_tx_abort() <void obj_tx_abort (int errnum, int user) at libpmemobj/tx.c:914>:
            LOG()
            get_tx() <struct tx *get_tx () at libpmemobj/tx.c:54>:
            ASSERT_IN_TX()
            ASSERT_TX_STAGE_WORK()
            ASSERT()
            PMDK_SLIST_FIRST()
            PMDK_SLIST_NEXT()
            tx_abort() <void tx_abort (PMEMobjpool *pop, struct lane *lane) at libpmemobj/tx.c:447>:
                LOG()
                get_tx() <struct tx *get_tx () at libpmemobj/tx.c:54>:
                tx_abort_set() <void tx_abort_set (PMEMobjpool *pop, struct lane *lane) at libpmemobj/tx.c:391>:
                    LOG()
                    ulog_foreach_entry() <int ulog_foreach_entry (struct ulog *ulog, ulog_entry_cb cb, void *arg, const struct pmem_ops *ops) at libpmemobj/ulog.c:180>
                    tx_undo_entry_apply() <int tx_undo_entry_apply (struct ulog_entry_base *e, void *arg, const struct pmem_ops *p_ops) at libpmemobj/tx.c:362>:
                        SUPPRESS_UNUSED()
                        ulog_entry_type() <ulog_operation_type ulog_entry_type (const struct ulog_entry_base *entry) at libpmemobj/ulog.c:59>:
                            ULOG_OPERATION_FROM_OFFSET()
                        tx_restore_range() <void tx_restore_range (PMEMobjpool *pop, struct tx *tx, struct ulog_entry_buf *range) at libpmemobj/tx.c:307>:
                            COMPILE_ERROR_ON()
                            PMDK_SLIST_INIT()
                            Malloc()
                            FATAL()
                            ulog_entry_offset() <uint64_t ulog_entry_offset (const struct ulog_entry_base *entry) at libpmemobj/ulog.c:68>:
                            OBJ_OFF_TO_PTR()
                            PMDK_SLIST_INSERT_HEAD()
                            PMDK_SLIST_FOREACH()
                            tx_remove_range() <void tx_remove_range (struct txr *tx_ranges, void *begin, void *end) at libpmemobj/tx.c:252>:
                                PMDK_SLIST_FIRST()
                                PMDK_SLIST_NEXT()
                                LOG()
                                Malloc()
                                FATAL()
                                PMDK_SLIST_INSERT_HEAD()
                                PMDK_SLIST_REMOVE()
                                Free() <Free_func Free at core/alloc.c:91>
                            ASSERT()
                            PMDK_SLIST_EMPTY()
                            PMDK_SLIST_FIRST()
                            PMDK_SLIST_REMOVE_HEAD()
                            pmemops_memcpy()
                            Free() <Free_func Free at core/alloc.c:91>
                        get_tx() <struct tx *get_tx () at libpmemobj/tx.c:54>:
                        ASSERT()
                    pmemops_drain()
                    operation_finish() <void operation_finish (struct operation_context *ctx, unsigned flags) at libpmemobj/memops.c:814>:
                        ASSERTne()
                        out() <void out (const char *fmt, ...) at core/out.c:480>:
                            va_start()
                            out_common() <} void out_common (const char *file, int line, const char *func, int level, const char *suffix, const char *fmt, va_list ap) at core/out.c:334>
                            va_end()
                        ulog_clobber_data() <int ulog_clobber_data (struct ulog *ulog_first, struct ulog_next *next, ulog_free_fn ulog_free, ulog_rm_user_buffer_fn user_buff_remove, const struct pmem_ops *p_ops, unsigned flags) at libpmemobj/ulog.c:713>:
                            ASSERTne()
                            ulog_inc_gen_num() <void ulog_inc_gen_num (struct ulog *ulog, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:605>:
                                VALGRIND_ADD_TO_TX()
                                pmemops_persist()
                                VALGRIND_SET_CLEAN()
                                VALGRIND_REMOVE_FROM_TX()
                            VEC_SIZE()
                            VEC_GET()
                            ulog_by_offset() <struct ulog *ulog_by_offset (size_t offset, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:36>:
                                CACHELINE_ALIGN()
                            ulog_free_next() <int ulog_free_next (struct ulog *u, const struct pmem_ops *p_ops, ulog_free_fn ulog_free, ulog_rm_user_buffer_fn user_buff_remove, uint64_t flags) at libpmemobj/ulog.c:625>:
                                VEC()
                                VEC_INIT()
                                ulog_by_offset() <struct ulog *ulog_by_offset (size_t offset, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:36>:
                                    CACHELINE_ALIGN()
                                pmemops_persist()
                                VEC_PUSH_BACK()
                                LOG()
                                out() <void out (const char *fmt, ...) at core/out.c:480>:
                                    va_start()
                                    out_common() <} void out_common (const char *file, int line, const char *func, int level, const char *suffix, const char *fmt, va_list ap) at core/out.c:334>
                                    va_end()
                                VEC_FOREACH_REVERSE()
                                VEC_DELETE()
                        operation_user_buffer_remove() <int operation_user_buffer_remove (void *base, void *addr) at libpmemobj/memops.c:242>:
                            util_mutex_lock()
                            ravl_find() <struct ravl_node *ravl_find (struct ravl *ravl, const void *data, enum ravl_predicate flags) at core/ravl.c:524>:
                                LOG()
                                ravl_data() <void *ravl_data (struct ravl_node *node) at core/ravl.c:571>:
                                    memcpy()
                                ravl_predicate_holds() <int ravl_predicate_holds (int result, struct ravl_node **ret, struct ravl_node *n, enum ravl_predicate flags) at core/ravl.c:489>:
                                    ravl_node_successor() <struct ravl_node *ravl_node_successor (struct ravl_node *n) at core/ravl.c:465>:
                                        ravl_node_cessor() <struct ravl_node *ravl_node_cessor (struct ravl_node *n, enum ravl_slot_type t) at core/ravl.c:443>:
                                            ravl_node_type_most() <struct ravl_node *ravl_node_type_most (struct ravl_node *n, enum ravl_slot_type t) at core/ravl.c:430>:
                                            ravl_slot_opposite() <enum ravl_slot_type ravl_slot_opposite (enum ravl_slot_type t) at core/ravl.c:184>:
                                                ASSERTne()
                                    ravl_node_predecessor() <struct ravl_node *ravl_node_predecessor (struct ravl_node *n) at core/ravl.c:476>:
                                        ravl_node_cessor() <struct ravl_node *ravl_node_cessor (struct ravl_node *n, enum ravl_slot_type t) at core/ravl.c:443>:
                                            ravl_node_type_most() <struct ravl_node *ravl_node_type_most (struct ravl_node *n, enum ravl_slot_type t) at core/ravl.c:430>:
                                            ravl_slot_opposite() <enum ravl_slot_type ravl_slot_opposite (enum ravl_slot_type t) at core/ravl.c:184>:
                                                ASSERTne()
                            ASSERTne()
                            ravl_remove() <void ravl_remove (struct ravl *ravl, struct ravl_node *n) at core/ravl.c:545> (R):
                                LOG()
                                ravl_node_successor() <struct ravl_node *ravl_node_successor (struct ravl_node *n) at core/ravl.c:465>:
                                    ravl_node_cessor() <struct ravl_node *ravl_node_cessor (struct ravl_node *n, enum ravl_slot_type t) at core/ravl.c:443>:
                                        ravl_node_type_most() <struct ravl_node *ravl_node_type_most (struct ravl_node *n, enum ravl_slot_type t) at core/ravl.c:430>:
                                        ravl_slot_opposite() <enum ravl_slot_type ravl_slot_opposite (enum ravl_slot_type t) at core/ravl.c:184>:
                                            ASSERTne()
                                memcpy()
                                ravl_remove() <void ravl_remove (struct ravl *ravl, struct ravl_node *n) at core/ravl.c:545> (recursive: see 29741)
                                ravl_node_ref() <struct ravl_node **ravl_node_ref (struct ravl *ravl, struct ravl_node *n) at core/ravl.c:223>:
                                    ravl_node_slot_type() <enum ravl_slot_type ravl_node_slot_type (struct ravl_node *n) at core/ravl.c:196>:
                                Free() <Free_func Free at core/alloc.c:91>
                            util_mutex_unlock()
                        ulog_free_next() <int ulog_free_next (struct ulog *u, const struct pmem_ops *p_ops, ulog_free_fn ulog_free, ulog_rm_user_buffer_fn user_buff_remove, uint64_t flags) at libpmemobj/ulog.c:625>:
                            VEC()
                            VEC_INIT()
                            ulog_by_offset() <struct ulog *ulog_by_offset (size_t offset, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:36>:
                                CACHELINE_ALIGN()
                            pmemops_persist()
                            VEC_PUSH_BACK()
                            LOG()
                            out() <void out (const char *fmt, ...) at core/out.c:480>:
                                va_start()
                                out_common() <} void out_common (const char *file, int line, const char *func, int level, const char *suffix, const char *fmt, va_list ap) at core/out.c:334>
                                va_end()
                            VEC_FOREACH_REVERSE()
                            VEC_DELETE()
                        ulog_capacity() <size_t ulog_capacity (struct ulog *ulog, size_t ulog_base_bytes, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:206>:
                            ulog_next() <struct ulog *ulog_next (struct ulog *ulog, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:50>:
                                ulog_by_offset() <struct ulog *ulog_by_offset (size_t offset, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:36>:
                                    CACHELINE_ALIGN()
                        VEC_CLEAR()
                        ulog_rebuild_next_vec() <void ulog_rebuild_next_vec (struct ulog *ulog, struct ulog_next *next, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:223>:
                            VEC_PUSH_BACK()
                            ulog_next() <struct ulog *ulog_next (struct ulog *ulog, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:50>:
                                ulog_by_offset() <struct ulog *ulog_by_offset (size_t offset, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:36>:
                                    CACHELINE_ALIGN()
                ravl_delete_cb() <void ravl_delete_cb (struct ravl *ravl, ravl_cb cb, void *arg) at core/ravl.c:102>:
                    ravl_foreach_node() <void ravl_foreach_node (struct ravl_node *n, ravl_cb cb, void *arg, int free_node) at core/ravl.c:74> (R):
                        ravl_foreach_node() <void ravl_foreach_node (struct ravl_node *n, ravl_cb cb, void *arg, int free_node) at core/ravl.c:74> (recursive: see 29779)
                        Free() <Free_func Free at core/alloc.c:91>
                    Free() <Free_func Free at core/alloc.c:91>
                tx_clean_range() <void tx_clean_range (void *data, void *ctx) at libpmemobj/tx.c:421>:
                    VALGRIND_REMOVE_FROM_TX()
                    OBJ_OFF_TO_PTR()
                    VALGRIND_SET_CLEAN()
                palloc_cancel() <void palloc_cancel (struct palloc_heap *heap, struct pobj_action *actv, size_t actvcnt) at libpmemobj/palloc.c:648>:
                VEC_ARR()
                VEC_SIZE()
            lane_release() <void lane_release (PMEMobjpool *pop) at libpmemobj/lane.c:546>:
                get_lane_info_record() <inline struct lane_info *get_lane_info_record (PMEMobjpool *pop) at libpmemobj/lane.c:466>:
                    likely()
                    unlikely()
                    lane_info_ht_boot() <inline void lane_info_ht_boot (void) at libpmemobj/lane.c:74>:
                        lane_info_create() <inline void lane_info_create (void) at libpmemobj/lane.c:39>:
                            critnib_new() <struct critnib *critnib_new (void) at libpmemobj/critnib.c:187>:
                                Zalloc() <void *Zalloc (size_t sz) at core/alloc.c:98>:
                                    Malloc()
                                    memset()
                                util_mutex_init()
                                VALGRIND_HG_DRD_DISABLE_CHECKING()
                            FATAL()
                        os_tls_set() <int os_tls_set (os_tls_key_t key, const void *value) at core/os_thread_posix.c:53>:
                            pthread_setspecific()
                        FATAL()
                    critnib_get() <void *critnib_get (struct critnib *c, uint64_t key) at libpmemobj/critnib.c:515>:
                        load() <void load (void *src, void *dst) at libpmemobj/critnib.c:130>:
                            util_atomic_load_explicit64()
                        is_leaf() <inline bool is_leaf (struct critnib_node *n) at libpmemobj/critnib.c:150>:
                        slice_index() <inline unsigned slice_index (uint64_t key, sh_t shift) at libpmemobj/critnib.c:178>:
                        to_leaf() <inline struct critnib_leaf *to_leaf (struct critnib_node *n) at libpmemobj/critnib.c:159>:
                    Malloc()
                    FATAL()
                    critnib_insert() <int critnib_insert (struct critnib *c, uint64_t key, void *value) at libpmemobj/critnib.c:340>:
                        util_mutex_lock()
                        alloc_leaf() <struct critnib_leaf *alloc_leaf (struct critnib *__restrict c) at libpmemobj/critnib.c:311>:
                            Malloc()
                            ERR()
                            VALGRIND_ANNOTATE_NEW_MEMORY()
                        util_mutex_unlock()
                        VALGRIND_HG_DRD_DISABLE_CHECKING()
                        is_leaf() <inline bool is_leaf (struct critnib_node *n) at libpmemobj/critnib.c:150>:
                        path_mask() <inline uint64_t path_mask (sh_t shift) at libpmemobj/critnib.c:169>:
                        slice_index() <inline unsigned slice_index (uint64_t key, sh_t shift) at libpmemobj/critnib.c:178>:
                        store() <void store (void *dst, void *src) at libpmemobj/critnib.c:140>:
                            util_atomic_store_explicit64()
                        to_leaf() <inline struct critnib_leaf *to_leaf (struct critnib_node *n) at libpmemobj/critnib.c:159>:
                        ASSERT()
                        free_leaf() <void free_leaf (struct critnib *__restrict c, struct critnib_leaf *__restrict k) at libpmemobj/critnib.c:298>
                        util_mssb_index64()
                        alloc_node() <struct critnib_node *alloc_node (struct critnib *__restrict c) at libpmemobj/critnib.c:274>:
                            Malloc()
                            ERR()
                            VALGRIND_ANNOTATE_NEW_MEMORY()
                ASSERTne()
                unlikely()
                FATAL()
                util_bool_compare_and_swap64()
            ERR()
            obj_tx_callback() <void obj_tx_callback (struct tx *tx) at libpmemobj/tx.c:887>:
                PMDK_SLIST_FIRST()
                PMDK_SLIST_NEXT()
            util_is_zeroed() <int util_is_zeroed (const void *addr, size_t len) at core/util.c:113>:
                memcmp()
            longjmp()
    PMEMOBJ_API_END()
    ASSERT()
    OBJ_OID_IS_VALID()
    pmemobj_tx_add_common() <int pmemobj_tx_add_common (struct tx *tx, struct tx_range_def *args) at libpmemobj/tx.c:1227>:
        LOG()
        ERR()
        obj_tx_fail_err() <inline int obj_tx_fail_err (int errnum, uint64_t flags) at libpmemobj/tx.c:137>:
            obj_tx_abort() <void obj_tx_abort (int errnum, int user) at libpmemobj/tx.c:914>:
                LOG()
                get_tx() <struct tx *get_tx () at libpmemobj/tx.c:54>:
                ASSERT_IN_TX()
                ASSERT_TX_STAGE_WORK()
                ASSERT()
                PMDK_SLIST_FIRST()
                PMDK_SLIST_NEXT()
                tx_abort() <void tx_abort (PMEMobjpool *pop, struct lane *lane) at libpmemobj/tx.c:447>:
                    LOG()
                    get_tx() <struct tx *get_tx () at libpmemobj/tx.c:54>:
                    tx_abort_set() <void tx_abort_set (PMEMobjpool *pop, struct lane *lane) at libpmemobj/tx.c:391>:
                        LOG()
                        ulog_foreach_entry() <int ulog_foreach_entry (struct ulog *ulog, ulog_entry_cb cb, void *arg, const struct pmem_ops *ops) at libpmemobj/ulog.c:180>
                        tx_undo_entry_apply() <int tx_undo_entry_apply (struct ulog_entry_base *e, void *arg, const struct pmem_ops *p_ops) at libpmemobj/tx.c:362>:
                            SUPPRESS_UNUSED()
                            ulog_entry_type() <ulog_operation_type ulog_entry_type (const struct ulog_entry_base *entry) at libpmemobj/ulog.c:59>:
                                ULOG_OPERATION_FROM_OFFSET()
                            tx_restore_range() <void tx_restore_range (PMEMobjpool *pop, struct tx *tx, struct ulog_entry_buf *range) at libpmemobj/tx.c:307>:
                                COMPILE_ERROR_ON()
                                PMDK_SLIST_INIT()
                                Malloc()
                                FATAL()
                                ulog_entry_offset() <uint64_t ulog_entry_offset (const struct ulog_entry_base *entry) at libpmemobj/ulog.c:68>:
                                OBJ_OFF_TO_PTR()
                                PMDK_SLIST_INSERT_HEAD()
                                PMDK_SLIST_FOREACH()
                                tx_remove_range() <void tx_remove_range (struct txr *tx_ranges, void *begin, void *end) at libpmemobj/tx.c:252>:
                                    PMDK_SLIST_FIRST()
                                    PMDK_SLIST_NEXT()
                                    LOG()
                                    Malloc()
                                    FATAL()
                                    PMDK_SLIST_INSERT_HEAD()
                                    PMDK_SLIST_REMOVE()
                                    Free() <Free_func Free at core/alloc.c:91>
                                ASSERT()
                                PMDK_SLIST_EMPTY()
                                PMDK_SLIST_FIRST()
                                PMDK_SLIST_REMOVE_HEAD()
                                pmemops_memcpy()
                                Free() <Free_func Free at core/alloc.c:91>
                            get_tx() <struct tx *get_tx () at libpmemobj/tx.c:54>:
                            ASSERT()
                        pmemops_drain()
                        operation_finish() <void operation_finish (struct operation_context *ctx, unsigned flags) at libpmemobj/memops.c:814>:
                            ASSERTne()
                            out() <void out (const char *fmt, ...) at core/out.c:480>:
                                va_start()
                                out_common() <} void out_common (const char *file, int line, const char *func, int level, const char *suffix, const char *fmt, va_list ap) at core/out.c:334>
                                va_end()
                            ulog_clobber_data() <int ulog_clobber_data (struct ulog *ulog_first, struct ulog_next *next, ulog_free_fn ulog_free, ulog_rm_user_buffer_fn user_buff_remove, const struct pmem_ops *p_ops, unsigned flags) at libpmemobj/ulog.c:713>:
                                ASSERTne()
                                ulog_inc_gen_num() <void ulog_inc_gen_num (struct ulog *ulog, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:605>:
                                    VALGRIND_ADD_TO_TX()
                                    pmemops_persist()
                                    VALGRIND_SET_CLEAN()
                                    VALGRIND_REMOVE_FROM_TX()
                                VEC_SIZE()
                                VEC_GET()
                                ulog_by_offset() <struct ulog *ulog_by_offset (size_t offset, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:36>:
                                    CACHELINE_ALIGN()
                                ulog_free_next() <int ulog_free_next (struct ulog *u, const struct pmem_ops *p_ops, ulog_free_fn ulog_free, ulog_rm_user_buffer_fn user_buff_remove, uint64_t flags) at libpmemobj/ulog.c:625>:
                                    VEC()
                                    VEC_INIT()
                                    ulog_by_offset() <struct ulog *ulog_by_offset (size_t offset, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:36>:
                                        CACHELINE_ALIGN()
                                    pmemops_persist()
                                    VEC_PUSH_BACK()
                                    LOG()
                                    out() <void out (const char *fmt, ...) at core/out.c:480>:
                                        va_start()
                                        out_common() <} void out_common (const char *file, int line, const char *func, int level, const char *suffix, const char *fmt, va_list ap) at core/out.c:334>
                                        va_end()
                                    VEC_FOREACH_REVERSE()
                                    VEC_DELETE()
                            operation_user_buffer_remove() <int operation_user_buffer_remove (void *base, void *addr) at libpmemobj/memops.c:242>:
                                util_mutex_lock()
                                ravl_find() <struct ravl_node *ravl_find (struct ravl *ravl, const void *data, enum ravl_predicate flags) at core/ravl.c:524>:
                                    LOG()
                                    ravl_data() <void *ravl_data (struct ravl_node *node) at core/ravl.c:571>:
                                        memcpy()
                                    ravl_predicate_holds() <int ravl_predicate_holds (int result, struct ravl_node **ret, struct ravl_node *n, enum ravl_predicate flags) at core/ravl.c:489>:
                                        ravl_node_successor() <struct ravl_node *ravl_node_successor (struct ravl_node *n) at core/ravl.c:465>:
                                            ravl_node_cessor() <struct ravl_node *ravl_node_cessor (struct ravl_node *n, enum ravl_slot_type t) at core/ravl.c:443>:
                                                ravl_node_type_most() <struct ravl_node *ravl_node_type_most (struct ravl_node *n, enum ravl_slot_type t) at core/ravl.c:430>:
                                                ravl_slot_opposite() <enum ravl_slot_type ravl_slot_opposite (enum ravl_slot_type t) at core/ravl.c:184>:
                                                    ASSERTne()
                                        ravl_node_predecessor() <struct ravl_node *ravl_node_predecessor (struct ravl_node *n) at core/ravl.c:476>:
                                            ravl_node_cessor() <struct ravl_node *ravl_node_cessor (struct ravl_node *n, enum ravl_slot_type t) at core/ravl.c:443>:
                                                ravl_node_type_most() <struct ravl_node *ravl_node_type_most (struct ravl_node *n, enum ravl_slot_type t) at core/ravl.c:430>:
                                                ravl_slot_opposite() <enum ravl_slot_type ravl_slot_opposite (enum ravl_slot_type t) at core/ravl.c:184>:
                                                    ASSERTne()
                                ASSERTne()
                                ravl_remove() <void ravl_remove (struct ravl *ravl, struct ravl_node *n) at core/ravl.c:545> (R):
                                    LOG()
                                    ravl_node_successor() <struct ravl_node *ravl_node_successor (struct ravl_node *n) at core/ravl.c:465>:
                                        ravl_node_cessor() <struct ravl_node *ravl_node_cessor (struct ravl_node *n, enum ravl_slot_type t) at core/ravl.c:443>:
                                            ravl_node_type_most() <struct ravl_node *ravl_node_type_most (struct ravl_node *n, enum ravl_slot_type t) at core/ravl.c:430>:
                                            ravl_slot_opposite() <enum ravl_slot_type ravl_slot_opposite (enum ravl_slot_type t) at core/ravl.c:184>:
                                                ASSERTne()
                                    memcpy()
                                    ravl_remove() <void ravl_remove (struct ravl *ravl, struct ravl_node *n) at core/ravl.c:545> (recursive: see 29947)
                                    ravl_node_ref() <struct ravl_node **ravl_node_ref (struct ravl *ravl, struct ravl_node *n) at core/ravl.c:223>:
                                        ravl_node_slot_type() <enum ravl_slot_type ravl_node_slot_type (struct ravl_node *n) at core/ravl.c:196>:
                                    Free() <Free_func Free at core/alloc.c:91>
                                util_mutex_unlock()
                            ulog_free_next() <int ulog_free_next (struct ulog *u, const struct pmem_ops *p_ops, ulog_free_fn ulog_free, ulog_rm_user_buffer_fn user_buff_remove, uint64_t flags) at libpmemobj/ulog.c:625>:
                                VEC()
                                VEC_INIT()
                                ulog_by_offset() <struct ulog *ulog_by_offset (size_t offset, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:36>:
                                    CACHELINE_ALIGN()
                                pmemops_persist()
                                VEC_PUSH_BACK()
                                LOG()
                                out() <void out (const char *fmt, ...) at core/out.c:480>:
                                    va_start()
                                    out_common() <} void out_common (const char *file, int line, const char *func, int level, const char *suffix, const char *fmt, va_list ap) at core/out.c:334>
                                    va_end()
                                VEC_FOREACH_REVERSE()
                                VEC_DELETE()
                            ulog_capacity() <size_t ulog_capacity (struct ulog *ulog, size_t ulog_base_bytes, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:206>:
                                ulog_next() <struct ulog *ulog_next (struct ulog *ulog, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:50>:
                                    ulog_by_offset() <struct ulog *ulog_by_offset (size_t offset, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:36>:
                                        CACHELINE_ALIGN()
                            VEC_CLEAR()
                            ulog_rebuild_next_vec() <void ulog_rebuild_next_vec (struct ulog *ulog, struct ulog_next *next, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:223>:
                                VEC_PUSH_BACK()
                                ulog_next() <struct ulog *ulog_next (struct ulog *ulog, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:50>:
                                    ulog_by_offset() <struct ulog *ulog_by_offset (size_t offset, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:36>:
                                        CACHELINE_ALIGN()
                    ravl_delete_cb() <void ravl_delete_cb (struct ravl *ravl, ravl_cb cb, void *arg) at core/ravl.c:102>:
                        ravl_foreach_node() <void ravl_foreach_node (struct ravl_node *n, ravl_cb cb, void *arg, int free_node) at core/ravl.c:74> (R):
                            ravl_foreach_node() <void ravl_foreach_node (struct ravl_node *n, ravl_cb cb, void *arg, int free_node) at core/ravl.c:74> (recursive: see 29985)
                            Free() <Free_func Free at core/alloc.c:91>
                        Free() <Free_func Free at core/alloc.c:91>
                    tx_clean_range() <void tx_clean_range (void *data, void *ctx) at libpmemobj/tx.c:421>:
                        VALGRIND_REMOVE_FROM_TX()
                        OBJ_OFF_TO_PTR()
                        VALGRIND_SET_CLEAN()
                    palloc_cancel() <void palloc_cancel (struct palloc_heap *heap, struct pobj_action *actv, size_t actvcnt) at libpmemobj/palloc.c:648>:
                    VEC_ARR()
                    VEC_SIZE()
                lane_release() <void lane_release (PMEMobjpool *pop) at libpmemobj/lane.c:546>:
                    get_lane_info_record() <inline struct lane_info *get_lane_info_record (PMEMobjpool *pop) at libpmemobj/lane.c:466>:
                        likely()
                        unlikely()
                        lane_info_ht_boot() <inline void lane_info_ht_boot (void) at libpmemobj/lane.c:74>:
                            lane_info_create() <inline void lane_info_create (void) at libpmemobj/lane.c:39>:
                                critnib_new() <struct critnib *critnib_new (void) at libpmemobj/critnib.c:187>:
                                    Zalloc() <void *Zalloc (size_t sz) at core/alloc.c:98>:
                                        Malloc()
                                        memset()
                                    util_mutex_init()
                                    VALGRIND_HG_DRD_DISABLE_CHECKING()
                                FATAL()
                            os_tls_set() <int os_tls_set (os_tls_key_t key, const void *value) at core/os_thread_posix.c:53>:
                                pthread_setspecific()
                            FATAL()
                        critnib_get() <void *critnib_get (struct critnib *c, uint64_t key) at libpmemobj/critnib.c:515>:
                            load() <void load (void *src, void *dst) at libpmemobj/critnib.c:130>:
                                util_atomic_load_explicit64()
                            is_leaf() <inline bool is_leaf (struct critnib_node *n) at libpmemobj/critnib.c:150>:
                            slice_index() <inline unsigned slice_index (uint64_t key, sh_t shift) at libpmemobj/critnib.c:178>:
                            to_leaf() <inline struct critnib_leaf *to_leaf (struct critnib_node *n) at libpmemobj/critnib.c:159>:
                        Malloc()
                        FATAL()
                        critnib_insert() <int critnib_insert (struct critnib *c, uint64_t key, void *value) at libpmemobj/critnib.c:340>:
                            util_mutex_lock()
                            alloc_leaf() <struct critnib_leaf *alloc_leaf (struct critnib *__restrict c) at libpmemobj/critnib.c:311>:
                                Malloc()
                                ERR()
                                VALGRIND_ANNOTATE_NEW_MEMORY()
                            util_mutex_unlock()
                            VALGRIND_HG_DRD_DISABLE_CHECKING()
                            is_leaf() <inline bool is_leaf (struct critnib_node *n) at libpmemobj/critnib.c:150>:
                            path_mask() <inline uint64_t path_mask (sh_t shift) at libpmemobj/critnib.c:169>:
                            slice_index() <inline unsigned slice_index (uint64_t key, sh_t shift) at libpmemobj/critnib.c:178>:
                            store() <void store (void *dst, void *src) at libpmemobj/critnib.c:140>:
                                util_atomic_store_explicit64()
                            to_leaf() <inline struct critnib_leaf *to_leaf (struct critnib_node *n) at libpmemobj/critnib.c:159>:
                            ASSERT()
                            free_leaf() <void free_leaf (struct critnib *__restrict c, struct critnib_leaf *__restrict k) at libpmemobj/critnib.c:298>
                            util_mssb_index64()
                            alloc_node() <struct critnib_node *alloc_node (struct critnib *__restrict c) at libpmemobj/critnib.c:274>:
                                Malloc()
                                ERR()
                                VALGRIND_ANNOTATE_NEW_MEMORY()
                    ASSERTne()
                    unlikely()
                    FATAL()
                    util_bool_compare_and_swap64()
                ERR()
                obj_tx_callback() <void obj_tx_callback (struct tx *tx) at libpmemobj/tx.c:887>:
                    PMDK_SLIST_FIRST()
                    PMDK_SLIST_NEXT()
                util_is_zeroed() <int util_is_zeroed (const void *addr, size_t len) at core/util.c:113>:
                    memcmp()
                longjmp()
        ravl_find() <struct ravl_node *ravl_find (struct ravl *ravl, const void *data, enum ravl_predicate flags) at core/ravl.c:524>:
            LOG()
            ravl_data() <void *ravl_data (struct ravl_node *node) at core/ravl.c:571>:
                memcpy()
            ravl_predicate_holds() <int ravl_predicate_holds (int result, struct ravl_node **ret, struct ravl_node *n, enum ravl_predicate flags) at core/ravl.c:489>:
                ravl_node_successor() <struct ravl_node *ravl_node_successor (struct ravl_node *n) at core/ravl.c:465>:
                    ravl_node_cessor() <struct ravl_node *ravl_node_cessor (struct ravl_node *n, enum ravl_slot_type t) at core/ravl.c:443>:
                        ravl_node_type_most() <struct ravl_node *ravl_node_type_most (struct ravl_node *n, enum ravl_slot_type t) at core/ravl.c:430>:
                        ravl_slot_opposite() <enum ravl_slot_type ravl_slot_opposite (enum ravl_slot_type t) at core/ravl.c:184>:
                            ASSERTne()
                ravl_node_predecessor() <struct ravl_node *ravl_node_predecessor (struct ravl_node *n) at core/ravl.c:476>:
                    ravl_node_cessor() <struct ravl_node *ravl_node_cessor (struct ravl_node *n, enum ravl_slot_type t) at core/ravl.c:443>:
                        ravl_node_type_most() <struct ravl_node *ravl_node_type_most (struct ravl_node *n, enum ravl_slot_type t) at core/ravl.c:430>:
                        ravl_slot_opposite() <enum ravl_slot_type ravl_slot_opposite (enum ravl_slot_type t) at core/ravl.c:184>:
                            ASSERTne()
        ravl_data() <void *ravl_data (struct ravl_node *node) at core/ravl.c:571>:
            memcpy()
        ASSERTeq()
        tx_lane_ranges_insert_def() <int tx_lane_ranges_insert_def (PMEMobjpool *pop, struct tx *tx, const struct tx_range_def *rdef) at libpmemobj/tx.c:562>:
            SUPPRESS_UNUSED()
            LOG()
            ravl_emplace_copy() <int ravl_emplace_copy (struct ravl *ravl, const void *data) at core/ravl.c:384>:
                ravl_emplace() <int ravl_emplace (struct ravl *ravl, ravl_constr constr, const void *arg) at core/ravl.c:393>:
                    LOG()
                    ravl_new_node() <struct ravl_node *ravl_new_node (struct ravl *ravl, ravl_constr constr, const void *arg) at core/ravl.c:161>:
                        Malloc()
                        ERR()
                        ravl_node_insert_constructor() <void ravl_node_insert_constructor (void *data, size_t data_size, const void *arg) at core/ravl.c:139>:
                            SUPPRESS_UNUSED()
                            memcpy()
                    ravl_data() <void *ravl_data (struct ravl_node *node) at core/ravl.c:571>:
                        memcpy()
                    ravl_balance() <void ravl_balance (struct ravl *ravl, struct ravl_node *n) at core/ravl.c:337>:
                        ravl_node_is() <int ravl_node_is (struct ravl_node *n, int i, int j) at core/ravl.c:306>:
                            ravl_node_is_i_j() <int ravl_node_is_i_j (struct ravl_node *n, int i, int j) at core/ravl.c:296>:
                                ravl_node_rank_difference_parent() <int ravl_node_rank_difference_parent (struct ravl_node *p, struct ravl_node *n) at core/ravl.c:275>:
                                    ravl_node_rank() <int ravl_node_rank (struct ravl_node *n) at core/ravl.c:261>:
                        ravl_node_promote() <void ravl_node_promote (struct ravl_node *n) at core/ravl.c:315>
                        ravl_node_sibling() <struct ravl_node *ravl_node_sibling (struct ravl_node *n) at core/ravl.c:209>:
                            ravl_node_slot_type() <enum ravl_slot_type ravl_node_slot_type (struct ravl_node *n) at core/ravl.c:196>:
                        ravl_node_rank_difference() <int ravl_node_rank_difference (struct ravl_node *n) at core/ravl.c:287>:
                            ravl_node_rank_difference_parent() <int ravl_node_rank_difference_parent (struct ravl_node *p, struct ravl_node *n) at core/ravl.c:275>:
                                ravl_node_rank() <int ravl_node_rank (struct ravl_node *n) at core/ravl.c:261>:
                        ravl_node_rank_difference_parent() <int ravl_node_rank_difference_parent (struct ravl_node *p, struct ravl_node *n) at core/ravl.c:275>:
                            ravl_node_rank() <int ravl_node_rank (struct ravl_node *n) at core/ravl.c:261>:
                        ravl_slot_opposite() <enum ravl_slot_type ravl_slot_opposite (enum ravl_slot_type t) at core/ravl.c:184>:
                            ASSERTne()
                        ravl_node_slot_type() <enum ravl_slot_type ravl_node_slot_type (struct ravl_node *n) at core/ravl.c:196>:
                        ravl_rotate() <void ravl_rotate (struct ravl *ravl, struct ravl_node *n) at core/ravl.c:237>:
                            ASSERTne()
                            ravl_node_ref() <struct ravl_node **ravl_node_ref (struct ravl *ravl, struct ravl_node *n) at core/ravl.c:223>:
                                ravl_node_slot_type() <enum ravl_slot_type ravl_node_slot_type (struct ravl_node *n) at core/ravl.c:196>:
                            ravl_node_slot_type() <enum ravl_slot_type ravl_node_slot_type (struct ravl_node *n) at core/ravl.c:196>:
                            ravl_slot_opposite() <enum ravl_slot_type ravl_slot_opposite (enum ravl_slot_type t) at core/ravl.c:184>:
                                ASSERTne()
                        ravl_node_demote() <void ravl_node_demote (struct ravl_node *n) at core/ravl.c:324>:
                            ASSERT()
                    Free() <Free_func Free at core/alloc.c:91>
                ravl_node_copy_constructor() <void ravl_node_copy_constructor (void *data, size_t data_size, const void *arg) at core/ravl.c:152>:
                    memcpy()
            FATAL()
        pmemobj_tx_add_snapshot() <int pmemobj_tx_add_snapshot (struct tx *tx, struct tx_range_def *snapshot) at libpmemobj/tx.c:1167>:
            OBJ_OFF_TO_PTR()
            VALGRIND_ADD_TO_TX()
            vg_verify_initialized() <void vg_verify_initialized (PMEMobjpool *pop, const struct tx_range_def *def) at libpmemobj/tx.c:1135>:
                SUPPRESS_UNUSED()
                VALGRIND_CHECK_MEM_IS_DEFINED()
                VALGRIND_PRINTF()
            tx_action_add() <struct pobj_action *tx_action_add (struct tx *tx) at libpmemobj/tx.c:192>:
                tx_action_reserve() <int tx_action_reserve (struct tx *tx, size_t n) at libpmemobj/tx.c:174>:
                    VEC_SIZE()
                    MIN()
                    operation_reserve() <int operation_reserve (struct operation_context *ctx, size_t new_capacity) at libpmemobj/memops.c:684>:
                        ERR()
                        ulog_reserve() <int ulog_reserve (struct ulog *ulog, size_t ulog_base_nbytes, size_t gen_num, int auto_reserve, size_t *new_capacity, ulog_extend_fn extend, struct ulog_next *next, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:236>:
                            LOG()
                            VEC_FOREACH()
                            ulog_by_offset() <struct ulog *ulog_by_offset (size_t offset, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:36>:
                                CACHELINE_ALIGN()
                            ASSERTne()
                            VEC_PUSH_BACK()
                            ulog_next() <struct ulog *ulog_next (struct ulog *ulog, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:50>:
                                ulog_by_offset() <struct ulog *ulog_by_offset (size_t offset, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:36>:
                                    CACHELINE_ALIGN()
                VEC_INC_BACK()
                VEC_BACK()
            palloc_set_value() <void palloc_set_value (struct palloc_heap *heap, struct pobj_action *act, uint64_t *ptr, uint64_t value) at libpmemobj/palloc.c:86>:
                SUPPRESS_UNUSED()
            operation_add_buffer() <int operation_add_buffer (struct operation_context *ctx, void *dest, void *src, size_t size, ulog_operation_type type) at libpmemobj/memops.c:428> (R):
                operation_reserve() <int operation_reserve (struct operation_context *ctx, size_t new_capacity) at libpmemobj/memops.c:684>:
                    ERR()
                    ulog_reserve() <int ulog_reserve (struct ulog *ulog, size_t ulog_base_nbytes, size_t gen_num, int auto_reserve, size_t *new_capacity, ulog_extend_fn extend, struct ulog_next *next, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:236>:
                        LOG()
                        VEC_FOREACH()
                        ulog_by_offset() <struct ulog *ulog_by_offset (size_t offset, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:36>:
                            CACHELINE_ALIGN()
                        ASSERTne()
                        VEC_PUSH_BACK()
                        ulog_next() <struct ulog *ulog_next (struct ulog *ulog, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:50>:
                            ulog_by_offset() <struct ulog *ulog_by_offset (size_t offset, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:36>:
                                CACHELINE_ALIGN()
                ulog_next() <struct ulog *ulog_next (struct ulog *ulog, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:50>:
                    ulog_by_offset() <struct ulog *ulog_by_offset (size_t offset, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:36>:
                        CACHELINE_ALIGN()
                ASSERTne()
                MIN()
                ALIGN_UP()
                ulog_clobber_entry() <void ulog_clobber_entry (const struct ulog_entry_base *e, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:405>:
                    CACHELINE_ALIGN()
                    VALGRIND_ADD_TO_TX()
                    pmemops_memset()
                    VALGRIND_REMOVE_FROM_TX()
                ulog_entry_buf_create() <struct ulog_entry_buf *ulog_entry_buf_create (struct ulog *ulog, size_t offset, uint64_t gen_num, uint64_t *dest, const void *src, uint64_t size, ulog_operation_type type, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:421>:
                    alloca()
                    ULOG_OPERATION()
                    MIN()
                    memcpy()
                    memset()
                    ALIGN_DOWN()
                    ASSERT()
                    IS_CACHELINE_ALIGNED()
                    VALGRIND_ADD_TO_TX()
                    pmemops_memcpy()
                    VALGRIND_REMOVE_FROM_TX()
                    util_checksum_seq() <uint64_t util_checksum_seq (const void *addr, size_t len, uint64_t csum) at core/util.c:197>:
                        abort()
                        le32toh()
                    pmemops_drain()
                    VALGRIND_MAKE_MEM_DEFINED()
                    ulog_entry_valid() <int ulog_entry_valid (struct ulog *ulog, const struct ulog_entry_base *entry) at libpmemobj/ulog.c:103>:
                        ulog_entry_type() <ulog_operation_type ulog_entry_type (const struct ulog_entry_base *entry) at libpmemobj/ulog.c:59>:
                            ULOG_OPERATION_FROM_OFFSET()
                        ulog_entry_size() <size_t ulog_entry_size (const struct ulog_entry_base *entry) at libpmemobj/ulog.c:77>:
                            ulog_entry_type() <ulog_operation_type ulog_entry_type (const struct ulog_entry_base *entry) at libpmemobj/ulog.c:59>:
                                ULOG_OPERATION_FROM_OFFSET()
                            CACHELINE_ALIGN()
                            ASSERT()
                        util_checksum_compute() <uint64_t util_checksum_compute (void *addr, size_t len, uint64_t *csump, size_t skip_off) at core/util.c:134>:
                            abort()
                            le32toh()
                        util_checksum_seq() <uint64_t util_checksum_seq (const void *addr, size_t len, uint64_t csum) at core/util.c:197>:
                            abort()
                            le32toh()
                ASSERT()
                ulog_entry_size() <size_t ulog_entry_size (const struct ulog_entry_base *entry) at libpmemobj/ulog.c:77>:
                    ulog_entry_type() <ulog_operation_type ulog_entry_type (const struct ulog_entry_base *entry) at libpmemobj/ulog.c:59>:
                        ULOG_OPERATION_FROM_OFFSET()
                    CACHELINE_ALIGN()
                    ASSERT()
                operation_add_buffer() <int operation_add_buffer (struct operation_context *ctx, void *dest, void *src, size_t size, ulog_operation_type type) at libpmemobj/memops.c:428> (recursive: see 30140)
        MAX()
        pmemobj_tx_merge_flags() <void pmemobj_tx_merge_flags (struct tx_range_def *dest, struct tx_range_def *merged) at libpmemobj/tx.c:1210>:
        ravl_remove() <void ravl_remove (struct ravl *ravl, struct ravl_node *n) at core/ravl.c:545> (R):
            LOG()
            ravl_node_successor() <struct ravl_node *ravl_node_successor (struct ravl_node *n) at core/ravl.c:465>:
                ravl_node_cessor() <struct ravl_node *ravl_node_cessor (struct ravl_node *n, enum ravl_slot_type t) at core/ravl.c:443>:
                    ravl_node_type_most() <struct ravl_node *ravl_node_type_most (struct ravl_node *n, enum ravl_slot_type t) at core/ravl.c:430>:
                    ravl_slot_opposite() <enum ravl_slot_type ravl_slot_opposite (enum ravl_slot_type t) at core/ravl.c:184>:
                        ASSERTne()
            memcpy()
            ravl_remove() <void ravl_remove (struct ravl *ravl, struct ravl_node *n) at core/ravl.c:545> (recursive: see 30204)
            ravl_node_ref() <struct ravl_node **ravl_node_ref (struct ravl *ravl, struct ravl_node *n) at core/ravl.c:223>:
                ravl_node_slot_type() <enum ravl_slot_type ravl_node_slot_type (struct ravl_node *n) at core/ravl.c:196>:
            Free() <Free_func Free at core/alloc.c:91>
        ASSERT()
pmemobj_tx_add_range_direct() <int pmemobj_tx_add_range_direct (const void *ptr, size_t size) at libpmemobj/tx.c:1391>:
    LOG()
    PMEMOBJ_API_START()
    get_tx() <struct tx *get_tx () at libpmemobj/tx.c:54>:
    ASSERT_IN_TX()
    ASSERT_TX_STAGE_WORK()
    tx_abort_on_failure_flag() <uint64_t tx_abort_on_failure_flag (struct tx *tx) at libpmemobj/tx.c:840>:
        PMDK_SLIST_FIRST()
    OBJ_PTR_FROM_POOL()
    ERR()
    obj_tx_fail_err() <inline int obj_tx_fail_err (int errnum, uint64_t flags) at libpmemobj/tx.c:137>:
        obj_tx_abort() <void obj_tx_abort (int errnum, int user) at libpmemobj/tx.c:914>:
            LOG()
            get_tx() <struct tx *get_tx () at libpmemobj/tx.c:54>:
            ASSERT_IN_TX()
            ASSERT_TX_STAGE_WORK()
            ASSERT()
            PMDK_SLIST_FIRST()
            PMDK_SLIST_NEXT()
            tx_abort() <void tx_abort (PMEMobjpool *pop, struct lane *lane) at libpmemobj/tx.c:447>:
                LOG()
                get_tx() <struct tx *get_tx () at libpmemobj/tx.c:54>:
                tx_abort_set() <void tx_abort_set (PMEMobjpool *pop, struct lane *lane) at libpmemobj/tx.c:391>:
                    LOG()
                    ulog_foreach_entry() <int ulog_foreach_entry (struct ulog *ulog, ulog_entry_cb cb, void *arg, const struct pmem_ops *ops) at libpmemobj/ulog.c:180>
                    tx_undo_entry_apply() <int tx_undo_entry_apply (struct ulog_entry_base *e, void *arg, const struct pmem_ops *p_ops) at libpmemobj/tx.c:362>:
                        SUPPRESS_UNUSED()
                        ulog_entry_type() <ulog_operation_type ulog_entry_type (const struct ulog_entry_base *entry) at libpmemobj/ulog.c:59>:
                            ULOG_OPERATION_FROM_OFFSET()
                        tx_restore_range() <void tx_restore_range (PMEMobjpool *pop, struct tx *tx, struct ulog_entry_buf *range) at libpmemobj/tx.c:307>:
                            COMPILE_ERROR_ON()
                            PMDK_SLIST_INIT()
                            Malloc()
                            FATAL()
                            ulog_entry_offset() <uint64_t ulog_entry_offset (const struct ulog_entry_base *entry) at libpmemobj/ulog.c:68>:
                            OBJ_OFF_TO_PTR()
                            PMDK_SLIST_INSERT_HEAD()
                            PMDK_SLIST_FOREACH()
                            tx_remove_range() <void tx_remove_range (struct txr *tx_ranges, void *begin, void *end) at libpmemobj/tx.c:252>:
                                PMDK_SLIST_FIRST()
                                PMDK_SLIST_NEXT()
                                LOG()
                                Malloc()
                                FATAL()
                                PMDK_SLIST_INSERT_HEAD()
                                PMDK_SLIST_REMOVE()
                                Free() <Free_func Free at core/alloc.c:91>
                            ASSERT()
                            PMDK_SLIST_EMPTY()
                            PMDK_SLIST_FIRST()
                            PMDK_SLIST_REMOVE_HEAD()
                            pmemops_memcpy()
                            Free() <Free_func Free at core/alloc.c:91>
                        get_tx() <struct tx *get_tx () at libpmemobj/tx.c:54>:
                        ASSERT()
                    pmemops_drain()
                    operation_finish() <void operation_finish (struct operation_context *ctx, unsigned flags) at libpmemobj/memops.c:814>:
                        ASSERTne()
                        out() <void out (const char *fmt, ...) at core/out.c:480>:
                            va_start()
                            out_common() <} void out_common (const char *file, int line, const char *func, int level, const char *suffix, const char *fmt, va_list ap) at core/out.c:334>
                            va_end()
                        ulog_clobber_data() <int ulog_clobber_data (struct ulog *ulog_first, struct ulog_next *next, ulog_free_fn ulog_free, ulog_rm_user_buffer_fn user_buff_remove, const struct pmem_ops *p_ops, unsigned flags) at libpmemobj/ulog.c:713>:
                            ASSERTne()
                            ulog_inc_gen_num() <void ulog_inc_gen_num (struct ulog *ulog, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:605>:
                                VALGRIND_ADD_TO_TX()
                                pmemops_persist()
                                VALGRIND_SET_CLEAN()
                                VALGRIND_REMOVE_FROM_TX()
                            VEC_SIZE()
                            VEC_GET()
                            ulog_by_offset() <struct ulog *ulog_by_offset (size_t offset, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:36>:
                                CACHELINE_ALIGN()
                            ulog_free_next() <int ulog_free_next (struct ulog *u, const struct pmem_ops *p_ops, ulog_free_fn ulog_free, ulog_rm_user_buffer_fn user_buff_remove, uint64_t flags) at libpmemobj/ulog.c:625>:
                                VEC()
                                VEC_INIT()
                                ulog_by_offset() <struct ulog *ulog_by_offset (size_t offset, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:36>:
                                    CACHELINE_ALIGN()
                                pmemops_persist()
                                VEC_PUSH_BACK()
                                LOG()
                                out() <void out (const char *fmt, ...) at core/out.c:480>:
                                    va_start()
                                    out_common() <} void out_common (const char *file, int line, const char *func, int level, const char *suffix, const char *fmt, va_list ap) at core/out.c:334>
                                    va_end()
                                VEC_FOREACH_REVERSE()
                                VEC_DELETE()
                        operation_user_buffer_remove() <int operation_user_buffer_remove (void *base, void *addr) at libpmemobj/memops.c:242>:
                            util_mutex_lock()
                            ravl_find() <struct ravl_node *ravl_find (struct ravl *ravl, const void *data, enum ravl_predicate flags) at core/ravl.c:524>:
                                LOG()
                                ravl_data() <void *ravl_data (struct ravl_node *node) at core/ravl.c:571>:
                                    memcpy()
                                ravl_predicate_holds() <int ravl_predicate_holds (int result, struct ravl_node **ret, struct ravl_node *n, enum ravl_predicate flags) at core/ravl.c:489>:
                                    ravl_node_successor() <struct ravl_node *ravl_node_successor (struct ravl_node *n) at core/ravl.c:465>:
                                        ravl_node_cessor() <struct ravl_node *ravl_node_cessor (struct ravl_node *n, enum ravl_slot_type t) at core/ravl.c:443>:
                                            ravl_node_type_most() <struct ravl_node *ravl_node_type_most (struct ravl_node *n, enum ravl_slot_type t) at core/ravl.c:430>:
                                            ravl_slot_opposite() <enum ravl_slot_type ravl_slot_opposite (enum ravl_slot_type t) at core/ravl.c:184>:
                                                ASSERTne()
                                    ravl_node_predecessor() <struct ravl_node *ravl_node_predecessor (struct ravl_node *n) at core/ravl.c:476>:
                                        ravl_node_cessor() <struct ravl_node *ravl_node_cessor (struct ravl_node *n, enum ravl_slot_type t) at core/ravl.c:443>:
                                            ravl_node_type_most() <struct ravl_node *ravl_node_type_most (struct ravl_node *n, enum ravl_slot_type t) at core/ravl.c:430>:
                                            ravl_slot_opposite() <enum ravl_slot_type ravl_slot_opposite (enum ravl_slot_type t) at core/ravl.c:184>:
                                                ASSERTne()
                            ASSERTne()
                            ravl_remove() <void ravl_remove (struct ravl *ravl, struct ravl_node *n) at core/ravl.c:545> (R):
                                LOG()
                                ravl_node_successor() <struct ravl_node *ravl_node_successor (struct ravl_node *n) at core/ravl.c:465>:
                                    ravl_node_cessor() <struct ravl_node *ravl_node_cessor (struct ravl_node *n, enum ravl_slot_type t) at core/ravl.c:443>:
                                        ravl_node_type_most() <struct ravl_node *ravl_node_type_most (struct ravl_node *n, enum ravl_slot_type t) at core/ravl.c:430>:
                                        ravl_slot_opposite() <enum ravl_slot_type ravl_slot_opposite (enum ravl_slot_type t) at core/ravl.c:184>:
                                            ASSERTne()
                                memcpy()
                                ravl_remove() <void ravl_remove (struct ravl *ravl, struct ravl_node *n) at core/ravl.c:545> (recursive: see 30322)
                                ravl_node_ref() <struct ravl_node **ravl_node_ref (struct ravl *ravl, struct ravl_node *n) at core/ravl.c:223>:
                                    ravl_node_slot_type() <enum ravl_slot_type ravl_node_slot_type (struct ravl_node *n) at core/ravl.c:196>:
                                Free() <Free_func Free at core/alloc.c:91>
                            util_mutex_unlock()
                        ulog_free_next() <int ulog_free_next (struct ulog *u, const struct pmem_ops *p_ops, ulog_free_fn ulog_free, ulog_rm_user_buffer_fn user_buff_remove, uint64_t flags) at libpmemobj/ulog.c:625>:
                            VEC()
                            VEC_INIT()
                            ulog_by_offset() <struct ulog *ulog_by_offset (size_t offset, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:36>:
                                CACHELINE_ALIGN()
                            pmemops_persist()
                            VEC_PUSH_BACK()
                            LOG()
                            out() <void out (const char *fmt, ...) at core/out.c:480>:
                                va_start()
                                out_common() <} void out_common (const char *file, int line, const char *func, int level, const char *suffix, const char *fmt, va_list ap) at core/out.c:334>
                                va_end()
                            VEC_FOREACH_REVERSE()
                            VEC_DELETE()
                        ulog_capacity() <size_t ulog_capacity (struct ulog *ulog, size_t ulog_base_bytes, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:206>:
                            ulog_next() <struct ulog *ulog_next (struct ulog *ulog, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:50>:
                                ulog_by_offset() <struct ulog *ulog_by_offset (size_t offset, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:36>:
                                    CACHELINE_ALIGN()
                        VEC_CLEAR()
                        ulog_rebuild_next_vec() <void ulog_rebuild_next_vec (struct ulog *ulog, struct ulog_next *next, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:223>:
                            VEC_PUSH_BACK()
                            ulog_next() <struct ulog *ulog_next (struct ulog *ulog, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:50>:
                                ulog_by_offset() <struct ulog *ulog_by_offset (size_t offset, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:36>:
                                    CACHELINE_ALIGN()
                ravl_delete_cb() <void ravl_delete_cb (struct ravl *ravl, ravl_cb cb, void *arg) at core/ravl.c:102>:
                    ravl_foreach_node() <void ravl_foreach_node (struct ravl_node *n, ravl_cb cb, void *arg, int free_node) at core/ravl.c:74> (R):
                        ravl_foreach_node() <void ravl_foreach_node (struct ravl_node *n, ravl_cb cb, void *arg, int free_node) at core/ravl.c:74> (recursive: see 30360)
                        Free() <Free_func Free at core/alloc.c:91>
                    Free() <Free_func Free at core/alloc.c:91>
                tx_clean_range() <void tx_clean_range (void *data, void *ctx) at libpmemobj/tx.c:421>:
                    VALGRIND_REMOVE_FROM_TX()
                    OBJ_OFF_TO_PTR()
                    VALGRIND_SET_CLEAN()
                palloc_cancel() <void palloc_cancel (struct palloc_heap *heap, struct pobj_action *actv, size_t actvcnt) at libpmemobj/palloc.c:648>:
                VEC_ARR()
                VEC_SIZE()
            lane_release() <void lane_release (PMEMobjpool *pop) at libpmemobj/lane.c:546>:
                get_lane_info_record() <inline struct lane_info *get_lane_info_record (PMEMobjpool *pop) at libpmemobj/lane.c:466>:
                    likely()
                    unlikely()
                    lane_info_ht_boot() <inline void lane_info_ht_boot (void) at libpmemobj/lane.c:74>:
                        lane_info_create() <inline void lane_info_create (void) at libpmemobj/lane.c:39>:
                            critnib_new() <struct critnib *critnib_new (void) at libpmemobj/critnib.c:187>:
                                Zalloc() <void *Zalloc (size_t sz) at core/alloc.c:98>:
                                    Malloc()
                                    memset()
                                util_mutex_init()
                                VALGRIND_HG_DRD_DISABLE_CHECKING()
                            FATAL()
                        os_tls_set() <int os_tls_set (os_tls_key_t key, const void *value) at core/os_thread_posix.c:53>:
                            pthread_setspecific()
                        FATAL()
                    critnib_get() <void *critnib_get (struct critnib *c, uint64_t key) at libpmemobj/critnib.c:515>:
                        load() <void load (void *src, void *dst) at libpmemobj/critnib.c:130>:
                            util_atomic_load_explicit64()
                        is_leaf() <inline bool is_leaf (struct critnib_node *n) at libpmemobj/critnib.c:150>:
                        slice_index() <inline unsigned slice_index (uint64_t key, sh_t shift) at libpmemobj/critnib.c:178>:
                        to_leaf() <inline struct critnib_leaf *to_leaf (struct critnib_node *n) at libpmemobj/critnib.c:159>:
                    Malloc()
                    FATAL()
                    critnib_insert() <int critnib_insert (struct critnib *c, uint64_t key, void *value) at libpmemobj/critnib.c:340>:
                        util_mutex_lock()
                        alloc_leaf() <struct critnib_leaf *alloc_leaf (struct critnib *__restrict c) at libpmemobj/critnib.c:311>:
                            Malloc()
                            ERR()
                            VALGRIND_ANNOTATE_NEW_MEMORY()
                        util_mutex_unlock()
                        VALGRIND_HG_DRD_DISABLE_CHECKING()
                        is_leaf() <inline bool is_leaf (struct critnib_node *n) at libpmemobj/critnib.c:150>:
                        path_mask() <inline uint64_t path_mask (sh_t shift) at libpmemobj/critnib.c:169>:
                        slice_index() <inline unsigned slice_index (uint64_t key, sh_t shift) at libpmemobj/critnib.c:178>:
                        store() <void store (void *dst, void *src) at libpmemobj/critnib.c:140>:
                            util_atomic_store_explicit64()
                        to_leaf() <inline struct critnib_leaf *to_leaf (struct critnib_node *n) at libpmemobj/critnib.c:159>:
                        ASSERT()
                        free_leaf() <void free_leaf (struct critnib *__restrict c, struct critnib_leaf *__restrict k) at libpmemobj/critnib.c:298>
                        util_mssb_index64()
                        alloc_node() <struct critnib_node *alloc_node (struct critnib *__restrict c) at libpmemobj/critnib.c:274>:
                            Malloc()
                            ERR()
                            VALGRIND_ANNOTATE_NEW_MEMORY()
                ASSERTne()
                unlikely()
                FATAL()
                util_bool_compare_and_swap64()
            ERR()
            obj_tx_callback() <void obj_tx_callback (struct tx *tx) at libpmemobj/tx.c:887>:
                PMDK_SLIST_FIRST()
                PMDK_SLIST_NEXT()
            util_is_zeroed() <int util_is_zeroed (const void *addr, size_t len) at core/util.c:113>:
                memcmp()
            longjmp()
    PMEMOBJ_API_END()
    pmemobj_tx_add_common() <int pmemobj_tx_add_common (struct tx *tx, struct tx_range_def *args) at libpmemobj/tx.c:1227>:
        LOG()
        ERR()
        obj_tx_fail_err() <inline int obj_tx_fail_err (int errnum, uint64_t flags) at libpmemobj/tx.c:137>:
            obj_tx_abort() <void obj_tx_abort (int errnum, int user) at libpmemobj/tx.c:914>:
                LOG()
                get_tx() <struct tx *get_tx () at libpmemobj/tx.c:54>:
                ASSERT_IN_TX()
                ASSERT_TX_STAGE_WORK()
                ASSERT()
                PMDK_SLIST_FIRST()
                PMDK_SLIST_NEXT()
                tx_abort() <void tx_abort (PMEMobjpool *pop, struct lane *lane) at libpmemobj/tx.c:447>:
                    LOG()
                    get_tx() <struct tx *get_tx () at libpmemobj/tx.c:54>:
                    tx_abort_set() <void tx_abort_set (PMEMobjpool *pop, struct lane *lane) at libpmemobj/tx.c:391>:
                        LOG()
                        ulog_foreach_entry() <int ulog_foreach_entry (struct ulog *ulog, ulog_entry_cb cb, void *arg, const struct pmem_ops *ops) at libpmemobj/ulog.c:180>
                        tx_undo_entry_apply() <int tx_undo_entry_apply (struct ulog_entry_base *e, void *arg, const struct pmem_ops *p_ops) at libpmemobj/tx.c:362>:
                            SUPPRESS_UNUSED()
                            ulog_entry_type() <ulog_operation_type ulog_entry_type (const struct ulog_entry_base *entry) at libpmemobj/ulog.c:59>:
                                ULOG_OPERATION_FROM_OFFSET()
                            tx_restore_range() <void tx_restore_range (PMEMobjpool *pop, struct tx *tx, struct ulog_entry_buf *range) at libpmemobj/tx.c:307>:
                                COMPILE_ERROR_ON()
                                PMDK_SLIST_INIT()
                                Malloc()
                                FATAL()
                                ulog_entry_offset() <uint64_t ulog_entry_offset (const struct ulog_entry_base *entry) at libpmemobj/ulog.c:68>:
                                OBJ_OFF_TO_PTR()
                                PMDK_SLIST_INSERT_HEAD()
                                PMDK_SLIST_FOREACH()
                                tx_remove_range() <void tx_remove_range (struct txr *tx_ranges, void *begin, void *end) at libpmemobj/tx.c:252>:
                                    PMDK_SLIST_FIRST()
                                    PMDK_SLIST_NEXT()
                                    LOG()
                                    Malloc()
                                    FATAL()
                                    PMDK_SLIST_INSERT_HEAD()
                                    PMDK_SLIST_REMOVE()
                                    Free() <Free_func Free at core/alloc.c:91>
                                ASSERT()
                                PMDK_SLIST_EMPTY()
                                PMDK_SLIST_FIRST()
                                PMDK_SLIST_REMOVE_HEAD()
                                pmemops_memcpy()
                                Free() <Free_func Free at core/alloc.c:91>
                            get_tx() <struct tx *get_tx () at libpmemobj/tx.c:54>:
                            ASSERT()
                        pmemops_drain()
                        operation_finish() <void operation_finish (struct operation_context *ctx, unsigned flags) at libpmemobj/memops.c:814>:
                            ASSERTne()
                            out() <void out (const char *fmt, ...) at core/out.c:480>:
                                va_start()
                                out_common() <} void out_common (const char *file, int line, const char *func, int level, const char *suffix, const char *fmt, va_list ap) at core/out.c:334>
                                va_end()
                            ulog_clobber_data() <int ulog_clobber_data (struct ulog *ulog_first, struct ulog_next *next, ulog_free_fn ulog_free, ulog_rm_user_buffer_fn user_buff_remove, const struct pmem_ops *p_ops, unsigned flags) at libpmemobj/ulog.c:713>:
                                ASSERTne()
                                ulog_inc_gen_num() <void ulog_inc_gen_num (struct ulog *ulog, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:605>:
                                    VALGRIND_ADD_TO_TX()
                                    pmemops_persist()
                                    VALGRIND_SET_CLEAN()
                                    VALGRIND_REMOVE_FROM_TX()
                                VEC_SIZE()
                                VEC_GET()
                                ulog_by_offset() <struct ulog *ulog_by_offset (size_t offset, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:36>:
                                    CACHELINE_ALIGN()
                                ulog_free_next() <int ulog_free_next (struct ulog *u, const struct pmem_ops *p_ops, ulog_free_fn ulog_free, ulog_rm_user_buffer_fn user_buff_remove, uint64_t flags) at libpmemobj/ulog.c:625>:
                                    VEC()
                                    VEC_INIT()
                                    ulog_by_offset() <struct ulog *ulog_by_offset (size_t offset, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:36>:
                                        CACHELINE_ALIGN()
                                    pmemops_persist()
                                    VEC_PUSH_BACK()
                                    LOG()
                                    out() <void out (const char *fmt, ...) at core/out.c:480>:
                                        va_start()
                                        out_common() <} void out_common (const char *file, int line, const char *func, int level, const char *suffix, const char *fmt, va_list ap) at core/out.c:334>
                                        va_end()
                                    VEC_FOREACH_REVERSE()
                                    VEC_DELETE()
                            operation_user_buffer_remove() <int operation_user_buffer_remove (void *base, void *addr) at libpmemobj/memops.c:242>:
                                util_mutex_lock()
                                ravl_find() <struct ravl_node *ravl_find (struct ravl *ravl, const void *data, enum ravl_predicate flags) at core/ravl.c:524>:
                                    LOG()
                                    ravl_data() <void *ravl_data (struct ravl_node *node) at core/ravl.c:571>:
                                        memcpy()
                                    ravl_predicate_holds() <int ravl_predicate_holds (int result, struct ravl_node **ret, struct ravl_node *n, enum ravl_predicate flags) at core/ravl.c:489>:
                                        ravl_node_successor() <struct ravl_node *ravl_node_successor (struct ravl_node *n) at core/ravl.c:465>:
                                            ravl_node_cessor() <struct ravl_node *ravl_node_cessor (struct ravl_node *n, enum ravl_slot_type t) at core/ravl.c:443>:
                                                ravl_node_type_most() <struct ravl_node *ravl_node_type_most (struct ravl_node *n, enum ravl_slot_type t) at core/ravl.c:430>:
                                                ravl_slot_opposite() <enum ravl_slot_type ravl_slot_opposite (enum ravl_slot_type t) at core/ravl.c:184>:
                                                    ASSERTne()
                                        ravl_node_predecessor() <struct ravl_node *ravl_node_predecessor (struct ravl_node *n) at core/ravl.c:476>:
                                            ravl_node_cessor() <struct ravl_node *ravl_node_cessor (struct ravl_node *n, enum ravl_slot_type t) at core/ravl.c:443>:
                                                ravl_node_type_most() <struct ravl_node *ravl_node_type_most (struct ravl_node *n, enum ravl_slot_type t) at core/ravl.c:430>:
                                                ravl_slot_opposite() <enum ravl_slot_type ravl_slot_opposite (enum ravl_slot_type t) at core/ravl.c:184>:
                                                    ASSERTne()
                                ASSERTne()
                                ravl_remove() <void ravl_remove (struct ravl *ravl, struct ravl_node *n) at core/ravl.c:545> (R):
                                    LOG()
                                    ravl_node_successor() <struct ravl_node *ravl_node_successor (struct ravl_node *n) at core/ravl.c:465>:
                                        ravl_node_cessor() <struct ravl_node *ravl_node_cessor (struct ravl_node *n, enum ravl_slot_type t) at core/ravl.c:443>:
                                            ravl_node_type_most() <struct ravl_node *ravl_node_type_most (struct ravl_node *n, enum ravl_slot_type t) at core/ravl.c:430>:
                                            ravl_slot_opposite() <enum ravl_slot_type ravl_slot_opposite (enum ravl_slot_type t) at core/ravl.c:184>:
                                                ASSERTne()
                                    memcpy()
                                    ravl_remove() <void ravl_remove (struct ravl *ravl, struct ravl_node *n) at core/ravl.c:545> (recursive: see 30526)
                                    ravl_node_ref() <struct ravl_node **ravl_node_ref (struct ravl *ravl, struct ravl_node *n) at core/ravl.c:223>:
                                        ravl_node_slot_type() <enum ravl_slot_type ravl_node_slot_type (struct ravl_node *n) at core/ravl.c:196>:
                                    Free() <Free_func Free at core/alloc.c:91>
                                util_mutex_unlock()
                            ulog_free_next() <int ulog_free_next (struct ulog *u, const struct pmem_ops *p_ops, ulog_free_fn ulog_free, ulog_rm_user_buffer_fn user_buff_remove, uint64_t flags) at libpmemobj/ulog.c:625>:
                                VEC()
                                VEC_INIT()
                                ulog_by_offset() <struct ulog *ulog_by_offset (size_t offset, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:36>:
                                    CACHELINE_ALIGN()
                                pmemops_persist()
                                VEC_PUSH_BACK()
                                LOG()
                                out() <void out (const char *fmt, ...) at core/out.c:480>:
                                    va_start()
                                    out_common() <} void out_common (const char *file, int line, const char *func, int level, const char *suffix, const char *fmt, va_list ap) at core/out.c:334>
                                    va_end()
                                VEC_FOREACH_REVERSE()
                                VEC_DELETE()
                            ulog_capacity() <size_t ulog_capacity (struct ulog *ulog, size_t ulog_base_bytes, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:206>:
                                ulog_next() <struct ulog *ulog_next (struct ulog *ulog, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:50>:
                                    ulog_by_offset() <struct ulog *ulog_by_offset (size_t offset, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:36>:
                                        CACHELINE_ALIGN()
                            VEC_CLEAR()
                            ulog_rebuild_next_vec() <void ulog_rebuild_next_vec (struct ulog *ulog, struct ulog_next *next, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:223>:
                                VEC_PUSH_BACK()
                                ulog_next() <struct ulog *ulog_next (struct ulog *ulog, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:50>:
                                    ulog_by_offset() <struct ulog *ulog_by_offset (size_t offset, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:36>:
                                        CACHELINE_ALIGN()
                    ravl_delete_cb() <void ravl_delete_cb (struct ravl *ravl, ravl_cb cb, void *arg) at core/ravl.c:102>:
                        ravl_foreach_node() <void ravl_foreach_node (struct ravl_node *n, ravl_cb cb, void *arg, int free_node) at core/ravl.c:74> (R):
                            ravl_foreach_node() <void ravl_foreach_node (struct ravl_node *n, ravl_cb cb, void *arg, int free_node) at core/ravl.c:74> (recursive: see 30564)
                            Free() <Free_func Free at core/alloc.c:91>
                        Free() <Free_func Free at core/alloc.c:91>
                    tx_clean_range() <void tx_clean_range (void *data, void *ctx) at libpmemobj/tx.c:421>:
                        VALGRIND_REMOVE_FROM_TX()
                        OBJ_OFF_TO_PTR()
                        VALGRIND_SET_CLEAN()
                    palloc_cancel() <void palloc_cancel (struct palloc_heap *heap, struct pobj_action *actv, size_t actvcnt) at libpmemobj/palloc.c:648>:
                    VEC_ARR()
                    VEC_SIZE()
                lane_release() <void lane_release (PMEMobjpool *pop) at libpmemobj/lane.c:546>:
                    get_lane_info_record() <inline struct lane_info *get_lane_info_record (PMEMobjpool *pop) at libpmemobj/lane.c:466>:
                        likely()
                        unlikely()
                        lane_info_ht_boot() <inline void lane_info_ht_boot (void) at libpmemobj/lane.c:74>:
                            lane_info_create() <inline void lane_info_create (void) at libpmemobj/lane.c:39>:
                                critnib_new() <struct critnib *critnib_new (void) at libpmemobj/critnib.c:187>:
                                    Zalloc() <void *Zalloc (size_t sz) at core/alloc.c:98>:
                                        Malloc()
                                        memset()
                                    util_mutex_init()
                                    VALGRIND_HG_DRD_DISABLE_CHECKING()
                                FATAL()
                            os_tls_set() <int os_tls_set (os_tls_key_t key, const void *value) at core/os_thread_posix.c:53>:
                                pthread_setspecific()
                            FATAL()
                        critnib_get() <void *critnib_get (struct critnib *c, uint64_t key) at libpmemobj/critnib.c:515>:
                            load() <void load (void *src, void *dst) at libpmemobj/critnib.c:130>:
                                util_atomic_load_explicit64()
                            is_leaf() <inline bool is_leaf (struct critnib_node *n) at libpmemobj/critnib.c:150>:
                            slice_index() <inline unsigned slice_index (uint64_t key, sh_t shift) at libpmemobj/critnib.c:178>:
                            to_leaf() <inline struct critnib_leaf *to_leaf (struct critnib_node *n) at libpmemobj/critnib.c:159>:
                        Malloc()
                        FATAL()
                        critnib_insert() <int critnib_insert (struct critnib *c, uint64_t key, void *value) at libpmemobj/critnib.c:340>:
                            util_mutex_lock()
                            alloc_leaf() <struct critnib_leaf *alloc_leaf (struct critnib *__restrict c) at libpmemobj/critnib.c:311>:
                                Malloc()
                                ERR()
                                VALGRIND_ANNOTATE_NEW_MEMORY()
                            util_mutex_unlock()
                            VALGRIND_HG_DRD_DISABLE_CHECKING()
                            is_leaf() <inline bool is_leaf (struct critnib_node *n) at libpmemobj/critnib.c:150>:
                            path_mask() <inline uint64_t path_mask (sh_t shift) at libpmemobj/critnib.c:169>:
                            slice_index() <inline unsigned slice_index (uint64_t key, sh_t shift) at libpmemobj/critnib.c:178>:
                            store() <void store (void *dst, void *src) at libpmemobj/critnib.c:140>:
                                util_atomic_store_explicit64()
                            to_leaf() <inline struct critnib_leaf *to_leaf (struct critnib_node *n) at libpmemobj/critnib.c:159>:
                            ASSERT()
                            free_leaf() <void free_leaf (struct critnib *__restrict c, struct critnib_leaf *__restrict k) at libpmemobj/critnib.c:298>
                            util_mssb_index64()
                            alloc_node() <struct critnib_node *alloc_node (struct critnib *__restrict c) at libpmemobj/critnib.c:274>:
                                Malloc()
                                ERR()
                                VALGRIND_ANNOTATE_NEW_MEMORY()
                    ASSERTne()
                    unlikely()
                    FATAL()
                    util_bool_compare_and_swap64()
                ERR()
                obj_tx_callback() <void obj_tx_callback (struct tx *tx) at libpmemobj/tx.c:887>:
                    PMDK_SLIST_FIRST()
                    PMDK_SLIST_NEXT()
                util_is_zeroed() <int util_is_zeroed (const void *addr, size_t len) at core/util.c:113>:
                    memcmp()
                longjmp()
        ravl_find() <struct ravl_node *ravl_find (struct ravl *ravl, const void *data, enum ravl_predicate flags) at core/ravl.c:524>:
            LOG()
            ravl_data() <void *ravl_data (struct ravl_node *node) at core/ravl.c:571>:
                memcpy()
            ravl_predicate_holds() <int ravl_predicate_holds (int result, struct ravl_node **ret, struct ravl_node *n, enum ravl_predicate flags) at core/ravl.c:489>:
                ravl_node_successor() <struct ravl_node *ravl_node_successor (struct ravl_node *n) at core/ravl.c:465>:
                    ravl_node_cessor() <struct ravl_node *ravl_node_cessor (struct ravl_node *n, enum ravl_slot_type t) at core/ravl.c:443>:
                        ravl_node_type_most() <struct ravl_node *ravl_node_type_most (struct ravl_node *n, enum ravl_slot_type t) at core/ravl.c:430>:
                        ravl_slot_opposite() <enum ravl_slot_type ravl_slot_opposite (enum ravl_slot_type t) at core/ravl.c:184>:
                            ASSERTne()
                ravl_node_predecessor() <struct ravl_node *ravl_node_predecessor (struct ravl_node *n) at core/ravl.c:476>:
                    ravl_node_cessor() <struct ravl_node *ravl_node_cessor (struct ravl_node *n, enum ravl_slot_type t) at core/ravl.c:443>:
                        ravl_node_type_most() <struct ravl_node *ravl_node_type_most (struct ravl_node *n, enum ravl_slot_type t) at core/ravl.c:430>:
                        ravl_slot_opposite() <enum ravl_slot_type ravl_slot_opposite (enum ravl_slot_type t) at core/ravl.c:184>:
                            ASSERTne()
        ravl_data() <void *ravl_data (struct ravl_node *node) at core/ravl.c:571>:
            memcpy()
        ASSERTeq()
        tx_lane_ranges_insert_def() <int tx_lane_ranges_insert_def (PMEMobjpool *pop, struct tx *tx, const struct tx_range_def *rdef) at libpmemobj/tx.c:562>:
            SUPPRESS_UNUSED()
            LOG()
            ravl_emplace_copy() <int ravl_emplace_copy (struct ravl *ravl, const void *data) at core/ravl.c:384>:
                ravl_emplace() <int ravl_emplace (struct ravl *ravl, ravl_constr constr, const void *arg) at core/ravl.c:393>:
                    LOG()
                    ravl_new_node() <struct ravl_node *ravl_new_node (struct ravl *ravl, ravl_constr constr, const void *arg) at core/ravl.c:161>:
                        Malloc()
                        ERR()
                        ravl_node_insert_constructor() <void ravl_node_insert_constructor (void *data, size_t data_size, const void *arg) at core/ravl.c:139>:
                            SUPPRESS_UNUSED()
                            memcpy()
                    ravl_data() <void *ravl_data (struct ravl_node *node) at core/ravl.c:571>:
                        memcpy()
                    ravl_balance() <void ravl_balance (struct ravl *ravl, struct ravl_node *n) at core/ravl.c:337>:
                        ravl_node_is() <int ravl_node_is (struct ravl_node *n, int i, int j) at core/ravl.c:306>:
                            ravl_node_is_i_j() <int ravl_node_is_i_j (struct ravl_node *n, int i, int j) at core/ravl.c:296>:
                                ravl_node_rank_difference_parent() <int ravl_node_rank_difference_parent (struct ravl_node *p, struct ravl_node *n) at core/ravl.c:275>:
                                    ravl_node_rank() <int ravl_node_rank (struct ravl_node *n) at core/ravl.c:261>:
                        ravl_node_promote() <void ravl_node_promote (struct ravl_node *n) at core/ravl.c:315>
                        ravl_node_sibling() <struct ravl_node *ravl_node_sibling (struct ravl_node *n) at core/ravl.c:209>:
                            ravl_node_slot_type() <enum ravl_slot_type ravl_node_slot_type (struct ravl_node *n) at core/ravl.c:196>:
                        ravl_node_rank_difference() <int ravl_node_rank_difference (struct ravl_node *n) at core/ravl.c:287>:
                            ravl_node_rank_difference_parent() <int ravl_node_rank_difference_parent (struct ravl_node *p, struct ravl_node *n) at core/ravl.c:275>:
                                ravl_node_rank() <int ravl_node_rank (struct ravl_node *n) at core/ravl.c:261>:
                        ravl_node_rank_difference_parent() <int ravl_node_rank_difference_parent (struct ravl_node *p, struct ravl_node *n) at core/ravl.c:275>:
                            ravl_node_rank() <int ravl_node_rank (struct ravl_node *n) at core/ravl.c:261>:
                        ravl_slot_opposite() <enum ravl_slot_type ravl_slot_opposite (enum ravl_slot_type t) at core/ravl.c:184>:
                            ASSERTne()
                        ravl_node_slot_type() <enum ravl_slot_type ravl_node_slot_type (struct ravl_node *n) at core/ravl.c:196>:
                        ravl_rotate() <void ravl_rotate (struct ravl *ravl, struct ravl_node *n) at core/ravl.c:237>:
                            ASSERTne()
                            ravl_node_ref() <struct ravl_node **ravl_node_ref (struct ravl *ravl, struct ravl_node *n) at core/ravl.c:223>:
                                ravl_node_slot_type() <enum ravl_slot_type ravl_node_slot_type (struct ravl_node *n) at core/ravl.c:196>:
                            ravl_node_slot_type() <enum ravl_slot_type ravl_node_slot_type (struct ravl_node *n) at core/ravl.c:196>:
                            ravl_slot_opposite() <enum ravl_slot_type ravl_slot_opposite (enum ravl_slot_type t) at core/ravl.c:184>:
                                ASSERTne()
                        ravl_node_demote() <void ravl_node_demote (struct ravl_node *n) at core/ravl.c:324>:
                            ASSERT()
                    Free() <Free_func Free at core/alloc.c:91>
                ravl_node_copy_constructor() <void ravl_node_copy_constructor (void *data, size_t data_size, const void *arg) at core/ravl.c:152>:
                    memcpy()
            FATAL()
        pmemobj_tx_add_snapshot() <int pmemobj_tx_add_snapshot (struct tx *tx, struct tx_range_def *snapshot) at libpmemobj/tx.c:1167>:
            OBJ_OFF_TO_PTR()
            VALGRIND_ADD_TO_TX()
            vg_verify_initialized() <void vg_verify_initialized (PMEMobjpool *pop, const struct tx_range_def *def) at libpmemobj/tx.c:1135>:
                SUPPRESS_UNUSED()
                VALGRIND_CHECK_MEM_IS_DEFINED()
                VALGRIND_PRINTF()
            tx_action_add() <struct pobj_action *tx_action_add (struct tx *tx) at libpmemobj/tx.c:192>:
                tx_action_reserve() <int tx_action_reserve (struct tx *tx, size_t n) at libpmemobj/tx.c:174>:
                    VEC_SIZE()
                    MIN()
                    operation_reserve() <int operation_reserve (struct operation_context *ctx, size_t new_capacity) at libpmemobj/memops.c:684>:
                        ERR()
                        ulog_reserve() <int ulog_reserve (struct ulog *ulog, size_t ulog_base_nbytes, size_t gen_num, int auto_reserve, size_t *new_capacity, ulog_extend_fn extend, struct ulog_next *next, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:236>:
                            LOG()
                            VEC_FOREACH()
                            ulog_by_offset() <struct ulog *ulog_by_offset (size_t offset, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:36>:
                                CACHELINE_ALIGN()
                            ASSERTne()
                            VEC_PUSH_BACK()
                            ulog_next() <struct ulog *ulog_next (struct ulog *ulog, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:50>:
                                ulog_by_offset() <struct ulog *ulog_by_offset (size_t offset, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:36>:
                                    CACHELINE_ALIGN()
                VEC_INC_BACK()
                VEC_BACK()
            palloc_set_value() <void palloc_set_value (struct palloc_heap *heap, struct pobj_action *act, uint64_t *ptr, uint64_t value) at libpmemobj/palloc.c:86>:
                SUPPRESS_UNUSED()
            operation_add_buffer() <int operation_add_buffer (struct operation_context *ctx, void *dest, void *src, size_t size, ulog_operation_type type) at libpmemobj/memops.c:428> (R):
                operation_reserve() <int operation_reserve (struct operation_context *ctx, size_t new_capacity) at libpmemobj/memops.c:684>:
                    ERR()
                    ulog_reserve() <int ulog_reserve (struct ulog *ulog, size_t ulog_base_nbytes, size_t gen_num, int auto_reserve, size_t *new_capacity, ulog_extend_fn extend, struct ulog_next *next, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:236>:
                        LOG()
                        VEC_FOREACH()
                        ulog_by_offset() <struct ulog *ulog_by_offset (size_t offset, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:36>:
                            CACHELINE_ALIGN()
                        ASSERTne()
                        VEC_PUSH_BACK()
                        ulog_next() <struct ulog *ulog_next (struct ulog *ulog, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:50>:
                            ulog_by_offset() <struct ulog *ulog_by_offset (size_t offset, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:36>:
                                CACHELINE_ALIGN()
                ulog_next() <struct ulog *ulog_next (struct ulog *ulog, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:50>:
                    ulog_by_offset() <struct ulog *ulog_by_offset (size_t offset, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:36>:
                        CACHELINE_ALIGN()
                ASSERTne()
                MIN()
                ALIGN_UP()
                ulog_clobber_entry() <void ulog_clobber_entry (const struct ulog_entry_base *e, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:405>:
                    CACHELINE_ALIGN()
                    VALGRIND_ADD_TO_TX()
                    pmemops_memset()
                    VALGRIND_REMOVE_FROM_TX()
                ulog_entry_buf_create() <struct ulog_entry_buf *ulog_entry_buf_create (struct ulog *ulog, size_t offset, uint64_t gen_num, uint64_t *dest, const void *src, uint64_t size, ulog_operation_type type, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:421>:
                    alloca()
                    ULOG_OPERATION()
                    MIN()
                    memcpy()
                    memset()
                    ALIGN_DOWN()
                    ASSERT()
                    IS_CACHELINE_ALIGNED()
                    VALGRIND_ADD_TO_TX()
                    pmemops_memcpy()
                    VALGRIND_REMOVE_FROM_TX()
                    util_checksum_seq() <uint64_t util_checksum_seq (const void *addr, size_t len, uint64_t csum) at core/util.c:197>:
                        abort()
                        le32toh()
                    pmemops_drain()
                    VALGRIND_MAKE_MEM_DEFINED()
                    ulog_entry_valid() <int ulog_entry_valid (struct ulog *ulog, const struct ulog_entry_base *entry) at libpmemobj/ulog.c:103>:
                        ulog_entry_type() <ulog_operation_type ulog_entry_type (const struct ulog_entry_base *entry) at libpmemobj/ulog.c:59>:
                            ULOG_OPERATION_FROM_OFFSET()
                        ulog_entry_size() <size_t ulog_entry_size (const struct ulog_entry_base *entry) at libpmemobj/ulog.c:77>:
                            ulog_entry_type() <ulog_operation_type ulog_entry_type (const struct ulog_entry_base *entry) at libpmemobj/ulog.c:59>:
                                ULOG_OPERATION_FROM_OFFSET()
                            CACHELINE_ALIGN()
                            ASSERT()
                        util_checksum_compute() <uint64_t util_checksum_compute (void *addr, size_t len, uint64_t *csump, size_t skip_off) at core/util.c:134>:
                            abort()
                            le32toh()
                        util_checksum_seq() <uint64_t util_checksum_seq (const void *addr, size_t len, uint64_t csum) at core/util.c:197>:
                            abort()
                            le32toh()
                ASSERT()
                ulog_entry_size() <size_t ulog_entry_size (const struct ulog_entry_base *entry) at libpmemobj/ulog.c:77>:
                    ulog_entry_type() <ulog_operation_type ulog_entry_type (const struct ulog_entry_base *entry) at libpmemobj/ulog.c:59>:
                        ULOG_OPERATION_FROM_OFFSET()
                    CACHELINE_ALIGN()
                    ASSERT()
                operation_add_buffer() <int operation_add_buffer (struct operation_context *ctx, void *dest, void *src, size_t size, ulog_operation_type type) at libpmemobj/memops.c:428> (recursive: see 30719)
        MAX()
        pmemobj_tx_merge_flags() <void pmemobj_tx_merge_flags (struct tx_range_def *dest, struct tx_range_def *merged) at libpmemobj/tx.c:1210>:
        ravl_remove() <void ravl_remove (struct ravl *ravl, struct ravl_node *n) at core/ravl.c:545> (R):
            LOG()
            ravl_node_successor() <struct ravl_node *ravl_node_successor (struct ravl_node *n) at core/ravl.c:465>:
                ravl_node_cessor() <struct ravl_node *ravl_node_cessor (struct ravl_node *n, enum ravl_slot_type t) at core/ravl.c:443>:
                    ravl_node_type_most() <struct ravl_node *ravl_node_type_most (struct ravl_node *n, enum ravl_slot_type t) at core/ravl.c:430>:
                    ravl_slot_opposite() <enum ravl_slot_type ravl_slot_opposite (enum ravl_slot_type t) at core/ravl.c:184>:
                        ASSERTne()
            memcpy()
            ravl_remove() <void ravl_remove (struct ravl *ravl, struct ravl_node *n) at core/ravl.c:545> (recursive: see 30783)
            ravl_node_ref() <struct ravl_node **ravl_node_ref (struct ravl *ravl, struct ravl_node *n) at core/ravl.c:223>:
                ravl_node_slot_type() <enum ravl_slot_type ravl_node_slot_type (struct ravl_node *n) at core/ravl.c:196>:
            Free() <Free_func Free at core/alloc.c:91>
        ASSERT()
pmemobj_tx_begin() <int pmemobj_tx_begin (PMEMobjpool *pop, jmp_buf env, ...) at libpmemobj/tx.c:726>:
    LOG()
    get_tx() <struct tx *get_tx () at libpmemobj/tx.c:54>:
    ASSERTne()
    ERR()
    obj_tx_fail_err() <inline int obj_tx_fail_err (int errnum, uint64_t flags) at libpmemobj/tx.c:137>:
        obj_tx_abort() <void obj_tx_abort (int errnum, int user) at libpmemobj/tx.c:914>:
            LOG()
            get_tx() <struct tx *get_tx () at libpmemobj/tx.c:54>:
            ASSERT_IN_TX()
            ASSERT_TX_STAGE_WORK()
            ASSERT()
            PMDK_SLIST_FIRST()
            PMDK_SLIST_NEXT()
            tx_abort() <void tx_abort (PMEMobjpool *pop, struct lane *lane) at libpmemobj/tx.c:447>:
                LOG()
                get_tx() <struct tx *get_tx () at libpmemobj/tx.c:54>:
                tx_abort_set() <void tx_abort_set (PMEMobjpool *pop, struct lane *lane) at libpmemobj/tx.c:391>:
                    LOG()
                    ulog_foreach_entry() <int ulog_foreach_entry (struct ulog *ulog, ulog_entry_cb cb, void *arg, const struct pmem_ops *ops) at libpmemobj/ulog.c:180>
                    tx_undo_entry_apply() <int tx_undo_entry_apply (struct ulog_entry_base *e, void *arg, const struct pmem_ops *p_ops) at libpmemobj/tx.c:362>:
                        SUPPRESS_UNUSED()
                        ulog_entry_type() <ulog_operation_type ulog_entry_type (const struct ulog_entry_base *entry) at libpmemobj/ulog.c:59>:
                            ULOG_OPERATION_FROM_OFFSET()
                        tx_restore_range() <void tx_restore_range (PMEMobjpool *pop, struct tx *tx, struct ulog_entry_buf *range) at libpmemobj/tx.c:307>:
                            COMPILE_ERROR_ON()
                            PMDK_SLIST_INIT()
                            Malloc()
                            FATAL()
                            ulog_entry_offset() <uint64_t ulog_entry_offset (const struct ulog_entry_base *entry) at libpmemobj/ulog.c:68>:
                            OBJ_OFF_TO_PTR()
                            PMDK_SLIST_INSERT_HEAD()
                            PMDK_SLIST_FOREACH()
                            tx_remove_range() <void tx_remove_range (struct txr *tx_ranges, void *begin, void *end) at libpmemobj/tx.c:252>:
                                PMDK_SLIST_FIRST()
                                PMDK_SLIST_NEXT()
                                LOG()
                                Malloc()
                                FATAL()
                                PMDK_SLIST_INSERT_HEAD()
                                PMDK_SLIST_REMOVE()
                                Free() <Free_func Free at core/alloc.c:91>
                            ASSERT()
                            PMDK_SLIST_EMPTY()
                            PMDK_SLIST_FIRST()
                            PMDK_SLIST_REMOVE_HEAD()
                            pmemops_memcpy()
                            Free() <Free_func Free at core/alloc.c:91>
                        get_tx() <struct tx *get_tx () at libpmemobj/tx.c:54>:
                        ASSERT()
                    pmemops_drain()
                    operation_finish() <void operation_finish (struct operation_context *ctx, unsigned flags) at libpmemobj/memops.c:814>:
                        ASSERTne()
                        out() <void out (const char *fmt, ...) at core/out.c:480>:
                            va_start()
                            out_common() <} void out_common (const char *file, int line, const char *func, int level, const char *suffix, const char *fmt, va_list ap) at core/out.c:334>
                            va_end()
                        ulog_clobber_data() <int ulog_clobber_data (struct ulog *ulog_first, struct ulog_next *next, ulog_free_fn ulog_free, ulog_rm_user_buffer_fn user_buff_remove, const struct pmem_ops *p_ops, unsigned flags) at libpmemobj/ulog.c:713>:
                            ASSERTne()
                            ulog_inc_gen_num() <void ulog_inc_gen_num (struct ulog *ulog, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:605>:
                                VALGRIND_ADD_TO_TX()
                                pmemops_persist()
                                VALGRIND_SET_CLEAN()
                                VALGRIND_REMOVE_FROM_TX()
                            VEC_SIZE()
                            VEC_GET()
                            ulog_by_offset() <struct ulog *ulog_by_offset (size_t offset, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:36>:
                                CACHELINE_ALIGN()
                            ulog_free_next() <int ulog_free_next (struct ulog *u, const struct pmem_ops *p_ops, ulog_free_fn ulog_free, ulog_rm_user_buffer_fn user_buff_remove, uint64_t flags) at libpmemobj/ulog.c:625>:
                                VEC()
                                VEC_INIT()
                                ulog_by_offset() <struct ulog *ulog_by_offset (size_t offset, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:36>:
                                    CACHELINE_ALIGN()
                                pmemops_persist()
                                VEC_PUSH_BACK()
                                LOG()
                                out() <void out (const char *fmt, ...) at core/out.c:480>:
                                    va_start()
                                    out_common() <} void out_common (const char *file, int line, const char *func, int level, const char *suffix, const char *fmt, va_list ap) at core/out.c:334>
                                    va_end()
                                VEC_FOREACH_REVERSE()
                                VEC_DELETE()
                        operation_user_buffer_remove() <int operation_user_buffer_remove (void *base, void *addr) at libpmemobj/memops.c:242>:
                            util_mutex_lock()
                            ravl_find() <struct ravl_node *ravl_find (struct ravl *ravl, const void *data, enum ravl_predicate flags) at core/ravl.c:524>:
                                LOG()
                                ravl_data() <void *ravl_data (struct ravl_node *node) at core/ravl.c:571>:
                                    memcpy()
                                ravl_predicate_holds() <int ravl_predicate_holds (int result, struct ravl_node **ret, struct ravl_node *n, enum ravl_predicate flags) at core/ravl.c:489>:
                                    ravl_node_successor() <struct ravl_node *ravl_node_successor (struct ravl_node *n) at core/ravl.c:465>:
                                        ravl_node_cessor() <struct ravl_node *ravl_node_cessor (struct ravl_node *n, enum ravl_slot_type t) at core/ravl.c:443>:
                                            ravl_node_type_most() <struct ravl_node *ravl_node_type_most (struct ravl_node *n, enum ravl_slot_type t) at core/ravl.c:430>:
                                            ravl_slot_opposite() <enum ravl_slot_type ravl_slot_opposite (enum ravl_slot_type t) at core/ravl.c:184>:
                                                ASSERTne()
                                    ravl_node_predecessor() <struct ravl_node *ravl_node_predecessor (struct ravl_node *n) at core/ravl.c:476>:
                                        ravl_node_cessor() <struct ravl_node *ravl_node_cessor (struct ravl_node *n, enum ravl_slot_type t) at core/ravl.c:443>:
                                            ravl_node_type_most() <struct ravl_node *ravl_node_type_most (struct ravl_node *n, enum ravl_slot_type t) at core/ravl.c:430>:
                                            ravl_slot_opposite() <enum ravl_slot_type ravl_slot_opposite (enum ravl_slot_type t) at core/ravl.c:184>:
                                                ASSERTne()
                            ASSERTne()
                            ravl_remove() <void ravl_remove (struct ravl *ravl, struct ravl_node *n) at core/ravl.c:545> (R):
                                LOG()
                                ravl_node_successor() <struct ravl_node *ravl_node_successor (struct ravl_node *n) at core/ravl.c:465>:
                                    ravl_node_cessor() <struct ravl_node *ravl_node_cessor (struct ravl_node *n, enum ravl_slot_type t) at core/ravl.c:443>:
                                        ravl_node_type_most() <struct ravl_node *ravl_node_type_most (struct ravl_node *n, enum ravl_slot_type t) at core/ravl.c:430>:
                                        ravl_slot_opposite() <enum ravl_slot_type ravl_slot_opposite (enum ravl_slot_type t) at core/ravl.c:184>:
                                            ASSERTne()
                                memcpy()
                                ravl_remove() <void ravl_remove (struct ravl *ravl, struct ravl_node *n) at core/ravl.c:545> (recursive: see 30896)
                                ravl_node_ref() <struct ravl_node **ravl_node_ref (struct ravl *ravl, struct ravl_node *n) at core/ravl.c:223>:
                                    ravl_node_slot_type() <enum ravl_slot_type ravl_node_slot_type (struct ravl_node *n) at core/ravl.c:196>:
                                Free() <Free_func Free at core/alloc.c:91>
                            util_mutex_unlock()
                        ulog_free_next() <int ulog_free_next (struct ulog *u, const struct pmem_ops *p_ops, ulog_free_fn ulog_free, ulog_rm_user_buffer_fn user_buff_remove, uint64_t flags) at libpmemobj/ulog.c:625>:
                            VEC()
                            VEC_INIT()
                            ulog_by_offset() <struct ulog *ulog_by_offset (size_t offset, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:36>:
                                CACHELINE_ALIGN()
                            pmemops_persist()
                            VEC_PUSH_BACK()
                            LOG()
                            out() <void out (const char *fmt, ...) at core/out.c:480>:
                                va_start()
                                out_common() <} void out_common (const char *file, int line, const char *func, int level, const char *suffix, const char *fmt, va_list ap) at core/out.c:334>
                                va_end()
                            VEC_FOREACH_REVERSE()
                            VEC_DELETE()
                        ulog_capacity() <size_t ulog_capacity (struct ulog *ulog, size_t ulog_base_bytes, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:206>:
                            ulog_next() <struct ulog *ulog_next (struct ulog *ulog, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:50>:
                                ulog_by_offset() <struct ulog *ulog_by_offset (size_t offset, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:36>:
                                    CACHELINE_ALIGN()
                        VEC_CLEAR()
                        ulog_rebuild_next_vec() <void ulog_rebuild_next_vec (struct ulog *ulog, struct ulog_next *next, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:223>:
                            VEC_PUSH_BACK()
                            ulog_next() <struct ulog *ulog_next (struct ulog *ulog, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:50>:
                                ulog_by_offset() <struct ulog *ulog_by_offset (size_t offset, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:36>:
                                    CACHELINE_ALIGN()
                ravl_delete_cb() <void ravl_delete_cb (struct ravl *ravl, ravl_cb cb, void *arg) at core/ravl.c:102>:
                    ravl_foreach_node() <void ravl_foreach_node (struct ravl_node *n, ravl_cb cb, void *arg, int free_node) at core/ravl.c:74> (R):
                        ravl_foreach_node() <void ravl_foreach_node (struct ravl_node *n, ravl_cb cb, void *arg, int free_node) at core/ravl.c:74> (recursive: see 30934)
                        Free() <Free_func Free at core/alloc.c:91>
                    Free() <Free_func Free at core/alloc.c:91>
                tx_clean_range() <void tx_clean_range (void *data, void *ctx) at libpmemobj/tx.c:421>:
                    VALGRIND_REMOVE_FROM_TX()
                    OBJ_OFF_TO_PTR()
                    VALGRIND_SET_CLEAN()
                palloc_cancel() <void palloc_cancel (struct palloc_heap *heap, struct pobj_action *actv, size_t actvcnt) at libpmemobj/palloc.c:648>:
                VEC_ARR()
                VEC_SIZE()
            lane_release() <void lane_release (PMEMobjpool *pop) at libpmemobj/lane.c:546>:
                get_lane_info_record() <inline struct lane_info *get_lane_info_record (PMEMobjpool *pop) at libpmemobj/lane.c:466>:
                    likely()
                    unlikely()
                    lane_info_ht_boot() <inline void lane_info_ht_boot (void) at libpmemobj/lane.c:74>:
                        lane_info_create() <inline void lane_info_create (void) at libpmemobj/lane.c:39>:
                            critnib_new() <struct critnib *critnib_new (void) at libpmemobj/critnib.c:187>:
                                Zalloc() <void *Zalloc (size_t sz) at core/alloc.c:98>:
                                    Malloc()
                                    memset()
                                util_mutex_init()
                                VALGRIND_HG_DRD_DISABLE_CHECKING()
                            FATAL()
                        os_tls_set() <int os_tls_set (os_tls_key_t key, const void *value) at core/os_thread_posix.c:53>:
                            pthread_setspecific()
                        FATAL()
                    critnib_get() <void *critnib_get (struct critnib *c, uint64_t key) at libpmemobj/critnib.c:515>:
                        load() <void load (void *src, void *dst) at libpmemobj/critnib.c:130>:
                            util_atomic_load_explicit64()
                        is_leaf() <inline bool is_leaf (struct critnib_node *n) at libpmemobj/critnib.c:150>:
                        slice_index() <inline unsigned slice_index (uint64_t key, sh_t shift) at libpmemobj/critnib.c:178>:
                        to_leaf() <inline struct critnib_leaf *to_leaf (struct critnib_node *n) at libpmemobj/critnib.c:159>:
                    Malloc()
                    FATAL()
                    critnib_insert() <int critnib_insert (struct critnib *c, uint64_t key, void *value) at libpmemobj/critnib.c:340>:
                        util_mutex_lock()
                        alloc_leaf() <struct critnib_leaf *alloc_leaf (struct critnib *__restrict c) at libpmemobj/critnib.c:311>:
                            Malloc()
                            ERR()
                            VALGRIND_ANNOTATE_NEW_MEMORY()
                        util_mutex_unlock()
                        VALGRIND_HG_DRD_DISABLE_CHECKING()
                        is_leaf() <inline bool is_leaf (struct critnib_node *n) at libpmemobj/critnib.c:150>:
                        path_mask() <inline uint64_t path_mask (sh_t shift) at libpmemobj/critnib.c:169>:
                        slice_index() <inline unsigned slice_index (uint64_t key, sh_t shift) at libpmemobj/critnib.c:178>:
                        store() <void store (void *dst, void *src) at libpmemobj/critnib.c:140>:
                            util_atomic_store_explicit64()
                        to_leaf() <inline struct critnib_leaf *to_leaf (struct critnib_node *n) at libpmemobj/critnib.c:159>:
                        ASSERT()
                        free_leaf() <void free_leaf (struct critnib *__restrict c, struct critnib_leaf *__restrict k) at libpmemobj/critnib.c:298>
                        util_mssb_index64()
                        alloc_node() <struct critnib_node *alloc_node (struct critnib *__restrict c) at libpmemobj/critnib.c:274>:
                            Malloc()
                            ERR()
                            VALGRIND_ANNOTATE_NEW_MEMORY()
                ASSERTne()
                unlikely()
                FATAL()
                util_bool_compare_and_swap64()
            ERR()
            obj_tx_callback() <void obj_tx_callback (struct tx *tx) at libpmemobj/tx.c:887>:
                PMDK_SLIST_FIRST()
                PMDK_SLIST_NEXT()
            util_is_zeroed() <int util_is_zeroed (const void *addr, size_t len) at core/util.c:113>:
                memcmp()
            longjmp()
    PMDK_SLIST_FIRST()
    lane_hold() <unsigned lane_hold (PMEMobjpool *pop, struct lane **lanep) at libpmemobj/lane.c:510>:
        get_lane_info_record() <inline struct lane_info *get_lane_info_record (PMEMobjpool *pop) at libpmemobj/lane.c:466>:
            likely()
            unlikely()
            lane_info_ht_boot() <inline void lane_info_ht_boot (void) at libpmemobj/lane.c:74>:
                lane_info_create() <inline void lane_info_create (void) at libpmemobj/lane.c:39>:
                    critnib_new() <struct critnib *critnib_new (void) at libpmemobj/critnib.c:187>:
                        Zalloc() <void *Zalloc (size_t sz) at core/alloc.c:98>:
                            Malloc()
                            memset()
                        util_mutex_init()
                        VALGRIND_HG_DRD_DISABLE_CHECKING()
                    FATAL()
                os_tls_set() <int os_tls_set (os_tls_key_t key, const void *value) at core/os_thread_posix.c:53>:
                    pthread_setspecific()
                FATAL()
            critnib_get() <void *critnib_get (struct critnib *c, uint64_t key) at libpmemobj/critnib.c:515>:
                load() <void load (void *src, void *dst) at libpmemobj/critnib.c:130>:
                    util_atomic_load_explicit64()
                is_leaf() <inline bool is_leaf (struct critnib_node *n) at libpmemobj/critnib.c:150>:
                slice_index() <inline unsigned slice_index (uint64_t key, sh_t shift) at libpmemobj/critnib.c:178>:
                to_leaf() <inline struct critnib_leaf *to_leaf (struct critnib_node *n) at libpmemobj/critnib.c:159>:
            Malloc()
            FATAL()
            critnib_insert() <int critnib_insert (struct critnib *c, uint64_t key, void *value) at libpmemobj/critnib.c:340>:
                util_mutex_lock()
                alloc_leaf() <struct critnib_leaf *alloc_leaf (struct critnib *__restrict c) at libpmemobj/critnib.c:311>:
                    Malloc()
                    ERR()
                    VALGRIND_ANNOTATE_NEW_MEMORY()
                util_mutex_unlock()
                VALGRIND_HG_DRD_DISABLE_CHECKING()
                is_leaf() <inline bool is_leaf (struct critnib_node *n) at libpmemobj/critnib.c:150>:
                path_mask() <inline uint64_t path_mask (sh_t shift) at libpmemobj/critnib.c:169>:
                slice_index() <inline unsigned slice_index (uint64_t key, sh_t shift) at libpmemobj/critnib.c:178>:
                store() <void store (void *dst, void *src) at libpmemobj/critnib.c:140>:
                    util_atomic_store_explicit64()
                to_leaf() <inline struct critnib_leaf *to_leaf (struct critnib_node *n) at libpmemobj/critnib.c:159>:
                ASSERT()
                free_leaf() <void free_leaf (struct critnib *__restrict c, struct critnib_leaf *__restrict k) at libpmemobj/critnib.c:298>
                util_mssb_index64()
                alloc_node() <struct critnib_node *alloc_node (struct critnib *__restrict c) at libpmemobj/critnib.c:274>:
                    Malloc()
                    ERR()
                    VALGRIND_ANNOTATE_NEW_MEMORY()
        unlikely()
        util_fetch_and_add32()
        get_lane() <inline void get_lane (uint64_t *locks, struct lane_info *info, uint64_t nlocks) at libpmemobj/lane.c:430>:
            likely()
            util_bool_compare_and_swap64()
            sched_yield()
        VALGRIND_ANNOTATE_NEW_MEMORY()
        operation_init() <void operation_init (struct operation_context *ctx) at libpmemobj/memops.c:709>:
            VALGRIND_ANNOTATE_NEW_MEMORY()
            VECQ_REINIT()
    operation_start() <void operation_start (struct operation_context *ctx) at libpmemobj/memops.c:736>:
        operation_init() <void operation_init (struct operation_context *ctx) at libpmemobj/memops.c:709>:
            VALGRIND_ANNOTATE_NEW_MEMORY()
            VECQ_REINIT()
        ASSERTeq()
    VEC_INIT()
    PMDK_SLIST_INIT()
    ravl_new_sized() <struct ravl *ravl_new_sized (ravl_compare *compare, size_t data_size) at core/ravl.c:45>:
        Malloc()
        ERR()
    tx_range_def_cmp() <int tx_range_def_cmp (const void *lhs, const void *rhs) at libpmemobj/tx.c:91>:
    FATAL()
    Malloc()
    memcpy()
    memset()
    PMDK_SLIST_INSERT_HEAD()
    va_start()
    va_arg()
    cb()
    add_to_tx_and_lock() <int add_to_tx_and_lock (struct tx *tx, enum pobj_tx_param type, void *lock) at libpmemobj/tx.c:475>:
        LOG()
        PMDK_SLIST_FOREACH()
        memcmp()
        Malloc()
        pmemobj_mutex_lock() <int pmemobj_mutex_lock (PMEMobjpool *pop, PMEMmutex *mutexp) at libpmemobj/sync.c:182>:
            LOG()
            ASSERTeq()
            pmemobj_pool_by_ptr() <PMEMobjpool *pmemobj_pool_by_ptr (const void *addr) at libpmemobj/obj.c:1631>:
                LOG()
                tx_get_pop() <PMEMobjpool *tx_get_pop (void) at libpmemobj/tx.c:466>:
                    get_tx() <struct tx *get_tx () at libpmemobj/tx.c:54>:
                OBJ_PTR_FROM_POOL()
                critnib_find_le() <void *critnib_find_le (struct critnib *c, uint64_t key) at libpmemobj/critnib.c:637>:
                    load() <void load (void *src, void *dst) at libpmemobj/critnib.c:130>:
                        util_atomic_load_explicit64()
                    find_le() <void *find_le (struct critnib_node *__restrict n, uint64_t key) at libpmemobj/critnib.c:568> (R):
                        is_leaf() <inline bool is_leaf (struct critnib_node *n) at libpmemobj/critnib.c:150>:
                        to_leaf() <inline struct critnib_leaf *to_leaf (struct critnib_node *n) at libpmemobj/critnib.c:159>:
                        find_successor() <void *find_successor (struct critnib_node *__restrict n) at libpmemobj/critnib.c:547>:
                            is_leaf() <inline bool is_leaf (struct critnib_node *n) at libpmemobj/critnib.c:150>:
                            to_leaf() <inline struct critnib_leaf *to_leaf (struct critnib_node *n) at libpmemobj/critnib.c:159>:
                        slice_index() <inline unsigned slice_index (uint64_t key, sh_t shift) at libpmemobj/critnib.c:178>:
                        load() <void load (void *src, void *dst) at libpmemobj/critnib.c:130>:
                            util_atomic_load_explicit64()
                        find_le() <void *find_le (struct critnib_node *__restrict n, uint64_t key) at libpmemobj/critnib.c:568> (recursive: see 31092)
            get_mutex() <inline os_mutex_t *get_mutex (PMEMobjpool *pop, PMEMmutex_internal *imp) at libpmemobj/sync.c:62>:
                likely()
                LOG()
                ASSERTeq()
                util_alignof()
                COMPILE_ERROR_ON()
                VALGRIND_REMOVE_PMEM_MAPPING()
                os_mutex_init() <int os_mutex_init (os_mutex_t *__restrict mutex) at core/os_thread_posix.c:71>:
                    COMPILE_ERROR_ON()
                    pthread_mutex_init()
                RECORD_LOCK()
            util_alignof()
            os_mutex_lock() <int os_mutex_lock (os_mutex_t *__restrict mutex) at core/os_thread_posix.c:90>:
                pthread_mutex_lock()
        ERR()
        pmemobj_rwlock_wrlock() <int pmemobj_rwlock_wrlock (PMEMobjpool *pop, PMEMrwlock *rwlockp) at libpmemobj/sync.c:348>:
            LOG()
            ASSERTeq()
            pmemobj_pool_by_ptr() <PMEMobjpool *pmemobj_pool_by_ptr (const void *addr) at libpmemobj/obj.c:1631>:
                LOG()
                tx_get_pop() <PMEMobjpool *tx_get_pop (void) at libpmemobj/tx.c:466>:
                    get_tx() <struct tx *get_tx () at libpmemobj/tx.c:54>:
                OBJ_PTR_FROM_POOL()
                critnib_find_le() <void *critnib_find_le (struct critnib *c, uint64_t key) at libpmemobj/critnib.c:637>:
                    load() <void load (void *src, void *dst) at libpmemobj/critnib.c:130>:
                        util_atomic_load_explicit64()
                    find_le() <void *find_le (struct critnib_node *__restrict n, uint64_t key) at libpmemobj/critnib.c:568> (R):
                        is_leaf() <inline bool is_leaf (struct critnib_node *n) at libpmemobj/critnib.c:150>:
                        to_leaf() <inline struct critnib_leaf *to_leaf (struct critnib_node *n) at libpmemobj/critnib.c:159>:
                        find_successor() <void *find_successor (struct critnib_node *__restrict n) at libpmemobj/critnib.c:547>:
                            is_leaf() <inline bool is_leaf (struct critnib_node *n) at libpmemobj/critnib.c:150>:
                            to_leaf() <inline struct critnib_leaf *to_leaf (struct critnib_node *n) at libpmemobj/critnib.c:159>:
                        slice_index() <inline unsigned slice_index (uint64_t key, sh_t shift) at libpmemobj/critnib.c:178>:
                        load() <void load (void *src, void *dst) at libpmemobj/critnib.c:130>:
                            util_atomic_load_explicit64()
                        find_le() <void *find_le (struct critnib_node *__restrict n, uint64_t key) at libpmemobj/critnib.c:568> (recursive: see 31128)
            get_rwlock() <inline os_rwlock_t *get_rwlock (PMEMobjpool *pop, PMEMrwlock_internal *irp) at libpmemobj/sync.c:94>:
                likely()
                LOG()
                ASSERTeq()
                util_alignof()
                COMPILE_ERROR_ON()
                VALGRIND_REMOVE_PMEM_MAPPING()
                os_rwlock_init() <int os_rwlock_init (os_rwlock_t *__restrict rwlock) at core/os_thread_posix.c:127>:
                    COMPILE_ERROR_ON()
                    pthread_rwlock_init()
                RECORD_LOCK()
            util_alignof()
            os_rwlock_wrlock() <int os_rwlock_wrlock (os_rwlock_t *__restrict rwlock) at core/os_thread_posix.c:155>:
                pthread_rwlock_wrlock()
        ASSERT()
        PMDK_SLIST_INSERT_HEAD()
        Free() <Free_func Free at core/alloc.c:91>
    va_end()
    ASSERT()
    obj_tx_abort() <void obj_tx_abort (int errnum, int user) at libpmemobj/tx.c:914>:
        LOG()
        get_tx() <struct tx *get_tx () at libpmemobj/tx.c:54>:
        ASSERT_IN_TX()
        ASSERT_TX_STAGE_WORK()
        ASSERT()
        PMDK_SLIST_FIRST()
        PMDK_SLIST_NEXT()
        tx_abort() <void tx_abort (PMEMobjpool *pop, struct lane *lane) at libpmemobj/tx.c:447>:
            LOG()
            get_tx() <struct tx *get_tx () at libpmemobj/tx.c:54>:
            tx_abort_set() <void tx_abort_set (PMEMobjpool *pop, struct lane *lane) at libpmemobj/tx.c:391>:
                LOG()
                ulog_foreach_entry() <int ulog_foreach_entry (struct ulog *ulog, ulog_entry_cb cb, void *arg, const struct pmem_ops *ops) at libpmemobj/ulog.c:180>
                tx_undo_entry_apply() <int tx_undo_entry_apply (struct ulog_entry_base *e, void *arg, const struct pmem_ops *p_ops) at libpmemobj/tx.c:362>:
                    SUPPRESS_UNUSED()
                    ulog_entry_type() <ulog_operation_type ulog_entry_type (const struct ulog_entry_base *entry) at libpmemobj/ulog.c:59>:
                        ULOG_OPERATION_FROM_OFFSET()
                    tx_restore_range() <void tx_restore_range (PMEMobjpool *pop, struct tx *tx, struct ulog_entry_buf *range) at libpmemobj/tx.c:307>:
                        COMPILE_ERROR_ON()
                        PMDK_SLIST_INIT()
                        Malloc()
                        FATAL()
                        ulog_entry_offset() <uint64_t ulog_entry_offset (const struct ulog_entry_base *entry) at libpmemobj/ulog.c:68>:
                        OBJ_OFF_TO_PTR()
                        PMDK_SLIST_INSERT_HEAD()
                        PMDK_SLIST_FOREACH()
                        tx_remove_range() <void tx_remove_range (struct txr *tx_ranges, void *begin, void *end) at libpmemobj/tx.c:252>:
                            PMDK_SLIST_FIRST()
                            PMDK_SLIST_NEXT()
                            LOG()
                            Malloc()
                            FATAL()
                            PMDK_SLIST_INSERT_HEAD()
                            PMDK_SLIST_REMOVE()
                            Free() <Free_func Free at core/alloc.c:91>
                        ASSERT()
                        PMDK_SLIST_EMPTY()
                        PMDK_SLIST_FIRST()
                        PMDK_SLIST_REMOVE_HEAD()
                        pmemops_memcpy()
                        Free() <Free_func Free at core/alloc.c:91>
                    get_tx() <struct tx *get_tx () at libpmemobj/tx.c:54>:
                    ASSERT()
                pmemops_drain()
                operation_finish() <void operation_finish (struct operation_context *ctx, unsigned flags) at libpmemobj/memops.c:814>:
                    ASSERTne()
                    out() <void out (const char *fmt, ...) at core/out.c:480>:
                        va_start()
                        out_common() <} void out_common (const char *file, int line, const char *func, int level, const char *suffix, const char *fmt, va_list ap) at core/out.c:334>
                        va_end()
                    ulog_clobber_data() <int ulog_clobber_data (struct ulog *ulog_first, struct ulog_next *next, ulog_free_fn ulog_free, ulog_rm_user_buffer_fn user_buff_remove, const struct pmem_ops *p_ops, unsigned flags) at libpmemobj/ulog.c:713>:
                        ASSERTne()
                        ulog_inc_gen_num() <void ulog_inc_gen_num (struct ulog *ulog, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:605>:
                            VALGRIND_ADD_TO_TX()
                            pmemops_persist()
                            VALGRIND_SET_CLEAN()
                            VALGRIND_REMOVE_FROM_TX()
                        VEC_SIZE()
                        VEC_GET()
                        ulog_by_offset() <struct ulog *ulog_by_offset (size_t offset, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:36>:
                            CACHELINE_ALIGN()
                        ulog_free_next() <int ulog_free_next (struct ulog *u, const struct pmem_ops *p_ops, ulog_free_fn ulog_free, ulog_rm_user_buffer_fn user_buff_remove, uint64_t flags) at libpmemobj/ulog.c:625>:
                            VEC()
                            VEC_INIT()
                            ulog_by_offset() <struct ulog *ulog_by_offset (size_t offset, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:36>:
                                CACHELINE_ALIGN()
                            pmemops_persist()
                            VEC_PUSH_BACK()
                            LOG()
                            out() <void out (const char *fmt, ...) at core/out.c:480>:
                                va_start()
                                out_common() <} void out_common (const char *file, int line, const char *func, int level, const char *suffix, const char *fmt, va_list ap) at core/out.c:334>
                                va_end()
                            VEC_FOREACH_REVERSE()
                            VEC_DELETE()
                    operation_user_buffer_remove() <int operation_user_buffer_remove (void *base, void *addr) at libpmemobj/memops.c:242>:
                        util_mutex_lock()
                        ravl_find() <struct ravl_node *ravl_find (struct ravl *ravl, const void *data, enum ravl_predicate flags) at core/ravl.c:524>:
                            LOG()
                            ravl_data() <void *ravl_data (struct ravl_node *node) at core/ravl.c:571>:
                                memcpy()
                            ravl_predicate_holds() <int ravl_predicate_holds (int result, struct ravl_node **ret, struct ravl_node *n, enum ravl_predicate flags) at core/ravl.c:489>:
                                ravl_node_successor() <struct ravl_node *ravl_node_successor (struct ravl_node *n) at core/ravl.c:465>:
                                    ravl_node_cessor() <struct ravl_node *ravl_node_cessor (struct ravl_node *n, enum ravl_slot_type t) at core/ravl.c:443>:
                                        ravl_node_type_most() <struct ravl_node *ravl_node_type_most (struct ravl_node *n, enum ravl_slot_type t) at core/ravl.c:430>:
                                        ravl_slot_opposite() <enum ravl_slot_type ravl_slot_opposite (enum ravl_slot_type t) at core/ravl.c:184>:
                                            ASSERTne()
                                ravl_node_predecessor() <struct ravl_node *ravl_node_predecessor (struct ravl_node *n) at core/ravl.c:476>:
                                    ravl_node_cessor() <struct ravl_node *ravl_node_cessor (struct ravl_node *n, enum ravl_slot_type t) at core/ravl.c:443>:
                                        ravl_node_type_most() <struct ravl_node *ravl_node_type_most (struct ravl_node *n, enum ravl_slot_type t) at core/ravl.c:430>:
                                        ravl_slot_opposite() <enum ravl_slot_type ravl_slot_opposite (enum ravl_slot_type t) at core/ravl.c:184>:
                                            ASSERTne()
                        ASSERTne()
                        ravl_remove() <void ravl_remove (struct ravl *ravl, struct ravl_node *n) at core/ravl.c:545> (R):
                            LOG()
                            ravl_node_successor() <struct ravl_node *ravl_node_successor (struct ravl_node *n) at core/ravl.c:465>:
                                ravl_node_cessor() <struct ravl_node *ravl_node_cessor (struct ravl_node *n, enum ravl_slot_type t) at core/ravl.c:443>:
                                    ravl_node_type_most() <struct ravl_node *ravl_node_type_most (struct ravl_node *n, enum ravl_slot_type t) at core/ravl.c:430>:
                                    ravl_slot_opposite() <enum ravl_slot_type ravl_slot_opposite (enum ravl_slot_type t) at core/ravl.c:184>:
                                        ASSERTne()
                            memcpy()
                            ravl_remove() <void ravl_remove (struct ravl *ravl, struct ravl_node *n) at core/ravl.c:545> (recursive: see 31251)
                            ravl_node_ref() <struct ravl_node **ravl_node_ref (struct ravl *ravl, struct ravl_node *n) at core/ravl.c:223>:
                                ravl_node_slot_type() <enum ravl_slot_type ravl_node_slot_type (struct ravl_node *n) at core/ravl.c:196>:
                            Free() <Free_func Free at core/alloc.c:91>
                        util_mutex_unlock()
                    ulog_free_next() <int ulog_free_next (struct ulog *u, const struct pmem_ops *p_ops, ulog_free_fn ulog_free, ulog_rm_user_buffer_fn user_buff_remove, uint64_t flags) at libpmemobj/ulog.c:625>:
                        VEC()
                        VEC_INIT()
                        ulog_by_offset() <struct ulog *ulog_by_offset (size_t offset, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:36>:
                            CACHELINE_ALIGN()
                        pmemops_persist()
                        VEC_PUSH_BACK()
                        LOG()
                        out() <void out (const char *fmt, ...) at core/out.c:480>:
                            va_start()
                            out_common() <} void out_common (const char *file, int line, const char *func, int level, const char *suffix, const char *fmt, va_list ap) at core/out.c:334>
                            va_end()
                        VEC_FOREACH_REVERSE()
                        VEC_DELETE()
                    ulog_capacity() <size_t ulog_capacity (struct ulog *ulog, size_t ulog_base_bytes, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:206>:
                        ulog_next() <struct ulog *ulog_next (struct ulog *ulog, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:50>:
                            ulog_by_offset() <struct ulog *ulog_by_offset (size_t offset, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:36>:
                                CACHELINE_ALIGN()
                    VEC_CLEAR()
                    ulog_rebuild_next_vec() <void ulog_rebuild_next_vec (struct ulog *ulog, struct ulog_next *next, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:223>:
                        VEC_PUSH_BACK()
                        ulog_next() <struct ulog *ulog_next (struct ulog *ulog, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:50>:
                            ulog_by_offset() <struct ulog *ulog_by_offset (size_t offset, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:36>:
                                CACHELINE_ALIGN()
            ravl_delete_cb() <void ravl_delete_cb (struct ravl *ravl, ravl_cb cb, void *arg) at core/ravl.c:102>:
                ravl_foreach_node() <void ravl_foreach_node (struct ravl_node *n, ravl_cb cb, void *arg, int free_node) at core/ravl.c:74> (R):
                    ravl_foreach_node() <void ravl_foreach_node (struct ravl_node *n, ravl_cb cb, void *arg, int free_node) at core/ravl.c:74> (recursive: see 31289)
                    Free() <Free_func Free at core/alloc.c:91>
                Free() <Free_func Free at core/alloc.c:91>
            tx_clean_range() <void tx_clean_range (void *data, void *ctx) at libpmemobj/tx.c:421>:
                VALGRIND_REMOVE_FROM_TX()
                OBJ_OFF_TO_PTR()
                VALGRIND_SET_CLEAN()
            palloc_cancel() <void palloc_cancel (struct palloc_heap *heap, struct pobj_action *actv, size_t actvcnt) at libpmemobj/palloc.c:648>:
            VEC_ARR()
            VEC_SIZE()
        lane_release() <void lane_release (PMEMobjpool *pop) at libpmemobj/lane.c:546>:
            get_lane_info_record() <inline struct lane_info *get_lane_info_record (PMEMobjpool *pop) at libpmemobj/lane.c:466>:
                likely()
                unlikely()
                lane_info_ht_boot() <inline void lane_info_ht_boot (void) at libpmemobj/lane.c:74>:
                    lane_info_create() <inline void lane_info_create (void) at libpmemobj/lane.c:39>:
                        critnib_new() <struct critnib *critnib_new (void) at libpmemobj/critnib.c:187>:
                            Zalloc() <void *Zalloc (size_t sz) at core/alloc.c:98>:
                                Malloc()
                                memset()
                            util_mutex_init()
                            VALGRIND_HG_DRD_DISABLE_CHECKING()
                        FATAL()
                    os_tls_set() <int os_tls_set (os_tls_key_t key, const void *value) at core/os_thread_posix.c:53>:
                        pthread_setspecific()
                    FATAL()
                critnib_get() <void *critnib_get (struct critnib *c, uint64_t key) at libpmemobj/critnib.c:515>:
                    load() <void load (void *src, void *dst) at libpmemobj/critnib.c:130>:
                        util_atomic_load_explicit64()
                    is_leaf() <inline bool is_leaf (struct critnib_node *n) at libpmemobj/critnib.c:150>:
                    slice_index() <inline unsigned slice_index (uint64_t key, sh_t shift) at libpmemobj/critnib.c:178>:
                    to_leaf() <inline struct critnib_leaf *to_leaf (struct critnib_node *n) at libpmemobj/critnib.c:159>:
                Malloc()
                FATAL()
                critnib_insert() <int critnib_insert (struct critnib *c, uint64_t key, void *value) at libpmemobj/critnib.c:340>:
                    util_mutex_lock()
                    alloc_leaf() <struct critnib_leaf *alloc_leaf (struct critnib *__restrict c) at libpmemobj/critnib.c:311>:
                        Malloc()
                        ERR()
                        VALGRIND_ANNOTATE_NEW_MEMORY()
                    util_mutex_unlock()
                    VALGRIND_HG_DRD_DISABLE_CHECKING()
                    is_leaf() <inline bool is_leaf (struct critnib_node *n) at libpmemobj/critnib.c:150>:
                    path_mask() <inline uint64_t path_mask (sh_t shift) at libpmemobj/critnib.c:169>:
                    slice_index() <inline unsigned slice_index (uint64_t key, sh_t shift) at libpmemobj/critnib.c:178>:
                    store() <void store (void *dst, void *src) at libpmemobj/critnib.c:140>:
                        util_atomic_store_explicit64()
                    to_leaf() <inline struct critnib_leaf *to_leaf (struct critnib_node *n) at libpmemobj/critnib.c:159>:
                    ASSERT()
                    free_leaf() <void free_leaf (struct critnib *__restrict c, struct critnib_leaf *__restrict k) at libpmemobj/critnib.c:298>
                    util_mssb_index64()
                    alloc_node() <struct critnib_node *alloc_node (struct critnib *__restrict c) at libpmemobj/critnib.c:274>:
                        Malloc()
                        ERR()
                        VALGRIND_ANNOTATE_NEW_MEMORY()
            ASSERTne()
            unlikely()
            FATAL()
            util_bool_compare_and_swap64()
        ERR()
        obj_tx_callback() <void obj_tx_callback (struct tx *tx) at libpmemobj/tx.c:887>:
            PMDK_SLIST_FIRST()
            PMDK_SLIST_NEXT()
        util_is_zeroed() <int util_is_zeroed (const void *addr, size_t len) at core/util.c:113>:
            memcmp()
        longjmp()
pmemobj_tx_commit() <void pmemobj_tx_commit (void) at libpmemobj/tx.c:986>:
    LOG()
    PMEMOBJ_API_START()
    get_tx() <struct tx *get_tx () at libpmemobj/tx.c:54>:
    ASSERT_IN_TX()
    ASSERT_TX_STAGE_WORK()
    obj_tx_callback() <void obj_tx_callback (struct tx *tx) at libpmemobj/tx.c:887>:
        PMDK_SLIST_FIRST()
        PMDK_SLIST_NEXT()
    ASSERT()
    PMDK_SLIST_FIRST()
    PMDK_SLIST_NEXT()
    tx_pre_commit() <void tx_pre_commit (struct tx *tx) at libpmemobj/tx.c:434>:
        LOG()
        ravl_delete_cb() <void ravl_delete_cb (struct ravl *ravl, ravl_cb cb, void *arg) at core/ravl.c:102>:
            ravl_foreach_node() <void ravl_foreach_node (struct ravl_node *n, ravl_cb cb, void *arg, int free_node) at core/ravl.c:74> (R):
                ravl_foreach_node() <void ravl_foreach_node (struct ravl_node *n, ravl_cb cb, void *arg, int free_node) at core/ravl.c:74> (recursive: see 31371)
                Free() <Free_func Free at core/alloc.c:91>
            Free() <Free_func Free at core/alloc.c:91>
        tx_flush_range() <void tx_flush_range (void *data, void *ctx) at libpmemobj/tx.c:405>:
            pmemops_xflush()
            OBJ_OFF_TO_PTR()
            VALGRIND_REMOVE_FROM_TX()
    pmemops_drain()
    operation_start() <void operation_start (struct operation_context *ctx) at libpmemobj/memops.c:736>:
        operation_init() <void operation_init (struct operation_context *ctx) at libpmemobj/memops.c:709>:
            VALGRIND_ANNOTATE_NEW_MEMORY()
            VECQ_REINIT()
        ASSERTeq()
    VEC_FOREACH_BY_PTR()
    operation_add_user_buffer() <void operation_add_user_buffer (struct operation_context *ctx, struct user_buffer_def *userbuf) at libpmemobj/memops.c:594>:
        OBJ_PTR_TO_OFF()
        ulog_construct() <void ulog_construct (uint64_t offset, size_t capacity, uint64_t gen_num, int flush, uint64_t flags, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:136>:
            ulog_by_offset() <struct ulog *ulog_by_offset (size_t offset, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:36>:
                CACHELINE_ALIGN()
            ASSERTne()
            OBJ_PTR_TO_OFF()
            ALIGN_DOWN()
            VALGRIND_ADD_TO_TX()
            SIZEOF_ULOG()
            memset()
            CACHELINE_ALIGN()
            pmemops_xflush()
            pmemops_memset()
            VALGRIND_REMOVE_FROM_TX()
        VEC_SIZE()
        ulog_by_offset() <struct ulog *ulog_by_offset (size_t offset, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:36>:
            CACHELINE_ALIGN()
        VEC_BACK()
        ASSERTne()
        VALGRIND_ADD_TO_TX()
        pmemops_persist()
        VEC_PUSH_BACK()
        operation_set_any_user_buffer() <void operation_set_any_user_buffer (struct operation_context *ctx, int any_user_buffer) at libpmemobj/memops.c:635>
    palloc_publish() <void palloc_publish (struct palloc_heap *heap, struct pobj_action *actv, size_t actvcnt, struct operation_context *ctx) at libpmemobj/palloc.c:662>:
        palloc_exec_actions() <void palloc_exec_actions (struct palloc_heap *heap, struct operation_context *ctx, struct pobj_action_internal *actv, size_t actvcnt) at libpmemobj/palloc.c:526>:
            qsort()
            palloc_action_compare() <int palloc_action_compare (const void *lhs, const void *rhs) at libpmemobj/palloc.c:507>:
            ASSERTeq()
            util_mutex_lock()
            pmemops_drain()
            operation_process() <void operation_process (struct operation_context *ctx) at libpmemobj/memops.c:776>:
                ulog_entry_type() <ulog_operation_type ulog_entry_type (const struct ulog_entry_base *entry) at libpmemobj/ulog.c:59>:
                    ULOG_OPERATION_FROM_OFFSET()
                ulog_entry_apply() <void ulog_entry_apply (const struct ulog_entry_base *e, int persist, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:526>:
                    ulog_entry_type() <ulog_operation_type ulog_entry_type (const struct ulog_entry_base *entry) at libpmemobj/ulog.c:59>:
                        ULOG_OPERATION_FROM_OFFSET()
                    ulog_entry_offset() <uint64_t ulog_entry_offset (const struct ulog_entry_base *entry) at libpmemobj/ulog.c:68>:
                    f()
                    VALGRIND_ADD_TO_TX()
                    pmemops_memset()
                    pmemops_memcpy()
                    ASSERT()
                    VALGRIND_REMOVE_FROM_TX()
                operation_process_persistent_redo() <void operation_process_persistent_redo (struct operation_context *ctx) at libpmemobj/memops.c:654>:
                    ASSERTeq()
                    ulog_store() <void ulog_store (struct ulog *dest, struct ulog *src, size_t nbytes, size_t ulog_base_nbytes, size_t ulog_total_capacity, struct ulog_next *next, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:288>:
                        MIN()
                        CACHELINE_ALIGN()
                        ASSERT()
                        ulog_by_offset() <struct ulog *ulog_by_offset (size_t offset, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:36>:
                            CACHELINE_ALIGN()
                        VEC_ARR()
                        ASSERTne()
                        IS_CACHELINE_ALIGNED()
                        VALGRIND_ADD_TO_TX()
                        pmemops_memcpy()
                        VALGRIND_REMOVE_FROM_TX()
                        pmemops_drain()
                        VEC_SIZE()
                        VEC_FRONT()
                        ulog_checksum() <int ulog_checksum (struct ulog *ulog, size_t ulog_base_bytes, int insert) at libpmemobj/ulog.c:275>:
                            util_checksum() <int util_checksum (void *addr, size_t len, uint64_t *csump, int insert, size_t skip_off) at core/util.c:178>:
                                util_checksum_compute() <uint64_t util_checksum_compute (void *addr, size_t len, uint64_t *csump, size_t skip_off) at core/util.c:134>:
                                    abort()
                                    le32toh()
                                htole64()
                            SIZEOF_ULOG()
                        SIZEOF_ULOG()
                    ulog_process() <void ulog_process (struct ulog *ulog, ulog_check_offset_fn check, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:786>:
                        SUPPRESS_UNUSED()
                        LOG()
                        ulog_check() <int ulog_check (struct ulog *ulog, ulog_check_offset_fn check, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:881>:
                            LOG()
                            ulog_foreach_entry() <int ulog_foreach_entry (struct ulog *ulog, ulog_entry_cb cb, void *arg, const struct pmem_ops *ops) at libpmemobj/ulog.c:180>
                            ulog_check_entry() <int ulog_check_entry (struct ulog_entry_base *e, void *arg, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:862>:
                                ulog_entry_offset() <uint64_t ulog_entry_offset (const struct ulog_entry_base *entry) at libpmemobj/ulog.c:68>:
                                check()
                                LOG()
                        ulog_foreach_entry() <int ulog_foreach_entry (struct ulog *ulog, ulog_entry_cb cb, void *arg, const struct pmem_ops *ops) at libpmemobj/ulog.c:180>
                        ulog_process_entry() <int ulog_process_entry (struct ulog_entry_base *e, void *arg, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:591>:
                            SUPPRESS_UNUSED()
                            ulog_entry_apply() <void ulog_entry_apply (const struct ulog_entry_base *e, int persist, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:526>:
                                ulog_entry_type() <ulog_operation_type ulog_entry_type (const struct ulog_entry_base *entry) at libpmemobj/ulog.c:59>:
                                    ULOG_OPERATION_FROM_OFFSET()
                                ulog_entry_offset() <uint64_t ulog_entry_offset (const struct ulog_entry_base *entry) at libpmemobj/ulog.c:68>:
                                f()
                                VALGRIND_ADD_TO_TX()
                                pmemops_memset()
                                pmemops_memcpy()
                                ASSERT()
                                VALGRIND_REMOVE_FROM_TX()
                        pmemops_drain()
                    ulog_clobber() <void ulog_clobber (struct ulog *dest, struct ulog_next *next, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:694>:
                        memset()
                        VEC_SIZE()
                        VEC_FRONT()
                        pmemops_memcpy()
                operation_process_persistent_undo() <void operation_process_persistent_undo (struct operation_context *ctx) at libpmemobj/memops.c:673>:
                    ASSERTeq()
                    ulog_process() <void ulog_process (struct ulog *ulog, ulog_check_offset_fn check, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:786>:
                        SUPPRESS_UNUSED()
                        LOG()
                        ulog_check() <int ulog_check (struct ulog *ulog, ulog_check_offset_fn check, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:881>:
                            LOG()
                            ulog_foreach_entry() <int ulog_foreach_entry (struct ulog *ulog, ulog_entry_cb cb, void *arg, const struct pmem_ops *ops) at libpmemobj/ulog.c:180>
                            ulog_check_entry() <int ulog_check_entry (struct ulog_entry_base *e, void *arg, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:862>:
                                ulog_entry_offset() <uint64_t ulog_entry_offset (const struct ulog_entry_base *entry) at libpmemobj/ulog.c:68>:
                                check()
                                LOG()
                        ulog_foreach_entry() <int ulog_foreach_entry (struct ulog *ulog, ulog_entry_cb cb, void *arg, const struct pmem_ops *ops) at libpmemobj/ulog.c:180>
                        ulog_process_entry() <int ulog_process_entry (struct ulog_entry_base *e, void *arg, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:591>:
                            SUPPRESS_UNUSED()
                            ulog_entry_apply() <void ulog_entry_apply (const struct ulog_entry_base *e, int persist, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:526>:
                                ulog_entry_type() <ulog_operation_type ulog_entry_type (const struct ulog_entry_base *entry) at libpmemobj/ulog.c:59>:
                                    ULOG_OPERATION_FROM_OFFSET()
                                ulog_entry_offset() <uint64_t ulog_entry_offset (const struct ulog_entry_base *entry) at libpmemobj/ulog.c:68>:
                                f()
                                VALGRIND_ADD_TO_TX()
                                pmemops_memset()
                                pmemops_memcpy()
                                ASSERT()
                                VALGRIND_REMOVE_FROM_TX()
                        pmemops_drain()
                ulog_process() <void ulog_process (struct ulog *ulog, ulog_check_offset_fn check, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:786>:
                    SUPPRESS_UNUSED()
                    LOG()
                    ulog_check() <int ulog_check (struct ulog *ulog, ulog_check_offset_fn check, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:881>:
                        LOG()
                        ulog_foreach_entry() <int ulog_foreach_entry (struct ulog *ulog, ulog_entry_cb cb, void *arg, const struct pmem_ops *ops) at libpmemobj/ulog.c:180>
                        ulog_check_entry() <int ulog_check_entry (struct ulog_entry_base *e, void *arg, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:862>:
                            ulog_entry_offset() <uint64_t ulog_entry_offset (const struct ulog_entry_base *entry) at libpmemobj/ulog.c:68>:
                            check()
                            LOG()
                    ulog_foreach_entry() <int ulog_foreach_entry (struct ulog *ulog, ulog_entry_cb cb, void *arg, const struct pmem_ops *ops) at libpmemobj/ulog.c:180>
                    ulog_process_entry() <int ulog_process_entry (struct ulog_entry_base *e, void *arg, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:591>:
                        SUPPRESS_UNUSED()
                        ulog_entry_apply() <void ulog_entry_apply (const struct ulog_entry_base *e, int persist, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:526>:
                            ulog_entry_type() <ulog_operation_type ulog_entry_type (const struct ulog_entry_base *entry) at libpmemobj/ulog.c:59>:
                                ULOG_OPERATION_FROM_OFFSET()
                            ulog_entry_offset() <uint64_t ulog_entry_offset (const struct ulog_entry_base *entry) at libpmemobj/ulog.c:68>:
                            f()
                            VALGRIND_ADD_TO_TX()
                            pmemops_memset()
                            pmemops_memcpy()
                            ASSERT()
                            VALGRIND_REMOVE_FROM_TX()
                    pmemops_drain()
            util_mutex_unlock()
            operation_finish() <void operation_finish (struct operation_context *ctx, unsigned flags) at libpmemobj/memops.c:814>:
                ASSERTne()
                out() <void out (const char *fmt, ...) at core/out.c:480>:
                    va_start()
                    out_common() <} void out_common (const char *file, int line, const char *func, int level, const char *suffix, const char *fmt, va_list ap) at core/out.c:334>
                    va_end()
                ulog_clobber_data() <int ulog_clobber_data (struct ulog *ulog_first, struct ulog_next *next, ulog_free_fn ulog_free, ulog_rm_user_buffer_fn user_buff_remove, const struct pmem_ops *p_ops, unsigned flags) at libpmemobj/ulog.c:713>:
                    ASSERTne()
                    ulog_inc_gen_num() <void ulog_inc_gen_num (struct ulog *ulog, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:605>:
                        VALGRIND_ADD_TO_TX()
                        pmemops_persist()
                        VALGRIND_SET_CLEAN()
                        VALGRIND_REMOVE_FROM_TX()
                    VEC_SIZE()
                    VEC_GET()
                    ulog_by_offset() <struct ulog *ulog_by_offset (size_t offset, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:36>:
                        CACHELINE_ALIGN()
                    ulog_free_next() <int ulog_free_next (struct ulog *u, const struct pmem_ops *p_ops, ulog_free_fn ulog_free, ulog_rm_user_buffer_fn user_buff_remove, uint64_t flags) at libpmemobj/ulog.c:625>:
                        VEC()
                        VEC_INIT()
                        ulog_by_offset() <struct ulog *ulog_by_offset (size_t offset, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:36>:
                            CACHELINE_ALIGN()
                        pmemops_persist()
                        VEC_PUSH_BACK()
                        LOG()
                        out() <void out (const char *fmt, ...) at core/out.c:480>:
                            va_start()
                            out_common() <} void out_common (const char *file, int line, const char *func, int level, const char *suffix, const char *fmt, va_list ap) at core/out.c:334>
                            va_end()
                        VEC_FOREACH_REVERSE()
                        VEC_DELETE()
                operation_user_buffer_remove() <int operation_user_buffer_remove (void *base, void *addr) at libpmemobj/memops.c:242>:
                    util_mutex_lock()
                    ravl_find() <struct ravl_node *ravl_find (struct ravl *ravl, const void *data, enum ravl_predicate flags) at core/ravl.c:524>:
                        LOG()
                        ravl_data() <void *ravl_data (struct ravl_node *node) at core/ravl.c:571>:
                            memcpy()
                        ravl_predicate_holds() <int ravl_predicate_holds (int result, struct ravl_node **ret, struct ravl_node *n, enum ravl_predicate flags) at core/ravl.c:489>:
                            ravl_node_successor() <struct ravl_node *ravl_node_successor (struct ravl_node *n) at core/ravl.c:465>:
                                ravl_node_cessor() <struct ravl_node *ravl_node_cessor (struct ravl_node *n, enum ravl_slot_type t) at core/ravl.c:443>:
                                    ravl_node_type_most() <struct ravl_node *ravl_node_type_most (struct ravl_node *n, enum ravl_slot_type t) at core/ravl.c:430>:
                                    ravl_slot_opposite() <enum ravl_slot_type ravl_slot_opposite (enum ravl_slot_type t) at core/ravl.c:184>:
                                        ASSERTne()
                            ravl_node_predecessor() <struct ravl_node *ravl_node_predecessor (struct ravl_node *n) at core/ravl.c:476>:
                                ravl_node_cessor() <struct ravl_node *ravl_node_cessor (struct ravl_node *n, enum ravl_slot_type t) at core/ravl.c:443>:
                                    ravl_node_type_most() <struct ravl_node *ravl_node_type_most (struct ravl_node *n, enum ravl_slot_type t) at core/ravl.c:430>:
                                    ravl_slot_opposite() <enum ravl_slot_type ravl_slot_opposite (enum ravl_slot_type t) at core/ravl.c:184>:
                                        ASSERTne()
                    ASSERTne()
                    ravl_remove() <void ravl_remove (struct ravl *ravl, struct ravl_node *n) at core/ravl.c:545> (R):
                        LOG()
                        ravl_node_successor() <struct ravl_node *ravl_node_successor (struct ravl_node *n) at core/ravl.c:465>:
                            ravl_node_cessor() <struct ravl_node *ravl_node_cessor (struct ravl_node *n, enum ravl_slot_type t) at core/ravl.c:443>:
                                ravl_node_type_most() <struct ravl_node *ravl_node_type_most (struct ravl_node *n, enum ravl_slot_type t) at core/ravl.c:430>:
                                ravl_slot_opposite() <enum ravl_slot_type ravl_slot_opposite (enum ravl_slot_type t) at core/ravl.c:184>:
                                    ASSERTne()
                        memcpy()
                        ravl_remove() <void ravl_remove (struct ravl *ravl, struct ravl_node *n) at core/ravl.c:545> (recursive: see 31584)
                        ravl_node_ref() <struct ravl_node **ravl_node_ref (struct ravl *ravl, struct ravl_node *n) at core/ravl.c:223>:
                            ravl_node_slot_type() <enum ravl_slot_type ravl_node_slot_type (struct ravl_node *n) at core/ravl.c:196>:
                        Free() <Free_func Free at core/alloc.c:91>
                    util_mutex_unlock()
                ulog_free_next() <int ulog_free_next (struct ulog *u, const struct pmem_ops *p_ops, ulog_free_fn ulog_free, ulog_rm_user_buffer_fn user_buff_remove, uint64_t flags) at libpmemobj/ulog.c:625>:
                    VEC()
                    VEC_INIT()
                    ulog_by_offset() <struct ulog *ulog_by_offset (size_t offset, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:36>:
                        CACHELINE_ALIGN()
                    pmemops_persist()
                    VEC_PUSH_BACK()
                    LOG()
                    out() <void out (const char *fmt, ...) at core/out.c:480>:
                        va_start()
                        out_common() <} void out_common (const char *file, int line, const char *func, int level, const char *suffix, const char *fmt, va_list ap) at core/out.c:334>
                        va_end()
                    VEC_FOREACH_REVERSE()
                    VEC_DELETE()
                ulog_capacity() <size_t ulog_capacity (struct ulog *ulog, size_t ulog_base_bytes, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:206>:
                    ulog_next() <struct ulog *ulog_next (struct ulog *ulog, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:50>:
                        ulog_by_offset() <struct ulog *ulog_by_offset (size_t offset, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:36>:
                            CACHELINE_ALIGN()
                VEC_CLEAR()
                ulog_rebuild_next_vec() <void ulog_rebuild_next_vec (struct ulog *ulog, struct ulog_next *next, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:223>:
                    VEC_PUSH_BACK()
                    ulog_next() <struct ulog *ulog_next (struct ulog *ulog, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:50>:
                        ulog_by_offset() <struct ulog *ulog_by_offset (size_t offset, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:36>:
                            CACHELINE_ALIGN()
    VEC_ARR()
    VEC_SIZE()
    tx_post_commit() <void tx_post_commit (struct tx *tx) at libpmemobj/tx.c:977>:
        operation_finish() <void operation_finish (struct operation_context *ctx, unsigned flags) at libpmemobj/memops.c:814>:
            ASSERTne()
            out() <void out (const char *fmt, ...) at core/out.c:480>:
                va_start()
                out_common() <} void out_common (const char *file, int line, const char *func, int level, const char *suffix, const char *fmt, va_list ap) at core/out.c:334>
                va_end()
            ulog_clobber_data() <int ulog_clobber_data (struct ulog *ulog_first, struct ulog_next *next, ulog_free_fn ulog_free, ulog_rm_user_buffer_fn user_buff_remove, const struct pmem_ops *p_ops, unsigned flags) at libpmemobj/ulog.c:713>:
                ASSERTne()
                ulog_inc_gen_num() <void ulog_inc_gen_num (struct ulog *ulog, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:605>:
                    VALGRIND_ADD_TO_TX()
                    pmemops_persist()
                    VALGRIND_SET_CLEAN()
                    VALGRIND_REMOVE_FROM_TX()
                VEC_SIZE()
                VEC_GET()
                ulog_by_offset() <struct ulog *ulog_by_offset (size_t offset, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:36>:
                    CACHELINE_ALIGN()
                ulog_free_next() <int ulog_free_next (struct ulog *u, const struct pmem_ops *p_ops, ulog_free_fn ulog_free, ulog_rm_user_buffer_fn user_buff_remove, uint64_t flags) at libpmemobj/ulog.c:625>:
                    VEC()
                    VEC_INIT()
                    ulog_by_offset() <struct ulog *ulog_by_offset (size_t offset, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:36>:
                        CACHELINE_ALIGN()
                    pmemops_persist()
                    VEC_PUSH_BACK()
                    LOG()
                    out() <void out (const char *fmt, ...) at core/out.c:480>:
                        va_start()
                        out_common() <} void out_common (const char *file, int line, const char *func, int level, const char *suffix, const char *fmt, va_list ap) at core/out.c:334>
                        va_end()
                    VEC_FOREACH_REVERSE()
                    VEC_DELETE()
            operation_user_buffer_remove() <int operation_user_buffer_remove (void *base, void *addr) at libpmemobj/memops.c:242>:
                util_mutex_lock()
                ravl_find() <struct ravl_node *ravl_find (struct ravl *ravl, const void *data, enum ravl_predicate flags) at core/ravl.c:524>:
                    LOG()
                    ravl_data() <void *ravl_data (struct ravl_node *node) at core/ravl.c:571>:
                        memcpy()
                    ravl_predicate_holds() <int ravl_predicate_holds (int result, struct ravl_node **ret, struct ravl_node *n, enum ravl_predicate flags) at core/ravl.c:489>:
                        ravl_node_successor() <struct ravl_node *ravl_node_successor (struct ravl_node *n) at core/ravl.c:465>:
                            ravl_node_cessor() <struct ravl_node *ravl_node_cessor (struct ravl_node *n, enum ravl_slot_type t) at core/ravl.c:443>:
                                ravl_node_type_most() <struct ravl_node *ravl_node_type_most (struct ravl_node *n, enum ravl_slot_type t) at core/ravl.c:430>:
                                ravl_slot_opposite() <enum ravl_slot_type ravl_slot_opposite (enum ravl_slot_type t) at core/ravl.c:184>:
                                    ASSERTne()
                        ravl_node_predecessor() <struct ravl_node *ravl_node_predecessor (struct ravl_node *n) at core/ravl.c:476>:
                            ravl_node_cessor() <struct ravl_node *ravl_node_cessor (struct ravl_node *n, enum ravl_slot_type t) at core/ravl.c:443>:
                                ravl_node_type_most() <struct ravl_node *ravl_node_type_most (struct ravl_node *n, enum ravl_slot_type t) at core/ravl.c:430>:
                                ravl_slot_opposite() <enum ravl_slot_type ravl_slot_opposite (enum ravl_slot_type t) at core/ravl.c:184>:
                                    ASSERTne()
                ASSERTne()
                ravl_remove() <void ravl_remove (struct ravl *ravl, struct ravl_node *n) at core/ravl.c:545> (R):
                    LOG()
                    ravl_node_successor() <struct ravl_node *ravl_node_successor (struct ravl_node *n) at core/ravl.c:465>:
                        ravl_node_cessor() <struct ravl_node *ravl_node_cessor (struct ravl_node *n, enum ravl_slot_type t) at core/ravl.c:443>:
                            ravl_node_type_most() <struct ravl_node *ravl_node_type_most (struct ravl_node *n, enum ravl_slot_type t) at core/ravl.c:430>:
                            ravl_slot_opposite() <enum ravl_slot_type ravl_slot_opposite (enum ravl_slot_type t) at core/ravl.c:184>:
                                ASSERTne()
                    memcpy()
                    ravl_remove() <void ravl_remove (struct ravl *ravl, struct ravl_node *n) at core/ravl.c:545> (recursive: see 31673)
                    ravl_node_ref() <struct ravl_node **ravl_node_ref (struct ravl *ravl, struct ravl_node *n) at core/ravl.c:223>:
                        ravl_node_slot_type() <enum ravl_slot_type ravl_node_slot_type (struct ravl_node *n) at core/ravl.c:196>:
                    Free() <Free_func Free at core/alloc.c:91>
                util_mutex_unlock()
            ulog_free_next() <int ulog_free_next (struct ulog *u, const struct pmem_ops *p_ops, ulog_free_fn ulog_free, ulog_rm_user_buffer_fn user_buff_remove, uint64_t flags) at libpmemobj/ulog.c:625>:
                VEC()
                VEC_INIT()
                ulog_by_offset() <struct ulog *ulog_by_offset (size_t offset, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:36>:
                    CACHELINE_ALIGN()
                pmemops_persist()
                VEC_PUSH_BACK()
                LOG()
                out() <void out (const char *fmt, ...) at core/out.c:480>:
                    va_start()
                    out_common() <} void out_common (const char *file, int line, const char *func, int level, const char *suffix, const char *fmt, va_list ap) at core/out.c:334>
                    va_end()
                VEC_FOREACH_REVERSE()
                VEC_DELETE()
            ulog_capacity() <size_t ulog_capacity (struct ulog *ulog, size_t ulog_base_bytes, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:206>:
                ulog_next() <struct ulog *ulog_next (struct ulog *ulog, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:50>:
                    ulog_by_offset() <struct ulog *ulog_by_offset (size_t offset, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:36>:
                        CACHELINE_ALIGN()
            VEC_CLEAR()
            ulog_rebuild_next_vec() <void ulog_rebuild_next_vec (struct ulog *ulog, struct ulog_next *next, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:223>:
                VEC_PUSH_BACK()
                ulog_next() <struct ulog *ulog_next (struct ulog *ulog, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:50>:
                    ulog_by_offset() <struct ulog *ulog_by_offset (size_t offset, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:36>:
                        CACHELINE_ALIGN()
    lane_release() <void lane_release (PMEMobjpool *pop) at libpmemobj/lane.c:546>:
        get_lane_info_record() <inline struct lane_info *get_lane_info_record (PMEMobjpool *pop) at libpmemobj/lane.c:466>:
            likely()
            unlikely()
            lane_info_ht_boot() <inline void lane_info_ht_boot (void) at libpmemobj/lane.c:74>:
                lane_info_create() <inline void lane_info_create (void) at libpmemobj/lane.c:39>:
                    critnib_new() <struct critnib *critnib_new (void) at libpmemobj/critnib.c:187>:
                        Zalloc() <void *Zalloc (size_t sz) at core/alloc.c:98>:
                            Malloc()
                            memset()
                        util_mutex_init()
                        VALGRIND_HG_DRD_DISABLE_CHECKING()
                    FATAL()
                os_tls_set() <int os_tls_set (os_tls_key_t key, const void *value) at core/os_thread_posix.c:53>:
                    pthread_setspecific()
                FATAL()
            critnib_get() <void *critnib_get (struct critnib *c, uint64_t key) at libpmemobj/critnib.c:515>:
                load() <void load (void *src, void *dst) at libpmemobj/critnib.c:130>:
                    util_atomic_load_explicit64()
                is_leaf() <inline bool is_leaf (struct critnib_node *n) at libpmemobj/critnib.c:150>:
                slice_index() <inline unsigned slice_index (uint64_t key, sh_t shift) at libpmemobj/critnib.c:178>:
                to_leaf() <inline struct critnib_leaf *to_leaf (struct critnib_node *n) at libpmemobj/critnib.c:159>:
            Malloc()
            FATAL()
            critnib_insert() <int critnib_insert (struct critnib *c, uint64_t key, void *value) at libpmemobj/critnib.c:340>:
                util_mutex_lock()
                alloc_leaf() <struct critnib_leaf *alloc_leaf (struct critnib *__restrict c) at libpmemobj/critnib.c:311>:
                    Malloc()
                    ERR()
                    VALGRIND_ANNOTATE_NEW_MEMORY()
                util_mutex_unlock()
                VALGRIND_HG_DRD_DISABLE_CHECKING()
                is_leaf() <inline bool is_leaf (struct critnib_node *n) at libpmemobj/critnib.c:150>:
                path_mask() <inline uint64_t path_mask (sh_t shift) at libpmemobj/critnib.c:169>:
                slice_index() <inline unsigned slice_index (uint64_t key, sh_t shift) at libpmemobj/critnib.c:178>:
                store() <void store (void *dst, void *src) at libpmemobj/critnib.c:140>:
                    util_atomic_store_explicit64()
                to_leaf() <inline struct critnib_leaf *to_leaf (struct critnib_node *n) at libpmemobj/critnib.c:159>:
                ASSERT()
                free_leaf() <void free_leaf (struct critnib *__restrict c, struct critnib_leaf *__restrict k) at libpmemobj/critnib.c:298>
                util_mssb_index64()
                alloc_node() <struct critnib_node *alloc_node (struct critnib *__restrict c) at libpmemobj/critnib.c:274>:
                    Malloc()
                    ERR()
                    VALGRIND_ANNOTATE_NEW_MEMORY()
        ASSERTne()
        unlikely()
        FATAL()
        util_bool_compare_and_swap64()
    PMEMOBJ_API_END()
pmemobj_tx_end() <int pmemobj_tx_end (void) at libpmemobj/tx.c:1040>:
    LOG()
    get_tx() <struct tx *get_tx () at libpmemobj/tx.c:54>:
    FATAL()
    obj_tx_callback() <void obj_tx_callback (struct tx *tx) at libpmemobj/tx.c:887>:
        PMDK_SLIST_FIRST()
        PMDK_SLIST_NEXT()
    PMDK_SLIST_FIRST()
    PMDK_SLIST_REMOVE_HEAD()
    Free() <Free_func Free at core/alloc.c:91>
    PMDK_SLIST_EMPTY()
    ASSERTeq()
    release_and_free_tx_locks() <void release_and_free_tx_locks (struct tx *tx) at libpmemobj/tx.c:532>:
        LOG()
        PMDK_SLIST_EMPTY()
        PMDK_SLIST_FIRST()
        PMDK_SLIST_REMOVE_HEAD()
        pmemobj_mutex_unlock() <int pmemobj_mutex_unlock (PMEMobjpool *pop, PMEMmutex *mutexp) at libpmemobj/sync.c:283>:
            LOG()
            ASSERTeq()
            pmemobj_pool_by_ptr() <PMEMobjpool *pmemobj_pool_by_ptr (const void *addr) at libpmemobj/obj.c:1631>:
                LOG()
                tx_get_pop() <PMEMobjpool *tx_get_pop (void) at libpmemobj/tx.c:466>:
                    get_tx() <struct tx *get_tx () at libpmemobj/tx.c:54>:
                OBJ_PTR_FROM_POOL()
                critnib_find_le() <void *critnib_find_le (struct critnib *c, uint64_t key) at libpmemobj/critnib.c:637>:
                    load() <void load (void *src, void *dst) at libpmemobj/critnib.c:130>:
                        util_atomic_load_explicit64()
                    find_le() <void *find_le (struct critnib_node *__restrict n, uint64_t key) at libpmemobj/critnib.c:568> (R):
                        is_leaf() <inline bool is_leaf (struct critnib_node *n) at libpmemobj/critnib.c:150>:
                        to_leaf() <inline struct critnib_leaf *to_leaf (struct critnib_node *n) at libpmemobj/critnib.c:159>:
                        find_successor() <void *find_successor (struct critnib_node *__restrict n) at libpmemobj/critnib.c:547>:
                            is_leaf() <inline bool is_leaf (struct critnib_node *n) at libpmemobj/critnib.c:150>:
                            to_leaf() <inline struct critnib_leaf *to_leaf (struct critnib_node *n) at libpmemobj/critnib.c:159>:
                        slice_index() <inline unsigned slice_index (uint64_t key, sh_t shift) at libpmemobj/critnib.c:178>:
                        load() <void load (void *src, void *dst) at libpmemobj/critnib.c:130>:
                            util_atomic_load_explicit64()
                        find_le() <void *find_le (struct critnib_node *__restrict n, uint64_t key) at libpmemobj/critnib.c:568> (recursive: see 31788)
            get_mutex() <inline os_mutex_t *get_mutex (PMEMobjpool *pop, PMEMmutex_internal *imp) at libpmemobj/sync.c:62>:
                likely()
                LOG()
                ASSERTeq()
                util_alignof()
                COMPILE_ERROR_ON()
                VALGRIND_REMOVE_PMEM_MAPPING()
                os_mutex_init() <int os_mutex_init (os_mutex_t *__restrict mutex) at core/os_thread_posix.c:71>:
                    COMPILE_ERROR_ON()
                    pthread_mutex_init()
                RECORD_LOCK()
            util_alignof()
            os_mutex_unlock() <int os_mutex_unlock (os_mutex_t *__restrict mutex) at core/os_thread_posix.c:108>:
                pthread_mutex_unlock()
        pmemobj_rwlock_unlock() <int pmemobj_rwlock_unlock (PMEMobjpool *pop, PMEMrwlock *rwlockp) at libpmemobj/sync.c:464>:
            LOG()
            ASSERTeq()
            pmemobj_pool_by_ptr() <PMEMobjpool *pmemobj_pool_by_ptr (const void *addr) at libpmemobj/obj.c:1631>:
                LOG()
                tx_get_pop() <PMEMobjpool *tx_get_pop (void) at libpmemobj/tx.c:466>:
                    get_tx() <struct tx *get_tx () at libpmemobj/tx.c:54>:
                OBJ_PTR_FROM_POOL()
                critnib_find_le() <void *critnib_find_le (struct critnib *c, uint64_t key) at libpmemobj/critnib.c:637>:
                    load() <void load (void *src, void *dst) at libpmemobj/critnib.c:130>:
                        util_atomic_load_explicit64()
                    find_le() <void *find_le (struct critnib_node *__restrict n, uint64_t key) at libpmemobj/critnib.c:568> (R):
                        is_leaf() <inline bool is_leaf (struct critnib_node *n) at libpmemobj/critnib.c:150>:
                        to_leaf() <inline struct critnib_leaf *to_leaf (struct critnib_node *n) at libpmemobj/critnib.c:159>:
                        find_successor() <void *find_successor (struct critnib_node *__restrict n) at libpmemobj/critnib.c:547>:
                            is_leaf() <inline bool is_leaf (struct critnib_node *n) at libpmemobj/critnib.c:150>:
                            to_leaf() <inline struct critnib_leaf *to_leaf (struct critnib_node *n) at libpmemobj/critnib.c:159>:
                        slice_index() <inline unsigned slice_index (uint64_t key, sh_t shift) at libpmemobj/critnib.c:178>:
                        load() <void load (void *src, void *dst) at libpmemobj/critnib.c:130>:
                            util_atomic_load_explicit64()
                        find_le() <void *find_le (struct critnib_node *__restrict n, uint64_t key) at libpmemobj/critnib.c:568> (recursive: see 31823)
            get_rwlock() <inline os_rwlock_t *get_rwlock (PMEMobjpool *pop, PMEMrwlock_internal *irp) at libpmemobj/sync.c:94>:
                likely()
                LOG()
                ASSERTeq()
                util_alignof()
                COMPILE_ERROR_ON()
                VALGRIND_REMOVE_PMEM_MAPPING()
                os_rwlock_init() <int os_rwlock_init (os_rwlock_t *__restrict rwlock) at core/os_thread_posix.c:127>:
                    COMPILE_ERROR_ON()
                    pthread_rwlock_init()
                RECORD_LOCK()
            util_alignof()
            os_rwlock_unlock() <int os_rwlock_unlock (os_rwlock_t *__restrict rwlock) at core/os_thread_posix.c:164>:
                pthread_rwlock_unlock()
        ERR()
        ASSERT()
        Free() <Free_func Free at core/alloc.c:91>
    VEC_DELETE()
    cb()
    obj_tx_abort() <void obj_tx_abort (int errnum, int user) at libpmemobj/tx.c:914>:
        LOG()
        get_tx() <struct tx *get_tx () at libpmemobj/tx.c:54>:
        ASSERT_IN_TX()
        ASSERT_TX_STAGE_WORK()
        ASSERT()
        PMDK_SLIST_FIRST()
        PMDK_SLIST_NEXT()
        tx_abort() <void tx_abort (PMEMobjpool *pop, struct lane *lane) at libpmemobj/tx.c:447>:
            LOG()
            get_tx() <struct tx *get_tx () at libpmemobj/tx.c:54>:
            tx_abort_set() <void tx_abort_set (PMEMobjpool *pop, struct lane *lane) at libpmemobj/tx.c:391>:
                LOG()
                ulog_foreach_entry() <int ulog_foreach_entry (struct ulog *ulog, ulog_entry_cb cb, void *arg, const struct pmem_ops *ops) at libpmemobj/ulog.c:180>
                tx_undo_entry_apply() <int tx_undo_entry_apply (struct ulog_entry_base *e, void *arg, const struct pmem_ops *p_ops) at libpmemobj/tx.c:362>:
                    SUPPRESS_UNUSED()
                    ulog_entry_type() <ulog_operation_type ulog_entry_type (const struct ulog_entry_base *entry) at libpmemobj/ulog.c:59>:
                        ULOG_OPERATION_FROM_OFFSET()
                    tx_restore_range() <void tx_restore_range (PMEMobjpool *pop, struct tx *tx, struct ulog_entry_buf *range) at libpmemobj/tx.c:307>:
                        COMPILE_ERROR_ON()
                        PMDK_SLIST_INIT()
                        Malloc()
                        FATAL()
                        ulog_entry_offset() <uint64_t ulog_entry_offset (const struct ulog_entry_base *entry) at libpmemobj/ulog.c:68>:
                        OBJ_OFF_TO_PTR()
                        PMDK_SLIST_INSERT_HEAD()
                        PMDK_SLIST_FOREACH()
                        tx_remove_range() <void tx_remove_range (struct txr *tx_ranges, void *begin, void *end) at libpmemobj/tx.c:252>:
                            PMDK_SLIST_FIRST()
                            PMDK_SLIST_NEXT()
                            LOG()
                            Malloc()
                            FATAL()
                            PMDK_SLIST_INSERT_HEAD()
                            PMDK_SLIST_REMOVE()
                            Free() <Free_func Free at core/alloc.c:91>
                        ASSERT()
                        PMDK_SLIST_EMPTY()
                        PMDK_SLIST_FIRST()
                        PMDK_SLIST_REMOVE_HEAD()
                        pmemops_memcpy()
                        Free() <Free_func Free at core/alloc.c:91>
                    get_tx() <struct tx *get_tx () at libpmemobj/tx.c:54>:
                    ASSERT()
                pmemops_drain()
                operation_finish() <void operation_finish (struct operation_context *ctx, unsigned flags) at libpmemobj/memops.c:814>:
                    ASSERTne()
                    out() <void out (const char *fmt, ...) at core/out.c:480>:
                        va_start()
                        out_common() <} void out_common (const char *file, int line, const char *func, int level, const char *suffix, const char *fmt, va_list ap) at core/out.c:334>
                        va_end()
                    ulog_clobber_data() <int ulog_clobber_data (struct ulog *ulog_first, struct ulog_next *next, ulog_free_fn ulog_free, ulog_rm_user_buffer_fn user_buff_remove, const struct pmem_ops *p_ops, unsigned flags) at libpmemobj/ulog.c:713>:
                        ASSERTne()
                        ulog_inc_gen_num() <void ulog_inc_gen_num (struct ulog *ulog, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:605>:
                            VALGRIND_ADD_TO_TX()
                            pmemops_persist()
                            VALGRIND_SET_CLEAN()
                            VALGRIND_REMOVE_FROM_TX()
                        VEC_SIZE()
                        VEC_GET()
                        ulog_by_offset() <struct ulog *ulog_by_offset (size_t offset, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:36>:
                            CACHELINE_ALIGN()
                        ulog_free_next() <int ulog_free_next (struct ulog *u, const struct pmem_ops *p_ops, ulog_free_fn ulog_free, ulog_rm_user_buffer_fn user_buff_remove, uint64_t flags) at libpmemobj/ulog.c:625>:
                            VEC()
                            VEC_INIT()
                            ulog_by_offset() <struct ulog *ulog_by_offset (size_t offset, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:36>:
                                CACHELINE_ALIGN()
                            pmemops_persist()
                            VEC_PUSH_BACK()
                            LOG()
                            out() <void out (const char *fmt, ...) at core/out.c:480>:
                                va_start()
                                out_common() <} void out_common (const char *file, int line, const char *func, int level, const char *suffix, const char *fmt, va_list ap) at core/out.c:334>
                                va_end()
                            VEC_FOREACH_REVERSE()
                            VEC_DELETE()
                    operation_user_buffer_remove() <int operation_user_buffer_remove (void *base, void *addr) at libpmemobj/memops.c:242>:
                        util_mutex_lock()
                        ravl_find() <struct ravl_node *ravl_find (struct ravl *ravl, const void *data, enum ravl_predicate flags) at core/ravl.c:524>:
                            LOG()
                            ravl_data() <void *ravl_data (struct ravl_node *node) at core/ravl.c:571>:
                                memcpy()
                            ravl_predicate_holds() <int ravl_predicate_holds (int result, struct ravl_node **ret, struct ravl_node *n, enum ravl_predicate flags) at core/ravl.c:489>:
                                ravl_node_successor() <struct ravl_node *ravl_node_successor (struct ravl_node *n) at core/ravl.c:465>:
                                    ravl_node_cessor() <struct ravl_node *ravl_node_cessor (struct ravl_node *n, enum ravl_slot_type t) at core/ravl.c:443>:
                                        ravl_node_type_most() <struct ravl_node *ravl_node_type_most (struct ravl_node *n, enum ravl_slot_type t) at core/ravl.c:430>:
                                        ravl_slot_opposite() <enum ravl_slot_type ravl_slot_opposite (enum ravl_slot_type t) at core/ravl.c:184>:
                                            ASSERTne()
                                ravl_node_predecessor() <struct ravl_node *ravl_node_predecessor (struct ravl_node *n) at core/ravl.c:476>:
                                    ravl_node_cessor() <struct ravl_node *ravl_node_cessor (struct ravl_node *n, enum ravl_slot_type t) at core/ravl.c:443>:
                                        ravl_node_type_most() <struct ravl_node *ravl_node_type_most (struct ravl_node *n, enum ravl_slot_type t) at core/ravl.c:430>:
                                        ravl_slot_opposite() <enum ravl_slot_type ravl_slot_opposite (enum ravl_slot_type t) at core/ravl.c:184>:
                                            ASSERTne()
                        ASSERTne()
                        ravl_remove() <void ravl_remove (struct ravl *ravl, struct ravl_node *n) at core/ravl.c:545> (R):
                            LOG()
                            ravl_node_successor() <struct ravl_node *ravl_node_successor (struct ravl_node *n) at core/ravl.c:465>:
                                ravl_node_cessor() <struct ravl_node *ravl_node_cessor (struct ravl_node *n, enum ravl_slot_type t) at core/ravl.c:443>:
                                    ravl_node_type_most() <struct ravl_node *ravl_node_type_most (struct ravl_node *n, enum ravl_slot_type t) at core/ravl.c:430>:
                                    ravl_slot_opposite() <enum ravl_slot_type ravl_slot_opposite (enum ravl_slot_type t) at core/ravl.c:184>:
                                        ASSERTne()
                            memcpy()
                            ravl_remove() <void ravl_remove (struct ravl *ravl, struct ravl_node *n) at core/ravl.c:545> (recursive: see 31946)
                            ravl_node_ref() <struct ravl_node **ravl_node_ref (struct ravl *ravl, struct ravl_node *n) at core/ravl.c:223>:
                                ravl_node_slot_type() <enum ravl_slot_type ravl_node_slot_type (struct ravl_node *n) at core/ravl.c:196>:
                            Free() <Free_func Free at core/alloc.c:91>
                        util_mutex_unlock()
                    ulog_free_next() <int ulog_free_next (struct ulog *u, const struct pmem_ops *p_ops, ulog_free_fn ulog_free, ulog_rm_user_buffer_fn user_buff_remove, uint64_t flags) at libpmemobj/ulog.c:625>:
                        VEC()
                        VEC_INIT()
                        ulog_by_offset() <struct ulog *ulog_by_offset (size_t offset, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:36>:
                            CACHELINE_ALIGN()
                        pmemops_persist()
                        VEC_PUSH_BACK()
                        LOG()
                        out() <void out (const char *fmt, ...) at core/out.c:480>:
                            va_start()
                            out_common() <} void out_common (const char *file, int line, const char *func, int level, const char *suffix, const char *fmt, va_list ap) at core/out.c:334>
                            va_end()
                        VEC_FOREACH_REVERSE()
                        VEC_DELETE()
                    ulog_capacity() <size_t ulog_capacity (struct ulog *ulog, size_t ulog_base_bytes, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:206>:
                        ulog_next() <struct ulog *ulog_next (struct ulog *ulog, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:50>:
                            ulog_by_offset() <struct ulog *ulog_by_offset (size_t offset, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:36>:
                                CACHELINE_ALIGN()
                    VEC_CLEAR()
                    ulog_rebuild_next_vec() <void ulog_rebuild_next_vec (struct ulog *ulog, struct ulog_next *next, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:223>:
                        VEC_PUSH_BACK()
                        ulog_next() <struct ulog *ulog_next (struct ulog *ulog, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:50>:
                            ulog_by_offset() <struct ulog *ulog_by_offset (size_t offset, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:36>:
                                CACHELINE_ALIGN()
            ravl_delete_cb() <void ravl_delete_cb (struct ravl *ravl, ravl_cb cb, void *arg) at core/ravl.c:102>:
                ravl_foreach_node() <void ravl_foreach_node (struct ravl_node *n, ravl_cb cb, void *arg, int free_node) at core/ravl.c:74> (R):
                    ravl_foreach_node() <void ravl_foreach_node (struct ravl_node *n, ravl_cb cb, void *arg, int free_node) at core/ravl.c:74> (recursive: see 31984)
                    Free() <Free_func Free at core/alloc.c:91>
                Free() <Free_func Free at core/alloc.c:91>
            tx_clean_range() <void tx_clean_range (void *data, void *ctx) at libpmemobj/tx.c:421>:
                VALGRIND_REMOVE_FROM_TX()
                OBJ_OFF_TO_PTR()
                VALGRIND_SET_CLEAN()
            palloc_cancel() <void palloc_cancel (struct palloc_heap *heap, struct pobj_action *actv, size_t actvcnt) at libpmemobj/palloc.c:648>:
            VEC_ARR()
            VEC_SIZE()
        lane_release() <void lane_release (PMEMobjpool *pop) at libpmemobj/lane.c:546>:
            get_lane_info_record() <inline struct lane_info *get_lane_info_record (PMEMobjpool *pop) at libpmemobj/lane.c:466>:
                likely()
                unlikely()
                lane_info_ht_boot() <inline void lane_info_ht_boot (void) at libpmemobj/lane.c:74>:
                    lane_info_create() <inline void lane_info_create (void) at libpmemobj/lane.c:39>:
                        critnib_new() <struct critnib *critnib_new (void) at libpmemobj/critnib.c:187>:
                            Zalloc() <void *Zalloc (size_t sz) at core/alloc.c:98>:
                                Malloc()
                                memset()
                            util_mutex_init()
                            VALGRIND_HG_DRD_DISABLE_CHECKING()
                        FATAL()
                    os_tls_set() <int os_tls_set (os_tls_key_t key, const void *value) at core/os_thread_posix.c:53>:
                        pthread_setspecific()
                    FATAL()
                critnib_get() <void *critnib_get (struct critnib *c, uint64_t key) at libpmemobj/critnib.c:515>:
                    load() <void load (void *src, void *dst) at libpmemobj/critnib.c:130>:
                        util_atomic_load_explicit64()
                    is_leaf() <inline bool is_leaf (struct critnib_node *n) at libpmemobj/critnib.c:150>:
                    slice_index() <inline unsigned slice_index (uint64_t key, sh_t shift) at libpmemobj/critnib.c:178>:
                    to_leaf() <inline struct critnib_leaf *to_leaf (struct critnib_node *n) at libpmemobj/critnib.c:159>:
                Malloc()
                FATAL()
                critnib_insert() <int critnib_insert (struct critnib *c, uint64_t key, void *value) at libpmemobj/critnib.c:340>:
                    util_mutex_lock()
                    alloc_leaf() <struct critnib_leaf *alloc_leaf (struct critnib *__restrict c) at libpmemobj/critnib.c:311>:
                        Malloc()
                        ERR()
                        VALGRIND_ANNOTATE_NEW_MEMORY()
                    util_mutex_unlock()
                    VALGRIND_HG_DRD_DISABLE_CHECKING()
                    is_leaf() <inline bool is_leaf (struct critnib_node *n) at libpmemobj/critnib.c:150>:
                    path_mask() <inline uint64_t path_mask (sh_t shift) at libpmemobj/critnib.c:169>:
                    slice_index() <inline unsigned slice_index (uint64_t key, sh_t shift) at libpmemobj/critnib.c:178>:
                    store() <void store (void *dst, void *src) at libpmemobj/critnib.c:140>:
                        util_atomic_store_explicit64()
                    to_leaf() <inline struct critnib_leaf *to_leaf (struct critnib_node *n) at libpmemobj/critnib.c:159>:
                    ASSERT()
                    free_leaf() <void free_leaf (struct critnib *__restrict c, struct critnib_leaf *__restrict k) at libpmemobj/critnib.c:298>
                    util_mssb_index64()
                    alloc_node() <struct critnib_node *alloc_node (struct critnib *__restrict c) at libpmemobj/critnib.c:274>:
                        Malloc()
                        ERR()
                        VALGRIND_ANNOTATE_NEW_MEMORY()
            ASSERTne()
            unlikely()
            FATAL()
            util_bool_compare_and_swap64()
        ERR()
        obj_tx_callback() <void obj_tx_callback (struct tx *tx) at libpmemobj/tx.c:887>:
            PMDK_SLIST_FIRST()
            PMDK_SLIST_NEXT()
        util_is_zeroed() <int util_is_zeroed (const void *addr, size_t len) at core/util.c:113>:
            memcmp()
        longjmp()
pmemobj_tx_free() <int pmemobj_tx_free (PMEMoid oid) at libpmemobj/tx.c:1890>:
    pmemobj_tx_xfree() <int pmemobj_tx_xfree (PMEMoid oid, uint64_t flags) at libpmemobj/tx.c:1815>:
        LOG()
        get_tx() <struct tx *get_tx () at libpmemobj/tx.c:54>:
        ASSERT_IN_TX()
        ASSERT_TX_STAGE_WORK()
        tx_abort_on_failure_flag() <uint64_t tx_abort_on_failure_flag (struct tx *tx) at libpmemobj/tx.c:840>:
            PMDK_SLIST_FIRST()
        ERR()
        obj_tx_fail_err() <inline int obj_tx_fail_err (int errnum, uint64_t flags) at libpmemobj/tx.c:137>:
            obj_tx_abort() <void obj_tx_abort (int errnum, int user) at libpmemobj/tx.c:914>:
                LOG()
                get_tx() <struct tx *get_tx () at libpmemobj/tx.c:54>:
                ASSERT_IN_TX()
                ASSERT_TX_STAGE_WORK()
                ASSERT()
                PMDK_SLIST_FIRST()
                PMDK_SLIST_NEXT()
                tx_abort() <void tx_abort (PMEMobjpool *pop, struct lane *lane) at libpmemobj/tx.c:447>:
                    LOG()
                    get_tx() <struct tx *get_tx () at libpmemobj/tx.c:54>:
                    tx_abort_set() <void tx_abort_set (PMEMobjpool *pop, struct lane *lane) at libpmemobj/tx.c:391>:
                        LOG()
                        ulog_foreach_entry() <int ulog_foreach_entry (struct ulog *ulog, ulog_entry_cb cb, void *arg, const struct pmem_ops *ops) at libpmemobj/ulog.c:180>
                        tx_undo_entry_apply() <int tx_undo_entry_apply (struct ulog_entry_base *e, void *arg, const struct pmem_ops *p_ops) at libpmemobj/tx.c:362>:
                            SUPPRESS_UNUSED()
                            ulog_entry_type() <ulog_operation_type ulog_entry_type (const struct ulog_entry_base *entry) at libpmemobj/ulog.c:59>:
                                ULOG_OPERATION_FROM_OFFSET()
                            tx_restore_range() <void tx_restore_range (PMEMobjpool *pop, struct tx *tx, struct ulog_entry_buf *range) at libpmemobj/tx.c:307>:
                                COMPILE_ERROR_ON()
                                PMDK_SLIST_INIT()
                                Malloc()
                                FATAL()
                                ulog_entry_offset() <uint64_t ulog_entry_offset (const struct ulog_entry_base *entry) at libpmemobj/ulog.c:68>:
                                OBJ_OFF_TO_PTR()
                                PMDK_SLIST_INSERT_HEAD()
                                PMDK_SLIST_FOREACH()
                                tx_remove_range() <void tx_remove_range (struct txr *tx_ranges, void *begin, void *end) at libpmemobj/tx.c:252>:
                                    PMDK_SLIST_FIRST()
                                    PMDK_SLIST_NEXT()
                                    LOG()
                                    Malloc()
                                    FATAL()
                                    PMDK_SLIST_INSERT_HEAD()
                                    PMDK_SLIST_REMOVE()
                                    Free() <Free_func Free at core/alloc.c:91>
                                ASSERT()
                                PMDK_SLIST_EMPTY()
                                PMDK_SLIST_FIRST()
                                PMDK_SLIST_REMOVE_HEAD()
                                pmemops_memcpy()
                                Free() <Free_func Free at core/alloc.c:91>
                            get_tx() <struct tx *get_tx () at libpmemobj/tx.c:54>:
                            ASSERT()
                        pmemops_drain()
                        operation_finish() <void operation_finish (struct operation_context *ctx, unsigned flags) at libpmemobj/memops.c:814>:
                            ASSERTne()
                            out() <void out (const char *fmt, ...) at core/out.c:480>:
                                va_start()
                                out_common() <} void out_common (const char *file, int line, const char *func, int level, const char *suffix, const char *fmt, va_list ap) at core/out.c:334>
                                va_end()
                            ulog_clobber_data() <int ulog_clobber_data (struct ulog *ulog_first, struct ulog_next *next, ulog_free_fn ulog_free, ulog_rm_user_buffer_fn user_buff_remove, const struct pmem_ops *p_ops, unsigned flags) at libpmemobj/ulog.c:713>:
                                ASSERTne()
                                ulog_inc_gen_num() <void ulog_inc_gen_num (struct ulog *ulog, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:605>:
                                    VALGRIND_ADD_TO_TX()
                                    pmemops_persist()
                                    VALGRIND_SET_CLEAN()
                                    VALGRIND_REMOVE_FROM_TX()
                                VEC_SIZE()
                                VEC_GET()
                                ulog_by_offset() <struct ulog *ulog_by_offset (size_t offset, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:36>:
                                    CACHELINE_ALIGN()
                                ulog_free_next() <int ulog_free_next (struct ulog *u, const struct pmem_ops *p_ops, ulog_free_fn ulog_free, ulog_rm_user_buffer_fn user_buff_remove, uint64_t flags) at libpmemobj/ulog.c:625>:
                                    VEC()
                                    VEC_INIT()
                                    ulog_by_offset() <struct ulog *ulog_by_offset (size_t offset, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:36>:
                                        CACHELINE_ALIGN()
                                    pmemops_persist()
                                    VEC_PUSH_BACK()
                                    LOG()
                                    out() <void out (const char *fmt, ...) at core/out.c:480>:
                                        va_start()
                                        out_common() <} void out_common (const char *file, int line, const char *func, int level, const char *suffix, const char *fmt, va_list ap) at core/out.c:334>
                                        va_end()
                                    VEC_FOREACH_REVERSE()
                                    VEC_DELETE()
                            operation_user_buffer_remove() <int operation_user_buffer_remove (void *base, void *addr) at libpmemobj/memops.c:242>:
                                util_mutex_lock()
                                ravl_find() <struct ravl_node *ravl_find (struct ravl *ravl, const void *data, enum ravl_predicate flags) at core/ravl.c:524>:
                                    LOG()
                                    ravl_data() <void *ravl_data (struct ravl_node *node) at core/ravl.c:571>:
                                        memcpy()
                                    ravl_predicate_holds() <int ravl_predicate_holds (int result, struct ravl_node **ret, struct ravl_node *n, enum ravl_predicate flags) at core/ravl.c:489>:
                                        ravl_node_successor() <struct ravl_node *ravl_node_successor (struct ravl_node *n) at core/ravl.c:465>:
                                            ravl_node_cessor() <struct ravl_node *ravl_node_cessor (struct ravl_node *n, enum ravl_slot_type t) at core/ravl.c:443>:
                                                ravl_node_type_most() <struct ravl_node *ravl_node_type_most (struct ravl_node *n, enum ravl_slot_type t) at core/ravl.c:430>:
                                                ravl_slot_opposite() <enum ravl_slot_type ravl_slot_opposite (enum ravl_slot_type t) at core/ravl.c:184>:
                                                    ASSERTne()
                                        ravl_node_predecessor() <struct ravl_node *ravl_node_predecessor (struct ravl_node *n) at core/ravl.c:476>:
                                            ravl_node_cessor() <struct ravl_node *ravl_node_cessor (struct ravl_node *n, enum ravl_slot_type t) at core/ravl.c:443>:
                                                ravl_node_type_most() <struct ravl_node *ravl_node_type_most (struct ravl_node *n, enum ravl_slot_type t) at core/ravl.c:430>:
                                                ravl_slot_opposite() <enum ravl_slot_type ravl_slot_opposite (enum ravl_slot_type t) at core/ravl.c:184>:
                                                    ASSERTne()
                                ASSERTne()
                                ravl_remove() <void ravl_remove (struct ravl *ravl, struct ravl_node *n) at core/ravl.c:545> (R):
                                    LOG()
                                    ravl_node_successor() <struct ravl_node *ravl_node_successor (struct ravl_node *n) at core/ravl.c:465>:
                                        ravl_node_cessor() <struct ravl_node *ravl_node_cessor (struct ravl_node *n, enum ravl_slot_type t) at core/ravl.c:443>:
                                            ravl_node_type_most() <struct ravl_node *ravl_node_type_most (struct ravl_node *n, enum ravl_slot_type t) at core/ravl.c:430>:
                                            ravl_slot_opposite() <enum ravl_slot_type ravl_slot_opposite (enum ravl_slot_type t) at core/ravl.c:184>:
                                                ASSERTne()
                                    memcpy()
                                    ravl_remove() <void ravl_remove (struct ravl *ravl, struct ravl_node *n) at core/ravl.c:545> (recursive: see 32155)
                                    ravl_node_ref() <struct ravl_node **ravl_node_ref (struct ravl *ravl, struct ravl_node *n) at core/ravl.c:223>:
                                        ravl_node_slot_type() <enum ravl_slot_type ravl_node_slot_type (struct ravl_node *n) at core/ravl.c:196>:
                                    Free() <Free_func Free at core/alloc.c:91>
                                util_mutex_unlock()
                            ulog_free_next() <int ulog_free_next (struct ulog *u, const struct pmem_ops *p_ops, ulog_free_fn ulog_free, ulog_rm_user_buffer_fn user_buff_remove, uint64_t flags) at libpmemobj/ulog.c:625>:
                                VEC()
                                VEC_INIT()
                                ulog_by_offset() <struct ulog *ulog_by_offset (size_t offset, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:36>:
                                    CACHELINE_ALIGN()
                                pmemops_persist()
                                VEC_PUSH_BACK()
                                LOG()
                                out() <void out (const char *fmt, ...) at core/out.c:480>:
                                    va_start()
                                    out_common() <} void out_common (const char *file, int line, const char *func, int level, const char *suffix, const char *fmt, va_list ap) at core/out.c:334>
                                    va_end()
                                VEC_FOREACH_REVERSE()
                                VEC_DELETE()
                            ulog_capacity() <size_t ulog_capacity (struct ulog *ulog, size_t ulog_base_bytes, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:206>:
                                ulog_next() <struct ulog *ulog_next (struct ulog *ulog, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:50>:
                                    ulog_by_offset() <struct ulog *ulog_by_offset (size_t offset, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:36>:
                                        CACHELINE_ALIGN()
                            VEC_CLEAR()
                            ulog_rebuild_next_vec() <void ulog_rebuild_next_vec (struct ulog *ulog, struct ulog_next *next, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:223>:
                                VEC_PUSH_BACK()
                                ulog_next() <struct ulog *ulog_next (struct ulog *ulog, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:50>:
                                    ulog_by_offset() <struct ulog *ulog_by_offset (size_t offset, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:36>:
                                        CACHELINE_ALIGN()
                    ravl_delete_cb() <void ravl_delete_cb (struct ravl *ravl, ravl_cb cb, void *arg) at core/ravl.c:102>:
                        ravl_foreach_node() <void ravl_foreach_node (struct ravl_node *n, ravl_cb cb, void *arg, int free_node) at core/ravl.c:74> (R):
                            ravl_foreach_node() <void ravl_foreach_node (struct ravl_node *n, ravl_cb cb, void *arg, int free_node) at core/ravl.c:74> (recursive: see 32193)
                            Free() <Free_func Free at core/alloc.c:91>
                        Free() <Free_func Free at core/alloc.c:91>
                    tx_clean_range() <void tx_clean_range (void *data, void *ctx) at libpmemobj/tx.c:421>:
                        VALGRIND_REMOVE_FROM_TX()
                        OBJ_OFF_TO_PTR()
                        VALGRIND_SET_CLEAN()
                    palloc_cancel() <void palloc_cancel (struct palloc_heap *heap, struct pobj_action *actv, size_t actvcnt) at libpmemobj/palloc.c:648>:
                    VEC_ARR()
                    VEC_SIZE()
                lane_release() <void lane_release (PMEMobjpool *pop) at libpmemobj/lane.c:546>:
                    get_lane_info_record() <inline struct lane_info *get_lane_info_record (PMEMobjpool *pop) at libpmemobj/lane.c:466>:
                        likely()
                        unlikely()
                        lane_info_ht_boot() <inline void lane_info_ht_boot (void) at libpmemobj/lane.c:74>:
                            lane_info_create() <inline void lane_info_create (void) at libpmemobj/lane.c:39>:
                                critnib_new() <struct critnib *critnib_new (void) at libpmemobj/critnib.c:187>:
                                    Zalloc() <void *Zalloc (size_t sz) at core/alloc.c:98>:
                                        Malloc()
                                        memset()
                                    util_mutex_init()
                                    VALGRIND_HG_DRD_DISABLE_CHECKING()
                                FATAL()
                            os_tls_set() <int os_tls_set (os_tls_key_t key, const void *value) at core/os_thread_posix.c:53>:
                                pthread_setspecific()
                            FATAL()
                        critnib_get() <void *critnib_get (struct critnib *c, uint64_t key) at libpmemobj/critnib.c:515>:
                            load() <void load (void *src, void *dst) at libpmemobj/critnib.c:130>:
                                util_atomic_load_explicit64()
                            is_leaf() <inline bool is_leaf (struct critnib_node *n) at libpmemobj/critnib.c:150>:
                            slice_index() <inline unsigned slice_index (uint64_t key, sh_t shift) at libpmemobj/critnib.c:178>:
                            to_leaf() <inline struct critnib_leaf *to_leaf (struct critnib_node *n) at libpmemobj/critnib.c:159>:
                        Malloc()
                        FATAL()
                        critnib_insert() <int critnib_insert (struct critnib *c, uint64_t key, void *value) at libpmemobj/critnib.c:340>:
                            util_mutex_lock()
                            alloc_leaf() <struct critnib_leaf *alloc_leaf (struct critnib *__restrict c) at libpmemobj/critnib.c:311>:
                                Malloc()
                                ERR()
                                VALGRIND_ANNOTATE_NEW_MEMORY()
                            util_mutex_unlock()
                            VALGRIND_HG_DRD_DISABLE_CHECKING()
                            is_leaf() <inline bool is_leaf (struct critnib_node *n) at libpmemobj/critnib.c:150>:
                            path_mask() <inline uint64_t path_mask (sh_t shift) at libpmemobj/critnib.c:169>:
                            slice_index() <inline unsigned slice_index (uint64_t key, sh_t shift) at libpmemobj/critnib.c:178>:
                            store() <void store (void *dst, void *src) at libpmemobj/critnib.c:140>:
                                util_atomic_store_explicit64()
                            to_leaf() <inline struct critnib_leaf *to_leaf (struct critnib_node *n) at libpmemobj/critnib.c:159>:
                            ASSERT()
                            free_leaf() <void free_leaf (struct critnib *__restrict c, struct critnib_leaf *__restrict k) at libpmemobj/critnib.c:298>
                            util_mssb_index64()
                            alloc_node() <struct critnib_node *alloc_node (struct critnib *__restrict c) at libpmemobj/critnib.c:274>:
                                Malloc()
                                ERR()
                                VALGRIND_ANNOTATE_NEW_MEMORY()
                    ASSERTne()
                    unlikely()
                    FATAL()
                    util_bool_compare_and_swap64()
                ERR()
                obj_tx_callback() <void obj_tx_callback (struct tx *tx) at libpmemobj/tx.c:887>:
                    PMDK_SLIST_FIRST()
                    PMDK_SLIST_NEXT()
                util_is_zeroed() <int util_is_zeroed (const void *addr, size_t len) at core/util.c:113>:
                    memcmp()
                longjmp()
        OBJ_OID_IS_NULL()
        ASSERT()
        OBJ_OID_IS_VALID()
        PMEMOBJ_API_START()
        ravl_find() <struct ravl_node *ravl_find (struct ravl *ravl, const void *data, enum ravl_predicate flags) at core/ravl.c:524>:
            LOG()
            ravl_data() <void *ravl_data (struct ravl_node *node) at core/ravl.c:571>:
                memcpy()
            ravl_predicate_holds() <int ravl_predicate_holds (int result, struct ravl_node **ret, struct ravl_node *n, enum ravl_predicate flags) at core/ravl.c:489>:
                ravl_node_successor() <struct ravl_node *ravl_node_successor (struct ravl_node *n) at core/ravl.c:465>:
                    ravl_node_cessor() <struct ravl_node *ravl_node_cessor (struct ravl_node *n, enum ravl_slot_type t) at core/ravl.c:443>:
                        ravl_node_type_most() <struct ravl_node *ravl_node_type_most (struct ravl_node *n, enum ravl_slot_type t) at core/ravl.c:430>:
                        ravl_slot_opposite() <enum ravl_slot_type ravl_slot_opposite (enum ravl_slot_type t) at core/ravl.c:184>:
                            ASSERTne()
                ravl_node_predecessor() <struct ravl_node *ravl_node_predecessor (struct ravl_node *n) at core/ravl.c:476>:
                    ravl_node_cessor() <struct ravl_node *ravl_node_cessor (struct ravl_node *n, enum ravl_slot_type t) at core/ravl.c:443>:
                        ravl_node_type_most() <struct ravl_node *ravl_node_type_most (struct ravl_node *n, enum ravl_slot_type t) at core/ravl.c:430>:
                        ravl_slot_opposite() <enum ravl_slot_type ravl_slot_opposite (enum ravl_slot_type t) at core/ravl.c:184>:
                            ASSERTne()
        VEC_FOREACH_BY_PTR()
        ravl_data() <void *ravl_data (struct ravl_node *node) at core/ravl.c:571>:
            memcpy()
        OBJ_OFF_TO_PTR()
        VALGRIND_SET_CLEAN()
        VALGRIND_REMOVE_FROM_TX()
        ravl_remove() <void ravl_remove (struct ravl *ravl, struct ravl_node *n) at core/ravl.c:545> (R):
            LOG()
            ravl_node_successor() <struct ravl_node *ravl_node_successor (struct ravl_node *n) at core/ravl.c:465>:
                ravl_node_cessor() <struct ravl_node *ravl_node_cessor (struct ravl_node *n, enum ravl_slot_type t) at core/ravl.c:443>:
                    ravl_node_type_most() <struct ravl_node *ravl_node_type_most (struct ravl_node *n, enum ravl_slot_type t) at core/ravl.c:430>:
                    ravl_slot_opposite() <enum ravl_slot_type ravl_slot_opposite (enum ravl_slot_type t) at core/ravl.c:184>:
                        ASSERTne()
            memcpy()
            ravl_remove() <void ravl_remove (struct ravl *ravl, struct ravl_node *n) at core/ravl.c:545> (recursive: see 32285)
            ravl_node_ref() <struct ravl_node **ravl_node_ref (struct ravl *ravl, struct ravl_node *n) at core/ravl.c:223>:
                ravl_node_slot_type() <enum ravl_slot_type ravl_node_slot_type (struct ravl_node *n) at core/ravl.c:196>:
            Free() <Free_func Free at core/alloc.c:91>
        palloc_cancel() <void palloc_cancel (struct palloc_heap *heap, struct pobj_action *actv, size_t actvcnt) at libpmemobj/palloc.c:648>:
        VEC_ERASE_BY_PTR()
        PMEMOBJ_API_END()
        tx_action_add() <struct pobj_action *tx_action_add (struct tx *tx) at libpmemobj/tx.c:192>:
            tx_action_reserve() <int tx_action_reserve (struct tx *tx, size_t n) at libpmemobj/tx.c:174>:
                VEC_SIZE()
                MIN()
                operation_reserve() <int operation_reserve (struct operation_context *ctx, size_t new_capacity) at libpmemobj/memops.c:684>:
                    ERR()
                    ulog_reserve() <int ulog_reserve (struct ulog *ulog, size_t ulog_base_nbytes, size_t gen_num, int auto_reserve, size_t *new_capacity, ulog_extend_fn extend, struct ulog_next *next, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:236>:
                        LOG()
                        VEC_FOREACH()
                        ulog_by_offset() <struct ulog *ulog_by_offset (size_t offset, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:36>:
                            CACHELINE_ALIGN()
                        ASSERTne()
                        VEC_PUSH_BACK()
                        ulog_next() <struct ulog *ulog_next (struct ulog *ulog, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:50>:
                            ulog_by_offset() <struct ulog *ulog_by_offset (size_t offset, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:36>:
                                CACHELINE_ALIGN()
            VEC_INC_BACK()
            VEC_BACK()
        palloc_defer_free() <void palloc_defer_free (struct palloc_heap *heap, uint64_t off, struct pobj_action *act) at libpmemobj/palloc.c:635>:
            COMPILE_ERROR_ON()
            palloc_defer_free_create() <void palloc_defer_free_create (struct palloc_heap *heap, uint64_t off, struct pobj_action_internal *out) at libpmemobj/palloc.c:610>:
                COMPILE_ERROR_ON()
                memblock_from_offset() <struct memory_block memblock_from_offset (struct palloc_heap *heap, uint64_t off) at libpmemobj/memblock.c:1532>:
                    memblock_from_offset_opt() <struct memory_block memblock_from_offset_opt (struct palloc_heap *heap, uint64_t off, int size) at libpmemobj/memblock.c:1476>:
                        HEAP_PTR_TO_OFF()
                        heap_get_chunk_hdr()
                        memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                            heap_get_chunk_hdr()
                        ASSERTeq()
                        memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                            heap_get_chunk_hdr()
                            FATAL()
                        run_get_data_offset() <size_t run_get_data_offset (const struct memory_block *m) at libpmemobj/memblock.c:572>:
                            heap_get_chunk_run()
                            run_get_data_start() <char *run_get_data_start (const struct memory_block *m) at libpmemobj/memblock.c:544>:
                                heap_get_chunk_hdr()
                                heap_get_chunk_run()
                                run_get_bitmap() <void run_get_bitmap (const struct memory_block *m, struct run_bitmap *b) at libpmemobj/memblock.c:488>:
                                    heap_get_chunk_run()
                                    heap_get_chunk_hdr()
                                    memblock_run_bitmap() <void memblock_run_bitmap (uint32_t *size_idx, uint16_t flags, uint64_t unit_size, uint64_t alignment, void *content, struct run_bitmap *b) at libpmemobj/memblock.c:410>:
                                        ASSERTne()
                                        RUN_CONTENT_SIZE_BYTES()
                                        util_div_ceil()
                                        ALIGN_UP()
                                        memblock_run_default_nallocs() <unsigned memblock_run_default_nallocs (uint32_t *size_idx, uint16_t flags, uint64_t unit_size, uint64_t alignment) at libpmemobj/memblock.c:370>:
                                            SUPPRESS_UNUSED()
                                            RUN_DEFAULT_SIZE_BYTES()
                                            LOG()
                                    ASSERTeq()
                                ALIGN_UP()
                        heap_alloc_classes() <struct alloc_class_collection *heap_alloc_classes (struct palloc_heap *heap) at libpmemobj/heap.c:160>:
                        alloc_class_by_run() <struct alloc_class *alloc_class_by_run (struct alloc_class_collection *ac, size_t unit_size, uint16_t flags, uint32_t size_idx) at libpmemobj/alloc_class.c:594>:
                            SIZE_TO_CLASS_MAP_INDEX()
                            ASSERT()
                            critnib_get() <void *critnib_get (struct critnib *c, uint64_t key) at libpmemobj/critnib.c:515>:
                                load() <void load (void *src, void *dst) at libpmemobj/critnib.c:130>:
                                    util_atomic_load_explicit64()
                                is_leaf() <inline bool is_leaf (struct critnib_node *n) at libpmemobj/critnib.c:150>:
                                slice_index() <inline unsigned slice_index (uint64_t key, sh_t shift) at libpmemobj/critnib.c:178>:
                                to_leaf() <inline struct critnib_leaf *to_leaf (struct critnib_node *n) at libpmemobj/critnib.c:159>:
                            RUN_CLASS_KEY_PACK()
                        CALC_SIZE_IDX()
                heap_ensure_zone_reclaimed() <void heap_ensure_zone_reclaimed (struct palloc_heap *heap, uint32_t zone_id) at libpmemobj/heap.c:816>:
                    util_atomic_load_explicit32()
                    heap_bucket_acquire() <struct bucket *heap_bucket_acquire (struct palloc_heap *heap, uint8_t class_id, uint16_t arena_id) at libpmemobj/heap.c:470>:
                        out() <void out (const char *fmt, ...) at core/out.c:480>:
                            va_start()
                            out_common() <} void out_common (const char *file, int line, const char *func, int level, const char *suffix, const char *fmt, va_list ap) at core/out.c:334>
                            va_end()
                        heap_thread_arena() <struct arena *heap_thread_arena (struct palloc_heap *heap) at libpmemobj/heap.c:414>:
                            os_tls_get() <void *os_tls_get (os_tls_key_t key) at core/os_thread_posix.c:62>:
                                pthread_getspecific()
                            heap_thread_arena_assign() <struct arena *heap_thread_arena_assign (struct palloc_heap *heap) at libpmemobj/heap.c:381>:
                                util_mutex_lock()
                                ASSERTne()
                                VEC_SIZE()
                                VEC_FOREACH()
                                LOG()
                                heap_arena_thread_attach() <void heap_arena_thread_attach (struct palloc_heap *heap, struct arena *a) at libpmemobj/heap.c:249>:
                                    ASSERTeq()
                                    os_tls_get() <void *os_tls_get (os_tls_key_t key) at core/os_thread_posix.c:62>:
                                        pthread_getspecific()
                                    heap_arena_thread_detach() <void heap_arena_thread_detach (struct arena *a) at libpmemobj/heap.c:232>:
                                        util_fetch_and_sub64()
                                    ASSERTne()
                                    util_fetch_and_add64()
                                    os_tls_set() <int os_tls_set (os_tls_key_t key, const void *value) at core/os_thread_posix.c:53>:
                                        pthread_setspecific()
                                util_mutex_unlock()
                            heap_global_arena_assign() <struct arena *heap_global_arena_assign (struct palloc_heap *heap) at libpmemobj/heap.c:348>:
                                util_mutex_lock()
                                ASSERTne()
                                VEC_SIZE()
                                VEC_FOREACH()
                                LOG()
                                util_mutex_unlock()
                            ASSERT()
                            ASSERTne()
                        ASSERTne()
                        VEC_ARR()
                        bucket_acquire() <struct bucket *bucket_acquire (struct bucket_locked *b) at libpmemobj/bucket.c:117>:
                            util_mutex_lock()
                    ZID_TO_ZONE()
                    ASSERTeq()
                    out() <void out (const char *fmt, ...) at core/out.c:480>:
                        va_start()
                        out_common() <} void out_common (const char *file, int line, const char *func, int level, const char *suffix, const char *fmt, va_list ap) at core/out.c:334>
                        va_end()
                    util_atomic_store_explicit32()
                    heap_reclaim_zone_garbage() <void heap_reclaim_zone_garbage (struct palloc_heap *heap, struct bucket *bucket, uint32_t zone_id) at libpmemobj/heap.c:775>:
                        ZID_TO_ZONE()
                        ASSERT()
                        memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                            memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                heap_get_chunk_hdr()
                            memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                heap_get_chunk_hdr()
                                FATAL()
                        heap_reclaim_run() <int heap_reclaim_run (struct palloc_heap *heap, struct memory_block *m, int startup) at libpmemobj/heap.c:733>:
                            heap_get_chunk_run()
                            heap_get_chunk_hdr()
                            alloc_class_by_run() <struct alloc_class *alloc_class_by_run (struct alloc_class_collection *ac, size_t unit_size, uint16_t flags, uint32_t size_idx) at libpmemobj/alloc_class.c:594>:
                                SIZE_TO_CLASS_MAP_INDEX()
                                ASSERT()
                                critnib_get() <void *critnib_get (struct critnib *c, uint64_t key) at libpmemobj/critnib.c:515>:
                                    load() <void load (void *src, void *dst) at libpmemobj/critnib.c:130>:
                                        util_atomic_load_explicit64()
                                    is_leaf() <inline bool is_leaf (struct critnib_node *n) at libpmemobj/critnib.c:150>:
                                    slice_index() <inline unsigned slice_index (uint64_t key, sh_t shift) at libpmemobj/critnib.c:178>:
                                    to_leaf() <inline struct critnib_leaf *to_leaf (struct critnib_node *n) at libpmemobj/critnib.c:159>:
                                RUN_CLASS_KEY_PACK()
                            recycler_element_new() <struct recycler_element recycler_element_new (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/recycler.c:122>:
                                SUPPRESS_UNUSED()
                                util_mutex_lock()
                                util_mutex_unlock()
                            ASSERTeq()
                            STATS_INC()
                            heap_get_recycler() <struct recycler *heap_get_recycler (struct palloc_heap *heap, size_t id, size_t nallocs) at libpmemobj/heap.c:106> (R):
                                util_atomic_load_explicit64()
                                recycler_new() <struct recycler *recycler_new (struct palloc_heap *heap, size_t nallocs, size_t *peak_arenas) at libpmemobj/recycler.c:74>:
                                    Malloc()
                                    ravl_new_sized() <struct ravl *ravl_new_sized (ravl_compare *compare, size_t data_size) at core/ravl.c:45>:
                                        Malloc()
                                        ERR()
                                    recycler_element_cmp() <int recycler_element_cmp (const void *lhs, const void *rhs) at libpmemobj/recycler.c:23>:
                                    memset()
                                    VEC_INIT()
                                    util_mutex_init()
                                    Free() <Free_func Free at core/alloc.c:91>
                                util_bool_compare_and_swap64()
                                recycler_delete() <void recycler_delete (struct recycler *r) at libpmemobj/recycler.c:107>:
                                    VEC_DELETE()
                                    util_mutex_destroy()
                                    ravl_delete() <void ravl_delete (struct ravl *ravl) at core/ravl.c:112>:
                                        ravl_delete_cb() <void ravl_delete_cb (struct ravl *ravl, ravl_cb cb, void *arg) at core/ravl.c:102>:
                                            ravl_foreach_node() <void ravl_foreach_node (struct ravl_node *n, ravl_cb cb, void *arg, int free_node) at core/ravl.c:74> (R):
                                                ravl_foreach_node() <void ravl_foreach_node (struct ravl_node *n, ravl_cb cb, void *arg, int free_node) at core/ravl.c:74> (recursive: see 32456)
                                                Free() <Free_func Free at core/alloc.c:91>
                                            Free() <Free_func Free at core/alloc.c:91>
                                    Free() <Free_func Free at core/alloc.c:91>
                                heap_get_recycler() <struct recycler *heap_get_recycler (struct palloc_heap *heap, size_t id, size_t nallocs) at libpmemobj/heap.c:106> (recursive: see 32438)
                            recycler_put() <int recycler_put (struct recycler *r, struct recycler_element element) at libpmemobj/recycler.c:154>:
                                util_mutex_lock()
                                ravl_emplace_copy() <int ravl_emplace_copy (struct ravl *ravl, const void *data) at core/ravl.c:384>:
                                    ravl_emplace() <int ravl_emplace (struct ravl *ravl, ravl_constr constr, const void *arg) at core/ravl.c:393>:
                                        LOG()
                                        ravl_new_node() <struct ravl_node *ravl_new_node (struct ravl *ravl, ravl_constr constr, const void *arg) at core/ravl.c:161>:
                                            Malloc()
                                            ERR()
                                            ravl_node_insert_constructor() <void ravl_node_insert_constructor (void *data, size_t data_size, const void *arg) at core/ravl.c:139>:
                                                SUPPRESS_UNUSED()
                                                memcpy()
                                        ravl_data() <void *ravl_data (struct ravl_node *node) at core/ravl.c:571>:
                                            memcpy()
                                        ravl_balance() <void ravl_balance (struct ravl *ravl, struct ravl_node *n) at core/ravl.c:337>:
                                            ravl_node_is() <int ravl_node_is (struct ravl_node *n, int i, int j) at core/ravl.c:306>:
                                                ravl_node_is_i_j() <int ravl_node_is_i_j (struct ravl_node *n, int i, int j) at core/ravl.c:296>:
                                                    ravl_node_rank_difference_parent() <int ravl_node_rank_difference_parent (struct ravl_node *p, struct ravl_node *n) at core/ravl.c:275>:
                                                        ravl_node_rank() <int ravl_node_rank (struct ravl_node *n) at core/ravl.c:261>:
                                            ravl_node_promote() <void ravl_node_promote (struct ravl_node *n) at core/ravl.c:315>
                                            ravl_node_sibling() <struct ravl_node *ravl_node_sibling (struct ravl_node *n) at core/ravl.c:209>:
                                                ravl_node_slot_type() <enum ravl_slot_type ravl_node_slot_type (struct ravl_node *n) at core/ravl.c:196>:
                                            ravl_node_rank_difference() <int ravl_node_rank_difference (struct ravl_node *n) at core/ravl.c:287>:
                                                ravl_node_rank_difference_parent() <int ravl_node_rank_difference_parent (struct ravl_node *p, struct ravl_node *n) at core/ravl.c:275>:
                                                    ravl_node_rank() <int ravl_node_rank (struct ravl_node *n) at core/ravl.c:261>:
                                            ravl_node_rank_difference_parent() <int ravl_node_rank_difference_parent (struct ravl_node *p, struct ravl_node *n) at core/ravl.c:275>:
                                                ravl_node_rank() <int ravl_node_rank (struct ravl_node *n) at core/ravl.c:261>:
                                            ravl_slot_opposite() <enum ravl_slot_type ravl_slot_opposite (enum ravl_slot_type t) at core/ravl.c:184>:
                                                ASSERTne()
                                            ravl_node_slot_type() <enum ravl_slot_type ravl_node_slot_type (struct ravl_node *n) at core/ravl.c:196>:
                                            ravl_rotate() <void ravl_rotate (struct ravl *ravl, struct ravl_node *n) at core/ravl.c:237>:
                                                ASSERTne()
                                                ravl_node_ref() <struct ravl_node **ravl_node_ref (struct ravl *ravl, struct ravl_node *n) at core/ravl.c:223>:
                                                    ravl_node_slot_type() <enum ravl_slot_type ravl_node_slot_type (struct ravl_node *n) at core/ravl.c:196>:
                                                ravl_node_slot_type() <enum ravl_slot_type ravl_node_slot_type (struct ravl_node *n) at core/ravl.c:196>:
                                                ravl_slot_opposite() <enum ravl_slot_type ravl_slot_opposite (enum ravl_slot_type t) at core/ravl.c:184>:
                                                    ASSERTne()
                                            ravl_node_demote() <void ravl_node_demote (struct ravl_node *n) at core/ravl.c:324>:
                                                ASSERT()
                                        Free() <Free_func Free at core/alloc.c:91>
                                    ravl_node_copy_constructor() <void ravl_node_copy_constructor (void *data, size_t data_size, const void *arg) at core/ravl.c:152>:
                                        memcpy()
                                util_mutex_unlock()
                            ERR()
                        heap_run_into_free_chunk() <void heap_run_into_free_chunk (struct palloc_heap *heap, struct bucket *bucket, struct memory_block *m) at libpmemobj/heap.c:697>:
                            heap_get_chunk_hdr()
                            STATS_SUB()
                            util_mutex_lock()
                            memblock_huge_init() <struct memory_block memblock_huge_init (struct palloc_heap *heap, uint32_t chunk_id, uint32_t zone_id, uint32_t size_idx) at libpmemobj/memblock.c:1329>:
                                heap_get_chunk_hdr()
                                VALGRIND_DO_MAKE_MEM_UNDEFINED()
                                VALGRIND_ANNOTATE_NEW_MEMORY()
                                chunk_get_chunk_hdr_value() <uint64_t chunk_get_chunk_hdr_value (uint16_t type, uint16_t flags, uint32_t size_idx) at libpmemobj/memblock.c:604>:
                                    COMPILE_ERROR_ON()
                                    memcpy()
                                util_atomic_store_explicit64()
                                pmemops_persist()
                                huge_write_footer() <void huge_write_footer (struct chunk_header *hdr, uint32_t size_idx) at libpmemobj/memblock.c:1166>:
                                    VALGRIND_DO_MAKE_MEM_UNDEFINED()
                                    VALGRIND_SET_CLEAN()
                                memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                    memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                        heap_get_chunk_hdr()
                                    memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                        heap_get_chunk_hdr()
                                        FATAL()
                            heap_free_chunk_reuse() <int heap_free_chunk_reuse (struct palloc_heap *heap, struct bucket *bucket, struct memory_block *m) at libpmemobj/heap.c:674>:
                                heap_coalesce_huge() <struct memory_block heap_coalesce_huge (struct palloc_heap *heap, struct bucket *b, const struct memory_block *m) at libpmemobj/heap.c:650>:
                                    heap_get_adjacent_free_block() <int heap_get_adjacent_free_block (struct palloc_heap *heap, const struct memory_block *in, struct memory_block *out, int prev) at libpmemobj/heap.c:582>:
                                        ZID_TO_ZONE()
                                        memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                            memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                                heap_get_chunk_hdr()
                                            memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                                heap_get_chunk_hdr()
                                                FATAL()
                                    bucket_remove_block() <int bucket_remove_block (struct bucket *b, const struct memory_block *m) at libpmemobj/bucket.c:178>
                                    heap_coalesce() <struct memory_block heap_coalesce (struct palloc_heap *heap, const struct memory_block *blocks[], int n) at libpmemobj/heap.c:621>:
                                        ASSERTne()
                                        memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                            memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                                heap_get_chunk_hdr()
                                            memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                                heap_get_chunk_hdr()
                                                FATAL()
                                bucket_insert_block() <int bucket_insert_block (struct bucket *b, const struct memory_block *m) at libpmemobj/bucket.c:161>:
                                    VALGRIND_DO_MAKE_MEM_NOACCESS()
                                    VALGRIND_ANNOTATE_NEW_MEMORY()
                            util_mutex_unlock()
                        heap_free_chunk_reuse() <int heap_free_chunk_reuse (struct palloc_heap *heap, struct bucket *bucket, struct memory_block *m) at libpmemobj/heap.c:674>:
                            heap_coalesce_huge() <struct memory_block heap_coalesce_huge (struct palloc_heap *heap, struct bucket *b, const struct memory_block *m) at libpmemobj/heap.c:650>:
                                heap_get_adjacent_free_block() <int heap_get_adjacent_free_block (struct palloc_heap *heap, const struct memory_block *in, struct memory_block *out, int prev) at libpmemobj/heap.c:582>:
                                    ZID_TO_ZONE()
                                    memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                        memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                            heap_get_chunk_hdr()
                                        memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                            heap_get_chunk_hdr()
                                            FATAL()
                                bucket_remove_block() <int bucket_remove_block (struct bucket *b, const struct memory_block *m) at libpmemobj/bucket.c:178>
                                heap_coalesce() <struct memory_block heap_coalesce (struct palloc_heap *heap, const struct memory_block *blocks[], int n) at libpmemobj/heap.c:621>:
                                    ASSERTne()
                                    memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                        memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                            heap_get_chunk_hdr()
                                        memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                            heap_get_chunk_hdr()
                                            FATAL()
                            bucket_insert_block() <int bucket_insert_block (struct bucket *b, const struct memory_block *m) at libpmemobj/bucket.c:161>:
                                VALGRIND_DO_MAKE_MEM_NOACCESS()
                                VALGRIND_ANNOTATE_NEW_MEMORY()
                    heap_bucket_release() <void heap_bucket_release (struct bucket *b) at libpmemobj/heap.c:498>:
                        bucket_release() <void bucket_release (struct bucket *b) at libpmemobj/bucket.c:127>:
                            util_mutex_unlock()
pmemobj_tx_publish() <int pmemobj_tx_publish (struct pobj_action *actv, size_t actvcnt) at libpmemobj/tx.c:1935>:
    pmemobj_tx_xpublish() <int pmemobj_tx_xpublish (struct pobj_action *actv, size_t actvcnt, uint64_t flags) at libpmemobj/tx.c:1900>:
        get_tx() <struct tx *get_tx () at libpmemobj/tx.c:54>:
        ASSERT_IN_TX()
        ASSERT_TX_STAGE_WORK()
        tx_abort_on_failure_flag() <uint64_t tx_abort_on_failure_flag (struct tx *tx) at libpmemobj/tx.c:840>:
            PMDK_SLIST_FIRST()
        ERR()
        obj_tx_fail_err() <inline int obj_tx_fail_err (int errnum, uint64_t flags) at libpmemobj/tx.c:137>:
            obj_tx_abort() <void obj_tx_abort (int errnum, int user) at libpmemobj/tx.c:914>:
                LOG()
                get_tx() <struct tx *get_tx () at libpmemobj/tx.c:54>:
                ASSERT_IN_TX()
                ASSERT_TX_STAGE_WORK()
                ASSERT()
                PMDK_SLIST_FIRST()
                PMDK_SLIST_NEXT()
                tx_abort() <void tx_abort (PMEMobjpool *pop, struct lane *lane) at libpmemobj/tx.c:447>:
                    LOG()
                    get_tx() <struct tx *get_tx () at libpmemobj/tx.c:54>:
                    tx_abort_set() <void tx_abort_set (PMEMobjpool *pop, struct lane *lane) at libpmemobj/tx.c:391>:
                        LOG()
                        ulog_foreach_entry() <int ulog_foreach_entry (struct ulog *ulog, ulog_entry_cb cb, void *arg, const struct pmem_ops *ops) at libpmemobj/ulog.c:180>
                        tx_undo_entry_apply() <int tx_undo_entry_apply (struct ulog_entry_base *e, void *arg, const struct pmem_ops *p_ops) at libpmemobj/tx.c:362>:
                            SUPPRESS_UNUSED()
                            ulog_entry_type() <ulog_operation_type ulog_entry_type (const struct ulog_entry_base *entry) at libpmemobj/ulog.c:59>:
                                ULOG_OPERATION_FROM_OFFSET()
                            tx_restore_range() <void tx_restore_range (PMEMobjpool *pop, struct tx *tx, struct ulog_entry_buf *range) at libpmemobj/tx.c:307>:
                                COMPILE_ERROR_ON()
                                PMDK_SLIST_INIT()
                                Malloc()
                                FATAL()
                                ulog_entry_offset() <uint64_t ulog_entry_offset (const struct ulog_entry_base *entry) at libpmemobj/ulog.c:68>:
                                OBJ_OFF_TO_PTR()
                                PMDK_SLIST_INSERT_HEAD()
                                PMDK_SLIST_FOREACH()
                                tx_remove_range() <void tx_remove_range (struct txr *tx_ranges, void *begin, void *end) at libpmemobj/tx.c:252>:
                                    PMDK_SLIST_FIRST()
                                    PMDK_SLIST_NEXT()
                                    LOG()
                                    Malloc()
                                    FATAL()
                                    PMDK_SLIST_INSERT_HEAD()
                                    PMDK_SLIST_REMOVE()
                                    Free() <Free_func Free at core/alloc.c:91>
                                ASSERT()
                                PMDK_SLIST_EMPTY()
                                PMDK_SLIST_FIRST()
                                PMDK_SLIST_REMOVE_HEAD()
                                pmemops_memcpy()
                                Free() <Free_func Free at core/alloc.c:91>
                            get_tx() <struct tx *get_tx () at libpmemobj/tx.c:54>:
                            ASSERT()
                        pmemops_drain()
                        operation_finish() <void operation_finish (struct operation_context *ctx, unsigned flags) at libpmemobj/memops.c:814>:
                            ASSERTne()
                            out() <void out (const char *fmt, ...) at core/out.c:480>:
                                va_start()
                                out_common() <} void out_common (const char *file, int line, const char *func, int level, const char *suffix, const char *fmt, va_list ap) at core/out.c:334>
                                va_end()
                            ulog_clobber_data() <int ulog_clobber_data (struct ulog *ulog_first, struct ulog_next *next, ulog_free_fn ulog_free, ulog_rm_user_buffer_fn user_buff_remove, const struct pmem_ops *p_ops, unsigned flags) at libpmemobj/ulog.c:713>:
                                ASSERTne()
                                ulog_inc_gen_num() <void ulog_inc_gen_num (struct ulog *ulog, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:605>:
                                    VALGRIND_ADD_TO_TX()
                                    pmemops_persist()
                                    VALGRIND_SET_CLEAN()
                                    VALGRIND_REMOVE_FROM_TX()
                                VEC_SIZE()
                                VEC_GET()
                                ulog_by_offset() <struct ulog *ulog_by_offset (size_t offset, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:36>:
                                    CACHELINE_ALIGN()
                                ulog_free_next() <int ulog_free_next (struct ulog *u, const struct pmem_ops *p_ops, ulog_free_fn ulog_free, ulog_rm_user_buffer_fn user_buff_remove, uint64_t flags) at libpmemobj/ulog.c:625>:
                                    VEC()
                                    VEC_INIT()
                                    ulog_by_offset() <struct ulog *ulog_by_offset (size_t offset, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:36>:
                                        CACHELINE_ALIGN()
                                    pmemops_persist()
                                    VEC_PUSH_BACK()
                                    LOG()
                                    out() <void out (const char *fmt, ...) at core/out.c:480>:
                                        va_start()
                                        out_common() <} void out_common (const char *file, int line, const char *func, int level, const char *suffix, const char *fmt, va_list ap) at core/out.c:334>
                                        va_end()
                                    VEC_FOREACH_REVERSE()
                                    VEC_DELETE()
                            operation_user_buffer_remove() <int operation_user_buffer_remove (void *base, void *addr) at libpmemobj/memops.c:242>:
                                util_mutex_lock()
                                ravl_find() <struct ravl_node *ravl_find (struct ravl *ravl, const void *data, enum ravl_predicate flags) at core/ravl.c:524>:
                                    LOG()
                                    ravl_data() <void *ravl_data (struct ravl_node *node) at core/ravl.c:571>:
                                        memcpy()
                                    ravl_predicate_holds() <int ravl_predicate_holds (int result, struct ravl_node **ret, struct ravl_node *n, enum ravl_predicate flags) at core/ravl.c:489>:
                                        ravl_node_successor() <struct ravl_node *ravl_node_successor (struct ravl_node *n) at core/ravl.c:465>:
                                            ravl_node_cessor() <struct ravl_node *ravl_node_cessor (struct ravl_node *n, enum ravl_slot_type t) at core/ravl.c:443>:
                                                ravl_node_type_most() <struct ravl_node *ravl_node_type_most (struct ravl_node *n, enum ravl_slot_type t) at core/ravl.c:430>:
                                                ravl_slot_opposite() <enum ravl_slot_type ravl_slot_opposite (enum ravl_slot_type t) at core/ravl.c:184>:
                                                    ASSERTne()
                                        ravl_node_predecessor() <struct ravl_node *ravl_node_predecessor (struct ravl_node *n) at core/ravl.c:476>:
                                            ravl_node_cessor() <struct ravl_node *ravl_node_cessor (struct ravl_node *n, enum ravl_slot_type t) at core/ravl.c:443>:
                                                ravl_node_type_most() <struct ravl_node *ravl_node_type_most (struct ravl_node *n, enum ravl_slot_type t) at core/ravl.c:430>:
                                                ravl_slot_opposite() <enum ravl_slot_type ravl_slot_opposite (enum ravl_slot_type t) at core/ravl.c:184>:
                                                    ASSERTne()
                                ASSERTne()
                                ravl_remove() <void ravl_remove (struct ravl *ravl, struct ravl_node *n) at core/ravl.c:545> (R):
                                    LOG()
                                    ravl_node_successor() <struct ravl_node *ravl_node_successor (struct ravl_node *n) at core/ravl.c:465>:
                                        ravl_node_cessor() <struct ravl_node *ravl_node_cessor (struct ravl_node *n, enum ravl_slot_type t) at core/ravl.c:443>:
                                            ravl_node_type_most() <struct ravl_node *ravl_node_type_most (struct ravl_node *n, enum ravl_slot_type t) at core/ravl.c:430>:
                                            ravl_slot_opposite() <enum ravl_slot_type ravl_slot_opposite (enum ravl_slot_type t) at core/ravl.c:184>:
                                                ASSERTne()
                                    memcpy()
                                    ravl_remove() <void ravl_remove (struct ravl *ravl, struct ravl_node *n) at core/ravl.c:545> (recursive: see 32678)
                                    ravl_node_ref() <struct ravl_node **ravl_node_ref (struct ravl *ravl, struct ravl_node *n) at core/ravl.c:223>:
                                        ravl_node_slot_type() <enum ravl_slot_type ravl_node_slot_type (struct ravl_node *n) at core/ravl.c:196>:
                                    Free() <Free_func Free at core/alloc.c:91>
                                util_mutex_unlock()
                            ulog_free_next() <int ulog_free_next (struct ulog *u, const struct pmem_ops *p_ops, ulog_free_fn ulog_free, ulog_rm_user_buffer_fn user_buff_remove, uint64_t flags) at libpmemobj/ulog.c:625>:
                                VEC()
                                VEC_INIT()
                                ulog_by_offset() <struct ulog *ulog_by_offset (size_t offset, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:36>:
                                    CACHELINE_ALIGN()
                                pmemops_persist()
                                VEC_PUSH_BACK()
                                LOG()
                                out() <void out (const char *fmt, ...) at core/out.c:480>:
                                    va_start()
                                    out_common() <} void out_common (const char *file, int line, const char *func, int level, const char *suffix, const char *fmt, va_list ap) at core/out.c:334>
                                    va_end()
                                VEC_FOREACH_REVERSE()
                                VEC_DELETE()
                            ulog_capacity() <size_t ulog_capacity (struct ulog *ulog, size_t ulog_base_bytes, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:206>:
                                ulog_next() <struct ulog *ulog_next (struct ulog *ulog, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:50>:
                                    ulog_by_offset() <struct ulog *ulog_by_offset (size_t offset, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:36>:
                                        CACHELINE_ALIGN()
                            VEC_CLEAR()
                            ulog_rebuild_next_vec() <void ulog_rebuild_next_vec (struct ulog *ulog, struct ulog_next *next, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:223>:
                                VEC_PUSH_BACK()
                                ulog_next() <struct ulog *ulog_next (struct ulog *ulog, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:50>:
                                    ulog_by_offset() <struct ulog *ulog_by_offset (size_t offset, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:36>:
                                        CACHELINE_ALIGN()
                    ravl_delete_cb() <void ravl_delete_cb (struct ravl *ravl, ravl_cb cb, void *arg) at core/ravl.c:102>:
                        ravl_foreach_node() <void ravl_foreach_node (struct ravl_node *n, ravl_cb cb, void *arg, int free_node) at core/ravl.c:74> (R):
                            ravl_foreach_node() <void ravl_foreach_node (struct ravl_node *n, ravl_cb cb, void *arg, int free_node) at core/ravl.c:74> (recursive: see 32716)
                            Free() <Free_func Free at core/alloc.c:91>
                        Free() <Free_func Free at core/alloc.c:91>
                    tx_clean_range() <void tx_clean_range (void *data, void *ctx) at libpmemobj/tx.c:421>:
                        VALGRIND_REMOVE_FROM_TX()
                        OBJ_OFF_TO_PTR()
                        VALGRIND_SET_CLEAN()
                    palloc_cancel() <void palloc_cancel (struct palloc_heap *heap, struct pobj_action *actv, size_t actvcnt) at libpmemobj/palloc.c:648>:
                    VEC_ARR()
                    VEC_SIZE()
                lane_release() <void lane_release (PMEMobjpool *pop) at libpmemobj/lane.c:546>:
                    get_lane_info_record() <inline struct lane_info *get_lane_info_record (PMEMobjpool *pop) at libpmemobj/lane.c:466>:
                        likely()
                        unlikely()
                        lane_info_ht_boot() <inline void lane_info_ht_boot (void) at libpmemobj/lane.c:74>:
                            lane_info_create() <inline void lane_info_create (void) at libpmemobj/lane.c:39>:
                                critnib_new() <struct critnib *critnib_new (void) at libpmemobj/critnib.c:187>:
                                    Zalloc() <void *Zalloc (size_t sz) at core/alloc.c:98>:
                                        Malloc()
                                        memset()
                                    util_mutex_init()
                                    VALGRIND_HG_DRD_DISABLE_CHECKING()
                                FATAL()
                            os_tls_set() <int os_tls_set (os_tls_key_t key, const void *value) at core/os_thread_posix.c:53>:
                                pthread_setspecific()
                            FATAL()
                        critnib_get() <void *critnib_get (struct critnib *c, uint64_t key) at libpmemobj/critnib.c:515>:
                            load() <void load (void *src, void *dst) at libpmemobj/critnib.c:130>:
                                util_atomic_load_explicit64()
                            is_leaf() <inline bool is_leaf (struct critnib_node *n) at libpmemobj/critnib.c:150>:
                            slice_index() <inline unsigned slice_index (uint64_t key, sh_t shift) at libpmemobj/critnib.c:178>:
                            to_leaf() <inline struct critnib_leaf *to_leaf (struct critnib_node *n) at libpmemobj/critnib.c:159>:
                        Malloc()
                        FATAL()
                        critnib_insert() <int critnib_insert (struct critnib *c, uint64_t key, void *value) at libpmemobj/critnib.c:340>:
                            util_mutex_lock()
                            alloc_leaf() <struct critnib_leaf *alloc_leaf (struct critnib *__restrict c) at libpmemobj/critnib.c:311>:
                                Malloc()
                                ERR()
                                VALGRIND_ANNOTATE_NEW_MEMORY()
                            util_mutex_unlock()
                            VALGRIND_HG_DRD_DISABLE_CHECKING()
                            is_leaf() <inline bool is_leaf (struct critnib_node *n) at libpmemobj/critnib.c:150>:
                            path_mask() <inline uint64_t path_mask (sh_t shift) at libpmemobj/critnib.c:169>:
                            slice_index() <inline unsigned slice_index (uint64_t key, sh_t shift) at libpmemobj/critnib.c:178>:
                            store() <void store (void *dst, void *src) at libpmemobj/critnib.c:140>:
                                util_atomic_store_explicit64()
                            to_leaf() <inline struct critnib_leaf *to_leaf (struct critnib_node *n) at libpmemobj/critnib.c:159>:
                            ASSERT()
                            free_leaf() <void free_leaf (struct critnib *__restrict c, struct critnib_leaf *__restrict k) at libpmemobj/critnib.c:298>
                            util_mssb_index64()
                            alloc_node() <struct critnib_node *alloc_node (struct critnib *__restrict c) at libpmemobj/critnib.c:274>:
                                Malloc()
                                ERR()
                                VALGRIND_ANNOTATE_NEW_MEMORY()
                    ASSERTne()
                    unlikely()
                    FATAL()
                    util_bool_compare_and_swap64()
                ERR()
                obj_tx_callback() <void obj_tx_callback (struct tx *tx) at libpmemobj/tx.c:887>:
                    PMDK_SLIST_FIRST()
                    PMDK_SLIST_NEXT()
                util_is_zeroed() <int util_is_zeroed (const void *addr, size_t len) at core/util.c:113>:
                    memcmp()
                longjmp()
        PMEMOBJ_API_START()
        tx_action_reserve() <int tx_action_reserve (struct tx *tx, size_t n) at libpmemobj/tx.c:174>:
            VEC_SIZE()
            MIN()
            operation_reserve() <int operation_reserve (struct operation_context *ctx, size_t new_capacity) at libpmemobj/memops.c:684>:
                ERR()
                ulog_reserve() <int ulog_reserve (struct ulog *ulog, size_t ulog_base_nbytes, size_t gen_num, int auto_reserve, size_t *new_capacity, ulog_extend_fn extend, struct ulog_next *next, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:236>:
                    LOG()
                    VEC_FOREACH()
                    ulog_by_offset() <struct ulog *ulog_by_offset (size_t offset, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:36>:
                        CACHELINE_ALIGN()
                    ASSERTne()
                    VEC_PUSH_BACK()
                    ulog_next() <struct ulog *ulog_next (struct ulog *ulog, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:50>:
                        ulog_by_offset() <struct ulog *ulog_by_offset (size_t offset, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:36>:
                            CACHELINE_ALIGN()
        PMEMOBJ_API_END()
        VEC_PUSH_BACK()
pmemobj_tx_stage() <enum pobj_tx_stage pmemobj_tx_stage (void) at libpmemobj/tx.c:903>:
    LOG()
    get_tx() <struct tx *get_tx () at libpmemobj/tx.c:54>:
pmemobj_tx_xadd_range() <int pmemobj_tx_xadd_range (PMEMoid oid, uint64_t hoff, size_t size, uint64_t flags) at libpmemobj/tx.c:1512>:
    LOG()
    PMEMOBJ_API_START()
    get_tx() <struct tx *get_tx () at libpmemobj/tx.c:54>:
    ASSERT_IN_TX()
    ASSERT_TX_STAGE_WORK()
    tx_abort_on_failure_flag() <uint64_t tx_abort_on_failure_flag (struct tx *tx) at libpmemobj/tx.c:840>:
        PMDK_SLIST_FIRST()
    ERR()
    obj_tx_fail_err() <inline int obj_tx_fail_err (int errnum, uint64_t flags) at libpmemobj/tx.c:137>:
        obj_tx_abort() <void obj_tx_abort (int errnum, int user) at libpmemobj/tx.c:914>:
            LOG()
            get_tx() <struct tx *get_tx () at libpmemobj/tx.c:54>:
            ASSERT_IN_TX()
            ASSERT_TX_STAGE_WORK()
            ASSERT()
            PMDK_SLIST_FIRST()
            PMDK_SLIST_NEXT()
            tx_abort() <void tx_abort (PMEMobjpool *pop, struct lane *lane) at libpmemobj/tx.c:447>:
                LOG()
                get_tx() <struct tx *get_tx () at libpmemobj/tx.c:54>:
                tx_abort_set() <void tx_abort_set (PMEMobjpool *pop, struct lane *lane) at libpmemobj/tx.c:391>:
                    LOG()
                    ulog_foreach_entry() <int ulog_foreach_entry (struct ulog *ulog, ulog_entry_cb cb, void *arg, const struct pmem_ops *ops) at libpmemobj/ulog.c:180>
                    tx_undo_entry_apply() <int tx_undo_entry_apply (struct ulog_entry_base *e, void *arg, const struct pmem_ops *p_ops) at libpmemobj/tx.c:362>:
                        SUPPRESS_UNUSED()
                        ulog_entry_type() <ulog_operation_type ulog_entry_type (const struct ulog_entry_base *entry) at libpmemobj/ulog.c:59>:
                            ULOG_OPERATION_FROM_OFFSET()
                        tx_restore_range() <void tx_restore_range (PMEMobjpool *pop, struct tx *tx, struct ulog_entry_buf *range) at libpmemobj/tx.c:307>:
                            COMPILE_ERROR_ON()
                            PMDK_SLIST_INIT()
                            Malloc()
                            FATAL()
                            ulog_entry_offset() <uint64_t ulog_entry_offset (const struct ulog_entry_base *entry) at libpmemobj/ulog.c:68>:
                            OBJ_OFF_TO_PTR()
                            PMDK_SLIST_INSERT_HEAD()
                            PMDK_SLIST_FOREACH()
                            tx_remove_range() <void tx_remove_range (struct txr *tx_ranges, void *begin, void *end) at libpmemobj/tx.c:252>:
                                PMDK_SLIST_FIRST()
                                PMDK_SLIST_NEXT()
                                LOG()
                                Malloc()
                                FATAL()
                                PMDK_SLIST_INSERT_HEAD()
                                PMDK_SLIST_REMOVE()
                                Free() <Free_func Free at core/alloc.c:91>
                            ASSERT()
                            PMDK_SLIST_EMPTY()
                            PMDK_SLIST_FIRST()
                            PMDK_SLIST_REMOVE_HEAD()
                            pmemops_memcpy()
                            Free() <Free_func Free at core/alloc.c:91>
                        get_tx() <struct tx *get_tx () at libpmemobj/tx.c:54>:
                        ASSERT()
                    pmemops_drain()
                    operation_finish() <void operation_finish (struct operation_context *ctx, unsigned flags) at libpmemobj/memops.c:814>:
                        ASSERTne()
                        out() <void out (const char *fmt, ...) at core/out.c:480>:
                            va_start()
                            out_common() <} void out_common (const char *file, int line, const char *func, int level, const char *suffix, const char *fmt, va_list ap) at core/out.c:334>
                            va_end()
                        ulog_clobber_data() <int ulog_clobber_data (struct ulog *ulog_first, struct ulog_next *next, ulog_free_fn ulog_free, ulog_rm_user_buffer_fn user_buff_remove, const struct pmem_ops *p_ops, unsigned flags) at libpmemobj/ulog.c:713>:
                            ASSERTne()
                            ulog_inc_gen_num() <void ulog_inc_gen_num (struct ulog *ulog, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:605>:
                                VALGRIND_ADD_TO_TX()
                                pmemops_persist()
                                VALGRIND_SET_CLEAN()
                                VALGRIND_REMOVE_FROM_TX()
                            VEC_SIZE()
                            VEC_GET()
                            ulog_by_offset() <struct ulog *ulog_by_offset (size_t offset, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:36>:
                                CACHELINE_ALIGN()
                            ulog_free_next() <int ulog_free_next (struct ulog *u, const struct pmem_ops *p_ops, ulog_free_fn ulog_free, ulog_rm_user_buffer_fn user_buff_remove, uint64_t flags) at libpmemobj/ulog.c:625>:
                                VEC()
                                VEC_INIT()
                                ulog_by_offset() <struct ulog *ulog_by_offset (size_t offset, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:36>:
                                    CACHELINE_ALIGN()
                                pmemops_persist()
                                VEC_PUSH_BACK()
                                LOG()
                                out() <void out (const char *fmt, ...) at core/out.c:480>:
                                    va_start()
                                    out_common() <} void out_common (const char *file, int line, const char *func, int level, const char *suffix, const char *fmt, va_list ap) at core/out.c:334>
                                    va_end()
                                VEC_FOREACH_REVERSE()
                                VEC_DELETE()
                        operation_user_buffer_remove() <int operation_user_buffer_remove (void *base, void *addr) at libpmemobj/memops.c:242>:
                            util_mutex_lock()
                            ravl_find() <struct ravl_node *ravl_find (struct ravl *ravl, const void *data, enum ravl_predicate flags) at core/ravl.c:524>:
                                LOG()
                                ravl_data() <void *ravl_data (struct ravl_node *node) at core/ravl.c:571>:
                                    memcpy()
                                ravl_predicate_holds() <int ravl_predicate_holds (int result, struct ravl_node **ret, struct ravl_node *n, enum ravl_predicate flags) at core/ravl.c:489>:
                                    ravl_node_successor() <struct ravl_node *ravl_node_successor (struct ravl_node *n) at core/ravl.c:465>:
                                        ravl_node_cessor() <struct ravl_node *ravl_node_cessor (struct ravl_node *n, enum ravl_slot_type t) at core/ravl.c:443>:
                                            ravl_node_type_most() <struct ravl_node *ravl_node_type_most (struct ravl_node *n, enum ravl_slot_type t) at core/ravl.c:430>:
                                            ravl_slot_opposite() <enum ravl_slot_type ravl_slot_opposite (enum ravl_slot_type t) at core/ravl.c:184>:
                                                ASSERTne()
                                    ravl_node_predecessor() <struct ravl_node *ravl_node_predecessor (struct ravl_node *n) at core/ravl.c:476>:
                                        ravl_node_cessor() <struct ravl_node *ravl_node_cessor (struct ravl_node *n, enum ravl_slot_type t) at core/ravl.c:443>:
                                            ravl_node_type_most() <struct ravl_node *ravl_node_type_most (struct ravl_node *n, enum ravl_slot_type t) at core/ravl.c:430>:
                                            ravl_slot_opposite() <enum ravl_slot_type ravl_slot_opposite (enum ravl_slot_type t) at core/ravl.c:184>:
                                                ASSERTne()
                            ASSERTne()
                            ravl_remove() <void ravl_remove (struct ravl *ravl, struct ravl_node *n) at core/ravl.c:545> (R):
                                LOG()
                                ravl_node_successor() <struct ravl_node *ravl_node_successor (struct ravl_node *n) at core/ravl.c:465>:
                                    ravl_node_cessor() <struct ravl_node *ravl_node_cessor (struct ravl_node *n, enum ravl_slot_type t) at core/ravl.c:443>:
                                        ravl_node_type_most() <struct ravl_node *ravl_node_type_most (struct ravl_node *n, enum ravl_slot_type t) at core/ravl.c:430>:
                                        ravl_slot_opposite() <enum ravl_slot_type ravl_slot_opposite (enum ravl_slot_type t) at core/ravl.c:184>:
                                            ASSERTne()
                                memcpy()
                                ravl_remove() <void ravl_remove (struct ravl *ravl, struct ravl_node *n) at core/ravl.c:545> (recursive: see 32908)
                                ravl_node_ref() <struct ravl_node **ravl_node_ref (struct ravl *ravl, struct ravl_node *n) at core/ravl.c:223>:
                                    ravl_node_slot_type() <enum ravl_slot_type ravl_node_slot_type (struct ravl_node *n) at core/ravl.c:196>:
                                Free() <Free_func Free at core/alloc.c:91>
                            util_mutex_unlock()
                        ulog_free_next() <int ulog_free_next (struct ulog *u, const struct pmem_ops *p_ops, ulog_free_fn ulog_free, ulog_rm_user_buffer_fn user_buff_remove, uint64_t flags) at libpmemobj/ulog.c:625>:
                            VEC()
                            VEC_INIT()
                            ulog_by_offset() <struct ulog *ulog_by_offset (size_t offset, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:36>:
                                CACHELINE_ALIGN()
                            pmemops_persist()
                            VEC_PUSH_BACK()
                            LOG()
                            out() <void out (const char *fmt, ...) at core/out.c:480>:
                                va_start()
                                out_common() <} void out_common (const char *file, int line, const char *func, int level, const char *suffix, const char *fmt, va_list ap) at core/out.c:334>
                                va_end()
                            VEC_FOREACH_REVERSE()
                            VEC_DELETE()
                        ulog_capacity() <size_t ulog_capacity (struct ulog *ulog, size_t ulog_base_bytes, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:206>:
                            ulog_next() <struct ulog *ulog_next (struct ulog *ulog, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:50>:
                                ulog_by_offset() <struct ulog *ulog_by_offset (size_t offset, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:36>:
                                    CACHELINE_ALIGN()
                        VEC_CLEAR()
                        ulog_rebuild_next_vec() <void ulog_rebuild_next_vec (struct ulog *ulog, struct ulog_next *next, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:223>:
                            VEC_PUSH_BACK()
                            ulog_next() <struct ulog *ulog_next (struct ulog *ulog, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:50>:
                                ulog_by_offset() <struct ulog *ulog_by_offset (size_t offset, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:36>:
                                    CACHELINE_ALIGN()
                ravl_delete_cb() <void ravl_delete_cb (struct ravl *ravl, ravl_cb cb, void *arg) at core/ravl.c:102>:
                    ravl_foreach_node() <void ravl_foreach_node (struct ravl_node *n, ravl_cb cb, void *arg, int free_node) at core/ravl.c:74> (R):
                        ravl_foreach_node() <void ravl_foreach_node (struct ravl_node *n, ravl_cb cb, void *arg, int free_node) at core/ravl.c:74> (recursive: see 32946)
                        Free() <Free_func Free at core/alloc.c:91>
                    Free() <Free_func Free at core/alloc.c:91>
                tx_clean_range() <void tx_clean_range (void *data, void *ctx) at libpmemobj/tx.c:421>:
                    VALGRIND_REMOVE_FROM_TX()
                    OBJ_OFF_TO_PTR()
                    VALGRIND_SET_CLEAN()
                palloc_cancel() <void palloc_cancel (struct palloc_heap *heap, struct pobj_action *actv, size_t actvcnt) at libpmemobj/palloc.c:648>:
                VEC_ARR()
                VEC_SIZE()
            lane_release() <void lane_release (PMEMobjpool *pop) at libpmemobj/lane.c:546>:
                get_lane_info_record() <inline struct lane_info *get_lane_info_record (PMEMobjpool *pop) at libpmemobj/lane.c:466>:
                    likely()
                    unlikely()
                    lane_info_ht_boot() <inline void lane_info_ht_boot (void) at libpmemobj/lane.c:74>:
                        lane_info_create() <inline void lane_info_create (void) at libpmemobj/lane.c:39>:
                            critnib_new() <struct critnib *critnib_new (void) at libpmemobj/critnib.c:187>:
                                Zalloc() <void *Zalloc (size_t sz) at core/alloc.c:98>:
                                    Malloc()
                                    memset()
                                util_mutex_init()
                                VALGRIND_HG_DRD_DISABLE_CHECKING()
                            FATAL()
                        os_tls_set() <int os_tls_set (os_tls_key_t key, const void *value) at core/os_thread_posix.c:53>:
                            pthread_setspecific()
                        FATAL()
                    critnib_get() <void *critnib_get (struct critnib *c, uint64_t key) at libpmemobj/critnib.c:515>:
                        load() <void load (void *src, void *dst) at libpmemobj/critnib.c:130>:
                            util_atomic_load_explicit64()
                        is_leaf() <inline bool is_leaf (struct critnib_node *n) at libpmemobj/critnib.c:150>:
                        slice_index() <inline unsigned slice_index (uint64_t key, sh_t shift) at libpmemobj/critnib.c:178>:
                        to_leaf() <inline struct critnib_leaf *to_leaf (struct critnib_node *n) at libpmemobj/critnib.c:159>:
                    Malloc()
                    FATAL()
                    critnib_insert() <int critnib_insert (struct critnib *c, uint64_t key, void *value) at libpmemobj/critnib.c:340>:
                        util_mutex_lock()
                        alloc_leaf() <struct critnib_leaf *alloc_leaf (struct critnib *__restrict c) at libpmemobj/critnib.c:311>:
                            Malloc()
                            ERR()
                            VALGRIND_ANNOTATE_NEW_MEMORY()
                        util_mutex_unlock()
                        VALGRIND_HG_DRD_DISABLE_CHECKING()
                        is_leaf() <inline bool is_leaf (struct critnib_node *n) at libpmemobj/critnib.c:150>:
                        path_mask() <inline uint64_t path_mask (sh_t shift) at libpmemobj/critnib.c:169>:
                        slice_index() <inline unsigned slice_index (uint64_t key, sh_t shift) at libpmemobj/critnib.c:178>:
                        store() <void store (void *dst, void *src) at libpmemobj/critnib.c:140>:
                            util_atomic_store_explicit64()
                        to_leaf() <inline struct critnib_leaf *to_leaf (struct critnib_node *n) at libpmemobj/critnib.c:159>:
                        ASSERT()
                        free_leaf() <void free_leaf (struct critnib *__restrict c, struct critnib_leaf *__restrict k) at libpmemobj/critnib.c:298>
                        util_mssb_index64()
                        alloc_node() <struct critnib_node *alloc_node (struct critnib *__restrict c) at libpmemobj/critnib.c:274>:
                            Malloc()
                            ERR()
                            VALGRIND_ANNOTATE_NEW_MEMORY()
                ASSERTne()
                unlikely()
                FATAL()
                util_bool_compare_and_swap64()
            ERR()
            obj_tx_callback() <void obj_tx_callback (struct tx *tx) at libpmemobj/tx.c:887>:
                PMDK_SLIST_FIRST()
                PMDK_SLIST_NEXT()
            util_is_zeroed() <int util_is_zeroed (const void *addr, size_t len) at core/util.c:113>:
                memcmp()
            longjmp()
    PMEMOBJ_API_END()
    ASSERT()
    OBJ_OID_IS_VALID()
    pmemobj_tx_add_common() <int pmemobj_tx_add_common (struct tx *tx, struct tx_range_def *args) at libpmemobj/tx.c:1227>:
        LOG()
        ERR()
        obj_tx_fail_err() <inline int obj_tx_fail_err (int errnum, uint64_t flags) at libpmemobj/tx.c:137>:
            obj_tx_abort() <void obj_tx_abort (int errnum, int user) at libpmemobj/tx.c:914>:
                LOG()
                get_tx() <struct tx *get_tx () at libpmemobj/tx.c:54>:
                ASSERT_IN_TX()
                ASSERT_TX_STAGE_WORK()
                ASSERT()
                PMDK_SLIST_FIRST()
                PMDK_SLIST_NEXT()
                tx_abort() <void tx_abort (PMEMobjpool *pop, struct lane *lane) at libpmemobj/tx.c:447>:
                    LOG()
                    get_tx() <struct tx *get_tx () at libpmemobj/tx.c:54>:
                    tx_abort_set() <void tx_abort_set (PMEMobjpool *pop, struct lane *lane) at libpmemobj/tx.c:391>:
                        LOG()
                        ulog_foreach_entry() <int ulog_foreach_entry (struct ulog *ulog, ulog_entry_cb cb, void *arg, const struct pmem_ops *ops) at libpmemobj/ulog.c:180>
                        tx_undo_entry_apply() <int tx_undo_entry_apply (struct ulog_entry_base *e, void *arg, const struct pmem_ops *p_ops) at libpmemobj/tx.c:362>:
                            SUPPRESS_UNUSED()
                            ulog_entry_type() <ulog_operation_type ulog_entry_type (const struct ulog_entry_base *entry) at libpmemobj/ulog.c:59>:
                                ULOG_OPERATION_FROM_OFFSET()
                            tx_restore_range() <void tx_restore_range (PMEMobjpool *pop, struct tx *tx, struct ulog_entry_buf *range) at libpmemobj/tx.c:307>:
                                COMPILE_ERROR_ON()
                                PMDK_SLIST_INIT()
                                Malloc()
                                FATAL()
                                ulog_entry_offset() <uint64_t ulog_entry_offset (const struct ulog_entry_base *entry) at libpmemobj/ulog.c:68>:
                                OBJ_OFF_TO_PTR()
                                PMDK_SLIST_INSERT_HEAD()
                                PMDK_SLIST_FOREACH()
                                tx_remove_range() <void tx_remove_range (struct txr *tx_ranges, void *begin, void *end) at libpmemobj/tx.c:252>:
                                    PMDK_SLIST_FIRST()
                                    PMDK_SLIST_NEXT()
                                    LOG()
                                    Malloc()
                                    FATAL()
                                    PMDK_SLIST_INSERT_HEAD()
                                    PMDK_SLIST_REMOVE()
                                    Free() <Free_func Free at core/alloc.c:91>
                                ASSERT()
                                PMDK_SLIST_EMPTY()
                                PMDK_SLIST_FIRST()
                                PMDK_SLIST_REMOVE_HEAD()
                                pmemops_memcpy()
                                Free() <Free_func Free at core/alloc.c:91>
                            get_tx() <struct tx *get_tx () at libpmemobj/tx.c:54>:
                            ASSERT()
                        pmemops_drain()
                        operation_finish() <void operation_finish (struct operation_context *ctx, unsigned flags) at libpmemobj/memops.c:814>:
                            ASSERTne()
                            out() <void out (const char *fmt, ...) at core/out.c:480>:
                                va_start()
                                out_common() <} void out_common (const char *file, int line, const char *func, int level, const char *suffix, const char *fmt, va_list ap) at core/out.c:334>
                                va_end()
                            ulog_clobber_data() <int ulog_clobber_data (struct ulog *ulog_first, struct ulog_next *next, ulog_free_fn ulog_free, ulog_rm_user_buffer_fn user_buff_remove, const struct pmem_ops *p_ops, unsigned flags) at libpmemobj/ulog.c:713>:
                                ASSERTne()
                                ulog_inc_gen_num() <void ulog_inc_gen_num (struct ulog *ulog, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:605>:
                                    VALGRIND_ADD_TO_TX()
                                    pmemops_persist()
                                    VALGRIND_SET_CLEAN()
                                    VALGRIND_REMOVE_FROM_TX()
                                VEC_SIZE()
                                VEC_GET()
                                ulog_by_offset() <struct ulog *ulog_by_offset (size_t offset, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:36>:
                                    CACHELINE_ALIGN()
                                ulog_free_next() <int ulog_free_next (struct ulog *u, const struct pmem_ops *p_ops, ulog_free_fn ulog_free, ulog_rm_user_buffer_fn user_buff_remove, uint64_t flags) at libpmemobj/ulog.c:625>:
                                    VEC()
                                    VEC_INIT()
                                    ulog_by_offset() <struct ulog *ulog_by_offset (size_t offset, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:36>:
                                        CACHELINE_ALIGN()
                                    pmemops_persist()
                                    VEC_PUSH_BACK()
                                    LOG()
                                    out() <void out (const char *fmt, ...) at core/out.c:480>:
                                        va_start()
                                        out_common() <} void out_common (const char *file, int line, const char *func, int level, const char *suffix, const char *fmt, va_list ap) at core/out.c:334>
                                        va_end()
                                    VEC_FOREACH_REVERSE()
                                    VEC_DELETE()
                            operation_user_buffer_remove() <int operation_user_buffer_remove (void *base, void *addr) at libpmemobj/memops.c:242>:
                                util_mutex_lock()
                                ravl_find() <struct ravl_node *ravl_find (struct ravl *ravl, const void *data, enum ravl_predicate flags) at core/ravl.c:524>:
                                    LOG()
                                    ravl_data() <void *ravl_data (struct ravl_node *node) at core/ravl.c:571>:
                                        memcpy()
                                    ravl_predicate_holds() <int ravl_predicate_holds (int result, struct ravl_node **ret, struct ravl_node *n, enum ravl_predicate flags) at core/ravl.c:489>:
                                        ravl_node_successor() <struct ravl_node *ravl_node_successor (struct ravl_node *n) at core/ravl.c:465>:
                                            ravl_node_cessor() <struct ravl_node *ravl_node_cessor (struct ravl_node *n, enum ravl_slot_type t) at core/ravl.c:443>:
                                                ravl_node_type_most() <struct ravl_node *ravl_node_type_most (struct ravl_node *n, enum ravl_slot_type t) at core/ravl.c:430>:
                                                ravl_slot_opposite() <enum ravl_slot_type ravl_slot_opposite (enum ravl_slot_type t) at core/ravl.c:184>:
                                                    ASSERTne()
                                        ravl_node_predecessor() <struct ravl_node *ravl_node_predecessor (struct ravl_node *n) at core/ravl.c:476>:
                                            ravl_node_cessor() <struct ravl_node *ravl_node_cessor (struct ravl_node *n, enum ravl_slot_type t) at core/ravl.c:443>:
                                                ravl_node_type_most() <struct ravl_node *ravl_node_type_most (struct ravl_node *n, enum ravl_slot_type t) at core/ravl.c:430>:
                                                ravl_slot_opposite() <enum ravl_slot_type ravl_slot_opposite (enum ravl_slot_type t) at core/ravl.c:184>:
                                                    ASSERTne()
                                ASSERTne()
                                ravl_remove() <void ravl_remove (struct ravl *ravl, struct ravl_node *n) at core/ravl.c:545> (R):
                                    LOG()
                                    ravl_node_successor() <struct ravl_node *ravl_node_successor (struct ravl_node *n) at core/ravl.c:465>:
                                        ravl_node_cessor() <struct ravl_node *ravl_node_cessor (struct ravl_node *n, enum ravl_slot_type t) at core/ravl.c:443>:
                                            ravl_node_type_most() <struct ravl_node *ravl_node_type_most (struct ravl_node *n, enum ravl_slot_type t) at core/ravl.c:430>:
                                            ravl_slot_opposite() <enum ravl_slot_type ravl_slot_opposite (enum ravl_slot_type t) at core/ravl.c:184>:
                                                ASSERTne()
                                    memcpy()
                                    ravl_remove() <void ravl_remove (struct ravl *ravl, struct ravl_node *n) at core/ravl.c:545> (recursive: see 33114)
                                    ravl_node_ref() <struct ravl_node **ravl_node_ref (struct ravl *ravl, struct ravl_node *n) at core/ravl.c:223>:
                                        ravl_node_slot_type() <enum ravl_slot_type ravl_node_slot_type (struct ravl_node *n) at core/ravl.c:196>:
                                    Free() <Free_func Free at core/alloc.c:91>
                                util_mutex_unlock()
                            ulog_free_next() <int ulog_free_next (struct ulog *u, const struct pmem_ops *p_ops, ulog_free_fn ulog_free, ulog_rm_user_buffer_fn user_buff_remove, uint64_t flags) at libpmemobj/ulog.c:625>:
                                VEC()
                                VEC_INIT()
                                ulog_by_offset() <struct ulog *ulog_by_offset (size_t offset, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:36>:
                                    CACHELINE_ALIGN()
                                pmemops_persist()
                                VEC_PUSH_BACK()
                                LOG()
                                out() <void out (const char *fmt, ...) at core/out.c:480>:
                                    va_start()
                                    out_common() <} void out_common (const char *file, int line, const char *func, int level, const char *suffix, const char *fmt, va_list ap) at core/out.c:334>
                                    va_end()
                                VEC_FOREACH_REVERSE()
                                VEC_DELETE()
                            ulog_capacity() <size_t ulog_capacity (struct ulog *ulog, size_t ulog_base_bytes, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:206>:
                                ulog_next() <struct ulog *ulog_next (struct ulog *ulog, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:50>:
                                    ulog_by_offset() <struct ulog *ulog_by_offset (size_t offset, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:36>:
                                        CACHELINE_ALIGN()
                            VEC_CLEAR()
                            ulog_rebuild_next_vec() <void ulog_rebuild_next_vec (struct ulog *ulog, struct ulog_next *next, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:223>:
                                VEC_PUSH_BACK()
                                ulog_next() <struct ulog *ulog_next (struct ulog *ulog, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:50>:
                                    ulog_by_offset() <struct ulog *ulog_by_offset (size_t offset, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:36>:
                                        CACHELINE_ALIGN()
                    ravl_delete_cb() <void ravl_delete_cb (struct ravl *ravl, ravl_cb cb, void *arg) at core/ravl.c:102>:
                        ravl_foreach_node() <void ravl_foreach_node (struct ravl_node *n, ravl_cb cb, void *arg, int free_node) at core/ravl.c:74> (R):
                            ravl_foreach_node() <void ravl_foreach_node (struct ravl_node *n, ravl_cb cb, void *arg, int free_node) at core/ravl.c:74> (recursive: see 33152)
                            Free() <Free_func Free at core/alloc.c:91>
                        Free() <Free_func Free at core/alloc.c:91>
                    tx_clean_range() <void tx_clean_range (void *data, void *ctx) at libpmemobj/tx.c:421>:
                        VALGRIND_REMOVE_FROM_TX()
                        OBJ_OFF_TO_PTR()
                        VALGRIND_SET_CLEAN()
                    palloc_cancel() <void palloc_cancel (struct palloc_heap *heap, struct pobj_action *actv, size_t actvcnt) at libpmemobj/palloc.c:648>:
                    VEC_ARR()
                    VEC_SIZE()
                lane_release() <void lane_release (PMEMobjpool *pop) at libpmemobj/lane.c:546>:
                    get_lane_info_record() <inline struct lane_info *get_lane_info_record (PMEMobjpool *pop) at libpmemobj/lane.c:466>:
                        likely()
                        unlikely()
                        lane_info_ht_boot() <inline void lane_info_ht_boot (void) at libpmemobj/lane.c:74>:
                            lane_info_create() <inline void lane_info_create (void) at libpmemobj/lane.c:39>:
                                critnib_new() <struct critnib *critnib_new (void) at libpmemobj/critnib.c:187>:
                                    Zalloc() <void *Zalloc (size_t sz) at core/alloc.c:98>:
                                        Malloc()
                                        memset()
                                    util_mutex_init()
                                    VALGRIND_HG_DRD_DISABLE_CHECKING()
                                FATAL()
                            os_tls_set() <int os_tls_set (os_tls_key_t key, const void *value) at core/os_thread_posix.c:53>:
                                pthread_setspecific()
                            FATAL()
                        critnib_get() <void *critnib_get (struct critnib *c, uint64_t key) at libpmemobj/critnib.c:515>:
                            load() <void load (void *src, void *dst) at libpmemobj/critnib.c:130>:
                                util_atomic_load_explicit64()
                            is_leaf() <inline bool is_leaf (struct critnib_node *n) at libpmemobj/critnib.c:150>:
                            slice_index() <inline unsigned slice_index (uint64_t key, sh_t shift) at libpmemobj/critnib.c:178>:
                            to_leaf() <inline struct critnib_leaf *to_leaf (struct critnib_node *n) at libpmemobj/critnib.c:159>:
                        Malloc()
                        FATAL()
                        critnib_insert() <int critnib_insert (struct critnib *c, uint64_t key, void *value) at libpmemobj/critnib.c:340>:
                            util_mutex_lock()
                            alloc_leaf() <struct critnib_leaf *alloc_leaf (struct critnib *__restrict c) at libpmemobj/critnib.c:311>:
                                Malloc()
                                ERR()
                                VALGRIND_ANNOTATE_NEW_MEMORY()
                            util_mutex_unlock()
                            VALGRIND_HG_DRD_DISABLE_CHECKING()
                            is_leaf() <inline bool is_leaf (struct critnib_node *n) at libpmemobj/critnib.c:150>:
                            path_mask() <inline uint64_t path_mask (sh_t shift) at libpmemobj/critnib.c:169>:
                            slice_index() <inline unsigned slice_index (uint64_t key, sh_t shift) at libpmemobj/critnib.c:178>:
                            store() <void store (void *dst, void *src) at libpmemobj/critnib.c:140>:
                                util_atomic_store_explicit64()
                            to_leaf() <inline struct critnib_leaf *to_leaf (struct critnib_node *n) at libpmemobj/critnib.c:159>:
                            ASSERT()
                            free_leaf() <void free_leaf (struct critnib *__restrict c, struct critnib_leaf *__restrict k) at libpmemobj/critnib.c:298>
                            util_mssb_index64()
                            alloc_node() <struct critnib_node *alloc_node (struct critnib *__restrict c) at libpmemobj/critnib.c:274>:
                                Malloc()
                                ERR()
                                VALGRIND_ANNOTATE_NEW_MEMORY()
                    ASSERTne()
                    unlikely()
                    FATAL()
                    util_bool_compare_and_swap64()
                ERR()
                obj_tx_callback() <void obj_tx_callback (struct tx *tx) at libpmemobj/tx.c:887>:
                    PMDK_SLIST_FIRST()
                    PMDK_SLIST_NEXT()
                util_is_zeroed() <int util_is_zeroed (const void *addr, size_t len) at core/util.c:113>:
                    memcmp()
                longjmp()
        ravl_find() <struct ravl_node *ravl_find (struct ravl *ravl, const void *data, enum ravl_predicate flags) at core/ravl.c:524>:
            LOG()
            ravl_data() <void *ravl_data (struct ravl_node *node) at core/ravl.c:571>:
                memcpy()
            ravl_predicate_holds() <int ravl_predicate_holds (int result, struct ravl_node **ret, struct ravl_node *n, enum ravl_predicate flags) at core/ravl.c:489>:
                ravl_node_successor() <struct ravl_node *ravl_node_successor (struct ravl_node *n) at core/ravl.c:465>:
                    ravl_node_cessor() <struct ravl_node *ravl_node_cessor (struct ravl_node *n, enum ravl_slot_type t) at core/ravl.c:443>:
                        ravl_node_type_most() <struct ravl_node *ravl_node_type_most (struct ravl_node *n, enum ravl_slot_type t) at core/ravl.c:430>:
                        ravl_slot_opposite() <enum ravl_slot_type ravl_slot_opposite (enum ravl_slot_type t) at core/ravl.c:184>:
                            ASSERTne()
                ravl_node_predecessor() <struct ravl_node *ravl_node_predecessor (struct ravl_node *n) at core/ravl.c:476>:
                    ravl_node_cessor() <struct ravl_node *ravl_node_cessor (struct ravl_node *n, enum ravl_slot_type t) at core/ravl.c:443>:
                        ravl_node_type_most() <struct ravl_node *ravl_node_type_most (struct ravl_node *n, enum ravl_slot_type t) at core/ravl.c:430>:
                        ravl_slot_opposite() <enum ravl_slot_type ravl_slot_opposite (enum ravl_slot_type t) at core/ravl.c:184>:
                            ASSERTne()
        ravl_data() <void *ravl_data (struct ravl_node *node) at core/ravl.c:571>:
            memcpy()
        ASSERTeq()
        tx_lane_ranges_insert_def() <int tx_lane_ranges_insert_def (PMEMobjpool *pop, struct tx *tx, const struct tx_range_def *rdef) at libpmemobj/tx.c:562>:
            SUPPRESS_UNUSED()
            LOG()
            ravl_emplace_copy() <int ravl_emplace_copy (struct ravl *ravl, const void *data) at core/ravl.c:384>:
                ravl_emplace() <int ravl_emplace (struct ravl *ravl, ravl_constr constr, const void *arg) at core/ravl.c:393>:
                    LOG()
                    ravl_new_node() <struct ravl_node *ravl_new_node (struct ravl *ravl, ravl_constr constr, const void *arg) at core/ravl.c:161>:
                        Malloc()
                        ERR()
                        ravl_node_insert_constructor() <void ravl_node_insert_constructor (void *data, size_t data_size, const void *arg) at core/ravl.c:139>:
                            SUPPRESS_UNUSED()
                            memcpy()
                    ravl_data() <void *ravl_data (struct ravl_node *node) at core/ravl.c:571>:
                        memcpy()
                    ravl_balance() <void ravl_balance (struct ravl *ravl, struct ravl_node *n) at core/ravl.c:337>:
                        ravl_node_is() <int ravl_node_is (struct ravl_node *n, int i, int j) at core/ravl.c:306>:
                            ravl_node_is_i_j() <int ravl_node_is_i_j (struct ravl_node *n, int i, int j) at core/ravl.c:296>:
                                ravl_node_rank_difference_parent() <int ravl_node_rank_difference_parent (struct ravl_node *p, struct ravl_node *n) at core/ravl.c:275>:
                                    ravl_node_rank() <int ravl_node_rank (struct ravl_node *n) at core/ravl.c:261>:
                        ravl_node_promote() <void ravl_node_promote (struct ravl_node *n) at core/ravl.c:315>
                        ravl_node_sibling() <struct ravl_node *ravl_node_sibling (struct ravl_node *n) at core/ravl.c:209>:
                            ravl_node_slot_type() <enum ravl_slot_type ravl_node_slot_type (struct ravl_node *n) at core/ravl.c:196>:
                        ravl_node_rank_difference() <int ravl_node_rank_difference (struct ravl_node *n) at core/ravl.c:287>:
                            ravl_node_rank_difference_parent() <int ravl_node_rank_difference_parent (struct ravl_node *p, struct ravl_node *n) at core/ravl.c:275>:
                                ravl_node_rank() <int ravl_node_rank (struct ravl_node *n) at core/ravl.c:261>:
                        ravl_node_rank_difference_parent() <int ravl_node_rank_difference_parent (struct ravl_node *p, struct ravl_node *n) at core/ravl.c:275>:
                            ravl_node_rank() <int ravl_node_rank (struct ravl_node *n) at core/ravl.c:261>:
                        ravl_slot_opposite() <enum ravl_slot_type ravl_slot_opposite (enum ravl_slot_type t) at core/ravl.c:184>:
                            ASSERTne()
                        ravl_node_slot_type() <enum ravl_slot_type ravl_node_slot_type (struct ravl_node *n) at core/ravl.c:196>:
                        ravl_rotate() <void ravl_rotate (struct ravl *ravl, struct ravl_node *n) at core/ravl.c:237>:
                            ASSERTne()
                            ravl_node_ref() <struct ravl_node **ravl_node_ref (struct ravl *ravl, struct ravl_node *n) at core/ravl.c:223>:
                                ravl_node_slot_type() <enum ravl_slot_type ravl_node_slot_type (struct ravl_node *n) at core/ravl.c:196>:
                            ravl_node_slot_type() <enum ravl_slot_type ravl_node_slot_type (struct ravl_node *n) at core/ravl.c:196>:
                            ravl_slot_opposite() <enum ravl_slot_type ravl_slot_opposite (enum ravl_slot_type t) at core/ravl.c:184>:
                                ASSERTne()
                        ravl_node_demote() <void ravl_node_demote (struct ravl_node *n) at core/ravl.c:324>:
                            ASSERT()
                    Free() <Free_func Free at core/alloc.c:91>
                ravl_node_copy_constructor() <void ravl_node_copy_constructor (void *data, size_t data_size, const void *arg) at core/ravl.c:152>:
                    memcpy()
            FATAL()
        pmemobj_tx_add_snapshot() <int pmemobj_tx_add_snapshot (struct tx *tx, struct tx_range_def *snapshot) at libpmemobj/tx.c:1167>:
            OBJ_OFF_TO_PTR()
            VALGRIND_ADD_TO_TX()
            vg_verify_initialized() <void vg_verify_initialized (PMEMobjpool *pop, const struct tx_range_def *def) at libpmemobj/tx.c:1135>:
                SUPPRESS_UNUSED()
                VALGRIND_CHECK_MEM_IS_DEFINED()
                VALGRIND_PRINTF()
            tx_action_add() <struct pobj_action *tx_action_add (struct tx *tx) at libpmemobj/tx.c:192>:
                tx_action_reserve() <int tx_action_reserve (struct tx *tx, size_t n) at libpmemobj/tx.c:174>:
                    VEC_SIZE()
                    MIN()
                    operation_reserve() <int operation_reserve (struct operation_context *ctx, size_t new_capacity) at libpmemobj/memops.c:684>:
                        ERR()
                        ulog_reserve() <int ulog_reserve (struct ulog *ulog, size_t ulog_base_nbytes, size_t gen_num, int auto_reserve, size_t *new_capacity, ulog_extend_fn extend, struct ulog_next *next, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:236>:
                            LOG()
                            VEC_FOREACH()
                            ulog_by_offset() <struct ulog *ulog_by_offset (size_t offset, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:36>:
                                CACHELINE_ALIGN()
                            ASSERTne()
                            VEC_PUSH_BACK()
                            ulog_next() <struct ulog *ulog_next (struct ulog *ulog, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:50>:
                                ulog_by_offset() <struct ulog *ulog_by_offset (size_t offset, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:36>:
                                    CACHELINE_ALIGN()
                VEC_INC_BACK()
                VEC_BACK()
            palloc_set_value() <void palloc_set_value (struct palloc_heap *heap, struct pobj_action *act, uint64_t *ptr, uint64_t value) at libpmemobj/palloc.c:86>:
                SUPPRESS_UNUSED()
            operation_add_buffer() <int operation_add_buffer (struct operation_context *ctx, void *dest, void *src, size_t size, ulog_operation_type type) at libpmemobj/memops.c:428> (R):
                operation_reserve() <int operation_reserve (struct operation_context *ctx, size_t new_capacity) at libpmemobj/memops.c:684>:
                    ERR()
                    ulog_reserve() <int ulog_reserve (struct ulog *ulog, size_t ulog_base_nbytes, size_t gen_num, int auto_reserve, size_t *new_capacity, ulog_extend_fn extend, struct ulog_next *next, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:236>:
                        LOG()
                        VEC_FOREACH()
                        ulog_by_offset() <struct ulog *ulog_by_offset (size_t offset, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:36>:
                            CACHELINE_ALIGN()
                        ASSERTne()
                        VEC_PUSH_BACK()
                        ulog_next() <struct ulog *ulog_next (struct ulog *ulog, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:50>:
                            ulog_by_offset() <struct ulog *ulog_by_offset (size_t offset, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:36>:
                                CACHELINE_ALIGN()
                ulog_next() <struct ulog *ulog_next (struct ulog *ulog, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:50>:
                    ulog_by_offset() <struct ulog *ulog_by_offset (size_t offset, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:36>:
                        CACHELINE_ALIGN()
                ASSERTne()
                MIN()
                ALIGN_UP()
                ulog_clobber_entry() <void ulog_clobber_entry (const struct ulog_entry_base *e, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:405>:
                    CACHELINE_ALIGN()
                    VALGRIND_ADD_TO_TX()
                    pmemops_memset()
                    VALGRIND_REMOVE_FROM_TX()
                ulog_entry_buf_create() <struct ulog_entry_buf *ulog_entry_buf_create (struct ulog *ulog, size_t offset, uint64_t gen_num, uint64_t *dest, const void *src, uint64_t size, ulog_operation_type type, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:421>:
                    alloca()
                    ULOG_OPERATION()
                    MIN()
                    memcpy()
                    memset()
                    ALIGN_DOWN()
                    ASSERT()
                    IS_CACHELINE_ALIGNED()
                    VALGRIND_ADD_TO_TX()
                    pmemops_memcpy()
                    VALGRIND_REMOVE_FROM_TX()
                    util_checksum_seq() <uint64_t util_checksum_seq (const void *addr, size_t len, uint64_t csum) at core/util.c:197>:
                        abort()
                        le32toh()
                    pmemops_drain()
                    VALGRIND_MAKE_MEM_DEFINED()
                    ulog_entry_valid() <int ulog_entry_valid (struct ulog *ulog, const struct ulog_entry_base *entry) at libpmemobj/ulog.c:103>:
                        ulog_entry_type() <ulog_operation_type ulog_entry_type (const struct ulog_entry_base *entry) at libpmemobj/ulog.c:59>:
                            ULOG_OPERATION_FROM_OFFSET()
                        ulog_entry_size() <size_t ulog_entry_size (const struct ulog_entry_base *entry) at libpmemobj/ulog.c:77>:
                            ulog_entry_type() <ulog_operation_type ulog_entry_type (const struct ulog_entry_base *entry) at libpmemobj/ulog.c:59>:
                                ULOG_OPERATION_FROM_OFFSET()
                            CACHELINE_ALIGN()
                            ASSERT()
                        util_checksum_compute() <uint64_t util_checksum_compute (void *addr, size_t len, uint64_t *csump, size_t skip_off) at core/util.c:134>:
                            abort()
                            le32toh()
                        util_checksum_seq() <uint64_t util_checksum_seq (const void *addr, size_t len, uint64_t csum) at core/util.c:197>:
                            abort()
                            le32toh()
                ASSERT()
                ulog_entry_size() <size_t ulog_entry_size (const struct ulog_entry_base *entry) at libpmemobj/ulog.c:77>:
                    ulog_entry_type() <ulog_operation_type ulog_entry_type (const struct ulog_entry_base *entry) at libpmemobj/ulog.c:59>:
                        ULOG_OPERATION_FROM_OFFSET()
                    CACHELINE_ALIGN()
                    ASSERT()
                operation_add_buffer() <int operation_add_buffer (struct operation_context *ctx, void *dest, void *src, size_t size, ulog_operation_type type) at libpmemobj/memops.c:428> (recursive: see 33307)
        MAX()
        pmemobj_tx_merge_flags() <void pmemobj_tx_merge_flags (struct tx_range_def *dest, struct tx_range_def *merged) at libpmemobj/tx.c:1210>:
        ravl_remove() <void ravl_remove (struct ravl *ravl, struct ravl_node *n) at core/ravl.c:545> (R):
            LOG()
            ravl_node_successor() <struct ravl_node *ravl_node_successor (struct ravl_node *n) at core/ravl.c:465>:
                ravl_node_cessor() <struct ravl_node *ravl_node_cessor (struct ravl_node *n, enum ravl_slot_type t) at core/ravl.c:443>:
                    ravl_node_type_most() <struct ravl_node *ravl_node_type_most (struct ravl_node *n, enum ravl_slot_type t) at core/ravl.c:430>:
                    ravl_slot_opposite() <enum ravl_slot_type ravl_slot_opposite (enum ravl_slot_type t) at core/ravl.c:184>:
                        ASSERTne()
            memcpy()
            ravl_remove() <void ravl_remove (struct ravl *ravl, struct ravl_node *n) at core/ravl.c:545> (recursive: see 33371)
            ravl_node_ref() <struct ravl_node **ravl_node_ref (struct ravl *ravl, struct ravl_node *n) at core/ravl.c:223>:
                ravl_node_slot_type() <enum ravl_slot_type ravl_node_slot_type (struct ravl_node *n) at core/ravl.c:196>:
            Free() <Free_func Free at core/alloc.c:91>
        ASSERT()
pmemobj_tx_xalloc() <PMEMoid pmemobj_tx_xalloc (size_t size, uint64_t type_num, uint64_t flags) at libpmemobj/tx.c:1620>:
    LOG()
    get_tx() <struct tx *get_tx () at libpmemobj/tx.c:54>:
    ASSERT_IN_TX()
    ASSERT_TX_STAGE_WORK()
    tx_abort_on_failure_flag() <uint64_t tx_abort_on_failure_flag (struct tx *tx) at libpmemobj/tx.c:840>:
        PMDK_SLIST_FIRST()
    PMEMOBJ_API_START()
    ERR()
    obj_tx_fail_null() <inline PMEMoid obj_tx_fail_null (int errnum, uint64_t flags) at libpmemobj/tx.c:150>:
        obj_tx_abort() <void obj_tx_abort (int errnum, int user) at libpmemobj/tx.c:914>:
            LOG()
            get_tx() <struct tx *get_tx () at libpmemobj/tx.c:54>:
            ASSERT_IN_TX()
            ASSERT_TX_STAGE_WORK()
            ASSERT()
            PMDK_SLIST_FIRST()
            PMDK_SLIST_NEXT()
            tx_abort() <void tx_abort (PMEMobjpool *pop, struct lane *lane) at libpmemobj/tx.c:447>:
                LOG()
                get_tx() <struct tx *get_tx () at libpmemobj/tx.c:54>:
                tx_abort_set() <void tx_abort_set (PMEMobjpool *pop, struct lane *lane) at libpmemobj/tx.c:391>:
                    LOG()
                    ulog_foreach_entry() <int ulog_foreach_entry (struct ulog *ulog, ulog_entry_cb cb, void *arg, const struct pmem_ops *ops) at libpmemobj/ulog.c:180>
                    tx_undo_entry_apply() <int tx_undo_entry_apply (struct ulog_entry_base *e, void *arg, const struct pmem_ops *p_ops) at libpmemobj/tx.c:362>:
                        SUPPRESS_UNUSED()
                        ulog_entry_type() <ulog_operation_type ulog_entry_type (const struct ulog_entry_base *entry) at libpmemobj/ulog.c:59>:
                            ULOG_OPERATION_FROM_OFFSET()
                        tx_restore_range() <void tx_restore_range (PMEMobjpool *pop, struct tx *tx, struct ulog_entry_buf *range) at libpmemobj/tx.c:307>:
                            COMPILE_ERROR_ON()
                            PMDK_SLIST_INIT()
                            Malloc()
                            FATAL()
                            ulog_entry_offset() <uint64_t ulog_entry_offset (const struct ulog_entry_base *entry) at libpmemobj/ulog.c:68>:
                            OBJ_OFF_TO_PTR()
                            PMDK_SLIST_INSERT_HEAD()
                            PMDK_SLIST_FOREACH()
                            tx_remove_range() <void tx_remove_range (struct txr *tx_ranges, void *begin, void *end) at libpmemobj/tx.c:252>:
                                PMDK_SLIST_FIRST()
                                PMDK_SLIST_NEXT()
                                LOG()
                                Malloc()
                                FATAL()
                                PMDK_SLIST_INSERT_HEAD()
                                PMDK_SLIST_REMOVE()
                                Free() <Free_func Free at core/alloc.c:91>
                            ASSERT()
                            PMDK_SLIST_EMPTY()
                            PMDK_SLIST_FIRST()
                            PMDK_SLIST_REMOVE_HEAD()
                            pmemops_memcpy()
                            Free() <Free_func Free at core/alloc.c:91>
                        get_tx() <struct tx *get_tx () at libpmemobj/tx.c:54>:
                        ASSERT()
                    pmemops_drain()
                    operation_finish() <void operation_finish (struct operation_context *ctx, unsigned flags) at libpmemobj/memops.c:814>:
                        ASSERTne()
                        out() <void out (const char *fmt, ...) at core/out.c:480>:
                            va_start()
                            out_common() <} void out_common (const char *file, int line, const char *func, int level, const char *suffix, const char *fmt, va_list ap) at core/out.c:334>
                            va_end()
                        ulog_clobber_data() <int ulog_clobber_data (struct ulog *ulog_first, struct ulog_next *next, ulog_free_fn ulog_free, ulog_rm_user_buffer_fn user_buff_remove, const struct pmem_ops *p_ops, unsigned flags) at libpmemobj/ulog.c:713>:
                            ASSERTne()
                            ulog_inc_gen_num() <void ulog_inc_gen_num (struct ulog *ulog, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:605>:
                                VALGRIND_ADD_TO_TX()
                                pmemops_persist()
                                VALGRIND_SET_CLEAN()
                                VALGRIND_REMOVE_FROM_TX()
                            VEC_SIZE()
                            VEC_GET()
                            ulog_by_offset() <struct ulog *ulog_by_offset (size_t offset, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:36>:
                                CACHELINE_ALIGN()
                            ulog_free_next() <int ulog_free_next (struct ulog *u, const struct pmem_ops *p_ops, ulog_free_fn ulog_free, ulog_rm_user_buffer_fn user_buff_remove, uint64_t flags) at libpmemobj/ulog.c:625>:
                                VEC()
                                VEC_INIT()
                                ulog_by_offset() <struct ulog *ulog_by_offset (size_t offset, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:36>:
                                    CACHELINE_ALIGN()
                                pmemops_persist()
                                VEC_PUSH_BACK()
                                LOG()
                                out() <void out (const char *fmt, ...) at core/out.c:480>:
                                    va_start()
                                    out_common() <} void out_common (const char *file, int line, const char *func, int level, const char *suffix, const char *fmt, va_list ap) at core/out.c:334>
                                    va_end()
                                VEC_FOREACH_REVERSE()
                                VEC_DELETE()
                        operation_user_buffer_remove() <int operation_user_buffer_remove (void *base, void *addr) at libpmemobj/memops.c:242>:
                            util_mutex_lock()
                            ravl_find() <struct ravl_node *ravl_find (struct ravl *ravl, const void *data, enum ravl_predicate flags) at core/ravl.c:524>:
                                LOG()
                                ravl_data() <void *ravl_data (struct ravl_node *node) at core/ravl.c:571>:
                                    memcpy()
                                ravl_predicate_holds() <int ravl_predicate_holds (int result, struct ravl_node **ret, struct ravl_node *n, enum ravl_predicate flags) at core/ravl.c:489>:
                                    ravl_node_successor() <struct ravl_node *ravl_node_successor (struct ravl_node *n) at core/ravl.c:465>:
                                        ravl_node_cessor() <struct ravl_node *ravl_node_cessor (struct ravl_node *n, enum ravl_slot_type t) at core/ravl.c:443>:
                                            ravl_node_type_most() <struct ravl_node *ravl_node_type_most (struct ravl_node *n, enum ravl_slot_type t) at core/ravl.c:430>:
                                            ravl_slot_opposite() <enum ravl_slot_type ravl_slot_opposite (enum ravl_slot_type t) at core/ravl.c:184>:
                                                ASSERTne()
                                    ravl_node_predecessor() <struct ravl_node *ravl_node_predecessor (struct ravl_node *n) at core/ravl.c:476>:
                                        ravl_node_cessor() <struct ravl_node *ravl_node_cessor (struct ravl_node *n, enum ravl_slot_type t) at core/ravl.c:443>:
                                            ravl_node_type_most() <struct ravl_node *ravl_node_type_most (struct ravl_node *n, enum ravl_slot_type t) at core/ravl.c:430>:
                                            ravl_slot_opposite() <enum ravl_slot_type ravl_slot_opposite (enum ravl_slot_type t) at core/ravl.c:184>:
                                                ASSERTne()
                            ASSERTne()
                            ravl_remove() <void ravl_remove (struct ravl *ravl, struct ravl_node *n) at core/ravl.c:545> (R):
                                LOG()
                                ravl_node_successor() <struct ravl_node *ravl_node_successor (struct ravl_node *n) at core/ravl.c:465>:
                                    ravl_node_cessor() <struct ravl_node *ravl_node_cessor (struct ravl_node *n, enum ravl_slot_type t) at core/ravl.c:443>:
                                        ravl_node_type_most() <struct ravl_node *ravl_node_type_most (struct ravl_node *n, enum ravl_slot_type t) at core/ravl.c:430>:
                                        ravl_slot_opposite() <enum ravl_slot_type ravl_slot_opposite (enum ravl_slot_type t) at core/ravl.c:184>:
                                            ASSERTne()
                                memcpy()
                                ravl_remove() <void ravl_remove (struct ravl *ravl, struct ravl_node *n) at core/ravl.c:545> (recursive: see 33488)
                                ravl_node_ref() <struct ravl_node **ravl_node_ref (struct ravl *ravl, struct ravl_node *n) at core/ravl.c:223>:
                                    ravl_node_slot_type() <enum ravl_slot_type ravl_node_slot_type (struct ravl_node *n) at core/ravl.c:196>:
                                Free() <Free_func Free at core/alloc.c:91>
                            util_mutex_unlock()
                        ulog_free_next() <int ulog_free_next (struct ulog *u, const struct pmem_ops *p_ops, ulog_free_fn ulog_free, ulog_rm_user_buffer_fn user_buff_remove, uint64_t flags) at libpmemobj/ulog.c:625>:
                            VEC()
                            VEC_INIT()
                            ulog_by_offset() <struct ulog *ulog_by_offset (size_t offset, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:36>:
                                CACHELINE_ALIGN()
                            pmemops_persist()
                            VEC_PUSH_BACK()
                            LOG()
                            out() <void out (const char *fmt, ...) at core/out.c:480>:
                                va_start()
                                out_common() <} void out_common (const char *file, int line, const char *func, int level, const char *suffix, const char *fmt, va_list ap) at core/out.c:334>
                                va_end()
                            VEC_FOREACH_REVERSE()
                            VEC_DELETE()
                        ulog_capacity() <size_t ulog_capacity (struct ulog *ulog, size_t ulog_base_bytes, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:206>:
                            ulog_next() <struct ulog *ulog_next (struct ulog *ulog, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:50>:
                                ulog_by_offset() <struct ulog *ulog_by_offset (size_t offset, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:36>:
                                    CACHELINE_ALIGN()
                        VEC_CLEAR()
                        ulog_rebuild_next_vec() <void ulog_rebuild_next_vec (struct ulog *ulog, struct ulog_next *next, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:223>:
                            VEC_PUSH_BACK()
                            ulog_next() <struct ulog *ulog_next (struct ulog *ulog, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:50>:
                                ulog_by_offset() <struct ulog *ulog_by_offset (size_t offset, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:36>:
                                    CACHELINE_ALIGN()
                ravl_delete_cb() <void ravl_delete_cb (struct ravl *ravl, ravl_cb cb, void *arg) at core/ravl.c:102>:
                    ravl_foreach_node() <void ravl_foreach_node (struct ravl_node *n, ravl_cb cb, void *arg, int free_node) at core/ravl.c:74> (R):
                        ravl_foreach_node() <void ravl_foreach_node (struct ravl_node *n, ravl_cb cb, void *arg, int free_node) at core/ravl.c:74> (recursive: see 33526)
                        Free() <Free_func Free at core/alloc.c:91>
                    Free() <Free_func Free at core/alloc.c:91>
                tx_clean_range() <void tx_clean_range (void *data, void *ctx) at libpmemobj/tx.c:421>:
                    VALGRIND_REMOVE_FROM_TX()
                    OBJ_OFF_TO_PTR()
                    VALGRIND_SET_CLEAN()
                palloc_cancel() <void palloc_cancel (struct palloc_heap *heap, struct pobj_action *actv, size_t actvcnt) at libpmemobj/palloc.c:648>:
                VEC_ARR()
                VEC_SIZE()
            lane_release() <void lane_release (PMEMobjpool *pop) at libpmemobj/lane.c:546>:
                get_lane_info_record() <inline struct lane_info *get_lane_info_record (PMEMobjpool *pop) at libpmemobj/lane.c:466>:
                    likely()
                    unlikely()
                    lane_info_ht_boot() <inline void lane_info_ht_boot (void) at libpmemobj/lane.c:74>:
                        lane_info_create() <inline void lane_info_create (void) at libpmemobj/lane.c:39>:
                            critnib_new() <struct critnib *critnib_new (void) at libpmemobj/critnib.c:187>:
                                Zalloc() <void *Zalloc (size_t sz) at core/alloc.c:98>:
                                    Malloc()
                                    memset()
                                util_mutex_init()
                                VALGRIND_HG_DRD_DISABLE_CHECKING()
                            FATAL()
                        os_tls_set() <int os_tls_set (os_tls_key_t key, const void *value) at core/os_thread_posix.c:53>:
                            pthread_setspecific()
                        FATAL()
                    critnib_get() <void *critnib_get (struct critnib *c, uint64_t key) at libpmemobj/critnib.c:515>:
                        load() <void load (void *src, void *dst) at libpmemobj/critnib.c:130>:
                            util_atomic_load_explicit64()
                        is_leaf() <inline bool is_leaf (struct critnib_node *n) at libpmemobj/critnib.c:150>:
                        slice_index() <inline unsigned slice_index (uint64_t key, sh_t shift) at libpmemobj/critnib.c:178>:
                        to_leaf() <inline struct critnib_leaf *to_leaf (struct critnib_node *n) at libpmemobj/critnib.c:159>:
                    Malloc()
                    FATAL()
                    critnib_insert() <int critnib_insert (struct critnib *c, uint64_t key, void *value) at libpmemobj/critnib.c:340>:
                        util_mutex_lock()
                        alloc_leaf() <struct critnib_leaf *alloc_leaf (struct critnib *__restrict c) at libpmemobj/critnib.c:311>:
                            Malloc()
                            ERR()
                            VALGRIND_ANNOTATE_NEW_MEMORY()
                        util_mutex_unlock()
                        VALGRIND_HG_DRD_DISABLE_CHECKING()
                        is_leaf() <inline bool is_leaf (struct critnib_node *n) at libpmemobj/critnib.c:150>:
                        path_mask() <inline uint64_t path_mask (sh_t shift) at libpmemobj/critnib.c:169>:
                        slice_index() <inline unsigned slice_index (uint64_t key, sh_t shift) at libpmemobj/critnib.c:178>:
                        store() <void store (void *dst, void *src) at libpmemobj/critnib.c:140>:
                            util_atomic_store_explicit64()
                        to_leaf() <inline struct critnib_leaf *to_leaf (struct critnib_node *n) at libpmemobj/critnib.c:159>:
                        ASSERT()
                        free_leaf() <void free_leaf (struct critnib *__restrict c, struct critnib_leaf *__restrict k) at libpmemobj/critnib.c:298>
                        util_mssb_index64()
                        alloc_node() <struct critnib_node *alloc_node (struct critnib *__restrict c) at libpmemobj/critnib.c:274>:
                            Malloc()
                            ERR()
                            VALGRIND_ANNOTATE_NEW_MEMORY()
                ASSERTne()
                unlikely()
                FATAL()
                util_bool_compare_and_swap64()
            ERR()
            obj_tx_callback() <void obj_tx_callback (struct tx *tx) at libpmemobj/tx.c:887>:
                PMDK_SLIST_FIRST()
                PMDK_SLIST_NEXT()
            util_is_zeroed() <int util_is_zeroed (const void *addr, size_t len) at core/util.c:113>:
                memcmp()
            longjmp()
    PMEMOBJ_API_END()
    tx_alloc_common() <PMEMoid tx_alloc_common (struct tx *tx, size_t size, type_num_t type_num, palloc_constr constructor, struct tx_alloc_args args) at libpmemobj/tx.c:581>:
        LOG()
        ERR()
        obj_tx_fail_null() <inline PMEMoid obj_tx_fail_null (int errnum, uint64_t flags) at libpmemobj/tx.c:150>:
            obj_tx_abort() <void obj_tx_abort (int errnum, int user) at libpmemobj/tx.c:914>:
                LOG()
                get_tx() <struct tx *get_tx () at libpmemobj/tx.c:54>:
                ASSERT_IN_TX()
                ASSERT_TX_STAGE_WORK()
                ASSERT()
                PMDK_SLIST_FIRST()
                PMDK_SLIST_NEXT()
                tx_abort() <void tx_abort (PMEMobjpool *pop, struct lane *lane) at libpmemobj/tx.c:447>:
                    LOG()
                    get_tx() <struct tx *get_tx () at libpmemobj/tx.c:54>:
                    tx_abort_set() <void tx_abort_set (PMEMobjpool *pop, struct lane *lane) at libpmemobj/tx.c:391>:
                        LOG()
                        ulog_foreach_entry() <int ulog_foreach_entry (struct ulog *ulog, ulog_entry_cb cb, void *arg, const struct pmem_ops *ops) at libpmemobj/ulog.c:180>
                        tx_undo_entry_apply() <int tx_undo_entry_apply (struct ulog_entry_base *e, void *arg, const struct pmem_ops *p_ops) at libpmemobj/tx.c:362>:
                            SUPPRESS_UNUSED()
                            ulog_entry_type() <ulog_operation_type ulog_entry_type (const struct ulog_entry_base *entry) at libpmemobj/ulog.c:59>:
                                ULOG_OPERATION_FROM_OFFSET()
                            tx_restore_range() <void tx_restore_range (PMEMobjpool *pop, struct tx *tx, struct ulog_entry_buf *range) at libpmemobj/tx.c:307>:
                                COMPILE_ERROR_ON()
                                PMDK_SLIST_INIT()
                                Malloc()
                                FATAL()
                                ulog_entry_offset() <uint64_t ulog_entry_offset (const struct ulog_entry_base *entry) at libpmemobj/ulog.c:68>:
                                OBJ_OFF_TO_PTR()
                                PMDK_SLIST_INSERT_HEAD()
                                PMDK_SLIST_FOREACH()
                                tx_remove_range() <void tx_remove_range (struct txr *tx_ranges, void *begin, void *end) at libpmemobj/tx.c:252>:
                                    PMDK_SLIST_FIRST()
                                    PMDK_SLIST_NEXT()
                                    LOG()
                                    Malloc()
                                    FATAL()
                                    PMDK_SLIST_INSERT_HEAD()
                                    PMDK_SLIST_REMOVE()
                                    Free() <Free_func Free at core/alloc.c:91>
                                ASSERT()
                                PMDK_SLIST_EMPTY()
                                PMDK_SLIST_FIRST()
                                PMDK_SLIST_REMOVE_HEAD()
                                pmemops_memcpy()
                                Free() <Free_func Free at core/alloc.c:91>
                            get_tx() <struct tx *get_tx () at libpmemobj/tx.c:54>:
                            ASSERT()
                        pmemops_drain()
                        operation_finish() <void operation_finish (struct operation_context *ctx, unsigned flags) at libpmemobj/memops.c:814>:
                            ASSERTne()
                            out() <void out (const char *fmt, ...) at core/out.c:480>:
                                va_start()
                                out_common() <} void out_common (const char *file, int line, const char *func, int level, const char *suffix, const char *fmt, va_list ap) at core/out.c:334>
                                va_end()
                            ulog_clobber_data() <int ulog_clobber_data (struct ulog *ulog_first, struct ulog_next *next, ulog_free_fn ulog_free, ulog_rm_user_buffer_fn user_buff_remove, const struct pmem_ops *p_ops, unsigned flags) at libpmemobj/ulog.c:713>:
                                ASSERTne()
                                ulog_inc_gen_num() <void ulog_inc_gen_num (struct ulog *ulog, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:605>:
                                    VALGRIND_ADD_TO_TX()
                                    pmemops_persist()
                                    VALGRIND_SET_CLEAN()
                                    VALGRIND_REMOVE_FROM_TX()
                                VEC_SIZE()
                                VEC_GET()
                                ulog_by_offset() <struct ulog *ulog_by_offset (size_t offset, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:36>:
                                    CACHELINE_ALIGN()
                                ulog_free_next() <int ulog_free_next (struct ulog *u, const struct pmem_ops *p_ops, ulog_free_fn ulog_free, ulog_rm_user_buffer_fn user_buff_remove, uint64_t flags) at libpmemobj/ulog.c:625>:
                                    VEC()
                                    VEC_INIT()
                                    ulog_by_offset() <struct ulog *ulog_by_offset (size_t offset, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:36>:
                                        CACHELINE_ALIGN()
                                    pmemops_persist()
                                    VEC_PUSH_BACK()
                                    LOG()
                                    out() <void out (const char *fmt, ...) at core/out.c:480>:
                                        va_start()
                                        out_common() <} void out_common (const char *file, int line, const char *func, int level, const char *suffix, const char *fmt, va_list ap) at core/out.c:334>
                                        va_end()
                                    VEC_FOREACH_REVERSE()
                                    VEC_DELETE()
                            operation_user_buffer_remove() <int operation_user_buffer_remove (void *base, void *addr) at libpmemobj/memops.c:242>:
                                util_mutex_lock()
                                ravl_find() <struct ravl_node *ravl_find (struct ravl *ravl, const void *data, enum ravl_predicate flags) at core/ravl.c:524>:
                                    LOG()
                                    ravl_data() <void *ravl_data (struct ravl_node *node) at core/ravl.c:571>:
                                        memcpy()
                                    ravl_predicate_holds() <int ravl_predicate_holds (int result, struct ravl_node **ret, struct ravl_node *n, enum ravl_predicate flags) at core/ravl.c:489>:
                                        ravl_node_successor() <struct ravl_node *ravl_node_successor (struct ravl_node *n) at core/ravl.c:465>:
                                            ravl_node_cessor() <struct ravl_node *ravl_node_cessor (struct ravl_node *n, enum ravl_slot_type t) at core/ravl.c:443>:
                                                ravl_node_type_most() <struct ravl_node *ravl_node_type_most (struct ravl_node *n, enum ravl_slot_type t) at core/ravl.c:430>:
                                                ravl_slot_opposite() <enum ravl_slot_type ravl_slot_opposite (enum ravl_slot_type t) at core/ravl.c:184>:
                                                    ASSERTne()
                                        ravl_node_predecessor() <struct ravl_node *ravl_node_predecessor (struct ravl_node *n) at core/ravl.c:476>:
                                            ravl_node_cessor() <struct ravl_node *ravl_node_cessor (struct ravl_node *n, enum ravl_slot_type t) at core/ravl.c:443>:
                                                ravl_node_type_most() <struct ravl_node *ravl_node_type_most (struct ravl_node *n, enum ravl_slot_type t) at core/ravl.c:430>:
                                                ravl_slot_opposite() <enum ravl_slot_type ravl_slot_opposite (enum ravl_slot_type t) at core/ravl.c:184>:
                                                    ASSERTne()
                                ASSERTne()
                                ravl_remove() <void ravl_remove (struct ravl *ravl, struct ravl_node *n) at core/ravl.c:545> (R):
                                    LOG()
                                    ravl_node_successor() <struct ravl_node *ravl_node_successor (struct ravl_node *n) at core/ravl.c:465>:
                                        ravl_node_cessor() <struct ravl_node *ravl_node_cessor (struct ravl_node *n, enum ravl_slot_type t) at core/ravl.c:443>:
                                            ravl_node_type_most() <struct ravl_node *ravl_node_type_most (struct ravl_node *n, enum ravl_slot_type t) at core/ravl.c:430>:
                                            ravl_slot_opposite() <enum ravl_slot_type ravl_slot_opposite (enum ravl_slot_type t) at core/ravl.c:184>:
                                                ASSERTne()
                                    memcpy()
                                    ravl_remove() <void ravl_remove (struct ravl *ravl, struct ravl_node *n) at core/ravl.c:545> (recursive: see 33692)
                                    ravl_node_ref() <struct ravl_node **ravl_node_ref (struct ravl *ravl, struct ravl_node *n) at core/ravl.c:223>:
                                        ravl_node_slot_type() <enum ravl_slot_type ravl_node_slot_type (struct ravl_node *n) at core/ravl.c:196>:
                                    Free() <Free_func Free at core/alloc.c:91>
                                util_mutex_unlock()
                            ulog_free_next() <int ulog_free_next (struct ulog *u, const struct pmem_ops *p_ops, ulog_free_fn ulog_free, ulog_rm_user_buffer_fn user_buff_remove, uint64_t flags) at libpmemobj/ulog.c:625>:
                                VEC()
                                VEC_INIT()
                                ulog_by_offset() <struct ulog *ulog_by_offset (size_t offset, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:36>:
                                    CACHELINE_ALIGN()
                                pmemops_persist()
                                VEC_PUSH_BACK()
                                LOG()
                                out() <void out (const char *fmt, ...) at core/out.c:480>:
                                    va_start()
                                    out_common() <} void out_common (const char *file, int line, const char *func, int level, const char *suffix, const char *fmt, va_list ap) at core/out.c:334>
                                    va_end()
                                VEC_FOREACH_REVERSE()
                                VEC_DELETE()
                            ulog_capacity() <size_t ulog_capacity (struct ulog *ulog, size_t ulog_base_bytes, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:206>:
                                ulog_next() <struct ulog *ulog_next (struct ulog *ulog, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:50>:
                                    ulog_by_offset() <struct ulog *ulog_by_offset (size_t offset, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:36>:
                                        CACHELINE_ALIGN()
                            VEC_CLEAR()
                            ulog_rebuild_next_vec() <void ulog_rebuild_next_vec (struct ulog *ulog, struct ulog_next *next, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:223>:
                                VEC_PUSH_BACK()
                                ulog_next() <struct ulog *ulog_next (struct ulog *ulog, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:50>:
                                    ulog_by_offset() <struct ulog *ulog_by_offset (size_t offset, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:36>:
                                        CACHELINE_ALIGN()
                    ravl_delete_cb() <void ravl_delete_cb (struct ravl *ravl, ravl_cb cb, void *arg) at core/ravl.c:102>:
                        ravl_foreach_node() <void ravl_foreach_node (struct ravl_node *n, ravl_cb cb, void *arg, int free_node) at core/ravl.c:74> (R):
                            ravl_foreach_node() <void ravl_foreach_node (struct ravl_node *n, ravl_cb cb, void *arg, int free_node) at core/ravl.c:74> (recursive: see 33730)
                            Free() <Free_func Free at core/alloc.c:91>
                        Free() <Free_func Free at core/alloc.c:91>
                    tx_clean_range() <void tx_clean_range (void *data, void *ctx) at libpmemobj/tx.c:421>:
                        VALGRIND_REMOVE_FROM_TX()
                        OBJ_OFF_TO_PTR()
                        VALGRIND_SET_CLEAN()
                    palloc_cancel() <void palloc_cancel (struct palloc_heap *heap, struct pobj_action *actv, size_t actvcnt) at libpmemobj/palloc.c:648>:
                    VEC_ARR()
                    VEC_SIZE()
                lane_release() <void lane_release (PMEMobjpool *pop) at libpmemobj/lane.c:546>:
                    get_lane_info_record() <inline struct lane_info *get_lane_info_record (PMEMobjpool *pop) at libpmemobj/lane.c:466>:
                        likely()
                        unlikely()
                        lane_info_ht_boot() <inline void lane_info_ht_boot (void) at libpmemobj/lane.c:74>:
                            lane_info_create() <inline void lane_info_create (void) at libpmemobj/lane.c:39>:
                                critnib_new() <struct critnib *critnib_new (void) at libpmemobj/critnib.c:187>:
                                    Zalloc() <void *Zalloc (size_t sz) at core/alloc.c:98>:
                                        Malloc()
                                        memset()
                                    util_mutex_init()
                                    VALGRIND_HG_DRD_DISABLE_CHECKING()
                                FATAL()
                            os_tls_set() <int os_tls_set (os_tls_key_t key, const void *value) at core/os_thread_posix.c:53>:
                                pthread_setspecific()
                            FATAL()
                        critnib_get() <void *critnib_get (struct critnib *c, uint64_t key) at libpmemobj/critnib.c:515>:
                            load() <void load (void *src, void *dst) at libpmemobj/critnib.c:130>:
                                util_atomic_load_explicit64()
                            is_leaf() <inline bool is_leaf (struct critnib_node *n) at libpmemobj/critnib.c:150>:
                            slice_index() <inline unsigned slice_index (uint64_t key, sh_t shift) at libpmemobj/critnib.c:178>:
                            to_leaf() <inline struct critnib_leaf *to_leaf (struct critnib_node *n) at libpmemobj/critnib.c:159>:
                        Malloc()
                        FATAL()
                        critnib_insert() <int critnib_insert (struct critnib *c, uint64_t key, void *value) at libpmemobj/critnib.c:340>:
                            util_mutex_lock()
                            alloc_leaf() <struct critnib_leaf *alloc_leaf (struct critnib *__restrict c) at libpmemobj/critnib.c:311>:
                                Malloc()
                                ERR()
                                VALGRIND_ANNOTATE_NEW_MEMORY()
                            util_mutex_unlock()
                            VALGRIND_HG_DRD_DISABLE_CHECKING()
                            is_leaf() <inline bool is_leaf (struct critnib_node *n) at libpmemobj/critnib.c:150>:
                            path_mask() <inline uint64_t path_mask (sh_t shift) at libpmemobj/critnib.c:169>:
                            slice_index() <inline unsigned slice_index (uint64_t key, sh_t shift) at libpmemobj/critnib.c:178>:
                            store() <void store (void *dst, void *src) at libpmemobj/critnib.c:140>:
                                util_atomic_store_explicit64()
                            to_leaf() <inline struct critnib_leaf *to_leaf (struct critnib_node *n) at libpmemobj/critnib.c:159>:
                            ASSERT()
                            free_leaf() <void free_leaf (struct critnib *__restrict c, struct critnib_leaf *__restrict k) at libpmemobj/critnib.c:298>
                            util_mssb_index64()
                            alloc_node() <struct critnib_node *alloc_node (struct critnib *__restrict c) at libpmemobj/critnib.c:274>:
                                Malloc()
                                ERR()
                                VALGRIND_ANNOTATE_NEW_MEMORY()
                    ASSERTne()
                    unlikely()
                    FATAL()
                    util_bool_compare_and_swap64()
                ERR()
                obj_tx_callback() <void obj_tx_callback (struct tx *tx) at libpmemobj/tx.c:887>:
                    PMDK_SLIST_FIRST()
                    PMDK_SLIST_NEXT()
                util_is_zeroed() <int util_is_zeroed (const void *addr, size_t len) at core/util.c:113>:
                    memcmp()
                longjmp()
        tx_action_add() <struct pobj_action *tx_action_add (struct tx *tx) at libpmemobj/tx.c:192>:
            tx_action_reserve() <int tx_action_reserve (struct tx *tx, size_t n) at libpmemobj/tx.c:174>:
                VEC_SIZE()
                MIN()
                operation_reserve() <int operation_reserve (struct operation_context *ctx, size_t new_capacity) at libpmemobj/memops.c:684>:
                    ERR()
                    ulog_reserve() <int ulog_reserve (struct ulog *ulog, size_t ulog_base_nbytes, size_t gen_num, int auto_reserve, size_t *new_capacity, ulog_extend_fn extend, struct ulog_next *next, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:236>:
                        LOG()
                        VEC_FOREACH()
                        ulog_by_offset() <struct ulog *ulog_by_offset (size_t offset, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:36>:
                            CACHELINE_ALIGN()
                        ASSERTne()
                        VEC_PUSH_BACK()
                        ulog_next() <struct ulog *ulog_next (struct ulog *ulog, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:50>:
                            ulog_by_offset() <struct ulog *ulog_by_offset (size_t offset, const struct pmem_ops *p_ops) at libpmemobj/ulog.c:36>:
                                CACHELINE_ALIGN()
            VEC_INC_BACK()
            VEC_BACK()
        palloc_reserve() <int palloc_reserve (struct palloc_heap *heap, size_t size, palloc_constr constructor, void *arg, uint64_t extra_field, uint16_t object_flags, uint16_t class_id, uint16_t arena_id, struct pobj_action *act) at libpmemobj/palloc.c:592>:
            COMPILE_ERROR_ON()
            palloc_reservation_create() <int palloc_reservation_create (struct palloc_heap *heap, size_t size, palloc_constr constructor, void *arg, uint64_t extra_field, uint16_t object_flags, uint16_t class_id, uint16_t arena_id, struct pobj_action_internal *out) at libpmemobj/palloc.c:178>:
                ASSERT()
                heap_get_best_class() <struct alloc_class *heap_get_best_class (struct palloc_heap *heap, size_t size) at libpmemobj/heap.c:221>:
                    alloc_class_by_alloc_size() <struct alloc_class *alloc_class_by_alloc_size (struct alloc_class_collection *ac, size_t size) at libpmemobj/alloc_class.c:568>:
                        SIZE_TO_CLASS_MAP_INDEX()
                        alloc_class_assign_by_size() <struct alloc_class *alloc_class_assign_by_size (struct alloc_class_collection *ac, size_t size) at libpmemobj/alloc_class.c:538>:
                            LOG()
                            SIZE_TO_CLASS_MAP_INDEX()
                            alloc_class_find_min_frag() <struct alloc_class *alloc_class_find_min_frag (struct alloc_class_collection *ac, size_t n) at libpmemobj/alloc_class.c:340>:
                                LOG()
                                ASSERTne()
                            ASSERTne()
                            util_bool_compare_and_swap64()
                alloc_class_by_id() <struct alloc_class *alloc_class_by_id (struct alloc_class_collection *ac, uint8_t id) at libpmemobj/alloc_class.c:612>
                heap_alloc_classes() <struct alloc_class_collection *heap_alloc_classes (struct palloc_heap *heap) at libpmemobj/heap.c:160>:
                ERR()
                alloc_class_calc_size_idx() <ssize_t alloc_class_calc_size_idx (struct alloc_class *c, size_t size) at libpmemobj/alloc_class.c:621>:
                    CALC_SIZE_IDX()
                heap_bucket_acquire() <struct bucket *heap_bucket_acquire (struct palloc_heap *heap, uint8_t class_id, uint16_t arena_id) at libpmemobj/heap.c:470>:
                    out() <void out (const char *fmt, ...) at core/out.c:480>:
                        va_start()
                        out_common() <} void out_common (const char *file, int line, const char *func, int level, const char *suffix, const char *fmt, va_list ap) at core/out.c:334>
                        va_end()
                    heap_thread_arena() <struct arena *heap_thread_arena (struct palloc_heap *heap) at libpmemobj/heap.c:414>:
                        os_tls_get() <void *os_tls_get (os_tls_key_t key) at core/os_thread_posix.c:62>:
                            pthread_getspecific()
                        heap_thread_arena_assign() <struct arena *heap_thread_arena_assign (struct palloc_heap *heap) at libpmemobj/heap.c:381>:
                            util_mutex_lock()
                            ASSERTne()
                            VEC_SIZE()
                            VEC_FOREACH()
                            LOG()
                            heap_arena_thread_attach() <void heap_arena_thread_attach (struct palloc_heap *heap, struct arena *a) at libpmemobj/heap.c:249>:
                                ASSERTeq()
                                os_tls_get() <void *os_tls_get (os_tls_key_t key) at core/os_thread_posix.c:62>:
                                    pthread_getspecific()
                                heap_arena_thread_detach() <void heap_arena_thread_detach (struct arena *a) at libpmemobj/heap.c:232>:
                                    util_fetch_and_sub64()
                                ASSERTne()
                                util_fetch_and_add64()
                                os_tls_set() <int os_tls_set (os_tls_key_t key, const void *value) at core/os_thread_posix.c:53>:
                                    pthread_setspecific()
                            util_mutex_unlock()
                        heap_global_arena_assign() <struct arena *heap_global_arena_assign (struct palloc_heap *heap) at libpmemobj/heap.c:348>:
                            util_mutex_lock()
                            ASSERTne()
                            VEC_SIZE()
                            VEC_FOREACH()
                            LOG()
                            util_mutex_unlock()
                        ASSERT()
                        ASSERTne()
                    ASSERTne()
                    VEC_ARR()
                    bucket_acquire() <struct bucket *bucket_acquire (struct bucket_locked *b) at libpmemobj/bucket.c:117>:
                        util_mutex_lock()
                heap_get_bestfit_block() <int heap_get_bestfit_block (struct palloc_heap *heap, struct bucket *b, struct memory_block *m) at libpmemobj/heap.c:1210> (R):
                    bucket_alloc_class() <struct alloc_class *bucket_alloc_class (struct bucket *b) at libpmemobj/bucket.c:152>
                    bucket_alloc_block() <int bucket_alloc_block (struct bucket *b, struct memory_block *m_out) at libpmemobj/bucket.c:187>
                    heap_ensure_huge_bucket_filled() <int heap_ensure_huge_bucket_filled (struct palloc_heap *heap, struct bucket *bucket) at libpmemobj/heap.c:943>:
                        heap_reclaim_garbage() <int heap_reclaim_garbage (struct palloc_heap *heap, struct bucket *bucket) at libpmemobj/heap.c:923>:
                            heap_recycle_unused() <int heap_recycle_unused (struct palloc_heap *heap, struct recycler *recycler, struct bucket *defb, int force) at libpmemobj/heap.c:894>:
                                recycler_recalc() <struct empty_runs recycler_recalc (struct recycler *r, int force) at libpmemobj/recycler.c:207>:
                                    VEC_INIT()
                                    util_atomic_load64()
                                    util_mutex_trylock()
                                    ravl_find() <struct ravl_node *ravl_find (struct ravl *ravl, const void *data, enum ravl_predicate flags) at core/ravl.c:524>:
                                        LOG()
                                        ravl_data() <void *ravl_data (struct ravl_node *node) at core/ravl.c:571>:
                                            memcpy()
                                        ravl_predicate_holds() <int ravl_predicate_holds (int result, struct ravl_node **ret, struct ravl_node *n, enum ravl_predicate flags) at core/ravl.c:489>:
                                            ravl_node_successor() <struct ravl_node *ravl_node_successor (struct ravl_node *n) at core/ravl.c:465>:
                                                ravl_node_cessor() <struct ravl_node *ravl_node_cessor (struct ravl_node *n, enum ravl_slot_type t) at core/ravl.c:443>:
                                                    ravl_node_type_most() <struct ravl_node *ravl_node_type_most (struct ravl_node *n, enum ravl_slot_type t) at core/ravl.c:430>:
                                                    ravl_slot_opposite() <enum ravl_slot_type ravl_slot_opposite (enum ravl_slot_type t) at core/ravl.c:184>:
                                                        ASSERTne()
                                            ravl_node_predecessor() <struct ravl_node *ravl_node_predecessor (struct ravl_node *n) at core/ravl.c:476>:
                                                ravl_node_cessor() <struct ravl_node *ravl_node_cessor (struct ravl_node *n, enum ravl_slot_type t) at core/ravl.c:443>:
                                                    ravl_node_type_most() <struct ravl_node *ravl_node_type_most (struct ravl_node *n, enum ravl_slot_type t) at core/ravl.c:430>:
                                                    ravl_slot_opposite() <enum ravl_slot_type ravl_slot_opposite (enum ravl_slot_type t) at core/ravl.c:184>:
                                                        ASSERTne()
                                    ravl_data() <void *ravl_data (struct ravl_node *node) at core/ravl.c:571>:
                                        memcpy()
                                    memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                        memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                            heap_get_chunk_hdr()
                                        memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                            heap_get_chunk_hdr()
                                            FATAL()
                                    recycler_element_new() <struct recycler_element recycler_element_new (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/recycler.c:122>:
                                        SUPPRESS_UNUSED()
                                        util_mutex_lock()
                                        util_mutex_unlock()
                                    ASSERT()
                                    util_fetch_and_sub64()
                                    MIN()
                                    ravl_remove() <void ravl_remove (struct ravl *ravl, struct ravl_node *n) at core/ravl.c:545> (R):
                                        LOG()
                                        ravl_node_successor() <struct ravl_node *ravl_node_successor (struct ravl_node *n) at core/ravl.c:465>:
                                            ravl_node_cessor() <struct ravl_node *ravl_node_cessor (struct ravl_node *n, enum ravl_slot_type t) at core/ravl.c:443>:
                                                ravl_node_type_most() <struct ravl_node *ravl_node_type_most (struct ravl_node *n, enum ravl_slot_type t) at core/ravl.c:430>:
                                                ravl_slot_opposite() <enum ravl_slot_type ravl_slot_opposite (enum ravl_slot_type t) at core/ravl.c:184>:
                                                    ASSERTne()
                                        memcpy()
                                        ravl_remove() <void ravl_remove (struct ravl *ravl, struct ravl_node *n) at core/ravl.c:545> (recursive: see 33913)
                                        ravl_node_ref() <struct ravl_node **ravl_node_ref (struct ravl *ravl, struct ravl_node *n) at core/ravl.c:223>:
                                            ravl_node_slot_type() <enum ravl_slot_type ravl_node_slot_type (struct ravl_node *n) at core/ravl.c:196>:
                                        Free() <Free_func Free at core/alloc.c:91>
                                    VEC_PUSH_BACK()
                                    VEC_FOREACH_BY_PTR()
                                    ravl_emplace_copy() <int ravl_emplace_copy (struct ravl *ravl, const void *data) at core/ravl.c:384>:
                                        ravl_emplace() <int ravl_emplace (struct ravl *ravl, ravl_constr constr, const void *arg) at core/ravl.c:393>:
                                            LOG()
                                            ravl_new_node() <struct ravl_node *ravl_new_node (struct ravl *ravl, ravl_constr constr, const void *arg) at core/ravl.c:161>:
                                                Malloc()
                                                ERR()
                                                ravl_node_insert_constructor() <void ravl_node_insert_constructor (void *data, size_t data_size, const void *arg) at core/ravl.c:139>:
                                                    SUPPRESS_UNUSED()
                                                    memcpy()
                                            ravl_data() <void *ravl_data (struct ravl_node *node) at core/ravl.c:571>:
                                                memcpy()
                                            ravl_balance() <void ravl_balance (struct ravl *ravl, struct ravl_node *n) at core/ravl.c:337>:
                                                ravl_node_is() <int ravl_node_is (struct ravl_node *n, int i, int j) at core/ravl.c:306>:
                                                    ravl_node_is_i_j() <int ravl_node_is_i_j (struct ravl_node *n, int i, int j) at core/ravl.c:296>:
                                                        ravl_node_rank_difference_parent() <int ravl_node_rank_difference_parent (struct ravl_node *p, struct ravl_node *n) at core/ravl.c:275>:
                                                            ravl_node_rank() <int ravl_node_rank (struct ravl_node *n) at core/ravl.c:261>:
                                                ravl_node_promote() <void ravl_node_promote (struct ravl_node *n) at core/ravl.c:315>
                                                ravl_node_sibling() <struct ravl_node *ravl_node_sibling (struct ravl_node *n) at core/ravl.c:209>:
                                                    ravl_node_slot_type() <enum ravl_slot_type ravl_node_slot_type (struct ravl_node *n) at core/ravl.c:196>:
                                                ravl_node_rank_difference() <int ravl_node_rank_difference (struct ravl_node *n) at core/ravl.c:287>:
                                                    ravl_node_rank_difference_parent() <int ravl_node_rank_difference_parent (struct ravl_node *p, struct ravl_node *n) at core/ravl.c:275>:
                                                        ravl_node_rank() <int ravl_node_rank (struct ravl_node *n) at core/ravl.c:261>:
                                                ravl_node_rank_difference_parent() <int ravl_node_rank_difference_parent (struct ravl_node *p, struct ravl_node *n) at core/ravl.c:275>:
                                                    ravl_node_rank() <int ravl_node_rank (struct ravl_node *n) at core/ravl.c:261>:
                                                ravl_slot_opposite() <enum ravl_slot_type ravl_slot_opposite (enum ravl_slot_type t) at core/ravl.c:184>:
                                                    ASSERTne()
                                                ravl_node_slot_type() <enum ravl_slot_type ravl_node_slot_type (struct ravl_node *n) at core/ravl.c:196>:
                                                ravl_rotate() <void ravl_rotate (struct ravl *ravl, struct ravl_node *n) at core/ravl.c:237>:
                                                    ASSERTne()
                                                    ravl_node_ref() <struct ravl_node **ravl_node_ref (struct ravl *ravl, struct ravl_node *n) at core/ravl.c:223>:
                                                        ravl_node_slot_type() <enum ravl_slot_type ravl_node_slot_type (struct ravl_node *n) at core/ravl.c:196>:
                                                    ravl_node_slot_type() <enum ravl_slot_type ravl_node_slot_type (struct ravl_node *n) at core/ravl.c:196>:
                                                    ravl_slot_opposite() <enum ravl_slot_type ravl_slot_opposite (enum ravl_slot_type t) at core/ravl.c:184>:
                                                        ASSERTne()
                                                ravl_node_demote() <void ravl_node_demote (struct ravl_node *n) at core/ravl.c:324>:
                                                    ASSERT()
                                            Free() <Free_func Free at core/alloc.c:91>
                                        ravl_node_copy_constructor() <void ravl_node_copy_constructor (void *data, size_t data_size, const void *arg) at core/ravl.c:152>:
                                            memcpy()
                                    VEC_CLEAR()
                                    util_mutex_unlock()
                                VEC_SIZE()
                                heap_bucket_acquire() <struct bucket *heap_bucket_acquire (struct palloc_heap *heap, uint8_t class_id, uint16_t arena_id) at libpmemobj/heap.c:470>:
                                    out() <void out (const char *fmt, ...) at core/out.c:480>:
                                        va_start()
                                        out_common() <} void out_common (const char *file, int line, const char *func, int level, const char *suffix, const char *fmt, va_list ap) at core/out.c:334>
                                        va_end()
                                    heap_thread_arena() <struct arena *heap_thread_arena (struct palloc_heap *heap) at libpmemobj/heap.c:414>:
                                        os_tls_get() <void *os_tls_get (os_tls_key_t key) at core/os_thread_posix.c:62>:
                                            pthread_getspecific()
                                        heap_thread_arena_assign() <struct arena *heap_thread_arena_assign (struct palloc_heap *heap) at libpmemobj/heap.c:381>:
                                            util_mutex_lock()
                                            ASSERTne()
                                            VEC_SIZE()
                                            VEC_FOREACH()
                                            LOG()
                                            heap_arena_thread_attach() <void heap_arena_thread_attach (struct palloc_heap *heap, struct arena *a) at libpmemobj/heap.c:249>:
                                                ASSERTeq()
                                                os_tls_get() <void *os_tls_get (os_tls_key_t key) at core/os_thread_posix.c:62>:
                                                    pthread_getspecific()
                                                heap_arena_thread_detach() <void heap_arena_thread_detach (struct arena *a) at libpmemobj/heap.c:232>:
                                                    util_fetch_and_sub64()
                                                ASSERTne()
                                                util_fetch_and_add64()
                                                os_tls_set() <int os_tls_set (os_tls_key_t key, const void *value) at core/os_thread_posix.c:53>:
                                                    pthread_setspecific()
                                            util_mutex_unlock()
                                        heap_global_arena_assign() <struct arena *heap_global_arena_assign (struct palloc_heap *heap) at libpmemobj/heap.c:348>:
                                            util_mutex_lock()
                                            ASSERTne()
                                            VEC_SIZE()
                                            VEC_FOREACH()
                                            LOG()
                                            util_mutex_unlock()
                                        ASSERT()
                                        ASSERTne()
                                    ASSERTne()
                                    VEC_ARR()
                                    bucket_acquire() <struct bucket *bucket_acquire (struct bucket_locked *b) at libpmemobj/bucket.c:117>:
                                        util_mutex_lock()
                                ASSERT()
                                VEC_FOREACH_BY_PTR()
                                heap_run_into_free_chunk() <void heap_run_into_free_chunk (struct palloc_heap *heap, struct bucket *bucket, struct memory_block *m) at libpmemobj/heap.c:697>:
                                    heap_get_chunk_hdr()
                                    STATS_SUB()
                                    util_mutex_lock()
                                    memblock_huge_init() <struct memory_block memblock_huge_init (struct palloc_heap *heap, uint32_t chunk_id, uint32_t zone_id, uint32_t size_idx) at libpmemobj/memblock.c:1329>:
                                        heap_get_chunk_hdr()
                                        VALGRIND_DO_MAKE_MEM_UNDEFINED()
                                        VALGRIND_ANNOTATE_NEW_MEMORY()
                                        chunk_get_chunk_hdr_value() <uint64_t chunk_get_chunk_hdr_value (uint16_t type, uint16_t flags, uint32_t size_idx) at libpmemobj/memblock.c:604>:
                                            COMPILE_ERROR_ON()
                                            memcpy()
                                        util_atomic_store_explicit64()
                                        pmemops_persist()
                                        huge_write_footer() <void huge_write_footer (struct chunk_header *hdr, uint32_t size_idx) at libpmemobj/memblock.c:1166>:
                                            VALGRIND_DO_MAKE_MEM_UNDEFINED()
                                            VALGRIND_SET_CLEAN()
                                        memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                            memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                                heap_get_chunk_hdr()
                                            memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                                heap_get_chunk_hdr()
                                                FATAL()
                                    heap_free_chunk_reuse() <int heap_free_chunk_reuse (struct palloc_heap *heap, struct bucket *bucket, struct memory_block *m) at libpmemobj/heap.c:674>:
                                        heap_coalesce_huge() <struct memory_block heap_coalesce_huge (struct palloc_heap *heap, struct bucket *b, const struct memory_block *m) at libpmemobj/heap.c:650>:
                                            heap_get_adjacent_free_block() <int heap_get_adjacent_free_block (struct palloc_heap *heap, const struct memory_block *in, struct memory_block *out, int prev) at libpmemobj/heap.c:582>:
                                                ZID_TO_ZONE()
                                                memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                                    memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                                        heap_get_chunk_hdr()
                                                    memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                                        heap_get_chunk_hdr()
                                                        FATAL()
                                            bucket_remove_block() <int bucket_remove_block (struct bucket *b, const struct memory_block *m) at libpmemobj/bucket.c:178>
                                            heap_coalesce() <struct memory_block heap_coalesce (struct palloc_heap *heap, const struct memory_block *blocks[], int n) at libpmemobj/heap.c:621>:
                                                ASSERTne()
                                                memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                                    memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                                        heap_get_chunk_hdr()
                                                    memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                                        heap_get_chunk_hdr()
                                                        FATAL()
                                        bucket_insert_block() <int bucket_insert_block (struct bucket *b, const struct memory_block *m) at libpmemobj/bucket.c:161>:
                                            VALGRIND_DO_MAKE_MEM_NOACCESS()
                                            VALGRIND_ANNOTATE_NEW_MEMORY()
                                    util_mutex_unlock()
                                heap_bucket_release() <void heap_bucket_release (struct bucket *b) at libpmemobj/heap.c:498>:
                                    bucket_release() <void bucket_release (struct bucket *b) at libpmemobj/bucket.c:127>:
                                        util_mutex_unlock()
                                VEC_DELETE()
                        heap_populate_bucket() <int heap_populate_bucket (struct palloc_heap *heap, struct bucket *bucket) at libpmemobj/heap.c:850>:
                            util_atomic_store_explicit32()
                            ZID_TO_ZONE()
                            VALGRIND_ADD_TO_GLOBAL_TX_IGNORE()
                            heap_zone_init() <void heap_zone_init (struct palloc_heap *heap, uint32_t zone_id, uint32_t first_chunk_id) at libpmemobj/heap.c:559>:
                                ZID_TO_ZONE()
                                zone_calc_size_idx() <uint32_t zone_calc_size_idx (uint32_t zone_id, unsigned max_zone, size_t heap_size) at libpmemobj/heap.c:533>:
                                    ASSERT()
                                ASSERT()
                                memblock_huge_init() <struct memory_block memblock_huge_init (struct palloc_heap *heap, uint32_t chunk_id, uint32_t zone_id, uint32_t size_idx) at libpmemobj/memblock.c:1329>:
                                    heap_get_chunk_hdr()
                                    VALGRIND_DO_MAKE_MEM_UNDEFINED()
                                    VALGRIND_ANNOTATE_NEW_MEMORY()
                                    chunk_get_chunk_hdr_value() <uint64_t chunk_get_chunk_hdr_value (uint16_t type, uint16_t flags, uint32_t size_idx) at libpmemobj/memblock.c:604>:
                                        COMPILE_ERROR_ON()
                                        memcpy()
                                    util_atomic_store_explicit64()
                                    pmemops_persist()
                                    huge_write_footer() <void huge_write_footer (struct chunk_header *hdr, uint32_t size_idx) at libpmemobj/memblock.c:1166>:
                                        VALGRIND_DO_MAKE_MEM_UNDEFINED()
                                        VALGRIND_SET_CLEAN()
                                    memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                        memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                            heap_get_chunk_hdr()
                                        memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                            heap_get_chunk_hdr()
                                            FATAL()
                                pmemops_persist()
                            heap_reclaim_zone_garbage() <void heap_reclaim_zone_garbage (struct palloc_heap *heap, struct bucket *bucket, uint32_t zone_id) at libpmemobj/heap.c:775>:
                                ZID_TO_ZONE()
                                ASSERT()
                                memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                    memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                        heap_get_chunk_hdr()
                                    memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                        heap_get_chunk_hdr()
                                        FATAL()
                                heap_reclaim_run() <int heap_reclaim_run (struct palloc_heap *heap, struct memory_block *m, int startup) at libpmemobj/heap.c:733>:
                                    heap_get_chunk_run()
                                    heap_get_chunk_hdr()
                                    alloc_class_by_run() <struct alloc_class *alloc_class_by_run (struct alloc_class_collection *ac, size_t unit_size, uint16_t flags, uint32_t size_idx) at libpmemobj/alloc_class.c:594>:
                                        SIZE_TO_CLASS_MAP_INDEX()
                                        ASSERT()
                                        critnib_get() <void *critnib_get (struct critnib *c, uint64_t key) at libpmemobj/critnib.c:515>:
                                            load() <void load (void *src, void *dst) at libpmemobj/critnib.c:130>:
                                                util_atomic_load_explicit64()
                                            is_leaf() <inline bool is_leaf (struct critnib_node *n) at libpmemobj/critnib.c:150>:
                                            slice_index() <inline unsigned slice_index (uint64_t key, sh_t shift) at libpmemobj/critnib.c:178>:
                                            to_leaf() <inline struct critnib_leaf *to_leaf (struct critnib_node *n) at libpmemobj/critnib.c:159>:
                                        RUN_CLASS_KEY_PACK()
                                    recycler_element_new() <struct recycler_element recycler_element_new (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/recycler.c:122>:
                                        SUPPRESS_UNUSED()
                                        util_mutex_lock()
                                        util_mutex_unlock()
                                    ASSERTeq()
                                    STATS_INC()
                                    heap_get_recycler() <struct recycler *heap_get_recycler (struct palloc_heap *heap, size_t id, size_t nallocs) at libpmemobj/heap.c:106> (R):
                                        util_atomic_load_explicit64()
                                        recycler_new() <struct recycler *recycler_new (struct palloc_heap *heap, size_t nallocs, size_t *peak_arenas) at libpmemobj/recycler.c:74>:
                                            Malloc()
                                            ravl_new_sized() <struct ravl *ravl_new_sized (ravl_compare *compare, size_t data_size) at core/ravl.c:45>:
                                                Malloc()
                                                ERR()
                                            recycler_element_cmp() <int recycler_element_cmp (const void *lhs, const void *rhs) at libpmemobj/recycler.c:23>:
                                            memset()
                                            VEC_INIT()
                                            util_mutex_init()
                                            Free() <Free_func Free at core/alloc.c:91>
                                        util_bool_compare_and_swap64()
                                        recycler_delete() <void recycler_delete (struct recycler *r) at libpmemobj/recycler.c:107>:
                                            VEC_DELETE()
                                            util_mutex_destroy()
                                            ravl_delete() <void ravl_delete (struct ravl *ravl) at core/ravl.c:112>:
                                                ravl_delete_cb() <void ravl_delete_cb (struct ravl *ravl, ravl_cb cb, void *arg) at core/ravl.c:102>:
                                                    ravl_foreach_node() <void ravl_foreach_node (struct ravl_node *n, ravl_cb cb, void *arg, int free_node) at core/ravl.c:74> (R):
                                                        ravl_foreach_node() <void ravl_foreach_node (struct ravl_node *n, ravl_cb cb, void *arg, int free_node) at core/ravl.c:74> (recursive: see 34132)
                                                        Free() <Free_func Free at core/alloc.c:91>
                                                    Free() <Free_func Free at core/alloc.c:91>
                                            Free() <Free_func Free at core/alloc.c:91>
                                        heap_get_recycler() <struct recycler *heap_get_recycler (struct palloc_heap *heap, size_t id, size_t nallocs) at libpmemobj/heap.c:106> (recursive: see 34114)
                                    recycler_put() <int recycler_put (struct recycler *r, struct recycler_element element) at libpmemobj/recycler.c:154>:
                                        util_mutex_lock()
                                        ravl_emplace_copy() <int ravl_emplace_copy (struct ravl *ravl, const void *data) at core/ravl.c:384>:
                                            ravl_emplace() <int ravl_emplace (struct ravl *ravl, ravl_constr constr, const void *arg) at core/ravl.c:393>:
                                                LOG()
                                                ravl_new_node() <struct ravl_node *ravl_new_node (struct ravl *ravl, ravl_constr constr, const void *arg) at core/ravl.c:161>:
                                                    Malloc()
                                                    ERR()
                                                    ravl_node_insert_constructor() <void ravl_node_insert_constructor (void *data, size_t data_size, const void *arg) at core/ravl.c:139>:
                                                        SUPPRESS_UNUSED()
                                                        memcpy()
                                                ravl_data() <void *ravl_data (struct ravl_node *node) at core/ravl.c:571>:
                                                    memcpy()
                                                ravl_balance() <void ravl_balance (struct ravl *ravl, struct ravl_node *n) at core/ravl.c:337>:
                                                    ravl_node_is() <int ravl_node_is (struct ravl_node *n, int i, int j) at core/ravl.c:306>:
                                                        ravl_node_is_i_j() <int ravl_node_is_i_j (struct ravl_node *n, int i, int j) at core/ravl.c:296>:
                                                            ravl_node_rank_difference_parent() <int ravl_node_rank_difference_parent (struct ravl_node *p, struct ravl_node *n) at core/ravl.c:275>:
                                                                ravl_node_rank() <int ravl_node_rank (struct ravl_node *n) at core/ravl.c:261>:
                                                    ravl_node_promote() <void ravl_node_promote (struct ravl_node *n) at core/ravl.c:315>
                                                    ravl_node_sibling() <struct ravl_node *ravl_node_sibling (struct ravl_node *n) at core/ravl.c:209>:
                                                        ravl_node_slot_type() <enum ravl_slot_type ravl_node_slot_type (struct ravl_node *n) at core/ravl.c:196>:
                                                    ravl_node_rank_difference() <int ravl_node_rank_difference (struct ravl_node *n) at core/ravl.c:287>:
                                                        ravl_node_rank_difference_parent() <int ravl_node_rank_difference_parent (struct ravl_node *p, struct ravl_node *n) at core/ravl.c:275>:
                                                            ravl_node_rank() <int ravl_node_rank (struct ravl_node *n) at core/ravl.c:261>:
                                                    ravl_node_rank_difference_parent() <int ravl_node_rank_difference_parent (struct ravl_node *p, struct ravl_node *n) at core/ravl.c:275>:
                                                        ravl_node_rank() <int ravl_node_rank (struct ravl_node *n) at core/ravl.c:261>:
                                                    ravl_slot_opposite() <enum ravl_slot_type ravl_slot_opposite (enum ravl_slot_type t) at core/ravl.c:184>:
                                                        ASSERTne()
                                                    ravl_node_slot_type() <enum ravl_slot_type ravl_node_slot_type (struct ravl_node *n) at core/ravl.c:196>:
                                                    ravl_rotate() <void ravl_rotate (struct ravl *ravl, struct ravl_node *n) at core/ravl.c:237>:
                                                        ASSERTne()
                                                        ravl_node_ref() <struct ravl_node **ravl_node_ref (struct ravl *ravl, struct ravl_node *n) at core/ravl.c:223>:
                                                            ravl_node_slot_type() <enum ravl_slot_type ravl_node_slot_type (struct ravl_node *n) at core/ravl.c:196>:
                                                        ravl_node_slot_type() <enum ravl_slot_type ravl_node_slot_type (struct ravl_node *n) at core/ravl.c:196>:
                                                        ravl_slot_opposite() <enum ravl_slot_type ravl_slot_opposite (enum ravl_slot_type t) at core/ravl.c:184>:
                                                            ASSERTne()
                                                    ravl_node_demote() <void ravl_node_demote (struct ravl_node *n) at core/ravl.c:324>:
                                                        ASSERT()
                                                Free() <Free_func Free at core/alloc.c:91>
                                            ravl_node_copy_constructor() <void ravl_node_copy_constructor (void *data, size_t data_size, const void *arg) at core/ravl.c:152>:
                                                memcpy()
                                        util_mutex_unlock()
                                    ERR()
                                heap_run_into_free_chunk() <void heap_run_into_free_chunk (struct palloc_heap *heap, struct bucket *bucket, struct memory_block *m) at libpmemobj/heap.c:697>:
                                    heap_get_chunk_hdr()
                                    STATS_SUB()
                                    util_mutex_lock()
                                    memblock_huge_init() <struct memory_block memblock_huge_init (struct palloc_heap *heap, uint32_t chunk_id, uint32_t zone_id, uint32_t size_idx) at libpmemobj/memblock.c:1329>:
                                        heap_get_chunk_hdr()
                                        VALGRIND_DO_MAKE_MEM_UNDEFINED()
                                        VALGRIND_ANNOTATE_NEW_MEMORY()
                                        chunk_get_chunk_hdr_value() <uint64_t chunk_get_chunk_hdr_value (uint16_t type, uint16_t flags, uint32_t size_idx) at libpmemobj/memblock.c:604>:
                                            COMPILE_ERROR_ON()
                                            memcpy()
                                        util_atomic_store_explicit64()
                                        pmemops_persist()
                                        huge_write_footer() <void huge_write_footer (struct chunk_header *hdr, uint32_t size_idx) at libpmemobj/memblock.c:1166>:
                                            VALGRIND_DO_MAKE_MEM_UNDEFINED()
                                            VALGRIND_SET_CLEAN()
                                        memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                            memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                                heap_get_chunk_hdr()
                                            memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                                heap_get_chunk_hdr()
                                                FATAL()
                                    heap_free_chunk_reuse() <int heap_free_chunk_reuse (struct palloc_heap *heap, struct bucket *bucket, struct memory_block *m) at libpmemobj/heap.c:674>:
                                        heap_coalesce_huge() <struct memory_block heap_coalesce_huge (struct palloc_heap *heap, struct bucket *b, const struct memory_block *m) at libpmemobj/heap.c:650>:
                                            heap_get_adjacent_free_block() <int heap_get_adjacent_free_block (struct palloc_heap *heap, const struct memory_block *in, struct memory_block *out, int prev) at libpmemobj/heap.c:582>:
                                                ZID_TO_ZONE()
                                                memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                                    memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                                        heap_get_chunk_hdr()
                                                    memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                                        heap_get_chunk_hdr()
                                                        FATAL()
                                            bucket_remove_block() <int bucket_remove_block (struct bucket *b, const struct memory_block *m) at libpmemobj/bucket.c:178>
                                            heap_coalesce() <struct memory_block heap_coalesce (struct palloc_heap *heap, const struct memory_block *blocks[], int n) at libpmemobj/heap.c:621>:
                                                ASSERTne()
                                                memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                                    memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                                        heap_get_chunk_hdr()
                                                    memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                                        heap_get_chunk_hdr()
                                                        FATAL()
                                        bucket_insert_block() <int bucket_insert_block (struct bucket *b, const struct memory_block *m) at libpmemobj/bucket.c:161>:
                                            VALGRIND_DO_MAKE_MEM_NOACCESS()
                                            VALGRIND_ANNOTATE_NEW_MEMORY()
                                    util_mutex_unlock()
                                heap_free_chunk_reuse() <int heap_free_chunk_reuse (struct palloc_heap *heap, struct bucket *bucket, struct memory_block *m) at libpmemobj/heap.c:674>:
                                    heap_coalesce_huge() <struct memory_block heap_coalesce_huge (struct palloc_heap *heap, struct bucket *b, const struct memory_block *m) at libpmemobj/heap.c:650>:
                                        heap_get_adjacent_free_block() <int heap_get_adjacent_free_block (struct palloc_heap *heap, const struct memory_block *in, struct memory_block *out, int prev) at libpmemobj/heap.c:582>:
                                            ZID_TO_ZONE()
                                            memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                                memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                                    heap_get_chunk_hdr()
                                                memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                                    heap_get_chunk_hdr()
                                                    FATAL()
                                        bucket_remove_block() <int bucket_remove_block (struct bucket *b, const struct memory_block *m) at libpmemobj/bucket.c:178>
                                        heap_coalesce() <struct memory_block heap_coalesce (struct palloc_heap *heap, const struct memory_block *blocks[], int n) at libpmemobj/heap.c:621>:
                                            ASSERTne()
                                            memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                                memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                                    heap_get_chunk_hdr()
                                                memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                                    heap_get_chunk_hdr()
                                                    FATAL()
                                    bucket_insert_block() <int bucket_insert_block (struct bucket *b, const struct memory_block *m) at libpmemobj/bucket.c:161>:
                                        VALGRIND_DO_MAKE_MEM_NOACCESS()
                                        VALGRIND_ANNOTATE_NEW_MEMORY()
                        heap_extend() <int heap_extend (struct palloc_heap *heap, struct bucket *b, size_t size) at libpmemobj/heap.c:1515>:
                            util_pool_extend() <void *util_pool_extend (struct pool_set *set, size_t *size, size_t minpartsize) at common/set.c:2231>:
                                LOG()
                                ERR()
                                util_poolset_append_new_part() <int util_poolset_append_new_part (struct pool_set *set, size_t size) at common/set.c:2174>:
                                    LOG()
                                    VEC_SIZE()
                                    VEC_GET()
                                    strlen()
                                    Malloc()
                                    ERR()
                                    snprintf()
                                    util_replica_add_part() <int util_replica_add_part (struct pool_replica **repp, const char *path, size_t filesize) at common/set.c:708>:
                                        LOG()
                                        util_replica_add_part_by_idx() <int util_replica_add_part_by_idx (struct pool_replica **repp, const char *path, size_t filesize, unsigned p) at common/set.c:662>:
                                            LOG()
                                            util_replica_reserve() <int util_replica_reserve (struct pool_replica **repp, unsigned n) at common/set.c:633>:
                                                LOG()
                                                Realloc()
                                                ERR()
                                                memset()
                                            ASSERTne()
                                            util_file_get_type() <enum file_type util_file_get_type (const char *path) at common/file.c:106>:
                                                LOG()
                                                ERR()
                                                util_file_exists() <int util_file_exists (const char *path) at common/file.c:32>:
                                                    LOG()
                                                    os_access() <int os_access (const char *pathname, int mode) at core/os_posix.c:97>:
                                                        access()
                                                    ERR()
                                                os_stat() <int os_stat (const char *pathname, os_stat_t *buf) at core/os_posix.c:79>:
                                                    stat()
                                                util_stat_get_type() <enum file_type util_stat_get_type (const os_stat_t *st) at common/file.c:62>:
                                                    pmem2_get_type_from_stat() <int pmem2_get_type_from_stat (const os_stat_t *st, enum pmem2_file_type *type) at libpmem2/pmem2_utils_linux.c:23>:
                                                        S_ISREG()
                                                        S_ISDIR()
                                                        S_ISCHR()
                                                        ERR()
                                                        util_snprintf() <int util_snprintf (char *str, size_t size, const char *format, ...) at core/util.c:434>:
                                                            va_start()
                                                            vsnprintf()
                                                            va_end()
                                                        os_major()
                                                        os_minor()
                                                        ASSERTinfo()
                                                        LOG()
                                                        realpath()
                                                        strrchr()
                                                        strcmp()
                                                    pmem2_err_to_errno() <int pmem2_err_to_errno (int err) at libpmem2/pmem2_utils.c:67>:
                                                        FATAL()
                                                    ASSERTinfo()
                                            util_file_device_dax_alignment() <size_t util_file_device_dax_alignment (const char *path) at common/file_posix.c:139>:
                                                LOG()
                                                device_dax_alignment() <size_t device_dax_alignment (const char *path) at common/file_posix.c:105>:
                                                    LOG()
                                                    os_open() <int os_open (const char *pathname, int flags, ...) at core/os_posix.c:29>:
                                                        va_start()
                                                        va_arg()
                                                        va_end()
                                                        open()
                                                    pmem2_source_from_fd() <int pmem2_source_from_fd (struct pmem2_source **src, int fd) at libpmem2/source_posix.c:19>:
                                                        PMEM2_ERR_CLR()
                                                        fcntl()
                                                        ERR()
                                                        os_fstat()
                                                        pmem2_get_type_from_stat() <int pmem2_get_type_from_stat (const os_stat_t *st, enum pmem2_file_type *type) at libpmem2/pmem2_utils_linux.c:23>:
                                                            S_ISREG()
                                                            S_ISDIR()
                                                            S_ISCHR()
                                                            ERR()
                                                            util_snprintf() <int util_snprintf (char *str, size_t size, const char *format, ...) at core/util.c:434>:
                                                                va_start()
                                                                vsnprintf()
                                                                va_end()
                                                            os_major()
                                                            os_minor()
                                                            ASSERTinfo()
                                                            LOG()
                                                            realpath()
                                                            strrchr()
                                                            strcmp()
                                                        pmem2_malloc() <void *pmem2_malloc (size_t size, int *err) at libpmem2/pmem2_utils.c:19>:
                                                            Malloc()
                                                            ERR()
                                                        ASSERTne()
                                                    pmem2_device_dax_alignment() <int pmem2_device_dax_alignment (const struct pmem2_source *src, size_t *alignment) at libpmem2/pmem2_utils_ndctl.c:18>:
                                                        ndctl_new()
                                                        ERR()
                                                        pmem2_region_namespace() <int pmem2_region_namespace (struct ndctl_ctx *ctx, const struct pmem2_source *src, struct ndctl_region **pregion, struct ndctl_namespace **pndns) at libpmem2/region_namespace_ndctl.c:131>:
                                                            LOG()
                                                            ERR()
                                                            FOREACH_BUS_REGION_NAMESPACE()
                                                            ndctl_namespace_get_dax()
                                                            ASSERTeq()
                                                            ndctl_dax_get_daxctl_region()
                                                            daxctl_dev_foreach()
                                                            daxctl_dev_get_devname()
                                                            ndctl_match_devdax() <int ndctl_match_devdax (dev_t st_rdev, const char *devname) at libpmem2/region_namespace_ndctl.c:26>:
                                                                LOG()
                                                                stat()
                                                                util_snprintf() <int util_snprintf (char *str, size_t size, const char *format, ...) at core/util.c:434>:
                                                                    va_start()
                                                                    vsnprintf()
                                                                    va_end()
                                                                ERR()
                                                                os_stat() <int os_stat (const char *pathname, os_stat_t *buf) at core/os_posix.c:79>:
                                                                    stat()
                                                            ndctl_namespace_get_btt()
                                                            ndctl_btt_get_block_device()
                                                            ndctl_namespace_get_pfn()
                                                            ndctl_pfn_get_block_device()
                                                            ndctl_namespace_get_block_device()
                                                            ndctl_match_fsdax() <int ndctl_match_fsdax (dev_t st_dev, const char *devname) at libpmem2/region_namespace_ndctl.c:64>:
                                                                LOG()
                                                                util_snprintf() <int util_snprintf (char *str, size_t size, const char *format, ...) at core/util.c:434>:
                                                                    va_start()
                                                                    vsnprintf()
                                                                    va_end()
                                                                ERR()
                                                                major()
                                                                minor()
                                                                os_open() <int os_open (const char *pathname, int flags, ...) at core/os_posix.c:29>:
                                                                    va_start()
                                                                    va_arg()
                                                                    va_end()
                                                                    open()
                                                                read()
                                                                os_close()
                                                                strcmp()
                                                        LOG()
                                                        ndctl_namespace_get_dax()
                                                        ndctl_dax_get_align()
                                                        ndctl_unref()
                                                    pmem2_source_delete() <int pmem2_source_delete (struct pmem2_source **src) at libpmem2/source.c:30>:
                                                        Free() <Free_func Free at core/alloc.c:91>
                                                    os_close()
                                    FATAL()
                                    util_poolset_set_size() <void util_poolset_set_size (struct pool_set *set) at common/set.c:949>:
                                        LOG()
                                    Free() <Free_func Free at core/alloc.c:91>
                                util_part_open() <int util_part_open (struct pool_set_part *part, size_t minsize, int create_part) at common/set.c:1459>:
                                    LOG()
                                    util_file_exists() <int util_file_exists (const char *path) at common/file.c:32>:
                                        LOG()
                                        os_access() <int os_access (const char *pathname, int mode) at core/os_posix.c:97>:
                                            access()
                                        ERR()
                                    util_file_create() <int util_file_create (const char *path, size_t size, size_t minsize) at common/file.c:398>:
                                        LOG()
                                        ASSERTne()
                                        ERR()
                                        os_open() <int os_open (const char *pathname, int flags, ...) at core/os_posix.c:29>:
                                            va_start()
                                            va_arg()
                                            va_end()
                                            open()
                                        os_posix_fallocate() <int os_posix_fallocate (int fd, os_off_t offset, off_t len) at core/os_posix.c:142>:
                                            posix_fallocate()
                                        os_flock() <int os_flock (int fd, int operation) at core/os_posix.c:215>:
                                            flock()
                                        os_close()
                                        os_unlink() <int os_unlink (const char *pathname) at core/os_posix.c:88>:
                                            unlink()
                                    util_file_open() <int util_file_open (const char *path, size_t *size, size_t minsize, int flags) at common/file.c:456>:
                                        LOG()
                                        os_open() <int os_open (const char *pathname, int flags, ...) at core/os_posix.c:29>:
                                            va_start()
                                            va_arg()
                                            va_end()
                                            open()
                                        ERR()
                                        os_flock() <int os_flock (int fd, int operation) at core/os_posix.c:215>:
                                            flock()
                                        os_close()
                                        ASSERTeq()
                                        util_fd_get_size() <ssize_t util_fd_get_size (int fd) at common/file.c:157>:
                                            LOG()
                                            pmem2_source_from_fd() <int pmem2_source_from_fd (struct pmem2_source **src, int fd) at libpmem2/source_posix.c:19>:
                                                PMEM2_ERR_CLR()
                                                fcntl()
                                                ERR()
                                                os_fstat()
                                                pmem2_get_type_from_stat() <int pmem2_get_type_from_stat (const os_stat_t *st, enum pmem2_file_type *type) at libpmem2/pmem2_utils_linux.c:23>:
                                                    S_ISREG()
                                                    S_ISDIR()
                                                    S_ISCHR()
                                                    ERR()
                                                    util_snprintf() <int util_snprintf (char *str, size_t size, const char *format, ...) at core/util.c:434>:
                                                        va_start()
                                                        vsnprintf()
                                                        va_end()
                                                    os_major()
                                                    os_minor()
                                                    ASSERTinfo()
                                                    LOG()
                                                    realpath()
                                                    strrchr()
                                                    strcmp()
                                                pmem2_malloc() <void *pmem2_malloc (size_t size, int *err) at libpmem2/pmem2_utils.c:19>:
                                                    Malloc()
                                                    ERR()
                                                ASSERTne()
                                            pmem2_err_to_errno() <int pmem2_err_to_errno (int err) at libpmem2/pmem2_utils.c:67>:
                                                FATAL()
                                            pmem2_source_size() <int pmem2_source_size (const struct pmem2_source *src, size_t *size) at libpmem2/source_posix.c:90>:
                                                LOG()
                                                PMEM2_ERR_CLR()
                                                ASSERT()
                                                os_fstat()
                                                ERR()
                                                pmem2_device_dax_size() <int pmem2_device_dax_size (const struct pmem2_source *src, size_t *size) at libpmem2/pmem2_utils_ndctl.c:58>:
                                                    ndctl_new()
                                                    ERR()
                                                    pmem2_region_namespace() <int pmem2_region_namespace (struct ndctl_ctx *ctx, const struct pmem2_source *src, struct ndctl_region **pregion, struct ndctl_namespace **pndns) at libpmem2/region_namespace_ndctl.c:131>:
                                                        LOG()
                                                        ERR()
                                                        FOREACH_BUS_REGION_NAMESPACE()
                                                        ndctl_namespace_get_dax()
                                                        ASSERTeq()
                                                        ndctl_dax_get_daxctl_region()
                                                        daxctl_dev_foreach()
                                                        daxctl_dev_get_devname()
                                                        ndctl_match_devdax() <int ndctl_match_devdax (dev_t st_rdev, const char *devname) at libpmem2/region_namespace_ndctl.c:26>:
                                                            LOG()
                                                            stat()
                                                            util_snprintf() <int util_snprintf (char *str, size_t size, const char *format, ...) at core/util.c:434>:
                                                                va_start()
                                                                vsnprintf()
                                                                va_end()
                                                            ERR()
                                                            os_stat() <int os_stat (const char *pathname, os_stat_t *buf) at core/os_posix.c:79>:
                                                                stat()
                                                        ndctl_namespace_get_btt()
                                                        ndctl_btt_get_block_device()
                                                        ndctl_namespace_get_pfn()
                                                        ndctl_pfn_get_block_device()
                                                        ndctl_namespace_get_block_device()
                                                        ndctl_match_fsdax() <int ndctl_match_fsdax (dev_t st_dev, const char *devname) at libpmem2/region_namespace_ndctl.c:64>:
                                                            LOG()
                                                            util_snprintf() <int util_snprintf (char *str, size_t size, const char *format, ...) at core/util.c:434>:
                                                                va_start()
                                                                vsnprintf()
                                                                va_end()
                                                            ERR()
                                                            major()
                                                            minor()
                                                            os_open() <int os_open (const char *pathname, int flags, ...) at core/os_posix.c:29>:
                                                                va_start()
                                                                va_arg()
                                                                va_end()
                                                                open()
                                                            read()
                                                            os_close()
                                                            strcmp()
                                                    LOG()
                                                    ndctl_namespace_get_dax()
                                                    ndctl_dax_get_size()
                                                    ndctl_unref()
                                                FATAL()
                                            pmem2_source_delete() <int pmem2_source_delete (struct pmem2_source **src) at libpmem2/source.c:30>:
                                                Free() <Free_func Free at core/alloc.c:91>
                                            ERR()
                                    os_posix_fallocate() <int os_posix_fallocate (int fd, os_off_t offset, off_t len) at core/os_posix.c:142>:
                                        posix_fallocate()
                                    ERR()
                                util_map_part() <int util_map_part (struct pool_set_part *part, void *addr, size_t size, size_t offset, int flags, int rdonly) at common/set.c:229>:
                                    LOG()
                                    ASSERTeq()
                                    ASSERT()
                                    roundup()
                                    util_map_sync() <void *util_map_sync (void *addr, size_t len, int proto, int flags, int fd, os_off_t offset, int *map_sync) at common/mmap_posix.c:159>:
                                        LOG()
                                        mmap()
                                    ERR()
                                    munmap()
                                    VALGRIND_REGISTER_PMEM_MAPPING()
                                    VALGRIND_REGISTER_PMEM_FILE()
                                util_poolset_chmod() <int util_poolset_chmod (struct pool_set *set, mode_t mode) at common/set.c:404>:
                                    LOG()
                                    os_fstat()
                                    ERR()
                                    os_chmod() <int os_chmod (const char *pathname, mode_t mode) at core/os_posix.c:124>:
                                        chmod()
                                util_poolset_fdclose() <void util_poolset_fdclose (struct pool_set *set) at common/set.c:457>:
                                    util_poolset_fdclose_always() <void util_poolset_fdclose_always (struct pool_set *set) at common/set.c:445>:
                                        LOG()
                                        util_replica_fdclose() <void util_replica_fdclose (struct pool_replica *rep) at common/set.c:3232>:
                                            util_part_fdclose() <void util_part_fdclose (struct pool_set_part *part) at common/set.c:1517>:
                                                LOG()
                                                os_close()
                                os_close()
                                os_unlink() <int os_unlink (const char *pathname) at core/os_posix.c:88>:
                                    unlink()
                                Free() <Free_func Free at core/alloc.c:91>
                                util_poolset_set_size() <void util_poolset_set_size (struct pool_set *set) at common/set.c:949>:
                                    LOG()
                            pmemops_persist()
                            heap_max_zone() <unsigned heap_max_zone (size_t size) at libpmemobj/heap.c:516>:
                            ZID_TO_ZONE()
                            heap_zone_init() <void heap_zone_init (struct palloc_heap *heap, uint32_t zone_id, uint32_t first_chunk_id) at libpmemobj/heap.c:559>:
                                ZID_TO_ZONE()
                                zone_calc_size_idx() <uint32_t zone_calc_size_idx (uint32_t zone_id, unsigned max_zone, size_t heap_size) at libpmemobj/heap.c:533>:
                                    ASSERT()
                                ASSERT()
                                memblock_huge_init() <struct memory_block memblock_huge_init (struct palloc_heap *heap, uint32_t chunk_id, uint32_t zone_id, uint32_t size_idx) at libpmemobj/memblock.c:1329>:
                                    heap_get_chunk_hdr()
                                    VALGRIND_DO_MAKE_MEM_UNDEFINED()
                                    VALGRIND_ANNOTATE_NEW_MEMORY()
                                    chunk_get_chunk_hdr_value() <uint64_t chunk_get_chunk_hdr_value (uint16_t type, uint16_t flags, uint32_t size_idx) at libpmemobj/memblock.c:604>:
                                        COMPILE_ERROR_ON()
                                        memcpy()
                                    util_atomic_store_explicit64()
                                    pmemops_persist()
                                    huge_write_footer() <void huge_write_footer (struct chunk_header *hdr, uint32_t size_idx) at libpmemobj/memblock.c:1166>:
                                        VALGRIND_DO_MAKE_MEM_UNDEFINED()
                                        VALGRIND_SET_CLEAN()
                                    memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                        memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                            heap_get_chunk_hdr()
                                        memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                            heap_get_chunk_hdr()
                                            FATAL()
                                pmemops_persist()
                            memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                    heap_get_chunk_hdr()
                                memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                    heap_get_chunk_hdr()
                                    FATAL()
                            heap_free_chunk_reuse() <int heap_free_chunk_reuse (struct palloc_heap *heap, struct bucket *bucket, struct memory_block *m) at libpmemobj/heap.c:674>:
                                heap_coalesce_huge() <struct memory_block heap_coalesce_huge (struct palloc_heap *heap, struct bucket *b, const struct memory_block *m) at libpmemobj/heap.c:650>:
                                    heap_get_adjacent_free_block() <int heap_get_adjacent_free_block (struct palloc_heap *heap, const struct memory_block *in, struct memory_block *out, int prev) at libpmemobj/heap.c:582>:
                                        ZID_TO_ZONE()
                                        memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                            memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                                heap_get_chunk_hdr()
                                            memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                                heap_get_chunk_hdr()
                                                FATAL()
                                    bucket_remove_block() <int bucket_remove_block (struct bucket *b, const struct memory_block *m) at libpmemobj/bucket.c:178>
                                    heap_coalesce() <struct memory_block heap_coalesce (struct palloc_heap *heap, const struct memory_block *blocks[], int n) at libpmemobj/heap.c:621>:
                                        ASSERTne()
                                        memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                            memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                                heap_get_chunk_hdr()
                                            memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                                heap_get_chunk_hdr()
                                                FATAL()
                                bucket_insert_block() <int bucket_insert_block (struct bucket *b, const struct memory_block *m) at libpmemobj/bucket.c:161>:
                                    VALGRIND_DO_MAKE_MEM_NOACCESS()
                                    VALGRIND_ANNOTATE_NEW_MEMORY()
                    heap_ensure_run_bucket_filled() <int heap_ensure_run_bucket_filled (struct palloc_heap *heap, struct bucket *b, uint32_t units) at libpmemobj/heap.c:1083> (R):
                        bucket_alloc_class() <struct alloc_class *bucket_alloc_class (struct bucket *b) at libpmemobj/bucket.c:152>
                        ASSERTeq()
                        heap_detach_and_try_discard_run() <int heap_detach_and_try_discard_run (struct palloc_heap *heap, struct bucket *b) at libpmemobj/heap.c:992>:
                            bucket_detach_run() <int bucket_detach_run (struct bucket *b, struct memory_block *m_out, int *empty) at libpmemobj/bucket.c:231>:
                                util_fetch_and_sub64()
                                VALGRIND_ANNOTATE_HAPPENS_AFTER()
                                VALGRIND_ANNOTATE_HAPPENS_BEFORE()
                                Zalloc() <void *Zalloc (size_t sz) at core/alloc.c:98>:
                                    Malloc()
                                    memset()
                            heap_discard_run() <void heap_discard_run (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/heap.c:974>:
                                heap_reclaim_run() <int heap_reclaim_run (struct palloc_heap *heap, struct memory_block *m, int startup) at libpmemobj/heap.c:733>:
                                    heap_get_chunk_run()
                                    heap_get_chunk_hdr()
                                    alloc_class_by_run() <struct alloc_class *alloc_class_by_run (struct alloc_class_collection *ac, size_t unit_size, uint16_t flags, uint32_t size_idx) at libpmemobj/alloc_class.c:594>:
                                        SIZE_TO_CLASS_MAP_INDEX()
                                        ASSERT()
                                        critnib_get() <void *critnib_get (struct critnib *c, uint64_t key) at libpmemobj/critnib.c:515>:
                                            load() <void load (void *src, void *dst) at libpmemobj/critnib.c:130>:
                                                util_atomic_load_explicit64()
                                            is_leaf() <inline bool is_leaf (struct critnib_node *n) at libpmemobj/critnib.c:150>:
                                            slice_index() <inline unsigned slice_index (uint64_t key, sh_t shift) at libpmemobj/critnib.c:178>:
                                            to_leaf() <inline struct critnib_leaf *to_leaf (struct critnib_node *n) at libpmemobj/critnib.c:159>:
                                        RUN_CLASS_KEY_PACK()
                                    recycler_element_new() <struct recycler_element recycler_element_new (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/recycler.c:122>:
                                        SUPPRESS_UNUSED()
                                        util_mutex_lock()
                                        util_mutex_unlock()
                                    ASSERTeq()
                                    STATS_INC()
                                    heap_get_recycler() <struct recycler *heap_get_recycler (struct palloc_heap *heap, size_t id, size_t nallocs) at libpmemobj/heap.c:106> (R):
                                        util_atomic_load_explicit64()
                                        recycler_new() <struct recycler *recycler_new (struct palloc_heap *heap, size_t nallocs, size_t *peak_arenas) at libpmemobj/recycler.c:74>:
                                            Malloc()
                                            ravl_new_sized() <struct ravl *ravl_new_sized (ravl_compare *compare, size_t data_size) at core/ravl.c:45>:
                                                Malloc()
                                                ERR()
                                            recycler_element_cmp() <int recycler_element_cmp (const void *lhs, const void *rhs) at libpmemobj/recycler.c:23>:
                                            memset()
                                            VEC_INIT()
                                            util_mutex_init()
                                            Free() <Free_func Free at core/alloc.c:91>
                                        util_bool_compare_and_swap64()
                                        recycler_delete() <void recycler_delete (struct recycler *r) at libpmemobj/recycler.c:107>:
                                            VEC_DELETE()
                                            util_mutex_destroy()
                                            ravl_delete() <void ravl_delete (struct ravl *ravl) at core/ravl.c:112>:
                                                ravl_delete_cb() <void ravl_delete_cb (struct ravl *ravl, ravl_cb cb, void *arg) at core/ravl.c:102>:
                                                    ravl_foreach_node() <void ravl_foreach_node (struct ravl_node *n, ravl_cb cb, void *arg, int free_node) at core/ravl.c:74> (R):
                                                        ravl_foreach_node() <void ravl_foreach_node (struct ravl_node *n, ravl_cb cb, void *arg, int free_node) at core/ravl.c:74> (recursive: see 34649)
                                                        Free() <Free_func Free at core/alloc.c:91>
                                                    Free() <Free_func Free at core/alloc.c:91>
                                            Free() <Free_func Free at core/alloc.c:91>
                                        heap_get_recycler() <struct recycler *heap_get_recycler (struct palloc_heap *heap, size_t id, size_t nallocs) at libpmemobj/heap.c:106> (recursive: see 34631)
                                    recycler_put() <int recycler_put (struct recycler *r, struct recycler_element element) at libpmemobj/recycler.c:154>:
                                        util_mutex_lock()
                                        ravl_emplace_copy() <int ravl_emplace_copy (struct ravl *ravl, const void *data) at core/ravl.c:384>:
                                            ravl_emplace() <int ravl_emplace (struct ravl *ravl, ravl_constr constr, const void *arg) at core/ravl.c:393>:
                                                LOG()
                                                ravl_new_node() <struct ravl_node *ravl_new_node (struct ravl *ravl, ravl_constr constr, const void *arg) at core/ravl.c:161>:
                                                    Malloc()
                                                    ERR()
                                                    ravl_node_insert_constructor() <void ravl_node_insert_constructor (void *data, size_t data_size, const void *arg) at core/ravl.c:139>:
                                                        SUPPRESS_UNUSED()
                                                        memcpy()
                                                ravl_data() <void *ravl_data (struct ravl_node *node) at core/ravl.c:571>:
                                                    memcpy()
                                                ravl_balance() <void ravl_balance (struct ravl *ravl, struct ravl_node *n) at core/ravl.c:337>:
                                                    ravl_node_is() <int ravl_node_is (struct ravl_node *n, int i, int j) at core/ravl.c:306>:
                                                        ravl_node_is_i_j() <int ravl_node_is_i_j (struct ravl_node *n, int i, int j) at core/ravl.c:296>:
                                                            ravl_node_rank_difference_parent() <int ravl_node_rank_difference_parent (struct ravl_node *p, struct ravl_node *n) at core/ravl.c:275>:
                                                                ravl_node_rank() <int ravl_node_rank (struct ravl_node *n) at core/ravl.c:261>:
                                                    ravl_node_promote() <void ravl_node_promote (struct ravl_node *n) at core/ravl.c:315>
                                                    ravl_node_sibling() <struct ravl_node *ravl_node_sibling (struct ravl_node *n) at core/ravl.c:209>:
                                                        ravl_node_slot_type() <enum ravl_slot_type ravl_node_slot_type (struct ravl_node *n) at core/ravl.c:196>:
                                                    ravl_node_rank_difference() <int ravl_node_rank_difference (struct ravl_node *n) at core/ravl.c:287>:
                                                        ravl_node_rank_difference_parent() <int ravl_node_rank_difference_parent (struct ravl_node *p, struct ravl_node *n) at core/ravl.c:275>:
                                                            ravl_node_rank() <int ravl_node_rank (struct ravl_node *n) at core/ravl.c:261>:
                                                    ravl_node_rank_difference_parent() <int ravl_node_rank_difference_parent (struct ravl_node *p, struct ravl_node *n) at core/ravl.c:275>:
                                                        ravl_node_rank() <int ravl_node_rank (struct ravl_node *n) at core/ravl.c:261>:
                                                    ravl_slot_opposite() <enum ravl_slot_type ravl_slot_opposite (enum ravl_slot_type t) at core/ravl.c:184>:
                                                        ASSERTne()
                                                    ravl_node_slot_type() <enum ravl_slot_type ravl_node_slot_type (struct ravl_node *n) at core/ravl.c:196>:
                                                    ravl_rotate() <void ravl_rotate (struct ravl *ravl, struct ravl_node *n) at core/ravl.c:237>:
                                                        ASSERTne()
                                                        ravl_node_ref() <struct ravl_node **ravl_node_ref (struct ravl *ravl, struct ravl_node *n) at core/ravl.c:223>:
                                                            ravl_node_slot_type() <enum ravl_slot_type ravl_node_slot_type (struct ravl_node *n) at core/ravl.c:196>:
                                                        ravl_node_slot_type() <enum ravl_slot_type ravl_node_slot_type (struct ravl_node *n) at core/ravl.c:196>:
                                                        ravl_slot_opposite() <enum ravl_slot_type ravl_slot_opposite (enum ravl_slot_type t) at core/ravl.c:184>:
                                                            ASSERTne()
                                                    ravl_node_demote() <void ravl_node_demote (struct ravl_node *n) at core/ravl.c:324>:
                                                        ASSERT()
                                                Free() <Free_func Free at core/alloc.c:91>
                                            ravl_node_copy_constructor() <void ravl_node_copy_constructor (void *data, size_t data_size, const void *arg) at core/ravl.c:152>:
                                                memcpy()
                                        util_mutex_unlock()
                                    ERR()
                                heap_bucket_acquire() <struct bucket *heap_bucket_acquire (struct palloc_heap *heap, uint8_t class_id, uint16_t arena_id) at libpmemobj/heap.c:470>:
                                    out() <void out (const char *fmt, ...) at core/out.c:480>:
                                        va_start()
                                        out_common() <} void out_common (const char *file, int line, const char *func, int level, const char *suffix, const char *fmt, va_list ap) at core/out.c:334>
                                        va_end()
                                    heap_thread_arena() <struct arena *heap_thread_arena (struct palloc_heap *heap) at libpmemobj/heap.c:414>:
                                        os_tls_get() <void *os_tls_get (os_tls_key_t key) at core/os_thread_posix.c:62>:
                                            pthread_getspecific()
                                        heap_thread_arena_assign() <struct arena *heap_thread_arena_assign (struct palloc_heap *heap) at libpmemobj/heap.c:381>:
                                            util_mutex_lock()
                                            ASSERTne()
                                            VEC_SIZE()
                                            VEC_FOREACH()
                                            LOG()
                                            heap_arena_thread_attach() <void heap_arena_thread_attach (struct palloc_heap *heap, struct arena *a) at libpmemobj/heap.c:249>:
                                                ASSERTeq()
                                                os_tls_get() <void *os_tls_get (os_tls_key_t key) at core/os_thread_posix.c:62>:
                                                    pthread_getspecific()
                                                heap_arena_thread_detach() <void heap_arena_thread_detach (struct arena *a) at libpmemobj/heap.c:232>:
                                                    util_fetch_and_sub64()
                                                ASSERTne()
                                                util_fetch_and_add64()
                                                os_tls_set() <int os_tls_set (os_tls_key_t key, const void *value) at core/os_thread_posix.c:53>:
                                                    pthread_setspecific()
                                            util_mutex_unlock()
                                        heap_global_arena_assign() <struct arena *heap_global_arena_assign (struct palloc_heap *heap) at libpmemobj/heap.c:348>:
                                            util_mutex_lock()
                                            ASSERTne()
                                            VEC_SIZE()
                                            VEC_FOREACH()
                                            LOG()
                                            util_mutex_unlock()
                                        ASSERT()
                                        ASSERTne()
                                    ASSERTne()
                                    VEC_ARR()
                                    bucket_acquire() <struct bucket *bucket_acquire (struct bucket_locked *b) at libpmemobj/bucket.c:117>:
                                        util_mutex_lock()
                                heap_run_into_free_chunk() <void heap_run_into_free_chunk (struct palloc_heap *heap, struct bucket *bucket, struct memory_block *m) at libpmemobj/heap.c:697>:
                                    heap_get_chunk_hdr()
                                    STATS_SUB()
                                    util_mutex_lock()
                                    memblock_huge_init() <struct memory_block memblock_huge_init (struct palloc_heap *heap, uint32_t chunk_id, uint32_t zone_id, uint32_t size_idx) at libpmemobj/memblock.c:1329>:
                                        heap_get_chunk_hdr()
                                        VALGRIND_DO_MAKE_MEM_UNDEFINED()
                                        VALGRIND_ANNOTATE_NEW_MEMORY()
                                        chunk_get_chunk_hdr_value() <uint64_t chunk_get_chunk_hdr_value (uint16_t type, uint16_t flags, uint32_t size_idx) at libpmemobj/memblock.c:604>:
                                            COMPILE_ERROR_ON()
                                            memcpy()
                                        util_atomic_store_explicit64()
                                        pmemops_persist()
                                        huge_write_footer() <void huge_write_footer (struct chunk_header *hdr, uint32_t size_idx) at libpmemobj/memblock.c:1166>:
                                            VALGRIND_DO_MAKE_MEM_UNDEFINED()
                                            VALGRIND_SET_CLEAN()
                                        memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                            memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                                heap_get_chunk_hdr()
                                            memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                                heap_get_chunk_hdr()
                                                FATAL()
                                    heap_free_chunk_reuse() <int heap_free_chunk_reuse (struct palloc_heap *heap, struct bucket *bucket, struct memory_block *m) at libpmemobj/heap.c:674>:
                                        heap_coalesce_huge() <struct memory_block heap_coalesce_huge (struct palloc_heap *heap, struct bucket *b, const struct memory_block *m) at libpmemobj/heap.c:650>:
                                            heap_get_adjacent_free_block() <int heap_get_adjacent_free_block (struct palloc_heap *heap, const struct memory_block *in, struct memory_block *out, int prev) at libpmemobj/heap.c:582>:
                                                ZID_TO_ZONE()
                                                memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                                    memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                                        heap_get_chunk_hdr()
                                                    memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                                        heap_get_chunk_hdr()
                                                        FATAL()
                                            bucket_remove_block() <int bucket_remove_block (struct bucket *b, const struct memory_block *m) at libpmemobj/bucket.c:178>
                                            heap_coalesce() <struct memory_block heap_coalesce (struct palloc_heap *heap, const struct memory_block *blocks[], int n) at libpmemobj/heap.c:621>:
                                                ASSERTne()
                                                memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                                    memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                                        heap_get_chunk_hdr()
                                                    memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                                        heap_get_chunk_hdr()
                                                        FATAL()
                                        bucket_insert_block() <int bucket_insert_block (struct bucket *b, const struct memory_block *m) at libpmemobj/bucket.c:161>:
                                            VALGRIND_DO_MAKE_MEM_NOACCESS()
                                            VALGRIND_ANNOTATE_NEW_MEMORY()
                                    util_mutex_unlock()
                                heap_bucket_release() <void heap_bucket_release (struct bucket *b) at libpmemobj/heap.c:498>:
                                    bucket_release() <void bucket_release (struct bucket *b) at libpmemobj/bucket.c:127>:
                                        util_mutex_unlock()
                        heap_reuse_from_recycler() <int heap_reuse_from_recycler (struct palloc_heap *heap, struct bucket *b, uint32_t units, int force) at libpmemobj/heap.c:1034>:
                            bucket_alloc_class() <struct alloc_class *bucket_alloc_class (struct bucket *b) at libpmemobj/bucket.c:152>
                            heap_get_recycler() <struct recycler *heap_get_recycler (struct palloc_heap *heap, size_t id, size_t nallocs) at libpmemobj/heap.c:106> (R):
                                util_atomic_load_explicit64()
                                recycler_new() <struct recycler *recycler_new (struct palloc_heap *heap, size_t nallocs, size_t *peak_arenas) at libpmemobj/recycler.c:74>:
                                    Malloc()
                                    ravl_new_sized() <struct ravl *ravl_new_sized (ravl_compare *compare, size_t data_size) at core/ravl.c:45>:
                                        Malloc()
                                        ERR()
                                    recycler_element_cmp() <int recycler_element_cmp (const void *lhs, const void *rhs) at libpmemobj/recycler.c:23>:
                                    memset()
                                    VEC_INIT()
                                    util_mutex_init()
                                    Free() <Free_func Free at core/alloc.c:91>
                                util_bool_compare_and_swap64()
                                recycler_delete() <void recycler_delete (struct recycler *r) at libpmemobj/recycler.c:107>:
                                    VEC_DELETE()
                                    util_mutex_destroy()
                                    ravl_delete() <void ravl_delete (struct ravl *ravl) at core/ravl.c:112>:
                                        ravl_delete_cb() <void ravl_delete_cb (struct ravl *ravl, ravl_cb cb, void *arg) at core/ravl.c:102>:
                                            ravl_foreach_node() <void ravl_foreach_node (struct ravl_node *n, ravl_cb cb, void *arg, int free_node) at core/ravl.c:74> (R):
                                                ravl_foreach_node() <void ravl_foreach_node (struct ravl_node *n, ravl_cb cb, void *arg, int free_node) at core/ravl.c:74> (recursive: see 34804)
                                                Free() <Free_func Free at core/alloc.c:91>
                                            Free() <Free_func Free at core/alloc.c:91>
                                    Free() <Free_func Free at core/alloc.c:91>
                                heap_get_recycler() <struct recycler *heap_get_recycler (struct palloc_heap *heap, size_t id, size_t nallocs) at libpmemobj/heap.c:106> (recursive: see 34786)
                            ERR()
                            recycler_get() <int recycler_get (struct recycler *r, struct memory_block *m) at libpmemobj/recycler.c:171>:
                                util_mutex_lock()
                                ravl_find() <struct ravl_node *ravl_find (struct ravl *ravl, const void *data, enum ravl_predicate flags) at core/ravl.c:524>:
                                    LOG()
                                    ravl_data() <void *ravl_data (struct ravl_node *node) at core/ravl.c:571>:
                                        memcpy()
                                    ravl_predicate_holds() <int ravl_predicate_holds (int result, struct ravl_node **ret, struct ravl_node *n, enum ravl_predicate flags) at core/ravl.c:489>:
                                        ravl_node_successor() <struct ravl_node *ravl_node_successor (struct ravl_node *n) at core/ravl.c:465>:
                                            ravl_node_cessor() <struct ravl_node *ravl_node_cessor (struct ravl_node *n, enum ravl_slot_type t) at core/ravl.c:443>:
                                                ravl_node_type_most() <struct ravl_node *ravl_node_type_most (struct ravl_node *n, enum ravl_slot_type t) at core/ravl.c:430>:
                                                ravl_slot_opposite() <enum ravl_slot_type ravl_slot_opposite (enum ravl_slot_type t) at core/ravl.c:184>:
                                                    ASSERTne()
                                        ravl_node_predecessor() <struct ravl_node *ravl_node_predecessor (struct ravl_node *n) at core/ravl.c:476>:
                                            ravl_node_cessor() <struct ravl_node *ravl_node_cessor (struct ravl_node *n, enum ravl_slot_type t) at core/ravl.c:443>:
                                                ravl_node_type_most() <struct ravl_node *ravl_node_type_most (struct ravl_node *n, enum ravl_slot_type t) at core/ravl.c:430>:
                                                ravl_slot_opposite() <enum ravl_slot_type ravl_slot_opposite (enum ravl_slot_type t) at core/ravl.c:184>:
                                                    ASSERTne()
                                out() <void out (const char *fmt, ...) at core/out.c:480>:
                                    va_start()
                                    out_common() <} void out_common (const char *file, int line, const char *func, int level, const char *suffix, const char *fmt, va_list ap) at core/out.c:334>
                                    va_end()
                                ravl_data() <void *ravl_data (struct ravl_node *node) at core/ravl.c:571>:
                                    memcpy()
                                ravl_remove() <void ravl_remove (struct ravl *ravl, struct ravl_node *n) at core/ravl.c:545> (R):
                                    LOG()
                                    ravl_node_successor() <struct ravl_node *ravl_node_successor (struct ravl_node *n) at core/ravl.c:465>:
                                        ravl_node_cessor() <struct ravl_node *ravl_node_cessor (struct ravl_node *n, enum ravl_slot_type t) at core/ravl.c:443>:
                                            ravl_node_type_most() <struct ravl_node *ravl_node_type_most (struct ravl_node *n, enum ravl_slot_type t) at core/ravl.c:430>:
                                            ravl_slot_opposite() <enum ravl_slot_type ravl_slot_opposite (enum ravl_slot_type t) at core/ravl.c:184>:
                                                ASSERTne()
                                    memcpy()
                                    ravl_remove() <void ravl_remove (struct ravl *ravl, struct ravl_node *n) at core/ravl.c:545> (recursive: see 34834)
                                    ravl_node_ref() <struct ravl_node **ravl_node_ref (struct ravl *ravl, struct ravl_node *n) at core/ravl.c:223>:
                                        ravl_node_slot_type() <enum ravl_slot_type ravl_node_slot_type (struct ravl_node *n) at core/ravl.c:196>:
                                    Free() <Free_func Free at core/alloc.c:91>
                                heap_get_chunk_hdr()
                                memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                    memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                        heap_get_chunk_hdr()
                                    memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                        heap_get_chunk_hdr()
                                        FATAL()
                                util_mutex_unlock()
                            bucket_attach_run() <int bucket_attach_run (struct bucket *b, const struct memory_block *m) at libpmemobj/bucket.c:206>:
                                util_mutex_lock()
                                bucket_memblock_insert_block() <int bucket_memblock_insert_block (const struct memory_block *m, void *b) at libpmemobj/bucket.c:197>:
                                    bucket_insert_block() <int bucket_insert_block (struct bucket *b, const struct memory_block *m) at libpmemobj/bucket.c:161>:
                                        VALGRIND_DO_MAKE_MEM_NOACCESS()
                                        VALGRIND_ANNOTATE_NEW_MEMORY()
                                util_mutex_unlock()
                                util_fetch_and_add64()
                            heap_recycle_unused() <int heap_recycle_unused (struct palloc_heap *heap, struct recycler *recycler, struct bucket *defb, int force) at libpmemobj/heap.c:894>:
                                recycler_recalc() <struct empty_runs recycler_recalc (struct recycler *r, int force) at libpmemobj/recycler.c:207>:
                                    VEC_INIT()
                                    util_atomic_load64()
                                    util_mutex_trylock()
                                    ravl_find() <struct ravl_node *ravl_find (struct ravl *ravl, const void *data, enum ravl_predicate flags) at core/ravl.c:524>:
                                        LOG()
                                        ravl_data() <void *ravl_data (struct ravl_node *node) at core/ravl.c:571>:
                                            memcpy()
                                        ravl_predicate_holds() <int ravl_predicate_holds (int result, struct ravl_node **ret, struct ravl_node *n, enum ravl_predicate flags) at core/ravl.c:489>:
                                            ravl_node_successor() <struct ravl_node *ravl_node_successor (struct ravl_node *n) at core/ravl.c:465>:
                                                ravl_node_cessor() <struct ravl_node *ravl_node_cessor (struct ravl_node *n, enum ravl_slot_type t) at core/ravl.c:443>:
                                                    ravl_node_type_most() <struct ravl_node *ravl_node_type_most (struct ravl_node *n, enum ravl_slot_type t) at core/ravl.c:430>:
                                                    ravl_slot_opposite() <enum ravl_slot_type ravl_slot_opposite (enum ravl_slot_type t) at core/ravl.c:184>:
                                                        ASSERTne()
                                            ravl_node_predecessor() <struct ravl_node *ravl_node_predecessor (struct ravl_node *n) at core/ravl.c:476>:
                                                ravl_node_cessor() <struct ravl_node *ravl_node_cessor (struct ravl_node *n, enum ravl_slot_type t) at core/ravl.c:443>:
                                                    ravl_node_type_most() <struct ravl_node *ravl_node_type_most (struct ravl_node *n, enum ravl_slot_type t) at core/ravl.c:430>:
                                                    ravl_slot_opposite() <enum ravl_slot_type ravl_slot_opposite (enum ravl_slot_type t) at core/ravl.c:184>:
                                                        ASSERTne()
                                    ravl_data() <void *ravl_data (struct ravl_node *node) at core/ravl.c:571>:
                                        memcpy()
                                    memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                        memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                            heap_get_chunk_hdr()
                                        memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                            heap_get_chunk_hdr()
                                            FATAL()
                                    recycler_element_new() <struct recycler_element recycler_element_new (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/recycler.c:122>:
                                        SUPPRESS_UNUSED()
                                        util_mutex_lock()
                                        util_mutex_unlock()
                                    ASSERT()
                                    util_fetch_and_sub64()
                                    MIN()
                                    ravl_remove() <void ravl_remove (struct ravl *ravl, struct ravl_node *n) at core/ravl.c:545> (R):
                                        LOG()
                                        ravl_node_successor() <struct ravl_node *ravl_node_successor (struct ravl_node *n) at core/ravl.c:465>:
                                            ravl_node_cessor() <struct ravl_node *ravl_node_cessor (struct ravl_node *n, enum ravl_slot_type t) at core/ravl.c:443>:
                                                ravl_node_type_most() <struct ravl_node *ravl_node_type_most (struct ravl_node *n, enum ravl_slot_type t) at core/ravl.c:430>:
                                                ravl_slot_opposite() <enum ravl_slot_type ravl_slot_opposite (enum ravl_slot_type t) at core/ravl.c:184>:
                                                    ASSERTne()
                                        memcpy()
                                        ravl_remove() <void ravl_remove (struct ravl *ravl, struct ravl_node *n) at core/ravl.c:545> (recursive: see 34897)
                                        ravl_node_ref() <struct ravl_node **ravl_node_ref (struct ravl *ravl, struct ravl_node *n) at core/ravl.c:223>:
                                            ravl_node_slot_type() <enum ravl_slot_type ravl_node_slot_type (struct ravl_node *n) at core/ravl.c:196>:
                                        Free() <Free_func Free at core/alloc.c:91>
                                    VEC_PUSH_BACK()
                                    VEC_FOREACH_BY_PTR()
                                    ravl_emplace_copy() <int ravl_emplace_copy (struct ravl *ravl, const void *data) at core/ravl.c:384>:
                                        ravl_emplace() <int ravl_emplace (struct ravl *ravl, ravl_constr constr, const void *arg) at core/ravl.c:393>:
                                            LOG()
                                            ravl_new_node() <struct ravl_node *ravl_new_node (struct ravl *ravl, ravl_constr constr, const void *arg) at core/ravl.c:161>:
                                                Malloc()
                                                ERR()
                                                ravl_node_insert_constructor() <void ravl_node_insert_constructor (void *data, size_t data_size, const void *arg) at core/ravl.c:139>:
                                                    SUPPRESS_UNUSED()
                                                    memcpy()
                                            ravl_data() <void *ravl_data (struct ravl_node *node) at core/ravl.c:571>:
                                                memcpy()
                                            ravl_balance() <void ravl_balance (struct ravl *ravl, struct ravl_node *n) at core/ravl.c:337>:
                                                ravl_node_is() <int ravl_node_is (struct ravl_node *n, int i, int j) at core/ravl.c:306>:
                                                    ravl_node_is_i_j() <int ravl_node_is_i_j (struct ravl_node *n, int i, int j) at core/ravl.c:296>:
                                                        ravl_node_rank_difference_parent() <int ravl_node_rank_difference_parent (struct ravl_node *p, struct ravl_node *n) at core/ravl.c:275>:
                                                            ravl_node_rank() <int ravl_node_rank (struct ravl_node *n) at core/ravl.c:261>:
                                                ravl_node_promote() <void ravl_node_promote (struct ravl_node *n) at core/ravl.c:315>
                                                ravl_node_sibling() <struct ravl_node *ravl_node_sibling (struct ravl_node *n) at core/ravl.c:209>:
                                                    ravl_node_slot_type() <enum ravl_slot_type ravl_node_slot_type (struct ravl_node *n) at core/ravl.c:196>:
                                                ravl_node_rank_difference() <int ravl_node_rank_difference (struct ravl_node *n) at core/ravl.c:287>:
                                                    ravl_node_rank_difference_parent() <int ravl_node_rank_difference_parent (struct ravl_node *p, struct ravl_node *n) at core/ravl.c:275>:
                                                        ravl_node_rank() <int ravl_node_rank (struct ravl_node *n) at core/ravl.c:261>:
                                                ravl_node_rank_difference_parent() <int ravl_node_rank_difference_parent (struct ravl_node *p, struct ravl_node *n) at core/ravl.c:275>:
                                                    ravl_node_rank() <int ravl_node_rank (struct ravl_node *n) at core/ravl.c:261>:
                                                ravl_slot_opposite() <enum ravl_slot_type ravl_slot_opposite (enum ravl_slot_type t) at core/ravl.c:184>:
                                                    ASSERTne()
                                                ravl_node_slot_type() <enum ravl_slot_type ravl_node_slot_type (struct ravl_node *n) at core/ravl.c:196>:
                                                ravl_rotate() <void ravl_rotate (struct ravl *ravl, struct ravl_node *n) at core/ravl.c:237>:
                                                    ASSERTne()
                                                    ravl_node_ref() <struct ravl_node **ravl_node_ref (struct ravl *ravl, struct ravl_node *n) at core/ravl.c:223>:
                                                        ravl_node_slot_type() <enum ravl_slot_type ravl_node_slot_type (struct ravl_node *n) at core/ravl.c:196>:
                                                    ravl_node_slot_type() <enum ravl_slot_type ravl_node_slot_type (struct ravl_node *n) at core/ravl.c:196>:
                                                    ravl_slot_opposite() <enum ravl_slot_type ravl_slot_opposite (enum ravl_slot_type t) at core/ravl.c:184>:
                                                        ASSERTne()
                                                ravl_node_demote() <void ravl_node_demote (struct ravl_node *n) at core/ravl.c:324>:
                                                    ASSERT()
                                            Free() <Free_func Free at core/alloc.c:91>
                                        ravl_node_copy_constructor() <void ravl_node_copy_constructor (void *data, size_t data_size, const void *arg) at core/ravl.c:152>:
                                            memcpy()
                                    VEC_CLEAR()
                                    util_mutex_unlock()
                                VEC_SIZE()
                                heap_bucket_acquire() <struct bucket *heap_bucket_acquire (struct palloc_heap *heap, uint8_t class_id, uint16_t arena_id) at libpmemobj/heap.c:470>:
                                    out() <void out (const char *fmt, ...) at core/out.c:480>:
                                        va_start()
                                        out_common() <} void out_common (const char *file, int line, const char *func, int level, const char *suffix, const char *fmt, va_list ap) at core/out.c:334>
                                        va_end()
                                    heap_thread_arena() <struct arena *heap_thread_arena (struct palloc_heap *heap) at libpmemobj/heap.c:414>:
                                        os_tls_get() <void *os_tls_get (os_tls_key_t key) at core/os_thread_posix.c:62>:
                                            pthread_getspecific()
                                        heap_thread_arena_assign() <struct arena *heap_thread_arena_assign (struct palloc_heap *heap) at libpmemobj/heap.c:381>:
                                            util_mutex_lock()
                                            ASSERTne()
                                            VEC_SIZE()
                                            VEC_FOREACH()
                                            LOG()
                                            heap_arena_thread_attach() <void heap_arena_thread_attach (struct palloc_heap *heap, struct arena *a) at libpmemobj/heap.c:249>:
                                                ASSERTeq()
                                                os_tls_get() <void *os_tls_get (os_tls_key_t key) at core/os_thread_posix.c:62>:
                                                    pthread_getspecific()
                                                heap_arena_thread_detach() <void heap_arena_thread_detach (struct arena *a) at libpmemobj/heap.c:232>:
                                                    util_fetch_and_sub64()
                                                ASSERTne()
                                                util_fetch_and_add64()
                                                os_tls_set() <int os_tls_set (os_tls_key_t key, const void *value) at core/os_thread_posix.c:53>:
                                                    pthread_setspecific()
                                            util_mutex_unlock()
                                        heap_global_arena_assign() <struct arena *heap_global_arena_assign (struct palloc_heap *heap) at libpmemobj/heap.c:348>:
                                            util_mutex_lock()
                                            ASSERTne()
                                            VEC_SIZE()
                                            VEC_FOREACH()
                                            LOG()
                                            util_mutex_unlock()
                                        ASSERT()
                                        ASSERTne()
                                    ASSERTne()
                                    VEC_ARR()
                                    bucket_acquire() <struct bucket *bucket_acquire (struct bucket_locked *b) at libpmemobj/bucket.c:117>:
                                        util_mutex_lock()
                                ASSERT()
                                VEC_FOREACH_BY_PTR()
                                heap_run_into_free_chunk() <void heap_run_into_free_chunk (struct palloc_heap *heap, struct bucket *bucket, struct memory_block *m) at libpmemobj/heap.c:697>:
                                    heap_get_chunk_hdr()
                                    STATS_SUB()
                                    util_mutex_lock()
                                    memblock_huge_init() <struct memory_block memblock_huge_init (struct palloc_heap *heap, uint32_t chunk_id, uint32_t zone_id, uint32_t size_idx) at libpmemobj/memblock.c:1329>:
                                        heap_get_chunk_hdr()
                                        VALGRIND_DO_MAKE_MEM_UNDEFINED()
                                        VALGRIND_ANNOTATE_NEW_MEMORY()
                                        chunk_get_chunk_hdr_value() <uint64_t chunk_get_chunk_hdr_value (uint16_t type, uint16_t flags, uint32_t size_idx) at libpmemobj/memblock.c:604>:
                                            COMPILE_ERROR_ON()
                                            memcpy()
                                        util_atomic_store_explicit64()
                                        pmemops_persist()
                                        huge_write_footer() <void huge_write_footer (struct chunk_header *hdr, uint32_t size_idx) at libpmemobj/memblock.c:1166>:
                                            VALGRIND_DO_MAKE_MEM_UNDEFINED()
                                            VALGRIND_SET_CLEAN()
                                        memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                            memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                                heap_get_chunk_hdr()
                                            memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                                heap_get_chunk_hdr()
                                                FATAL()
                                    heap_free_chunk_reuse() <int heap_free_chunk_reuse (struct palloc_heap *heap, struct bucket *bucket, struct memory_block *m) at libpmemobj/heap.c:674>:
                                        heap_coalesce_huge() <struct memory_block heap_coalesce_huge (struct palloc_heap *heap, struct bucket *b, const struct memory_block *m) at libpmemobj/heap.c:650>:
                                            heap_get_adjacent_free_block() <int heap_get_adjacent_free_block (struct palloc_heap *heap, const struct memory_block *in, struct memory_block *out, int prev) at libpmemobj/heap.c:582>:
                                                ZID_TO_ZONE()
                                                memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                                    memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                                        heap_get_chunk_hdr()
                                                    memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                                        heap_get_chunk_hdr()
                                                        FATAL()
                                            bucket_remove_block() <int bucket_remove_block (struct bucket *b, const struct memory_block *m) at libpmemobj/bucket.c:178>
                                            heap_coalesce() <struct memory_block heap_coalesce (struct palloc_heap *heap, const struct memory_block *blocks[], int n) at libpmemobj/heap.c:621>:
                                                ASSERTne()
                                                memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                                    memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                                        heap_get_chunk_hdr()
                                                    memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                                        heap_get_chunk_hdr()
                                                        FATAL()
                                        bucket_insert_block() <int bucket_insert_block (struct bucket *b, const struct memory_block *m) at libpmemobj/bucket.c:161>:
                                            VALGRIND_DO_MAKE_MEM_NOACCESS()
                                            VALGRIND_ANNOTATE_NEW_MEMORY()
                                    util_mutex_unlock()
                                heap_bucket_release() <void heap_bucket_release (struct bucket *b) at libpmemobj/heap.c:498>:
                                    bucket_release() <void bucket_release (struct bucket *b) at libpmemobj/bucket.c:127>:
                                        util_mutex_unlock()
                                VEC_DELETE()
                        out() <void out (const char *fmt, ...) at core/out.c:480>:
                            va_start()
                            out_common() <} void out_common (const char *file, int line, const char *func, int level, const char *suffix, const char *fmt, va_list ap) at core/out.c:334>
                            va_end()
                        heap_bucket_acquire() <struct bucket *heap_bucket_acquire (struct palloc_heap *heap, uint8_t class_id, uint16_t arena_id) at libpmemobj/heap.c:470>:
                            out() <void out (const char *fmt, ...) at core/out.c:480>:
                                va_start()
                                out_common() <} void out_common (const char *file, int line, const char *func, int level, const char *suffix, const char *fmt, va_list ap) at core/out.c:334>
                                va_end()
                            heap_thread_arena() <struct arena *heap_thread_arena (struct palloc_heap *heap) at libpmemobj/heap.c:414>:
                                os_tls_get() <void *os_tls_get (os_tls_key_t key) at core/os_thread_posix.c:62>:
                                    pthread_getspecific()
                                heap_thread_arena_assign() <struct arena *heap_thread_arena_assign (struct palloc_heap *heap) at libpmemobj/heap.c:381>:
                                    util_mutex_lock()
                                    ASSERTne()
                                    VEC_SIZE()
                                    VEC_FOREACH()
                                    LOG()
                                    heap_arena_thread_attach() <void heap_arena_thread_attach (struct palloc_heap *heap, struct arena *a) at libpmemobj/heap.c:249>:
                                        ASSERTeq()
                                        os_tls_get() <void *os_tls_get (os_tls_key_t key) at core/os_thread_posix.c:62>:
                                            pthread_getspecific()
                                        heap_arena_thread_detach() <void heap_arena_thread_detach (struct arena *a) at libpmemobj/heap.c:232>:
                                            util_fetch_and_sub64()
                                        ASSERTne()
                                        util_fetch_and_add64()
                                        os_tls_set() <int os_tls_set (os_tls_key_t key, const void *value) at core/os_thread_posix.c:53>:
                                            pthread_setspecific()
                                    util_mutex_unlock()
                                heap_global_arena_assign() <struct arena *heap_global_arena_assign (struct palloc_heap *heap) at libpmemobj/heap.c:348>:
                                    util_mutex_lock()
                                    ASSERTne()
                                    VEC_SIZE()
                                    VEC_FOREACH()
                                    LOG()
                                    util_mutex_unlock()
                                ASSERT()
                                ASSERTne()
                            ASSERTne()
                            VEC_ARR()
                            bucket_acquire() <struct bucket *bucket_acquire (struct bucket_locked *b) at libpmemobj/bucket.c:117>:
                                util_mutex_lock()
                        heap_populate_bucket() <int heap_populate_bucket (struct palloc_heap *heap, struct bucket *bucket) at libpmemobj/heap.c:850>:
                            util_atomic_store_explicit32()
                            ZID_TO_ZONE()
                            VALGRIND_ADD_TO_GLOBAL_TX_IGNORE()
                            heap_zone_init() <void heap_zone_init (struct palloc_heap *heap, uint32_t zone_id, uint32_t first_chunk_id) at libpmemobj/heap.c:559>:
                                ZID_TO_ZONE()
                                zone_calc_size_idx() <uint32_t zone_calc_size_idx (uint32_t zone_id, unsigned max_zone, size_t heap_size) at libpmemobj/heap.c:533>:
                                    ASSERT()
                                ASSERT()
                                memblock_huge_init() <struct memory_block memblock_huge_init (struct palloc_heap *heap, uint32_t chunk_id, uint32_t zone_id, uint32_t size_idx) at libpmemobj/memblock.c:1329>:
                                    heap_get_chunk_hdr()
                                    VALGRIND_DO_MAKE_MEM_UNDEFINED()
                                    VALGRIND_ANNOTATE_NEW_MEMORY()
                                    chunk_get_chunk_hdr_value() <uint64_t chunk_get_chunk_hdr_value (uint16_t type, uint16_t flags, uint32_t size_idx) at libpmemobj/memblock.c:604>:
                                        COMPILE_ERROR_ON()
                                        memcpy()
                                    util_atomic_store_explicit64()
                                    pmemops_persist()
                                    huge_write_footer() <void huge_write_footer (struct chunk_header *hdr, uint32_t size_idx) at libpmemobj/memblock.c:1166>:
                                        VALGRIND_DO_MAKE_MEM_UNDEFINED()
                                        VALGRIND_SET_CLEAN()
                                    memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                        memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                            heap_get_chunk_hdr()
                                        memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                            heap_get_chunk_hdr()
                                            FATAL()
                                pmemops_persist()
                            heap_reclaim_zone_garbage() <void heap_reclaim_zone_garbage (struct palloc_heap *heap, struct bucket *bucket, uint32_t zone_id) at libpmemobj/heap.c:775>:
                                ZID_TO_ZONE()
                                ASSERT()
                                memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                    memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                        heap_get_chunk_hdr()
                                    memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                        heap_get_chunk_hdr()
                                        FATAL()
                                heap_reclaim_run() <int heap_reclaim_run (struct palloc_heap *heap, struct memory_block *m, int startup) at libpmemobj/heap.c:733>:
                                    heap_get_chunk_run()
                                    heap_get_chunk_hdr()
                                    alloc_class_by_run() <struct alloc_class *alloc_class_by_run (struct alloc_class_collection *ac, size_t unit_size, uint16_t flags, uint32_t size_idx) at libpmemobj/alloc_class.c:594>:
                                        SIZE_TO_CLASS_MAP_INDEX()
                                        ASSERT()
                                        critnib_get() <void *critnib_get (struct critnib *c, uint64_t key) at libpmemobj/critnib.c:515>:
                                            load() <void load (void *src, void *dst) at libpmemobj/critnib.c:130>:
                                                util_atomic_load_explicit64()
                                            is_leaf() <inline bool is_leaf (struct critnib_node *n) at libpmemobj/critnib.c:150>:
                                            slice_index() <inline unsigned slice_index (uint64_t key, sh_t shift) at libpmemobj/critnib.c:178>:
                                            to_leaf() <inline struct critnib_leaf *to_leaf (struct critnib_node *n) at libpmemobj/critnib.c:159>:
                                        RUN_CLASS_KEY_PACK()
                                    recycler_element_new() <struct recycler_element recycler_element_new (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/recycler.c:122>:
                                        SUPPRESS_UNUSED()
                                        util_mutex_lock()
                                        util_mutex_unlock()
                                    ASSERTeq()
                                    STATS_INC()
                                    heap_get_recycler() <struct recycler *heap_get_recycler (struct palloc_heap *heap, size_t id, size_t nallocs) at libpmemobj/heap.c:106> (R):
                                        util_atomic_load_explicit64()
                                        recycler_new() <struct recycler *recycler_new (struct palloc_heap *heap, size_t nallocs, size_t *peak_arenas) at libpmemobj/recycler.c:74>:
                                            Malloc()
                                            ravl_new_sized() <struct ravl *ravl_new_sized (ravl_compare *compare, size_t data_size) at core/ravl.c:45>:
                                                Malloc()
                                                ERR()
                                            recycler_element_cmp() <int recycler_element_cmp (const void *lhs, const void *rhs) at libpmemobj/recycler.c:23>:
                                            memset()
                                            VEC_INIT()
                                            util_mutex_init()
                                            Free() <Free_func Free at core/alloc.c:91>
                                        util_bool_compare_and_swap64()
                                        recycler_delete() <void recycler_delete (struct recycler *r) at libpmemobj/recycler.c:107>:
                                            VEC_DELETE()
                                            util_mutex_destroy()
                                            ravl_delete() <void ravl_delete (struct ravl *ravl) at core/ravl.c:112>:
                                                ravl_delete_cb() <void ravl_delete_cb (struct ravl *ravl, ravl_cb cb, void *arg) at core/ravl.c:102>:
                                                    ravl_foreach_node() <void ravl_foreach_node (struct ravl_node *n, ravl_cb cb, void *arg, int free_node) at core/ravl.c:74> (R):
                                                        ravl_foreach_node() <void ravl_foreach_node (struct ravl_node *n, ravl_cb cb, void *arg, int free_node) at core/ravl.c:74> (recursive: see 35158)
                                                        Free() <Free_func Free at core/alloc.c:91>
                                                    Free() <Free_func Free at core/alloc.c:91>
                                            Free() <Free_func Free at core/alloc.c:91>
                                        heap_get_recycler() <struct recycler *heap_get_recycler (struct palloc_heap *heap, size_t id, size_t nallocs) at libpmemobj/heap.c:106> (recursive: see 35140)
                                    recycler_put() <int recycler_put (struct recycler *r, struct recycler_element element) at libpmemobj/recycler.c:154>:
                                        util_mutex_lock()
                                        ravl_emplace_copy() <int ravl_emplace_copy (struct ravl *ravl, const void *data) at core/ravl.c:384>:
                                            ravl_emplace() <int ravl_emplace (struct ravl *ravl, ravl_constr constr, const void *arg) at core/ravl.c:393>:
                                                LOG()
                                                ravl_new_node() <struct ravl_node *ravl_new_node (struct ravl *ravl, ravl_constr constr, const void *arg) at core/ravl.c:161>:
                                                    Malloc()
                                                    ERR()
                                                    ravl_node_insert_constructor() <void ravl_node_insert_constructor (void *data, size_t data_size, const void *arg) at core/ravl.c:139>:
                                                        SUPPRESS_UNUSED()
                                                        memcpy()
                                                ravl_data() <void *ravl_data (struct ravl_node *node) at core/ravl.c:571>:
                                                    memcpy()
                                                ravl_balance() <void ravl_balance (struct ravl *ravl, struct ravl_node *n) at core/ravl.c:337>:
                                                    ravl_node_is() <int ravl_node_is (struct ravl_node *n, int i, int j) at core/ravl.c:306>:
                                                        ravl_node_is_i_j() <int ravl_node_is_i_j (struct ravl_node *n, int i, int j) at core/ravl.c:296>:
                                                            ravl_node_rank_difference_parent() <int ravl_node_rank_difference_parent (struct ravl_node *p, struct ravl_node *n) at core/ravl.c:275>:
                                                                ravl_node_rank() <int ravl_node_rank (struct ravl_node *n) at core/ravl.c:261>:
                                                    ravl_node_promote() <void ravl_node_promote (struct ravl_node *n) at core/ravl.c:315>
                                                    ravl_node_sibling() <struct ravl_node *ravl_node_sibling (struct ravl_node *n) at core/ravl.c:209>:
                                                        ravl_node_slot_type() <enum ravl_slot_type ravl_node_slot_type (struct ravl_node *n) at core/ravl.c:196>:
                                                    ravl_node_rank_difference() <int ravl_node_rank_difference (struct ravl_node *n) at core/ravl.c:287>:
                                                        ravl_node_rank_difference_parent() <int ravl_node_rank_difference_parent (struct ravl_node *p, struct ravl_node *n) at core/ravl.c:275>:
                                                            ravl_node_rank() <int ravl_node_rank (struct ravl_node *n) at core/ravl.c:261>:
                                                    ravl_node_rank_difference_parent() <int ravl_node_rank_difference_parent (struct ravl_node *p, struct ravl_node *n) at core/ravl.c:275>:
                                                        ravl_node_rank() <int ravl_node_rank (struct ravl_node *n) at core/ravl.c:261>:
                                                    ravl_slot_opposite() <enum ravl_slot_type ravl_slot_opposite (enum ravl_slot_type t) at core/ravl.c:184>:
                                                        ASSERTne()
                                                    ravl_node_slot_type() <enum ravl_slot_type ravl_node_slot_type (struct ravl_node *n) at core/ravl.c:196>:
                                                    ravl_rotate() <void ravl_rotate (struct ravl *ravl, struct ravl_node *n) at core/ravl.c:237>:
                                                        ASSERTne()
                                                        ravl_node_ref() <struct ravl_node **ravl_node_ref (struct ravl *ravl, struct ravl_node *n) at core/ravl.c:223>:
                                                            ravl_node_slot_type() <enum ravl_slot_type ravl_node_slot_type (struct ravl_node *n) at core/ravl.c:196>:
                                                        ravl_node_slot_type() <enum ravl_slot_type ravl_node_slot_type (struct ravl_node *n) at core/ravl.c:196>:
                                                        ravl_slot_opposite() <enum ravl_slot_type ravl_slot_opposite (enum ravl_slot_type t) at core/ravl.c:184>:
                                                            ASSERTne()
                                                    ravl_node_demote() <void ravl_node_demote (struct ravl_node *n) at core/ravl.c:324>:
                                                        ASSERT()
                                                Free() <Free_func Free at core/alloc.c:91>
                                            ravl_node_copy_constructor() <void ravl_node_copy_constructor (void *data, size_t data_size, const void *arg) at core/ravl.c:152>:
                                                memcpy()
                                        util_mutex_unlock()
                                    ERR()
                                heap_run_into_free_chunk() <void heap_run_into_free_chunk (struct palloc_heap *heap, struct bucket *bucket, struct memory_block *m) at libpmemobj/heap.c:697>:
                                    heap_get_chunk_hdr()
                                    STATS_SUB()
                                    util_mutex_lock()
                                    memblock_huge_init() <struct memory_block memblock_huge_init (struct palloc_heap *heap, uint32_t chunk_id, uint32_t zone_id, uint32_t size_idx) at libpmemobj/memblock.c:1329>:
                                        heap_get_chunk_hdr()
                                        VALGRIND_DO_MAKE_MEM_UNDEFINED()
                                        VALGRIND_ANNOTATE_NEW_MEMORY()
                                        chunk_get_chunk_hdr_value() <uint64_t chunk_get_chunk_hdr_value (uint16_t type, uint16_t flags, uint32_t size_idx) at libpmemobj/memblock.c:604>:
                                            COMPILE_ERROR_ON()
                                            memcpy()
                                        util_atomic_store_explicit64()
                                        pmemops_persist()
                                        huge_write_footer() <void huge_write_footer (struct chunk_header *hdr, uint32_t size_idx) at libpmemobj/memblock.c:1166>:
                                            VALGRIND_DO_MAKE_MEM_UNDEFINED()
                                            VALGRIND_SET_CLEAN()
                                        memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                            memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                                heap_get_chunk_hdr()
                                            memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                                heap_get_chunk_hdr()
                                                FATAL()
                                    heap_free_chunk_reuse() <int heap_free_chunk_reuse (struct palloc_heap *heap, struct bucket *bucket, struct memory_block *m) at libpmemobj/heap.c:674>:
                                        heap_coalesce_huge() <struct memory_block heap_coalesce_huge (struct palloc_heap *heap, struct bucket *b, const struct memory_block *m) at libpmemobj/heap.c:650>:
                                            heap_get_adjacent_free_block() <int heap_get_adjacent_free_block (struct palloc_heap *heap, const struct memory_block *in, struct memory_block *out, int prev) at libpmemobj/heap.c:582>:
                                                ZID_TO_ZONE()
                                                memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                                    memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                                        heap_get_chunk_hdr()
                                                    memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                                        heap_get_chunk_hdr()
                                                        FATAL()
                                            bucket_remove_block() <int bucket_remove_block (struct bucket *b, const struct memory_block *m) at libpmemobj/bucket.c:178>
                                            heap_coalesce() <struct memory_block heap_coalesce (struct palloc_heap *heap, const struct memory_block *blocks[], int n) at libpmemobj/heap.c:621>:
                                                ASSERTne()
                                                memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                                    memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                                        heap_get_chunk_hdr()
                                                    memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                                        heap_get_chunk_hdr()
                                                        FATAL()
                                        bucket_insert_block() <int bucket_insert_block (struct bucket *b, const struct memory_block *m) at libpmemobj/bucket.c:161>:
                                            VALGRIND_DO_MAKE_MEM_NOACCESS()
                                            VALGRIND_ANNOTATE_NEW_MEMORY()
                                    util_mutex_unlock()
                                heap_free_chunk_reuse() <int heap_free_chunk_reuse (struct palloc_heap *heap, struct bucket *bucket, struct memory_block *m) at libpmemobj/heap.c:674>:
                                    heap_coalesce_huge() <struct memory_block heap_coalesce_huge (struct palloc_heap *heap, struct bucket *b, const struct memory_block *m) at libpmemobj/heap.c:650>:
                                        heap_get_adjacent_free_block() <int heap_get_adjacent_free_block (struct palloc_heap *heap, const struct memory_block *in, struct memory_block *out, int prev) at libpmemobj/heap.c:582>:
                                            ZID_TO_ZONE()
                                            memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                                memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                                    heap_get_chunk_hdr()
                                                memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                                    heap_get_chunk_hdr()
                                                    FATAL()
                                        bucket_remove_block() <int bucket_remove_block (struct bucket *b, const struct memory_block *m) at libpmemobj/bucket.c:178>
                                        heap_coalesce() <struct memory_block heap_coalesce (struct palloc_heap *heap, const struct memory_block *blocks[], int n) at libpmemobj/heap.c:621>:
                                            ASSERTne()
                                            memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                                memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                                    heap_get_chunk_hdr()
                                                memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                                    heap_get_chunk_hdr()
                                                    FATAL()
                                    bucket_insert_block() <int bucket_insert_block (struct bucket *b, const struct memory_block *m) at libpmemobj/bucket.c:161>:
                                        VALGRIND_DO_MAKE_MEM_NOACCESS()
                                        VALGRIND_ANNOTATE_NEW_MEMORY()
                        heap_bucket_release() <void heap_bucket_release (struct bucket *b) at libpmemobj/heap.c:498>:
                            bucket_release() <void bucket_release (struct bucket *b) at libpmemobj/bucket.c:127>:
                                util_mutex_unlock()
                        heap_get_bestfit_block() <int heap_get_bestfit_block (struct palloc_heap *heap, struct bucket *b, struct memory_block *m) at libpmemobj/heap.c:1210> (recursive: see 33873)
                        heap_run_create() <int heap_run_create (struct palloc_heap *heap, struct bucket *b, struct memory_block *m) at libpmemobj/heap.c:1065>:
                            bucket_alloc_class() <struct alloc_class *bucket_alloc_class (struct bucket *b) at libpmemobj/bucket.c:152>
                            memblock_run_init() <struct memory_block memblock_run_init (struct palloc_heap *heap, uint32_t chunk_id, uint32_t zone_id, struct run_descriptor *rdsc) at libpmemobj/memblock.c:1361>:
                                ASSERTne()
                                ZID_TO_ZONE()
                                heap_get_chunk_run()
                                SIZEOF_RUN()
                                VALGRIND_DO_MAKE_MEM_UNDEFINED()
                                VALGRIND_ADD_TO_TX()
                                memset()
                                VALGRIND_REMOVE_FROM_TX()
                                pmemops_flush()
                                VALGRIND_ANNOTATE_NEW_MEMORY()
                                pmemops_persist()
                                ASSERT()
                                chunk_get_chunk_hdr_value() <uint64_t chunk_get_chunk_hdr_value (uint16_t type, uint16_t flags, uint32_t size_idx) at libpmemobj/memblock.c:604>:
                                    COMPILE_ERROR_ON()
                                    memcpy()
                                util_atomic_store_explicit64()
                                memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                    memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                        heap_get_chunk_hdr()
                                    memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                        heap_get_chunk_hdr()
                                        FATAL()
                            bucket_attach_run() <int bucket_attach_run (struct bucket *b, const struct memory_block *m) at libpmemobj/bucket.c:206>:
                                util_mutex_lock()
                                bucket_memblock_insert_block() <int bucket_memblock_insert_block (const struct memory_block *m, void *b) at libpmemobj/bucket.c:197>:
                                    bucket_insert_block() <int bucket_insert_block (struct bucket *b, const struct memory_block *m) at libpmemobj/bucket.c:161>:
                                        VALGRIND_DO_MAKE_MEM_NOACCESS()
                                        VALGRIND_ANNOTATE_NEW_MEMORY()
                                util_mutex_unlock()
                                util_fetch_and_add64()
                            STATS_INC()
                    ASSERT()
                    heap_split_block() <void heap_split_block (struct palloc_heap *heap, struct bucket *b, struct memory_block *m, uint32_t units) at libpmemobj/heap.c:1172>:
                        bucket_alloc_class() <struct alloc_class *bucket_alloc_class (struct bucket *b) at libpmemobj/bucket.c:152>
                        ASSERT()
                        memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                            memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                heap_get_chunk_hdr()
                            memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                heap_get_chunk_hdr()
                                FATAL()
                        bucket_insert_block() <int bucket_insert_block (struct bucket *b, const struct memory_block *m) at libpmemobj/bucket.c:161>:
                            VALGRIND_DO_MAKE_MEM_NOACCESS()
                            VALGRIND_ANNOTATE_NEW_MEMORY()
                        LOG()
                        memblock_huge_init() <struct memory_block memblock_huge_init (struct palloc_heap *heap, uint32_t chunk_id, uint32_t zone_id, uint32_t size_idx) at libpmemobj/memblock.c:1329>:
                            heap_get_chunk_hdr()
                            VALGRIND_DO_MAKE_MEM_UNDEFINED()
                            VALGRIND_ANNOTATE_NEW_MEMORY()
                            chunk_get_chunk_hdr_value() <uint64_t chunk_get_chunk_hdr_value (uint16_t type, uint16_t flags, uint32_t size_idx) at libpmemobj/memblock.c:604>:
                                COMPILE_ERROR_ON()
                                memcpy()
                            util_atomic_store_explicit64()
                            pmemops_persist()
                            huge_write_footer() <void huge_write_footer (struct chunk_header *hdr, uint32_t size_idx) at libpmemobj/memblock.c:1166>:
                                VALGRIND_DO_MAKE_MEM_UNDEFINED()
                                VALGRIND_SET_CLEAN()
                            memblock_rebuild_state() <void memblock_rebuild_state (struct palloc_heap *heap, struct memory_block *m) at libpmemobj/memblock.c:1545>:
                                memblock_header_type() <enum header_type memblock_header_type (const struct memory_block *m) at libpmemobj/memblock.c:36>:
                                    heap_get_chunk_hdr()
                                memblock_detect_type() <enum memory_block_type memblock_detect_type (struct palloc_heap *heap, const struct memory_block *m) at libpmemobj/memblock.c:1450>:
                                    heap_get_chunk_hdr()
                                    FATAL()
                alloc_prep_block() <int alloc_prep_block (struct palloc_heap *heap, const struct memory_block *m, palloc_constr constructor, void *arg, uint64_t extra_field, uint16_t object_flags, struct pobj_action_internal *out) at libpmemobj/palloc.c:112>:
                    VALGRIND_DO_MEMPOOL_ALLOC()
                    VALGRIND_DO_MAKE_MEM_UNDEFINED()
                    VALGRIND_ANNOTATE_NEW_MEMORY()
                    unlikely()
                    pmemops_memset()
                    VALGRIND_DO_MEMPOOL_FREE()
                    HEAP_PTR_TO_OFF()
                bucket_insert_block() <int bucket_insert_block (struct bucket *b, const struct memory_block *m) at libpmemobj/bucket.c:161>:
                    VALGRIND_DO_MAKE_MEM_NOACCESS()
                    VALGRIND_ANNOTATE_NEW_MEMORY()
                bucket_active_block() <struct memory_block_reserved *bucket_active_block (struct bucket *b) at libpmemobj/bucket.c:265>:
                util_fetch_and_add64()
                heap_bucket_release() <void heap_bucket_release (struct bucket *b) at libpmemobj/heap.c:498>:
                    bucket_release() <void bucket_release (struct bucket *b) at libpmemobj/bucket.c:127>:
                        util_mutex_unlock()
        CLASS_ID_FROM_FLAG()
        ARENA_ID_FROM_FLAG()
        tx_lane_ranges_insert_def() <int tx_lane_ranges_insert_def (PMEMobjpool *pop, struct tx *tx, const struct tx_range_def *rdef) at libpmemobj/tx.c:562>:
            SUPPRESS_UNUSED()
            LOG()
            ravl_emplace_copy() <int ravl_emplace_copy (struct ravl *ravl, const void *data) at core/ravl.c:384>:
                ravl_emplace() <int ravl_emplace (struct ravl *ravl, ravl_constr constr, const void *arg) at core/ravl.c:393>:
                    LOG()
                    ravl_new_node() <struct ravl_node *ravl_new_node (struct ravl *ravl, ravl_constr constr, const void *arg) at core/ravl.c:161>:
                        Malloc()
                        ERR()
                        ravl_node_insert_constructor() <void ravl_node_insert_constructor (void *data, size_t data_size, const void *arg) at core/ravl.c:139>:
                            SUPPRESS_UNUSED()
                            memcpy()
                    ravl_data() <void *ravl_data (struct ravl_node *node) at core/ravl.c:571>:
                        memcpy()
                    ravl_balance() <void ravl_balance (struct ravl *ravl, struct ravl_node *n) at core/ravl.c:337>:
                        ravl_node_is() <int ravl_node_is (struct ravl_node *n, int i, int j) at core/ravl.c:306>:
                            ravl_node_is_i_j() <int ravl_node_is_i_j (struct ravl_node *n, int i, int j) at core/ravl.c:296>:
                                ravl_node_rank_difference_parent() <int ravl_node_rank_difference_parent (struct ravl_node *p, struct ravl_node *n) at core/ravl.c:275>:
                                    ravl_node_rank() <int ravl_node_rank (struct ravl_node *n) at core/ravl.c:261>:
                        ravl_node_promote() <void ravl_node_promote (struct ravl_node *n) at core/ravl.c:315>
                        ravl_node_sibling() <struct ravl_node *ravl_node_sibling (struct ravl_node *n) at core/ravl.c:209>:
                            ravl_node_slot_type() <enum ravl_slot_type ravl_node_slot_type (struct ravl_node *n) at core/ravl.c:196>:
                        ravl_node_rank_difference() <int ravl_node_rank_difference (struct ravl_node *n) at core/ravl.c:287>:
                            ravl_node_rank_difference_parent() <int ravl_node_rank_difference_parent (struct ravl_node *p, struct ravl_node *n) at core/ravl.c:275>:
                                ravl_node_rank() <int ravl_node_rank (struct ravl_node *n) at core/ravl.c:261>:
                        ravl_node_rank_difference_parent() <int ravl_node_rank_difference_parent (struct ravl_node *p, struct ravl_node *n) at core/ravl.c:275>:
                            ravl_node_rank() <int ravl_node_rank (struct ravl_node *n) at core/ravl.c:261>:
                        ravl_slot_opposite() <enum ravl_slot_type ravl_slot_opposite (enum ravl_slot_type t) at core/ravl.c:184>:
                            ASSERTne()
                        ravl_node_slot_type() <enum ravl_slot_type ravl_node_slot_type (struct ravl_node *n) at core/ravl.c:196>:
                        ravl_rotate() <void ravl_rotate (struct ravl *ravl, struct ravl_node *n) at core/ravl.c:237>:
                            ASSERTne()
                            ravl_node_ref() <struct ravl_node **ravl_node_ref (struct ravl *ravl, struct ravl_node *n) at core/ravl.c:223>:
                                ravl_node_slot_type() <enum ravl_slot_type ravl_node_slot_type (struct ravl_node *n) at core/ravl.c:196>:
                            ravl_node_slot_type() <enum ravl_slot_type ravl_node_slot_type (struct ravl_node *n) at core/ravl.c:196>:
                            ravl_slot_opposite() <enum ravl_slot_type ravl_slot_opposite (enum ravl_slot_type t) at core/ravl.c:184>:
                                ASSERTne()
                        ravl_node_demote() <void ravl_node_demote (struct ravl_node *n) at core/ravl.c:324>:
                            ASSERT()
                    Free() <Free_func Free at core/alloc.c:91>
                ravl_node_copy_constructor() <void ravl_node_copy_constructor (void *data, size_t data_size, const void *arg) at core/ravl.c:152>:
                    memcpy()
            FATAL()
        tx_action_remove() <void tx_action_remove (struct tx *tx) at libpmemobj/tx.c:206>:
            VEC_POP_BACK()
    constructor_tx_alloc() <int constructor_tx_alloc (void *ctx, void *ptr, size_t usable_size, void *arg) at libpmemobj/tx.c:215>:
        SUPPRESS_UNUSED()
        LOG()
        ASSERTne()
        VALGRIND_ADD_TO_TX()
        memset()
        memcpy()
    ALLOC_ARGS()
